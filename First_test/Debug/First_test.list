
First_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004858  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080049f0  080049f0  000149f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004af0  08004af0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004af0  08004af0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004af0  08004af0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004af0  08004af0  00014af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004af4  08004af4  00014af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08004b04  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08004b04  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b137  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019f8  00000000  00000000  0002b173  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b8  00000000  00000000  0002cb70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000910  00000000  00000000  0002d528  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020f4d  00000000  00000000  0002de38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ac08  00000000  00000000  0004ed85  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb6ea  00000000  00000000  0005998d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00125077  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029f8  00000000  00000000  001250f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080049d8 	.word	0x080049d8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080049d8 	.word	0x080049d8

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2iz>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a9c:	d215      	bcs.n	8000aca <__aeabi_d2iz+0x36>
 8000a9e:	d511      	bpl.n	8000ac4 <__aeabi_d2iz+0x30>
 8000aa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa8:	d912      	bls.n	8000ad0 <__aeabi_d2iz+0x3c>
 8000aaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aba:	fa23 f002 	lsr.w	r0, r3, r2
 8000abe:	bf18      	it	ne
 8000ac0:	4240      	negne	r0, r0
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d105      	bne.n	8000adc <__aeabi_d2iz+0x48>
 8000ad0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	bf08      	it	eq
 8000ad6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <serialOut>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void serialOut(UART_HandleTypeDef *huart, char _out[], uint32_t len){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(huart, (uint8_t *) _out, len, 100);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	2364      	movs	r3, #100	; 0x64
 8000af6:	68b9      	ldr	r1, [r7, #8]
 8000af8:	68f8      	ldr	r0, [r7, #12]
 8000afa:	f003 fb19 	bl	8004130 <HAL_UART_Transmit>
}
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <printStr>:

void printStr(char str[])
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	serialOut(&huart2, str, strlen(str));
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff fb61 	bl	80001d8 <strlen>
 8000b16:	4603      	mov	r3, r0
 8000b18:	461a      	mov	r2, r3
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	4803      	ldr	r0, [pc, #12]	; (8000b2c <printStr+0x24>)
 8000b1e:	f7ff ffe1 	bl	8000ae4 <serialOut>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2000008c 	.word	0x2000008c

08000b30 <printInt>:
	strcpy(str2,str1);
	serialOut(&huart2, str2, strlen(str2));
}

void printInt(int i)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	char str[5];
	itoa(i, str, 10);
 8000b38:	f107 0308 	add.w	r3, r7, #8
 8000b3c:	220a      	movs	r2, #10
 8000b3e:	4619      	mov	r1, r3
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f003 ff01 	bl	8004948 <itoa>
	serialOut(&huart2, str, strlen(str));
 8000b46:	f107 0308 	add.w	r3, r7, #8
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fb44 	bl	80001d8 <strlen>
 8000b50:	4602      	mov	r2, r0
 8000b52:	f107 0308 	add.w	r3, r7, #8
 8000b56:	4619      	mov	r1, r3
 8000b58:	4803      	ldr	r0, [pc, #12]	; (8000b68 <printInt+0x38>)
 8000b5a:	f7ff ffc3 	bl	8000ae4 <serialOut>
}
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2000008c 	.word	0x2000008c

08000b6c <printWaveform>:
	strcat(str, "\r\n");
	serialOut(&huart2, str, strlen(str));
}

void printWaveform(short data[], int size)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
	printStr("<WF>");
 8000b76:	4810      	ldr	r0, [pc, #64]	; (8000bb8 <printWaveform+0x4c>)
 8000b78:	f7ff ffc6 	bl	8000b08 <printStr>
	for(int i = 0; i<size; i++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	e00e      	b.n	8000ba0 <printWaveform+0x34>
	{
		printInt(data[i]);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ffce 	bl	8000b30 <printInt>
		printStr("|");
 8000b94:	4809      	ldr	r0, [pc, #36]	; (8000bbc <printWaveform+0x50>)
 8000b96:	f7ff ffb7 	bl	8000b08 <printStr>
	for(int i = 0; i<size; i++)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fa      	ldr	r2, [r7, #12]
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	dbec      	blt.n	8000b82 <printWaveform+0x16>
	}
	printStr("</WF>");
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <printWaveform+0x54>)
 8000baa:	f7ff ffad 	bl	8000b08 <printStr>
}
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	080049f4 	.word	0x080049f4
 8000bbc:	080049fc 	.word	0x080049fc
 8000bc0:	08004a00 	.word	0x08004a00

08000bc4 <readADC>:

	strcpy(outputString, rxedString);
}

short readADC()
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000bca:	4806      	ldr	r0, [pc, #24]	; (8000be4 <readADC+0x20>)
 8000bcc:	f000 fe42 	bl	8001854 <HAL_ADC_Start>
	//HAL_ADC_PollForConversion(&hadc1, 10);
	uint32_t value = HAL_ADC_GetValue(&hadc1);
 8000bd0:	4804      	ldr	r0, [pc, #16]	; (8000be4 <readADC+0x20>)
 8000bd2:	f000 ff55 	bl	8001a80 <HAL_ADC_GetValue>
 8000bd6:	6078      	str	r0, [r7, #4]
	return value;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	b21b      	sxth	r3, r3
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2000003c 	.word	0x2000003c

08000be8 <getWaveform>:

int getWaveform(short* data, int samples, int timeframe)
{
 8000be8:	b5b0      	push	{r4, r5, r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
	//219,780 samples per second
	//printInt(1);
	//printInt((samples/219780.0)*1000.0);

	if((samples/219780.0)*1000.0 > timeframe) //If data is sampled often enough, delay isn't needed
 8000bf4:	68b8      	ldr	r0, [r7, #8]
 8000bf6:	f7ff fc49 	bl	800048c <__aeabi_i2d>
 8000bfa:	a325      	add	r3, pc, #148	; (adr r3, 8000c90 <getWaveform+0xa8>)
 8000bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c00:	f7ff fdd8 	bl	80007b4 <__aeabi_ddiv>
 8000c04:	4603      	mov	r3, r0
 8000c06:	460c      	mov	r4, r1
 8000c08:	4618      	mov	r0, r3
 8000c0a:	4621      	mov	r1, r4
 8000c0c:	f04f 0200 	mov.w	r2, #0
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <getWaveform+0xa0>)
 8000c12:	f7ff fca5 	bl	8000560 <__aeabi_dmul>
 8000c16:	4603      	mov	r3, r0
 8000c18:	460c      	mov	r4, r1
 8000c1a:	4625      	mov	r5, r4
 8000c1c:	461c      	mov	r4, r3
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff fc34 	bl	800048c <__aeabi_i2d>
 8000c24:	4602      	mov	r2, r0
 8000c26:	460b      	mov	r3, r1
 8000c28:	4620      	mov	r0, r4
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	f7ff ff28 	bl	8000a80 <__aeabi_dcmpgt>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d020      	beq.n	8000c78 <getWaveform+0x90>
	{
		int start = HAL_GetTick();
 8000c36:	f000 fc07 	bl	8001448 <HAL_GetTick>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	613b      	str	r3, [r7, #16]
		for(int i = 0; i < samples; i++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	e00a      	b.n	8000c5a <getWaveform+0x72>
		{
			data[i] = readADC();
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	18d4      	adds	r4, r2, r3
 8000c4c:	f7ff ffba 	bl	8000bc4 <readADC>
 8000c50:	4603      	mov	r3, r0
 8000c52:	8023      	strh	r3, [r4, #0]
		for(int i = 0; i < samples; i++)
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	3301      	adds	r3, #1
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	dbf0      	blt.n	8000c44 <getWaveform+0x5c>
		}
		printStr("Acquisition time (ms): ");
 8000c62:	480a      	ldr	r0, [pc, #40]	; (8000c8c <getWaveform+0xa4>)
 8000c64:	f7ff ff50 	bl	8000b08 <printStr>
		printInt(HAL_GetTick()-start);
 8000c68:	f000 fbee 	bl	8001448 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff5c 	bl	8000b30 <printInt>
	}
	//printInt(HAL_GetTick()-start);
}
 8000c78:	bf00      	nop
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bdb0      	pop	{r4, r5, r7, pc}
 8000c82:	bf00      	nop
 8000c84:	f3af 8000 	nop.w
 8000c88:	408f4000 	.word	0x408f4000
 8000c8c:	08004a08 	.word	0x08004a08
 8000c90:	00000000 	.word	0x00000000
 8000c94:	410ad420 	.word	0x410ad420

08000c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c98:	b5b0      	push	{r4, r5, r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	466b      	mov	r3, sp
 8000ca0:	461d      	mov	r5, r3
  /* USER CODE BEGIN 1 */
  int resolution_x = 1920;
 8000ca2:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000ca6:	613b      	str	r3, [r7, #16]
  int resolution_y = 1080;
 8000ca8:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000cac:	617b      	str	r3, [r7, #20]

  int RAM_size = 80000;
 8000cae:	4b3c      	ldr	r3, [pc, #240]	; (8000da0 <main+0x108>)
 8000cb0:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb2:	f000 fb6f 	bl	8001394 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb6:	f000 f87d 	bl	8000db4 <SystemClock_Config>
  // RCC->APB1ENR |= RCC_APB1ENR_DAC1EN;

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cba:	f000 f9a7 	bl	800100c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cbe:	f000 f975 	bl	8000fac <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000cc2:	f000 f8d9 	bl	8000e78 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000cc6:	f000 f947 	bl	8000f58 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  printStr("Starting up...");
 8000cca:	4836      	ldr	r0, [pc, #216]	; (8000da4 <main+0x10c>)
 8000ccc:	f7ff ff1c 	bl	8000b08 <printStr>

  int max_samples = (RAM_size / 2) * 0.05 ; //80kB = 40k 16 bit shorts
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	0fda      	lsrs	r2, r3, #31
 8000cd4:	4413      	add	r3, r2
 8000cd6:	105b      	asrs	r3, r3, #1
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fbd7 	bl	800048c <__aeabi_i2d>
 8000cde:	a32e      	add	r3, pc, #184	; (adr r3, 8000d98 <main+0x100>)
 8000ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce4:	f7ff fc3c 	bl	8000560 <__aeabi_dmul>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	460c      	mov	r4, r1
 8000cec:	4618      	mov	r0, r3
 8000cee:	4621      	mov	r1, r4
 8000cf0:	f7ff fed0 	bl	8000a94 <__aeabi_d2iz>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	60bb      	str	r3, [r7, #8]
  max_samples = (max_samples / resolution_x) * resolution_x; //Helps with compression
 8000cf8:	68ba      	ldr	r2, [r7, #8]
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	fb92 f2f3 	sdiv	r2, r2, r3
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	fb02 f303 	mul.w	r3, r2, r3
 8000d06:	60bb      	str	r3, [r7, #8]
  printStr("Max samples set to: "); printInt(max_samples); printStr("\n\r");
 8000d08:	4827      	ldr	r0, [pc, #156]	; (8000da8 <main+0x110>)
 8000d0a:	f7ff fefd 	bl	8000b08 <printStr>
 8000d0e:	68b8      	ldr	r0, [r7, #8]
 8000d10:	f7ff ff0e 	bl	8000b30 <printInt>
 8000d14:	4825      	ldr	r0, [pc, #148]	; (8000dac <main+0x114>)
 8000d16:	f7ff fef7 	bl	8000b08 <printStr>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //printInt(readADC());
  //int sleep_cal = sleepCalibration();
  //printInt(sleep_cal);
  printStr("Ready\n\r");
 8000d1a:	4825      	ldr	r0, [pc, #148]	; (8000db0 <main+0x118>)
 8000d1c:	f7ff fef4 	bl	8000b08 <printStr>
  short data[max_samples];
 8000d20:	68b8      	ldr	r0, [r7, #8]
 8000d22:	1e43      	subs	r3, r0, #1
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4603      	mov	r3, r0
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f04f 0200 	mov.w	r2, #0
 8000d2e:	f04f 0300 	mov.w	r3, #0
 8000d32:	f04f 0400 	mov.w	r4, #0
 8000d36:	0114      	lsls	r4, r2, #4
 8000d38:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8000d3c:	010b      	lsls	r3, r1, #4
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4619      	mov	r1, r3
 8000d42:	f04f 0200 	mov.w	r2, #0
 8000d46:	f04f 0300 	mov.w	r3, #0
 8000d4a:	f04f 0400 	mov.w	r4, #0
 8000d4e:	0114      	lsls	r4, r2, #4
 8000d50:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8000d54:	010b      	lsls	r3, r1, #4
 8000d56:	4603      	mov	r3, r0
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	3307      	adds	r3, #7
 8000d5e:	08db      	lsrs	r3, r3, #3
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	ebad 0d03 	sub.w	sp, sp, r3
 8000d66:	466b      	mov	r3, sp
 8000d68:	3301      	adds	r3, #1
 8000d6a:	085b      	lsrs	r3, r3, #1
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	603b      	str	r3, [r7, #0]
  getWaveform(data, max_samples, 8);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	2208      	movs	r2, #8
 8000d74:	68b9      	ldr	r1, [r7, #8]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff36 	bl	8000be8 <getWaveform>
  printWaveform(data, max_samples);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	68b9      	ldr	r1, [r7, #8]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fef3 	bl	8000b6c <printWaveform>
 8000d86:	46ad      	mov	sp, r5
 8000d88:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bdb0      	pop	{r4, r5, r7, pc}
 8000d92:	bf00      	nop
 8000d94:	f3af 8000 	nop.w
 8000d98:	9999999a 	.word	0x9999999a
 8000d9c:	3fa99999 	.word	0x3fa99999
 8000da0:	00013880 	.word	0x00013880
 8000da4:	08004a20 	.word	0x08004a20
 8000da8:	08004a30 	.word	0x08004a30
 8000dac:	08004a48 	.word	0x08004a48
 8000db0:	08004a4c 	.word	0x08004a4c

08000db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b0a6      	sub	sp, #152	; 0x98
 8000db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000dbe:	2228      	movs	r2, #40	; 0x28
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f003 fdc2 	bl	800494c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2258      	movs	r2, #88	; 0x58
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f003 fdb4 	bl	800494c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de4:	2302      	movs	r3, #2
 8000de6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de8:	2301      	movs	r3, #1
 8000dea:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dec:	2310      	movs	r3, #16
 8000dee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df2:	2302      	movs	r3, #2
 8000df4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000df8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dfc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e00:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e12:	4618      	mov	r0, r3
 8000e14:	f001 fdd4 	bl	80029c0 <HAL_RCC_OscConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e1e:	f000 f95d 	bl	80010dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e22:	230f      	movs	r3, #15
 8000e24:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e26:	2302      	movs	r3, #2
 8000e28:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e32:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e38:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f002 fcd4 	bl	80037ec <HAL_RCC_ClockConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e4a:	f000 f947 	bl	80010dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8000e4e:	2382      	movs	r3, #130	; 0x82
 8000e50:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f002 fefa 	bl	8003c58 <HAL_RCCEx_PeriphCLKConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000e6a:	f000 f937 	bl	80010dc <Error_Handler>
  }
}
 8000e6e:	bf00      	nop
 8000e70:	3798      	adds	r7, #152	; 0x98
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
 8000e98:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e9a:	4b2e      	ldr	r3, [pc, #184]	; (8000f54 <MX_ADC1_Init+0xdc>)
 8000e9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ea0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ea2:	4b2c      	ldr	r3, [pc, #176]	; (8000f54 <MX_ADC1_Init+0xdc>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ea8:	4b2a      	ldr	r3, [pc, #168]	; (8000f54 <MX_ADC1_Init+0xdc>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eae:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <MX_ADC1_Init+0xdc>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eb4:	4b27      	ldr	r3, [pc, #156]	; (8000f54 <MX_ADC1_Init+0xdc>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eba:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <MX_ADC1_Init+0xdc>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ec2:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <MX_ADC1_Init+0xdc>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec8:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <MX_ADC1_Init+0xdc>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ece:	4b21      	ldr	r3, [pc, #132]	; (8000f54 <MX_ADC1_Init+0xdc>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <MX_ADC1_Init+0xdc>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eda:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <MX_ADC1_Init+0xdc>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <MX_ADC1_Init+0xdc>)
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <MX_ADC1_Init+0xdc>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000eee:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <MX_ADC1_Init+0xdc>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ef4:	4817      	ldr	r0, [pc, #92]	; (8000f54 <MX_ADC1_Init+0xdc>)
 8000ef6:	f000 fab3 	bl	8001460 <HAL_ADC_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000f00:	f000 f8ec 	bl	80010dc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4811      	ldr	r0, [pc, #68]	; (8000f54 <MX_ADC1_Init+0xdc>)
 8000f10:	f001 f8b0 	bl	8002074 <HAL_ADCEx_MultiModeConfigChannel>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000f1a:	f000 f8df 	bl	80010dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f22:	2301      	movs	r3, #1
 8000f24:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4806      	ldr	r0, [pc, #24]	; (8000f54 <MX_ADC1_Init+0xdc>)
 8000f3c:	f000 fdae 	bl	8001a9c <HAL_ADC_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000f46:	f000 f8c9 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	3728      	adds	r7, #40	; 0x28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000003c 	.word	0x2000003c

08000f58 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000f68:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_DAC1_Init+0x4c>)
 8000f6a:	4a0f      	ldr	r2, [pc, #60]	; (8000fa8 <MX_DAC1_Init+0x50>)
 8000f6c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f6e:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <MX_DAC1_Init+0x4c>)
 8000f70:	f001 fb15 	bl	800259e <HAL_DAC_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000f7a:	f000 f8af 	bl	80010dc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_DAC1_Init+0x4c>)
 8000f8e:	f001 fb28 	bl	80025e2 <HAL_DAC_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000f98:	f000 f8a0 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000028 	.word	0x20000028
 8000fa8:	40007400 	.word	0x40007400

08000fac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fb2:	4a15      	ldr	r2, [pc, #84]	; (8001008 <MX_USART2_UART_Init+0x5c>)
 8000fb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fee:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_USART2_UART_Init+0x58>)
 8000ff0:	f003 f850 	bl	8004094 <HAL_UART_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ffa:	f000 f86f 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000008c 	.word	0x2000008c
 8001008:	40004400 	.word	0x40004400

0800100c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <MX_GPIO_Init+0xc4>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	4a2a      	ldr	r2, [pc, #168]	; (80010d0 <MX_GPIO_Init+0xc4>)
 8001028:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800102c:	6153      	str	r3, [r2, #20]
 800102e:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <MX_GPIO_Init+0xc4>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800103a:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <MX_GPIO_Init+0xc4>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	4a24      	ldr	r2, [pc, #144]	; (80010d0 <MX_GPIO_Init+0xc4>)
 8001040:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001044:	6153      	str	r3, [r2, #20]
 8001046:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <MX_GPIO_Init+0xc4>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <MX_GPIO_Init+0xc4>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <MX_GPIO_Init+0xc4>)
 8001058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105c:	6153      	str	r3, [r2, #20]
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <MX_GPIO_Init+0xc4>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <MX_GPIO_Init+0xc4>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	4a18      	ldr	r2, [pc, #96]	; (80010d0 <MX_GPIO_Init+0xc4>)
 8001070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001074:	6153      	str	r3, [r2, #20]
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <MX_GPIO_Init+0xc4>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	2120      	movs	r1, #32
 8001086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108a:	f001 fc81 	bl	8002990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800108e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_GPIO_Init+0xc8>)
 8001096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4619      	mov	r1, r3
 80010a2:	480d      	ldr	r0, [pc, #52]	; (80010d8 <MX_GPIO_Init+0xcc>)
 80010a4:	f001 faea 	bl	800267c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010a8:	2320      	movs	r3, #32
 80010aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c2:	f001 fadb 	bl	800267c <HAL_GPIO_Init>

}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	; 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40021000 	.word	0x40021000
 80010d4:	10210000 	.word	0x10210000
 80010d8:	48000800 	.word	0x48000800

080010dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <Error_Handler+0x6>

080010e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <HAL_MspInit+0x44>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <HAL_MspInit+0x44>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6193      	str	r3, [r2, #24]
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <HAL_MspInit+0x44>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_MspInit+0x44>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	4a08      	ldr	r2, [pc, #32]	; (8001128 <HAL_MspInit+0x44>)
 8001108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110c:	61d3      	str	r3, [r2, #28]
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_MspInit+0x44>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800111a:	2007      	movs	r0, #7
 800111c:	f001 fa0c 	bl	8002538 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40021000 	.word	0x40021000

0800112c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800114c:	d124      	bne.n	8001198 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_ADC_MspInit+0x74>)
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	4a13      	ldr	r2, [pc, #76]	; (80011a0 <HAL_ADC_MspInit+0x74>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001158:	6153      	str	r3, [r2, #20]
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_ADC_MspInit+0x74>)
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_ADC_MspInit+0x74>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <HAL_ADC_MspInit+0x74>)
 800116c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001170:	6153      	str	r3, [r2, #20]
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <HAL_ADC_MspInit+0x74>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800117e:	2301      	movs	r3, #1
 8001180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001182:	2303      	movs	r3, #3
 8001184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001194:	f001 fa72 	bl	800267c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	; 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000

080011a4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a15      	ldr	r2, [pc, #84]	; (8001218 <HAL_DAC_MspInit+0x74>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d124      	bne.n	8001210 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_DAC_MspInit+0x78>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	4a14      	ldr	r2, [pc, #80]	; (800121c <HAL_DAC_MspInit+0x78>)
 80011cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011d0:	61d3      	str	r3, [r2, #28]
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_DAC_MspInit+0x78>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_DAC_MspInit+0x78>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	4a0e      	ldr	r2, [pc, #56]	; (800121c <HAL_DAC_MspInit+0x78>)
 80011e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e8:	6153      	str	r3, [r2, #20]
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <HAL_DAC_MspInit+0x78>)
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011f6:	2310      	movs	r3, #16
 80011f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011fa:	2303      	movs	r3, #3
 80011fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120c:	f001 fa36 	bl	800267c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001210:	bf00      	nop
 8001212:	3728      	adds	r7, #40	; 0x28
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40007400 	.word	0x40007400
 800121c:	40021000 	.word	0x40021000

08001220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a17      	ldr	r2, [pc, #92]	; (800129c <HAL_UART_MspInit+0x7c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d128      	bne.n	8001294 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <HAL_UART_MspInit+0x80>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	4a16      	ldr	r2, [pc, #88]	; (80012a0 <HAL_UART_MspInit+0x80>)
 8001248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124c:	61d3      	str	r3, [r2, #28]
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <HAL_UART_MspInit+0x80>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <HAL_UART_MspInit+0x80>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <HAL_UART_MspInit+0x80>)
 8001260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001264:	6153      	str	r3, [r2, #20]
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_UART_MspInit+0x80>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001272:	230c      	movs	r3, #12
 8001274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	2300      	movs	r3, #0
 8001280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001282:	2307      	movs	r3, #7
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001290:	f001 f9f4 	bl	800267c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001294:	bf00      	nop
 8001296:	3728      	adds	r7, #40	; 0x28
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40004400 	.word	0x40004400
 80012a0:	40021000 	.word	0x40021000

080012a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <NMI_Handler+0x4>
	...

080012ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printStr("Error: Hard fault");
 80012b0:	4801      	ldr	r0, [pc, #4]	; (80012b8 <HardFault_Handler+0xc>)
 80012b2:	f7ff fc29 	bl	8000b08 <printStr>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <HardFault_Handler+0xa>
 80012b8:	08004a54 	.word	0x08004a54

080012bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <MemManage_Handler+0x4>
	...

080012c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  printStr("Error: Bus fault");
 80012c8:	4801      	ldr	r0, [pc, #4]	; (80012d0 <BusFault_Handler+0xc>)
 80012ca:	f7ff fc1d 	bl	8000b08 <printStr>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <BusFault_Handler+0xa>
 80012d0:	08004a68 	.word	0x08004a68

080012d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  printStr("Error: Usage fault");
 80012d8:	4801      	ldr	r0, [pc, #4]	; (80012e0 <UsageFault_Handler+0xc>)
 80012da:	f7ff fc15 	bl	8000b08 <printStr>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <UsageFault_Handler+0xa>
 80012e0:	08004a7c 	.word	0x08004a7c

080012e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001312:	f000 f885 	bl	8001420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <SystemInit+0x20>)
 8001322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001326:	4a05      	ldr	r2, [pc, #20]	; (800133c <SystemInit+0x20>)
 8001328:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800132c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001378 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001344:	480d      	ldr	r0, [pc, #52]	; (800137c <LoopForever+0x6>)
  ldr r1, =_edata
 8001346:	490e      	ldr	r1, [pc, #56]	; (8001380 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001348:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <LoopForever+0xe>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800134c:	e002      	b.n	8001354 <LoopCopyDataInit>

0800134e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001352:	3304      	adds	r3, #4

08001354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001358:	d3f9      	bcc.n	800134e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135a:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <LoopForever+0x12>)
  ldr r4, =_ebss
 800135c:	4c0b      	ldr	r4, [pc, #44]	; (800138c <LoopForever+0x16>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001360:	e001      	b.n	8001366 <LoopFillZerobss>

08001362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001364:	3204      	adds	r2, #4

08001366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001368:	d3fb      	bcc.n	8001362 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800136a:	f7ff ffd7 	bl	800131c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800136e:	f003 faaf 	bl	80048d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001372:	f7ff fc91 	bl	8000c98 <main>

08001376 <LoopForever>:

LoopForever:
    b LoopForever
 8001376:	e7fe      	b.n	8001376 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001378:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800137c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001380:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001384:	08004af8 	.word	0x08004af8
  ldr r2, =_sbss
 8001388:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800138c:	20000114 	.word	0x20000114

08001390 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC1_2_IRQHandler>
	...

08001394 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <HAL_Init+0x28>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <HAL_Init+0x28>)
 800139e:	f043 0310 	orr.w	r3, r3, #16
 80013a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a4:	2003      	movs	r0, #3
 80013a6:	f001 f8c7 	bl	8002538 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f000 f808 	bl	80013c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b0:	f7ff fe98 	bl	80010e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40022000 	.word	0x40022000

080013c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_InitTick+0x54>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_InitTick+0x58>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f001 f8d1 	bl	8002586 <HAL_SYSTICK_Config>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00e      	b.n	800140c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d80a      	bhi.n	800140a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f001 f8a7 	bl	800254e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001400:	4a06      	ldr	r2, [pc, #24]	; (800141c <HAL_InitTick+0x5c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e000      	b.n	800140c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000000 	.word	0x20000000
 8001418:	20000008 	.word	0x20000008
 800141c:	20000004 	.word	0x20000004

08001420 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_IncTick+0x20>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_IncTick+0x24>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4413      	add	r3, r2
 8001430:	4a04      	ldr	r2, [pc, #16]	; (8001444 <HAL_IncTick+0x24>)
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000008 	.word	0x20000008
 8001444:	20000110 	.word	0x20000110

08001448 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return uwTick;  
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <HAL_GetTick+0x14>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000110 	.word	0x20000110

08001460 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b09a      	sub	sp, #104	; 0x68
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800146e:	2300      	movs	r3, #0
 8001470:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e1e3      	b.n	8001848 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 0310 	and.w	r3, r3, #16
 800148e:	2b00      	cmp	r3, #0
 8001490:	d176      	bne.n	8001580 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	2b00      	cmp	r3, #0
 8001498:	d152      	bne.n	8001540 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff fe39 	bl	800112c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d13b      	bne.n	8001540 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 ff23 	bl	8002314 <ADC_Disable>
 80014ce:	4603      	mov	r3, r0
 80014d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f003 0310 	and.w	r3, r3, #16
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d12f      	bne.n	8001540 <HAL_ADC_Init+0xe0>
 80014e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d12b      	bne.n	8001540 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014f0:	f023 0302 	bic.w	r3, r3, #2
 80014f4:	f043 0202 	orr.w	r2, r3, #2
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800150a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800151a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800151c:	4b92      	ldr	r3, [pc, #584]	; (8001768 <HAL_ADC_Init+0x308>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a92      	ldr	r2, [pc, #584]	; (800176c <HAL_ADC_Init+0x30c>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	0c9a      	lsrs	r2, r3, #18
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001532:	e002      	b.n	800153a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	3b01      	subs	r3, #1
 8001538:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f9      	bne.n	8001534 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d007      	beq.n	800155e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800155c:	d110      	bne.n	8001580 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f023 0312 	bic.w	r3, r3, #18
 8001566:	f043 0210 	orr.w	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	f043 0201 	orr.w	r2, r3, #1
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	f003 0310 	and.w	r3, r3, #16
 8001588:	2b00      	cmp	r3, #0
 800158a:	f040 8150 	bne.w	800182e <HAL_ADC_Init+0x3ce>
 800158e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001592:	2b00      	cmp	r3, #0
 8001594:	f040 814b 	bne.w	800182e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f040 8143 	bne.w	800182e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015b0:	f043 0202 	orr.w	r2, r3, #2
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015c0:	d004      	beq.n	80015cc <HAL_ADC_Init+0x16c>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a6a      	ldr	r2, [pc, #424]	; (8001770 <HAL_ADC_Init+0x310>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d101      	bne.n	80015d0 <HAL_ADC_Init+0x170>
 80015cc:	4b69      	ldr	r3, [pc, #420]	; (8001774 <HAL_ADC_Init+0x314>)
 80015ce:	e000      	b.n	80015d2 <HAL_ADC_Init+0x172>
 80015d0:	4b69      	ldr	r3, [pc, #420]	; (8001778 <HAL_ADC_Init+0x318>)
 80015d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015dc:	d102      	bne.n	80015e4 <HAL_ADC_Init+0x184>
 80015de:	4b64      	ldr	r3, [pc, #400]	; (8001770 <HAL_ADC_Init+0x310>)
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	e01a      	b.n	800161a <HAL_ADC_Init+0x1ba>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a61      	ldr	r2, [pc, #388]	; (8001770 <HAL_ADC_Init+0x310>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d103      	bne.n	80015f6 <HAL_ADC_Init+0x196>
 80015ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	e011      	b.n	800161a <HAL_ADC_Init+0x1ba>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a60      	ldr	r2, [pc, #384]	; (800177c <HAL_ADC_Init+0x31c>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d102      	bne.n	8001606 <HAL_ADC_Init+0x1a6>
 8001600:	4b5f      	ldr	r3, [pc, #380]	; (8001780 <HAL_ADC_Init+0x320>)
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	e009      	b.n	800161a <HAL_ADC_Init+0x1ba>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a5d      	ldr	r2, [pc, #372]	; (8001780 <HAL_ADC_Init+0x320>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d102      	bne.n	8001616 <HAL_ADC_Init+0x1b6>
 8001610:	4b5a      	ldr	r3, [pc, #360]	; (800177c <HAL_ADC_Init+0x31c>)
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	e001      	b.n	800161a <HAL_ADC_Init+0x1ba>
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	2b01      	cmp	r3, #1
 8001626:	d108      	bne.n	800163a <HAL_ADC_Init+0x1da>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b01      	cmp	r3, #1
 8001634:	d101      	bne.n	800163a <HAL_ADC_Init+0x1da>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <HAL_ADC_Init+0x1dc>
 800163a:	2300      	movs	r3, #0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d11c      	bne.n	800167a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001640:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001642:	2b00      	cmp	r3, #0
 8001644:	d010      	beq.n	8001668 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	2b01      	cmp	r3, #1
 8001650:	d107      	bne.n	8001662 <HAL_ADC_Init+0x202>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b01      	cmp	r3, #1
 800165c:	d101      	bne.n	8001662 <HAL_ADC_Init+0x202>
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <HAL_ADC_Init+0x204>
 8001662:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001664:	2b00      	cmp	r3, #0
 8001666:	d108      	bne.n	800167a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	431a      	orrs	r2, r3
 8001676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001678:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7e5b      	ldrb	r3, [r3, #25]
 800167e:	035b      	lsls	r3, r3, #13
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001684:	2a01      	cmp	r2, #1
 8001686:	d002      	beq.n	800168e <HAL_ADC_Init+0x22e>
 8001688:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800168c:	e000      	b.n	8001690 <HAL_ADC_Init+0x230>
 800168e:	2200      	movs	r2, #0
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	4313      	orrs	r3, r2
 800169e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016a0:	4313      	orrs	r3, r2
 80016a2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d11b      	bne.n	80016e6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	7e5b      	ldrb	r3, [r3, #25]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	3b01      	subs	r3, #1
 80016bc:	045a      	lsls	r2, r3, #17
 80016be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016c0:	4313      	orrs	r3, r2
 80016c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c6:	663b      	str	r3, [r7, #96]	; 0x60
 80016c8:	e00d      	b.n	80016e6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80016d2:	f043 0220 	orr.w	r2, r3, #32
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f043 0201 	orr.w	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d054      	beq.n	8001798 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a22      	ldr	r2, [pc, #136]	; (800177c <HAL_ADC_Init+0x31c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d004      	beq.n	8001702 <HAL_ADC_Init+0x2a2>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a20      	ldr	r2, [pc, #128]	; (8001780 <HAL_ADC_Init+0x320>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d140      	bne.n	8001784 <HAL_ADC_Init+0x324>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001706:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800170a:	d02a      	beq.n	8001762 <HAL_ADC_Init+0x302>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001714:	d022      	beq.n	800175c <HAL_ADC_Init+0x2fc>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800171e:	d01a      	beq.n	8001756 <HAL_ADC_Init+0x2f6>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001724:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001728:	d012      	beq.n	8001750 <HAL_ADC_Init+0x2f0>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172e:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001732:	d00a      	beq.n	800174a <HAL_ADC_Init+0x2ea>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001738:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 800173c:	d002      	beq.n	8001744 <HAL_ADC_Init+0x2e4>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001742:	e023      	b.n	800178c <HAL_ADC_Init+0x32c>
 8001744:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001748:	e020      	b.n	800178c <HAL_ADC_Init+0x32c>
 800174a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800174e:	e01d      	b.n	800178c <HAL_ADC_Init+0x32c>
 8001750:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001754:	e01a      	b.n	800178c <HAL_ADC_Init+0x32c>
 8001756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800175a:	e017      	b.n	800178c <HAL_ADC_Init+0x32c>
 800175c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001760:	e014      	b.n	800178c <HAL_ADC_Init+0x32c>
 8001762:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001766:	e011      	b.n	800178c <HAL_ADC_Init+0x32c>
 8001768:	20000000 	.word	0x20000000
 800176c:	431bde83 	.word	0x431bde83
 8001770:	50000100 	.word	0x50000100
 8001774:	50000300 	.word	0x50000300
 8001778:	50000700 	.word	0x50000700
 800177c:	50000400 	.word	0x50000400
 8001780:	50000500 	.word	0x50000500
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001788:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001790:	4313      	orrs	r3, r2
 8001792:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001794:	4313      	orrs	r3, r2
 8001796:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d114      	bne.n	80017d0 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017b4:	f023 0302 	bic.w	r3, r3, #2
 80017b8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7e1b      	ldrb	r3, [r3, #24]
 80017be:	039a      	lsls	r2, r3, #14
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	4313      	orrs	r3, r2
 80017ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017cc:	4313      	orrs	r3, r2
 80017ce:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <HAL_ADC_Init+0x3f0>)
 80017d8:	4013      	ands	r3, r2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80017e0:	430b      	orrs	r3, r1
 80017e2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d10c      	bne.n	8001806 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f023 010f 	bic.w	r1, r3, #15
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	1e5a      	subs	r2, r3, #1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	631a      	str	r2, [r3, #48]	; 0x30
 8001804:	e007      	b.n	8001816 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 020f 	bic.w	r2, r2, #15
 8001814:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f023 0303 	bic.w	r3, r3, #3
 8001824:	f043 0201 	orr.w	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	641a      	str	r2, [r3, #64]	; 0x40
 800182c:	e00a      	b.n	8001844 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f023 0312 	bic.w	r3, r3, #18
 8001836:	f043 0210 	orr.w	r2, r3, #16
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800183e:	2301      	movs	r3, #1
 8001840:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001844:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001848:	4618      	mov	r0, r3
 800184a:	3768      	adds	r7, #104	; 0x68
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	fff0c007 	.word	0xfff0c007

08001854 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800185c:	2300      	movs	r3, #0
 800185e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	2b00      	cmp	r3, #0
 800186c:	f040 80f9 	bne.w	8001a62 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_ADC_Start+0x2a>
 800187a:	2302      	movs	r3, #2
 800187c:	e0f4      	b.n	8001a68 <HAL_ADC_Start+0x214>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 fce6 	bl	8002258 <ADC_Enable>
 800188c:	4603      	mov	r3, r0
 800188e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	2b00      	cmp	r3, #0
 8001894:	f040 80e0 	bne.w	8001a58 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018a0:	f023 0301 	bic.w	r3, r3, #1
 80018a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018b4:	d004      	beq.n	80018c0 <HAL_ADC_Start+0x6c>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a6d      	ldr	r2, [pc, #436]	; (8001a70 <HAL_ADC_Start+0x21c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d106      	bne.n	80018ce <HAL_ADC_Start+0x7a>
 80018c0:	4b6c      	ldr	r3, [pc, #432]	; (8001a74 <HAL_ADC_Start+0x220>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 031f 	and.w	r3, r3, #31
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d010      	beq.n	80018ee <HAL_ADC_Start+0x9a>
 80018cc:	e005      	b.n	80018da <HAL_ADC_Start+0x86>
 80018ce:	4b6a      	ldr	r3, [pc, #424]	; (8001a78 <HAL_ADC_Start+0x224>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 031f 	and.w	r3, r3, #31
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d009      	beq.n	80018ee <HAL_ADC_Start+0x9a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018e2:	d004      	beq.n	80018ee <HAL_ADC_Start+0x9a>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a64      	ldr	r2, [pc, #400]	; (8001a7c <HAL_ADC_Start+0x228>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d115      	bne.n	800191a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d036      	beq.n	8001976 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001910:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001918:	e02d      	b.n	8001976 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800192e:	d004      	beq.n	800193a <HAL_ADC_Start+0xe6>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a4e      	ldr	r2, [pc, #312]	; (8001a70 <HAL_ADC_Start+0x21c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d10a      	bne.n	8001950 <HAL_ADC_Start+0xfc>
 800193a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	bf14      	ite	ne
 8001948:	2301      	movne	r3, #1
 800194a:	2300      	moveq	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	e008      	b.n	8001962 <HAL_ADC_Start+0x10e>
 8001950:	4b4a      	ldr	r3, [pc, #296]	; (8001a7c <HAL_ADC_Start+0x228>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	bf14      	ite	ne
 800195c:	2301      	movne	r3, #1
 800195e:	2300      	moveq	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d007      	beq.n	8001976 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800196e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800197e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001982:	d106      	bne.n	8001992 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001988:	f023 0206 	bic.w	r2, r3, #6
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	645a      	str	r2, [r3, #68]	; 0x44
 8001990:	e002      	b.n	8001998 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	221c      	movs	r2, #28
 80019a6:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019b0:	d004      	beq.n	80019bc <HAL_ADC_Start+0x168>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a2e      	ldr	r2, [pc, #184]	; (8001a70 <HAL_ADC_Start+0x21c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d106      	bne.n	80019ca <HAL_ADC_Start+0x176>
 80019bc:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <HAL_ADC_Start+0x220>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 031f 	and.w	r3, r3, #31
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d03e      	beq.n	8001a46 <HAL_ADC_Start+0x1f2>
 80019c8:	e005      	b.n	80019d6 <HAL_ADC_Start+0x182>
 80019ca:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <HAL_ADC_Start+0x224>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 031f 	and.w	r3, r3, #31
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d037      	beq.n	8001a46 <HAL_ADC_Start+0x1f2>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019de:	d004      	beq.n	80019ea <HAL_ADC_Start+0x196>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a22      	ldr	r2, [pc, #136]	; (8001a70 <HAL_ADC_Start+0x21c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d106      	bne.n	80019f8 <HAL_ADC_Start+0x1a4>
 80019ea:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <HAL_ADC_Start+0x220>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 031f 	and.w	r3, r3, #31
 80019f2:	2b05      	cmp	r3, #5
 80019f4:	d027      	beq.n	8001a46 <HAL_ADC_Start+0x1f2>
 80019f6:	e005      	b.n	8001a04 <HAL_ADC_Start+0x1b0>
 80019f8:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <HAL_ADC_Start+0x224>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 031f 	and.w	r3, r3, #31
 8001a00:	2b05      	cmp	r3, #5
 8001a02:	d020      	beq.n	8001a46 <HAL_ADC_Start+0x1f2>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a0c:	d004      	beq.n	8001a18 <HAL_ADC_Start+0x1c4>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a17      	ldr	r2, [pc, #92]	; (8001a70 <HAL_ADC_Start+0x21c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d106      	bne.n	8001a26 <HAL_ADC_Start+0x1d2>
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <HAL_ADC_Start+0x220>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 031f 	and.w	r3, r3, #31
 8001a20:	2b09      	cmp	r3, #9
 8001a22:	d010      	beq.n	8001a46 <HAL_ADC_Start+0x1f2>
 8001a24:	e005      	b.n	8001a32 <HAL_ADC_Start+0x1de>
 8001a26:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <HAL_ADC_Start+0x224>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 031f 	and.w	r3, r3, #31
 8001a2e:	2b09      	cmp	r3, #9
 8001a30:	d009      	beq.n	8001a46 <HAL_ADC_Start+0x1f2>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a3a:	d004      	beq.n	8001a46 <HAL_ADC_Start+0x1f2>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0e      	ldr	r2, [pc, #56]	; (8001a7c <HAL_ADC_Start+0x228>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d10f      	bne.n	8001a66 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f042 0204 	orr.w	r2, r2, #4
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	e006      	b.n	8001a66 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001a60:	e001      	b.n	8001a66 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a62:	2302      	movs	r3, #2
 8001a64:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	50000100 	.word	0x50000100
 8001a74:	50000300 	.word	0x50000300
 8001a78:	50000700 	.word	0x50000700
 8001a7c:	50000400 	.word	0x50000400

08001a80 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b09b      	sub	sp, #108	; 0x6c
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x22>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e2cb      	b.n	8002056 <HAL_ADC_ConfigChannel+0x5ba>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f040 82af 	bne.w	8002034 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d81c      	bhi.n	8001b18 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	461a      	mov	r2, r3
 8001af2:	231f      	movs	r3, #31
 8001af4:	4093      	lsls	r3, r2
 8001af6:	43db      	mvns	r3, r3
 8001af8:	4019      	ands	r1, r3
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	4613      	mov	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4413      	add	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	631a      	str	r2, [r3, #48]	; 0x30
 8001b16:	e063      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b09      	cmp	r3, #9
 8001b1e:	d81e      	bhi.n	8001b5e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	3b1e      	subs	r3, #30
 8001b34:	221f      	movs	r2, #31
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	4019      	ands	r1, r3
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	3b1e      	subs	r3, #30
 8001b50:	fa00 f203 	lsl.w	r2, r0, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	635a      	str	r2, [r3, #52]	; 0x34
 8001b5c:	e040      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b0e      	cmp	r3, #14
 8001b64:	d81e      	bhi.n	8001ba4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4413      	add	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	3b3c      	subs	r3, #60	; 0x3c
 8001b7a:	221f      	movs	r2, #31
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	4019      	ands	r1, r3
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	6818      	ldr	r0, [r3, #0]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	3b3c      	subs	r3, #60	; 0x3c
 8001b96:	fa00 f203 	lsl.w	r2, r0, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	639a      	str	r2, [r3, #56]	; 0x38
 8001ba2:	e01d      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	3b5a      	subs	r3, #90	; 0x5a
 8001bb8:	221f      	movs	r2, #31
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	4019      	ands	r1, r3
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	4413      	add	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	3b5a      	subs	r3, #90	; 0x5a
 8001bd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f040 80e5 	bne.w	8001dba <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b09      	cmp	r3, #9
 8001bf6:	d91c      	bls.n	8001c32 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6999      	ldr	r1, [r3, #24]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	4613      	mov	r3, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4413      	add	r3, r2
 8001c08:	3b1e      	subs	r3, #30
 8001c0a:	2207      	movs	r2, #7
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	4019      	ands	r1, r3
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	6898      	ldr	r0, [r3, #8]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	3b1e      	subs	r3, #30
 8001c24:	fa00 f203 	lsl.w	r2, r0, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	619a      	str	r2, [r3, #24]
 8001c30:	e019      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6959      	ldr	r1, [r3, #20]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4413      	add	r3, r2
 8001c42:	2207      	movs	r2, #7
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	4019      	ands	r1, r3
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	6898      	ldr	r0, [r3, #8]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4613      	mov	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4413      	add	r3, r2
 8001c5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	08db      	lsrs	r3, r3, #3
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d84f      	bhi.n	8001d28 <HAL_ADC_ConfigChannel+0x28c>
 8001c88:	a201      	add	r2, pc, #4	; (adr r2, 8001c90 <HAL_ADC_ConfigChannel+0x1f4>)
 8001c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8e:	bf00      	nop
 8001c90:	08001ca1 	.word	0x08001ca1
 8001c94:	08001cc3 	.word	0x08001cc3
 8001c98:	08001ce5 	.word	0x08001ce5
 8001c9c:	08001d07 	.word	0x08001d07
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ca6:	4b9f      	ldr	r3, [pc, #636]	; (8001f24 <HAL_ADC_ConfigChannel+0x488>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	0691      	lsls	r1, r2, #26
 8001cb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cbe:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cc0:	e07e      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cc8:	4b96      	ldr	r3, [pc, #600]	; (8001f24 <HAL_ADC_ConfigChannel+0x488>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	0691      	lsls	r1, r2, #26
 8001cd2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ce0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ce2:	e06d      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001cea:	4b8e      	ldr	r3, [pc, #568]	; (8001f24 <HAL_ADC_ConfigChannel+0x488>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	0691      	lsls	r1, r2, #26
 8001cf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d02:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d04:	e05c      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d0c:	4b85      	ldr	r3, [pc, #532]	; (8001f24 <HAL_ADC_ConfigChannel+0x488>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	0691      	lsls	r1, r2, #26
 8001d16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d24:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d26:	e04b      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	069b      	lsls	r3, r3, #26
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d107      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d4a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	069b      	lsls	r3, r3, #26
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d107      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d6e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	069b      	lsls	r3, r3, #26
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d107      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d92:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	069b      	lsls	r3, r3, #26
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d10a      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001db6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001db8:	e001      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001dba:	bf00      	nop
 8001dbc:	e000      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001dbe:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d108      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x344>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x344>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x346>
 8001de0:	2300      	movs	r3, #0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f040 8131 	bne.w	800204a <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d00f      	beq.n	8001e10 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	400a      	ands	r2, r1
 8001e0a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001e0e:	e049      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2b09      	cmp	r3, #9
 8001e30:	d91c      	bls.n	8001e6c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6999      	ldr	r1, [r3, #24]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	3b1b      	subs	r3, #27
 8001e44:	2207      	movs	r2, #7
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	4019      	ands	r1, r3
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6898      	ldr	r0, [r3, #8]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3b1b      	subs	r3, #27
 8001e5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	619a      	str	r2, [r3, #24]
 8001e6a:	e01b      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6959      	ldr	r1, [r3, #20]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	4613      	mov	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	2207      	movs	r2, #7
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	4019      	ands	r1, r3
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	6898      	ldr	r0, [r3, #8]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	4613      	mov	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4413      	add	r3, r2
 8001e98:	fa00 f203 	lsl.w	r2, r0, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eac:	d004      	beq.n	8001eb8 <HAL_ADC_ConfigChannel+0x41c>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a1d      	ldr	r2, [pc, #116]	; (8001f28 <HAL_ADC_ConfigChannel+0x48c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d101      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x420>
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <HAL_ADC_ConfigChannel+0x490>)
 8001eba:	e000      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x422>
 8001ebc:	4b1c      	ldr	r3, [pc, #112]	; (8001f30 <HAL_ADC_ConfigChannel+0x494>)
 8001ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b10      	cmp	r3, #16
 8001ec6:	d105      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d015      	beq.n	8001f00 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ed8:	2b11      	cmp	r3, #17
 8001eda:	d105      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00b      	beq.n	8001f00 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001eec:	2b12      	cmp	r3, #18
 8001eee:	f040 80ac 	bne.w	800204a <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 80a5 	bne.w	800204a <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f08:	d102      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x474>
 8001f0a:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <HAL_ADC_ConfigChannel+0x48c>)
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	e023      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x4bc>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <HAL_ADC_ConfigChannel+0x48c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d10c      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x498>
 8001f1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	e01a      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x4bc>
 8001f22:	bf00      	nop
 8001f24:	83fff000 	.word	0x83fff000
 8001f28:	50000100 	.word	0x50000100
 8001f2c:	50000300 	.word	0x50000300
 8001f30:	50000700 	.word	0x50000700
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a4a      	ldr	r2, [pc, #296]	; (8002064 <HAL_ADC_ConfigChannel+0x5c8>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d102      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x4a8>
 8001f3e:	4b4a      	ldr	r3, [pc, #296]	; (8002068 <HAL_ADC_ConfigChannel+0x5cc>)
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	e009      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x4bc>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a47      	ldr	r2, [pc, #284]	; (8002068 <HAL_ADC_ConfigChannel+0x5cc>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d102      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x4b8>
 8001f4e:	4b45      	ldr	r3, [pc, #276]	; (8002064 <HAL_ADC_ConfigChannel+0x5c8>)
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	e001      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x4bc>
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d108      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x4dc>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x4dc>
 8001f74:	2301      	movs	r3, #1
 8001f76:	e000      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x4de>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d150      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f7e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d010      	beq.n	8001fa6 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d107      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x504>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x504>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x506>
 8001fa0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d13c      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b10      	cmp	r3, #16
 8001fac:	d11d      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x54e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fb6:	d118      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fc2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fc4:	4b29      	ldr	r3, [pc, #164]	; (800206c <HAL_ADC_ConfigChannel+0x5d0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a29      	ldr	r2, [pc, #164]	; (8002070 <HAL_ADC_ConfigChannel+0x5d4>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	0c9a      	lsrs	r2, r3, #18
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fda:	e002      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f9      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fe8:	e02e      	b.n	8002048 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b11      	cmp	r3, #17
 8001ff0:	d10b      	bne.n	800200a <HAL_ADC_ConfigChannel+0x56e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ffa:	d106      	bne.n	800200a <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002006:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002008:	e01e      	b.n	8002048 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b12      	cmp	r3, #18
 8002010:	d11a      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800201a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800201c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800201e:	e013      	b.n	8002048 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	f043 0220 	orr.w	r2, r3, #32
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002032:	e00a      	b.n	800204a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	f043 0220 	orr.w	r2, r3, #32
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002046:	e000      	b.n	800204a <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002048:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002052:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002056:	4618      	mov	r0, r3
 8002058:	376c      	adds	r7, #108	; 0x6c
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	50000400 	.word	0x50000400
 8002068:	50000500 	.word	0x50000500
 800206c:	20000000 	.word	0x20000000
 8002070:	431bde83 	.word	0x431bde83

08002074 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002074:	b480      	push	{r7}
 8002076:	b099      	sub	sp, #100	; 0x64
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800208c:	d102      	bne.n	8002094 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800208e:	4b6d      	ldr	r3, [pc, #436]	; (8002244 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	e01a      	b.n	80020ca <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a6a      	ldr	r2, [pc, #424]	; (8002244 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d103      	bne.n	80020a6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800209e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	e011      	b.n	80020ca <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a67      	ldr	r2, [pc, #412]	; (8002248 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d102      	bne.n	80020b6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80020b0:	4b66      	ldr	r3, [pc, #408]	; (800224c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	e009      	b.n	80020ca <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a64      	ldr	r2, [pc, #400]	; (800224c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d102      	bne.n	80020c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80020c0:	4b61      	ldr	r3, [pc, #388]	; (8002248 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	e001      	b.n	80020ca <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0b0      	b.n	8002236 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80020de:	2302      	movs	r3, #2
 80020e0:	e0a9      	b.n	8002236 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f040 808d 	bne.w	8002214 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b00      	cmp	r3, #0
 8002104:	f040 8086 	bne.w	8002214 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002110:	d004      	beq.n	800211c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a4b      	ldr	r2, [pc, #300]	; (8002244 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d101      	bne.n	8002120 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800211c:	4b4c      	ldr	r3, [pc, #304]	; (8002250 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800211e:	e000      	b.n	8002122 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002120:	4b4c      	ldr	r3, [pc, #304]	; (8002254 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002122:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d040      	beq.n	80021ae <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800212c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	6859      	ldr	r1, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800213e:	035b      	lsls	r3, r3, #13
 8002140:	430b      	orrs	r3, r1
 8002142:	431a      	orrs	r2, r3
 8002144:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002146:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	2b01      	cmp	r3, #1
 8002154:	d108      	bne.n	8002168 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002168:	2300      	movs	r3, #0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d15c      	bne.n	8002228 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	2b01      	cmp	r3, #1
 8002178:	d107      	bne.n	800218a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800218a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800218c:	2b00      	cmp	r3, #0
 800218e:	d14b      	bne.n	8002228 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002190:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002198:	f023 030f 	bic.w	r3, r3, #15
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	6811      	ldr	r1, [r2, #0]
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	6892      	ldr	r2, [r2, #8]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	431a      	orrs	r2, r3
 80021a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021aa:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80021ac:	e03c      	b.n	8002228 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80021ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021b8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d108      	bne.n	80021da <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80021da:	2300      	movs	r3, #0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d123      	bne.n	8002228 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d107      	bne.n	80021fc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d101      	bne.n	80021fc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80021fc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d112      	bne.n	8002228 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002202:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800220a:	f023 030f 	bic.w	r3, r3, #15
 800220e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002210:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002212:	e009      	b.n	8002228 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	f043 0220 	orr.w	r2, r3, #32
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002226:	e000      	b.n	800222a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002228:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002232:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002236:	4618      	mov	r0, r3
 8002238:	3764      	adds	r7, #100	; 0x64
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	50000100 	.word	0x50000100
 8002248:	50000400 	.word	0x50000400
 800224c:	50000500 	.word	0x50000500
 8002250:	50000300 	.word	0x50000300
 8002254:	50000700 	.word	0x50000700

08002258 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b01      	cmp	r3, #1
 8002270:	d108      	bne.n	8002284 <ADC_Enable+0x2c>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <ADC_Enable+0x2c>
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <ADC_Enable+0x2e>
 8002284:	2300      	movs	r3, #0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d13c      	bne.n	8002304 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <ADC_Enable+0xb8>)
 8002292:	4013      	ands	r3, r2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00d      	beq.n	80022b4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	f043 0210 	orr.w	r2, r3, #16
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a8:	f043 0201 	orr.w	r2, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e028      	b.n	8002306 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80022c4:	f7ff f8c0 	bl	8001448 <HAL_GetTick>
 80022c8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022ca:	e014      	b.n	80022f6 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022cc:	f7ff f8bc 	bl	8001448 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d90d      	bls.n	80022f6 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f043 0210 	orr.w	r2, r3, #16
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	f043 0201 	orr.w	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e007      	b.n	8002306 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b01      	cmp	r3, #1
 8002302:	d1e3      	bne.n	80022cc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	8000003f 	.word	0x8000003f

08002314 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b01      	cmp	r3, #1
 800232c:	d108      	bne.n	8002340 <ADC_Disable+0x2c>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <ADC_Disable+0x2c>
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <ADC_Disable+0x2e>
 8002340:	2300      	movs	r3, #0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d040      	beq.n	80023c8 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 030d 	and.w	r3, r3, #13
 8002350:	2b01      	cmp	r3, #1
 8002352:	d10f      	bne.n	8002374 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0202 	orr.w	r2, r2, #2
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2203      	movs	r2, #3
 800236a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800236c:	f7ff f86c 	bl	8001448 <HAL_GetTick>
 8002370:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002372:	e022      	b.n	80023ba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	f043 0210 	orr.w	r2, r3, #16
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002384:	f043 0201 	orr.w	r2, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e01c      	b.n	80023ca <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002390:	f7ff f85a 	bl	8001448 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d90d      	bls.n	80023ba <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f043 0210 	orr.w	r2, r3, #16
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f043 0201 	orr.w	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e007      	b.n	80023ca <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d0e3      	beq.n	8002390 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <__NVIC_SetPriorityGrouping+0x44>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023f0:	4013      	ands	r3, r2
 80023f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002406:	4a04      	ldr	r2, [pc, #16]	; (8002418 <__NVIC_SetPriorityGrouping+0x44>)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	60d3      	str	r3, [r2, #12]
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <__NVIC_GetPriorityGrouping+0x18>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	f003 0307 	and.w	r3, r3, #7
}
 800242a:	4618      	mov	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	2b00      	cmp	r3, #0
 800244a:	db0a      	blt.n	8002462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	490c      	ldr	r1, [pc, #48]	; (8002484 <__NVIC_SetPriority+0x4c>)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	0112      	lsls	r2, r2, #4
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	440b      	add	r3, r1
 800245c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002460:	e00a      	b.n	8002478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	4908      	ldr	r1, [pc, #32]	; (8002488 <__NVIC_SetPriority+0x50>)
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	3b04      	subs	r3, #4
 8002470:	0112      	lsls	r2, r2, #4
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	440b      	add	r3, r1
 8002476:	761a      	strb	r2, [r3, #24]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	e000e100 	.word	0xe000e100
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800248c:	b480      	push	{r7}
 800248e:	b089      	sub	sp, #36	; 0x24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f1c3 0307 	rsb	r3, r3, #7
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	bf28      	it	cs
 80024aa:	2304      	movcs	r3, #4
 80024ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3304      	adds	r3, #4
 80024b2:	2b06      	cmp	r3, #6
 80024b4:	d902      	bls.n	80024bc <NVIC_EncodePriority+0x30>
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3b03      	subs	r3, #3
 80024ba:	e000      	b.n	80024be <NVIC_EncodePriority+0x32>
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c0:	f04f 32ff 	mov.w	r2, #4294967295
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43da      	mvns	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	401a      	ands	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d4:	f04f 31ff 	mov.w	r1, #4294967295
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fa01 f303 	lsl.w	r3, r1, r3
 80024de:	43d9      	mvns	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e4:	4313      	orrs	r3, r2
         );
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3724      	adds	r7, #36	; 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
	...

080024f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3b01      	subs	r3, #1
 8002500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002504:	d301      	bcc.n	800250a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002506:	2301      	movs	r3, #1
 8002508:	e00f      	b.n	800252a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800250a:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <SysTick_Config+0x40>)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002512:	210f      	movs	r1, #15
 8002514:	f04f 30ff 	mov.w	r0, #4294967295
 8002518:	f7ff ff8e 	bl	8002438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <SysTick_Config+0x40>)
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002522:	4b04      	ldr	r3, [pc, #16]	; (8002534 <SysTick_Config+0x40>)
 8002524:	2207      	movs	r2, #7
 8002526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	e000e010 	.word	0xe000e010

08002538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff ff47 	bl	80023d4 <__NVIC_SetPriorityGrouping>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002560:	f7ff ff5c 	bl	800241c <__NVIC_GetPriorityGrouping>
 8002564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	6978      	ldr	r0, [r7, #20]
 800256c:	f7ff ff8e 	bl	800248c <NVIC_EncodePriority>
 8002570:	4602      	mov	r2, r0
 8002572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002576:	4611      	mov	r1, r2
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff5d 	bl	8002438 <__NVIC_SetPriority>
}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff ffb0 	bl	80024f4 <SysTick_Config>
 8002594:	4603      	mov	r3, r0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e014      	b.n	80025da <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	791b      	ldrb	r3, [r3, #4]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d105      	bne.n	80025c6 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7fe fdef 	bl	80011a4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2202      	movs	r2, #2
 80025ca:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b087      	sub	sp, #28
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	795b      	ldrb	r3, [r3, #5]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_DAC_ConfigChannel+0x20>
 80025fe:	2302      	movs	r3, #2
 8002600:	e036      	b.n	8002670 <HAL_DAC_ConfigChannel+0x8e>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2201      	movs	r2, #1
 8002606:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2202      	movs	r2, #2
 800260c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002616:	f640 72fe 	movw	r2, #4094	; 0xffe
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4013      	ands	r3, r2
 8002626:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	4313      	orrs	r3, r2
 8002640:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6819      	ldr	r1, [r3, #0]
 8002650:	22c0      	movs	r2, #192	; 0xc0
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43da      	mvns	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	400a      	ands	r2, r1
 8002660:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	371c      	adds	r7, #28
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800267c:	b480      	push	{r7}
 800267e:	b087      	sub	sp, #28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800268a:	e160      	b.n	800294e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	2101      	movs	r1, #1
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	fa01 f303 	lsl.w	r3, r1, r3
 8002698:	4013      	ands	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 8152 	beq.w	8002948 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d00b      	beq.n	80026c4 <HAL_GPIO_Init+0x48>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d007      	beq.n	80026c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026b8:	2b11      	cmp	r3, #17
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b12      	cmp	r3, #18
 80026c2:	d130      	bne.n	8002726 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	2203      	movs	r2, #3
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026fa:	2201      	movs	r2, #1
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4013      	ands	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	091b      	lsrs	r3, r3, #4
 8002710:	f003 0201 	and.w	r2, r3, #1
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	2203      	movs	r2, #3
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0xea>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b12      	cmp	r3, #18
 8002764:	d123      	bne.n	80027ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	08da      	lsrs	r2, r3, #3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3208      	adds	r2, #8
 800276e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002772:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	220f      	movs	r2, #15
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4013      	ands	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	08da      	lsrs	r2, r3, #3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3208      	adds	r2, #8
 80027a8:	6939      	ldr	r1, [r7, #16]
 80027aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	2203      	movs	r2, #3
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4013      	ands	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 0203 	and.w	r2, r3, #3
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 80ac 	beq.w	8002948 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f0:	4b5e      	ldr	r3, [pc, #376]	; (800296c <HAL_GPIO_Init+0x2f0>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	4a5d      	ldr	r2, [pc, #372]	; (800296c <HAL_GPIO_Init+0x2f0>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6193      	str	r3, [r2, #24]
 80027fc:	4b5b      	ldr	r3, [pc, #364]	; (800296c <HAL_GPIO_Init+0x2f0>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002808:	4a59      	ldr	r2, [pc, #356]	; (8002970 <HAL_GPIO_Init+0x2f4>)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	089b      	lsrs	r3, r3, #2
 800280e:	3302      	adds	r3, #2
 8002810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002814:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	220f      	movs	r2, #15
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002832:	d025      	beq.n	8002880 <HAL_GPIO_Init+0x204>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a4f      	ldr	r2, [pc, #316]	; (8002974 <HAL_GPIO_Init+0x2f8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d01f      	beq.n	800287c <HAL_GPIO_Init+0x200>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a4e      	ldr	r2, [pc, #312]	; (8002978 <HAL_GPIO_Init+0x2fc>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d019      	beq.n	8002878 <HAL_GPIO_Init+0x1fc>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a4d      	ldr	r2, [pc, #308]	; (800297c <HAL_GPIO_Init+0x300>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d013      	beq.n	8002874 <HAL_GPIO_Init+0x1f8>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a4c      	ldr	r2, [pc, #304]	; (8002980 <HAL_GPIO_Init+0x304>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00d      	beq.n	8002870 <HAL_GPIO_Init+0x1f4>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a4b      	ldr	r2, [pc, #300]	; (8002984 <HAL_GPIO_Init+0x308>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d007      	beq.n	800286c <HAL_GPIO_Init+0x1f0>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a4a      	ldr	r2, [pc, #296]	; (8002988 <HAL_GPIO_Init+0x30c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d101      	bne.n	8002868 <HAL_GPIO_Init+0x1ec>
 8002864:	2306      	movs	r3, #6
 8002866:	e00c      	b.n	8002882 <HAL_GPIO_Init+0x206>
 8002868:	2307      	movs	r3, #7
 800286a:	e00a      	b.n	8002882 <HAL_GPIO_Init+0x206>
 800286c:	2305      	movs	r3, #5
 800286e:	e008      	b.n	8002882 <HAL_GPIO_Init+0x206>
 8002870:	2304      	movs	r3, #4
 8002872:	e006      	b.n	8002882 <HAL_GPIO_Init+0x206>
 8002874:	2303      	movs	r3, #3
 8002876:	e004      	b.n	8002882 <HAL_GPIO_Init+0x206>
 8002878:	2302      	movs	r3, #2
 800287a:	e002      	b.n	8002882 <HAL_GPIO_Init+0x206>
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <HAL_GPIO_Init+0x206>
 8002880:	2300      	movs	r3, #0
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	f002 0203 	and.w	r2, r2, #3
 8002888:	0092      	lsls	r2, r2, #2
 800288a:	4093      	lsls	r3, r2
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002892:	4937      	ldr	r1, [pc, #220]	; (8002970 <HAL_GPIO_Init+0x2f4>)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	089b      	lsrs	r3, r3, #2
 8002898:	3302      	adds	r3, #2
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028a0:	4b3a      	ldr	r3, [pc, #232]	; (800298c <HAL_GPIO_Init+0x310>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4013      	ands	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028c4:	4a31      	ldr	r2, [pc, #196]	; (800298c <HAL_GPIO_Init+0x310>)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028ca:	4b30      	ldr	r3, [pc, #192]	; (800298c <HAL_GPIO_Init+0x310>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4013      	ands	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028ee:	4a27      	ldr	r2, [pc, #156]	; (800298c <HAL_GPIO_Init+0x310>)
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028f4:	4b25      	ldr	r3, [pc, #148]	; (800298c <HAL_GPIO_Init+0x310>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4013      	ands	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002918:	4a1c      	ldr	r2, [pc, #112]	; (800298c <HAL_GPIO_Init+0x310>)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800291e:	4b1b      	ldr	r3, [pc, #108]	; (800298c <HAL_GPIO_Init+0x310>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	43db      	mvns	r3, r3
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002942:	4a12      	ldr	r2, [pc, #72]	; (800298c <HAL_GPIO_Init+0x310>)
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	3301      	adds	r3, #1
 800294c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	fa22 f303 	lsr.w	r3, r2, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	f47f ae97 	bne.w	800268c <HAL_GPIO_Init+0x10>
  }
}
 800295e:	bf00      	nop
 8002960:	371c      	adds	r7, #28
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000
 8002970:	40010000 	.word	0x40010000
 8002974:	48000400 	.word	0x48000400
 8002978:	48000800 	.word	0x48000800
 800297c:	48000c00 	.word	0x48000c00
 8002980:	48001000 	.word	0x48001000
 8002984:	48001400 	.word	0x48001400
 8002988:	48001800 	.word	0x48001800
 800298c:	40010400 	.word	0x40010400

08002990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	807b      	strh	r3, [r7, #2]
 800299c:	4613      	mov	r3, r2
 800299e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029a0:	787b      	ldrb	r3, [r7, #1]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029a6:	887a      	ldrh	r2, [r7, #2]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029ac:	e002      	b.n	80029b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029ae:	887a      	ldrh	r2, [r7, #2]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	1d3b      	adds	r3, r7, #4
 80029ca:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029cc:	1d3b      	adds	r3, r7, #4
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d102      	bne.n	80029da <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	f000 bf01 	b.w	80037dc <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029da:	1d3b      	adds	r3, r7, #4
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 8160 	beq.w	8002caa <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029ea:	4bae      	ldr	r3, [pc, #696]	; (8002ca4 <HAL_RCC_OscConfig+0x2e4>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d00c      	beq.n	8002a10 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029f6:	4bab      	ldr	r3, [pc, #684]	; (8002ca4 <HAL_RCC_OscConfig+0x2e4>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d159      	bne.n	8002ab6 <HAL_RCC_OscConfig+0xf6>
 8002a02:	4ba8      	ldr	r3, [pc, #672]	; (8002ca4 <HAL_RCC_OscConfig+0x2e4>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a0e:	d152      	bne.n	8002ab6 <HAL_RCC_OscConfig+0xf6>
 8002a10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a14:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a1c:	fa93 f3a3 	rbit	r3, r3
 8002a20:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a24:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a28:	fab3 f383 	clz	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d102      	bne.n	8002a42 <HAL_RCC_OscConfig+0x82>
 8002a3c:	4b99      	ldr	r3, [pc, #612]	; (8002ca4 <HAL_RCC_OscConfig+0x2e4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	e015      	b.n	8002a6e <HAL_RCC_OscConfig+0xae>
 8002a42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a46:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002a4e:	fa93 f3a3 	rbit	r3, r3
 8002a52:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002a56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a5a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a5e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002a6a:	4b8e      	ldr	r3, [pc, #568]	; (8002ca4 <HAL_RCC_OscConfig+0x2e4>)
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a72:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002a76:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002a7a:	fa92 f2a2 	rbit	r2, r2
 8002a7e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002a82:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a86:	fab2 f282 	clz	r2, r2
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	f042 0220 	orr.w	r2, r2, #32
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	f002 021f 	and.w	r2, r2, #31
 8002a96:	2101      	movs	r1, #1
 8002a98:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 8102 	beq.w	8002ca8 <HAL_RCC_OscConfig+0x2e8>
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f040 80fc 	bne.w	8002ca8 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f000 be93 	b.w	80037dc <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac0:	d106      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x110>
 8002ac2:	4b78      	ldr	r3, [pc, #480]	; (8002ca4 <HAL_RCC_OscConfig+0x2e4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a77      	ldr	r2, [pc, #476]	; (8002ca4 <HAL_RCC_OscConfig+0x2e4>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e030      	b.n	8002b32 <HAL_RCC_OscConfig+0x172>
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x134>
 8002ada:	4b72      	ldr	r3, [pc, #456]	; (8002ca4 <HAL_RCC_OscConfig+0x2e4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a71      	ldr	r2, [pc, #452]	; (8002ca4 <HAL_RCC_OscConfig+0x2e4>)
 8002ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	4b6f      	ldr	r3, [pc, #444]	; (8002ca4 <HAL_RCC_OscConfig+0x2e4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a6e      	ldr	r2, [pc, #440]	; (8002ca4 <HAL_RCC_OscConfig+0x2e4>)
 8002aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e01e      	b.n	8002b32 <HAL_RCC_OscConfig+0x172>
 8002af4:	1d3b      	adds	r3, r7, #4
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002afe:	d10c      	bne.n	8002b1a <HAL_RCC_OscConfig+0x15a>
 8002b00:	4b68      	ldr	r3, [pc, #416]	; (8002ca4 <HAL_RCC_OscConfig+0x2e4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a67      	ldr	r2, [pc, #412]	; (8002ca4 <HAL_RCC_OscConfig+0x2e4>)
 8002b06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	4b65      	ldr	r3, [pc, #404]	; (8002ca4 <HAL_RCC_OscConfig+0x2e4>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a64      	ldr	r2, [pc, #400]	; (8002ca4 <HAL_RCC_OscConfig+0x2e4>)
 8002b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	e00b      	b.n	8002b32 <HAL_RCC_OscConfig+0x172>
 8002b1a:	4b62      	ldr	r3, [pc, #392]	; (8002ca4 <HAL_RCC_OscConfig+0x2e4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a61      	ldr	r2, [pc, #388]	; (8002ca4 <HAL_RCC_OscConfig+0x2e4>)
 8002b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	4b5f      	ldr	r3, [pc, #380]	; (8002ca4 <HAL_RCC_OscConfig+0x2e4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a5e      	ldr	r2, [pc, #376]	; (8002ca4 <HAL_RCC_OscConfig+0x2e4>)
 8002b2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b30:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b32:	1d3b      	adds	r3, r7, #4
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d059      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7fe fc84 	bl	8001448 <HAL_GetTick>
 8002b40:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b44:	e00a      	b.n	8002b5c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b46:	f7fe fc7f 	bl	8001448 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	; 0x64
 8002b54:	d902      	bls.n	8002b5c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	f000 be40 	b.w	80037dc <HAL_RCC_OscConfig+0xe1c>
 8002b5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b60:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002b68:	fa93 f3a3 	rbit	r3, r3
 8002b6c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002b70:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b74:	fab3 f383 	clz	r3, r3
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d102      	bne.n	8002b8e <HAL_RCC_OscConfig+0x1ce>
 8002b88:	4b46      	ldr	r3, [pc, #280]	; (8002ca4 <HAL_RCC_OscConfig+0x2e4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	e015      	b.n	8002bba <HAL_RCC_OscConfig+0x1fa>
 8002b8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b92:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002ba2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ba6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002baa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_RCC_OscConfig+0x2e4>)
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bbe:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002bc2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002bc6:	fa92 f2a2 	rbit	r2, r2
 8002bca:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002bce:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002bd2:	fab2 f282 	clz	r2, r2
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	f042 0220 	orr.w	r2, r2, #32
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	f002 021f 	and.w	r2, r2, #31
 8002be2:	2101      	movs	r1, #1
 8002be4:	fa01 f202 	lsl.w	r2, r1, r2
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0ab      	beq.n	8002b46 <HAL_RCC_OscConfig+0x186>
 8002bee:	e05c      	b.n	8002caa <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fc2a 	bl	8001448 <HAL_GetTick>
 8002bf4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf8:	e00a      	b.n	8002c10 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bfa:	f7fe fc25 	bl	8001448 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	; 0x64
 8002c08:	d902      	bls.n	8002c10 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	f000 bde6 	b.w	80037dc <HAL_RCC_OscConfig+0xe1c>
 8002c10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c14:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002c24:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c28:	fab3 f383 	clz	r3, r3
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d102      	bne.n	8002c42 <HAL_RCC_OscConfig+0x282>
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_RCC_OscConfig+0x2e4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	e015      	b.n	8002c6e <HAL_RCC_OscConfig+0x2ae>
 8002c42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c46:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 8002c52:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002c56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c5a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c5e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <HAL_RCC_OscConfig+0x2e4>)
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c72:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002c76:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002c7a:	fa92 f2a2 	rbit	r2, r2
 8002c7e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002c82:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c86:	fab2 f282 	clz	r2, r2
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	f042 0220 	orr.w	r2, r2, #32
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	f002 021f 	and.w	r2, r2, #31
 8002c96:	2101      	movs	r1, #1
 8002c98:	fa01 f202 	lsl.w	r2, r1, r2
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1ab      	bne.n	8002bfa <HAL_RCC_OscConfig+0x23a>
 8002ca2:	e002      	b.n	8002caa <HAL_RCC_OscConfig+0x2ea>
 8002ca4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 8170 	beq.w	8002f9a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cba:	4bd0      	ldr	r3, [pc, #832]	; (8002ffc <HAL_RCC_OscConfig+0x63c>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00c      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002cc6:	4bcd      	ldr	r3, [pc, #820]	; (8002ffc <HAL_RCC_OscConfig+0x63c>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d16d      	bne.n	8002dae <HAL_RCC_OscConfig+0x3ee>
 8002cd2:	4bca      	ldr	r3, [pc, #808]	; (8002ffc <HAL_RCC_OscConfig+0x63c>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cde:	d166      	bne.n	8002dae <HAL_RCC_OscConfig+0x3ee>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002cf2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	095b      	lsrs	r3, r3, #5
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d102      	bne.n	8002d10 <HAL_RCC_OscConfig+0x350>
 8002d0a:	4bbc      	ldr	r3, [pc, #752]	; (8002ffc <HAL_RCC_OscConfig+0x63c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	e013      	b.n	8002d38 <HAL_RCC_OscConfig+0x378>
 8002d10:	2302      	movs	r3, #2
 8002d12:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002d22:	2302      	movs	r3, #2
 8002d24:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002d28:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002d34:	4bb1      	ldr	r3, [pc, #708]	; (8002ffc <HAL_RCC_OscConfig+0x63c>)
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	2202      	movs	r2, #2
 8002d3a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002d3e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002d42:	fa92 f2a2 	rbit	r2, r2
 8002d46:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002d4a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d4e:	fab2 f282 	clz	r2, r2
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	f042 0220 	orr.w	r2, r2, #32
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	f002 021f 	and.w	r2, r2, #31
 8002d5e:	2101      	movs	r1, #1
 8002d60:	fa01 f202 	lsl.w	r2, r1, r2
 8002d64:	4013      	ands	r3, r2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <HAL_RCC_OscConfig+0x3ba>
 8002d6a:	1d3b      	adds	r3, r7, #4
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d002      	beq.n	8002d7a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	f000 bd31 	b.w	80037dc <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7a:	4ba0      	ldr	r3, [pc, #640]	; (8002ffc <HAL_RCC_OscConfig+0x63c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d82:	1d3b      	adds	r3, r7, #4
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	21f8      	movs	r1, #248	; 0xf8
 8002d8a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002d92:	fa91 f1a1 	rbit	r1, r1
 8002d96:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002d9a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002d9e:	fab1 f181 	clz	r1, r1
 8002da2:	b2c9      	uxtb	r1, r1
 8002da4:	408b      	lsls	r3, r1
 8002da6:	4995      	ldr	r1, [pc, #596]	; (8002ffc <HAL_RCC_OscConfig+0x63c>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dac:	e0f5      	b.n	8002f9a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dae:	1d3b      	adds	r3, r7, #4
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 8085 	beq.w	8002ec4 <HAL_RCC_OscConfig+0x504>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002dcc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dd0:	fab3 f383 	clz	r3, r3
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dda:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	461a      	mov	r2, r3
 8002de2:	2301      	movs	r3, #1
 8002de4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de6:	f7fe fb2f 	bl	8001448 <HAL_GetTick>
 8002dea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dee:	e00a      	b.n	8002e06 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002df0:	f7fe fb2a 	bl	8001448 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d902      	bls.n	8002e06 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	f000 bceb 	b.w	80037dc <HAL_RCC_OscConfig+0xe1c>
 8002e06:	2302      	movs	r3, #2
 8002e08:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002e18:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1c:	fab3 f383 	clz	r3, r3
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d102      	bne.n	8002e36 <HAL_RCC_OscConfig+0x476>
 8002e30:	4b72      	ldr	r3, [pc, #456]	; (8002ffc <HAL_RCC_OscConfig+0x63c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	e013      	b.n	8002e5e <HAL_RCC_OscConfig+0x49e>
 8002e36:	2302      	movs	r3, #2
 8002e38:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002e48:	2302      	movs	r3, #2
 8002e4a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e4e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002e52:	fa93 f3a3 	rbit	r3, r3
 8002e56:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e5a:	4b68      	ldr	r3, [pc, #416]	; (8002ffc <HAL_RCC_OscConfig+0x63c>)
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002e64:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002e68:	fa92 f2a2 	rbit	r2, r2
 8002e6c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002e70:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e74:	fab2 f282 	clz	r2, r2
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	f042 0220 	orr.w	r2, r2, #32
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	f002 021f 	and.w	r2, r2, #31
 8002e84:	2101      	movs	r1, #1
 8002e86:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0af      	beq.n	8002df0 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e90:	4b5a      	ldr	r3, [pc, #360]	; (8002ffc <HAL_RCC_OscConfig+0x63c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e98:	1d3b      	adds	r3, r7, #4
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	21f8      	movs	r1, #248	; 0xf8
 8002ea0:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002ea8:	fa91 f1a1 	rbit	r1, r1
 8002eac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002eb0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002eb4:	fab1 f181 	clz	r1, r1
 8002eb8:	b2c9      	uxtb	r1, r1
 8002eba:	408b      	lsls	r3, r1
 8002ebc:	494f      	ldr	r1, [pc, #316]	; (8002ffc <HAL_RCC_OscConfig+0x63c>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]
 8002ec2:	e06a      	b.n	8002f9a <HAL_RCC_OscConfig+0x5da>
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002ece:	fa93 f3a3 	rbit	r3, r3
 8002ed2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002ed6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eda:	fab3 f383 	clz	r3, r3
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ee4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	461a      	mov	r2, r3
 8002eec:	2300      	movs	r3, #0
 8002eee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7fe faaa 	bl	8001448 <HAL_GetTick>
 8002ef4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef8:	e00a      	b.n	8002f10 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002efa:	f7fe faa5 	bl	8001448 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d902      	bls.n	8002f10 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	f000 bc66 	b.w	80037dc <HAL_RCC_OscConfig+0xe1c>
 8002f10:	2302      	movs	r3, #2
 8002f12:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002f22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	095b      	lsrs	r3, r3, #5
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d102      	bne.n	8002f40 <HAL_RCC_OscConfig+0x580>
 8002f3a:	4b30      	ldr	r3, [pc, #192]	; (8002ffc <HAL_RCC_OscConfig+0x63c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	e013      	b.n	8002f68 <HAL_RCC_OscConfig+0x5a8>
 8002f40:	2302      	movs	r3, #2
 8002f42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002f4a:	fa93 f3a3 	rbit	r3, r3
 8002f4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002f52:	2302      	movs	r3, #2
 8002f54:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f58:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002f5c:	fa93 f3a3 	rbit	r3, r3
 8002f60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f64:	4b25      	ldr	r3, [pc, #148]	; (8002ffc <HAL_RCC_OscConfig+0x63c>)
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	2202      	movs	r2, #2
 8002f6a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002f6e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002f72:	fa92 f2a2 	rbit	r2, r2
 8002f76:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002f7a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f7e:	fab2 f282 	clz	r2, r2
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	f042 0220 	orr.w	r2, r2, #32
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	f002 021f 	and.w	r2, r2, #31
 8002f8e:	2101      	movs	r1, #1
 8002f90:	fa01 f202 	lsl.w	r2, r1, r2
 8002f94:	4013      	ands	r3, r2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1af      	bne.n	8002efa <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f9a:	1d3b      	adds	r3, r7, #4
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 80da 	beq.w	800315e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002faa:	1d3b      	adds	r3, r7, #4
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d069      	beq.n	8003088 <HAL_RCC_OscConfig+0x6c8>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fbe:	fa93 f3a3 	rbit	r3, r3
 8002fc2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002fc6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <HAL_RCC_OscConfig+0x640>)
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	461a      	mov	r2, r3
 8002fda:	2301      	movs	r3, #1
 8002fdc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fde:	f7fe fa33 	bl	8001448 <HAL_GetTick>
 8002fe2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe6:	e00d      	b.n	8003004 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fe8:	f7fe fa2e 	bl	8001448 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d905      	bls.n	8003004 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e3ef      	b.n	80037dc <HAL_RCC_OscConfig+0xe1c>
 8002ffc:	40021000 	.word	0x40021000
 8003000:	10908120 	.word	0x10908120
 8003004:	2302      	movs	r3, #2
 8003006:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800300e:	fa93 f2a3 	rbit	r2, r3
 8003012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800301c:	2202      	movs	r2, #2
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	fa93 f2a3 	rbit	r2, r3
 800302a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003034:	2202      	movs	r2, #2
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	fa93 f2a3 	rbit	r2, r3
 8003042:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003046:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003048:	4ba4      	ldr	r3, [pc, #656]	; (80032dc <HAL_RCC_OscConfig+0x91c>)
 800304a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800304c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003050:	2102      	movs	r1, #2
 8003052:	6019      	str	r1, [r3, #0]
 8003054:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	fa93 f1a3 	rbit	r1, r3
 800305e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003062:	6019      	str	r1, [r3, #0]
  return result;
 8003064:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	fab3 f383 	clz	r3, r3
 800306e:	b2db      	uxtb	r3, r3
 8003070:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003074:	b2db      	uxtb	r3, r3
 8003076:	f003 031f 	and.w	r3, r3, #31
 800307a:	2101      	movs	r1, #1
 800307c:	fa01 f303 	lsl.w	r3, r1, r3
 8003080:	4013      	ands	r3, r2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0b0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x628>
 8003086:	e06a      	b.n	800315e <HAL_RCC_OscConfig+0x79e>
 8003088:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800308c:	2201      	movs	r2, #1
 800308e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	fa93 f2a3 	rbit	r2, r3
 800309a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800309e:	601a      	str	r2, [r3, #0]
  return result;
 80030a0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80030a4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a6:	fab3 f383 	clz	r3, r3
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	461a      	mov	r2, r3
 80030ae:	4b8c      	ldr	r3, [pc, #560]	; (80032e0 <HAL_RCC_OscConfig+0x920>)
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	461a      	mov	r2, r3
 80030b6:	2300      	movs	r3, #0
 80030b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ba:	f7fe f9c5 	bl	8001448 <HAL_GetTick>
 80030be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c2:	e009      	b.n	80030d8 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c4:	f7fe f9c0 	bl	8001448 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e381      	b.n	80037dc <HAL_RCC_OscConfig+0xe1c>
 80030d8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030dc:	2202      	movs	r2, #2
 80030de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	fa93 f2a3 	rbit	r2, r3
 80030ea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80030f4:	2202      	movs	r2, #2
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	fa93 f2a3 	rbit	r2, r3
 8003102:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800310c:	2202      	movs	r2, #2
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	fa93 f2a3 	rbit	r2, r3
 800311a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800311e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003120:	4b6e      	ldr	r3, [pc, #440]	; (80032dc <HAL_RCC_OscConfig+0x91c>)
 8003122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003124:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003128:	2102      	movs	r1, #2
 800312a:	6019      	str	r1, [r3, #0]
 800312c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	fa93 f1a3 	rbit	r1, r3
 8003136:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800313a:	6019      	str	r1, [r3, #0]
  return result;
 800313c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	fab3 f383 	clz	r3, r3
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800314c:	b2db      	uxtb	r3, r3
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	2101      	movs	r1, #1
 8003154:	fa01 f303 	lsl.w	r3, r1, r3
 8003158:	4013      	ands	r3, r2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1b2      	bne.n	80030c4 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800315e:	1d3b      	adds	r3, r7, #4
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 8157 	beq.w	800341c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800316e:	2300      	movs	r3, #0
 8003170:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003174:	4b59      	ldr	r3, [pc, #356]	; (80032dc <HAL_RCC_OscConfig+0x91c>)
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d112      	bne.n	80031a6 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003180:	4b56      	ldr	r3, [pc, #344]	; (80032dc <HAL_RCC_OscConfig+0x91c>)
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	4a55      	ldr	r2, [pc, #340]	; (80032dc <HAL_RCC_OscConfig+0x91c>)
 8003186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800318a:	61d3      	str	r3, [r2, #28]
 800318c:	4b53      	ldr	r3, [pc, #332]	; (80032dc <HAL_RCC_OscConfig+0x91c>)
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003194:	f107 030c 	add.w	r3, r7, #12
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	f107 030c 	add.w	r3, r7, #12
 800319e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80031a0:	2301      	movs	r3, #1
 80031a2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a6:	4b4f      	ldr	r3, [pc, #316]	; (80032e4 <HAL_RCC_OscConfig+0x924>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d11a      	bne.n	80031e8 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b2:	4b4c      	ldr	r3, [pc, #304]	; (80032e4 <HAL_RCC_OscConfig+0x924>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a4b      	ldr	r2, [pc, #300]	; (80032e4 <HAL_RCC_OscConfig+0x924>)
 80031b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031be:	f7fe f943 	bl	8001448 <HAL_GetTick>
 80031c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c6:	e009      	b.n	80031dc <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c8:	f7fe f93e 	bl	8001448 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b64      	cmp	r3, #100	; 0x64
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e2ff      	b.n	80037dc <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	4b41      	ldr	r3, [pc, #260]	; (80032e4 <HAL_RCC_OscConfig+0x924>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0ef      	beq.n	80031c8 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e8:	1d3b      	adds	r3, r7, #4
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d106      	bne.n	8003200 <HAL_RCC_OscConfig+0x840>
 80031f2:	4b3a      	ldr	r3, [pc, #232]	; (80032dc <HAL_RCC_OscConfig+0x91c>)
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	4a39      	ldr	r2, [pc, #228]	; (80032dc <HAL_RCC_OscConfig+0x91c>)
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	6213      	str	r3, [r2, #32]
 80031fe:	e02f      	b.n	8003260 <HAL_RCC_OscConfig+0x8a0>
 8003200:	1d3b      	adds	r3, r7, #4
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10c      	bne.n	8003224 <HAL_RCC_OscConfig+0x864>
 800320a:	4b34      	ldr	r3, [pc, #208]	; (80032dc <HAL_RCC_OscConfig+0x91c>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	4a33      	ldr	r2, [pc, #204]	; (80032dc <HAL_RCC_OscConfig+0x91c>)
 8003210:	f023 0301 	bic.w	r3, r3, #1
 8003214:	6213      	str	r3, [r2, #32]
 8003216:	4b31      	ldr	r3, [pc, #196]	; (80032dc <HAL_RCC_OscConfig+0x91c>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	4a30      	ldr	r2, [pc, #192]	; (80032dc <HAL_RCC_OscConfig+0x91c>)
 800321c:	f023 0304 	bic.w	r3, r3, #4
 8003220:	6213      	str	r3, [r2, #32]
 8003222:	e01d      	b.n	8003260 <HAL_RCC_OscConfig+0x8a0>
 8003224:	1d3b      	adds	r3, r7, #4
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b05      	cmp	r3, #5
 800322c:	d10c      	bne.n	8003248 <HAL_RCC_OscConfig+0x888>
 800322e:	4b2b      	ldr	r3, [pc, #172]	; (80032dc <HAL_RCC_OscConfig+0x91c>)
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	4a2a      	ldr	r2, [pc, #168]	; (80032dc <HAL_RCC_OscConfig+0x91c>)
 8003234:	f043 0304 	orr.w	r3, r3, #4
 8003238:	6213      	str	r3, [r2, #32]
 800323a:	4b28      	ldr	r3, [pc, #160]	; (80032dc <HAL_RCC_OscConfig+0x91c>)
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	4a27      	ldr	r2, [pc, #156]	; (80032dc <HAL_RCC_OscConfig+0x91c>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	6213      	str	r3, [r2, #32]
 8003246:	e00b      	b.n	8003260 <HAL_RCC_OscConfig+0x8a0>
 8003248:	4b24      	ldr	r3, [pc, #144]	; (80032dc <HAL_RCC_OscConfig+0x91c>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	4a23      	ldr	r2, [pc, #140]	; (80032dc <HAL_RCC_OscConfig+0x91c>)
 800324e:	f023 0301 	bic.w	r3, r3, #1
 8003252:	6213      	str	r3, [r2, #32]
 8003254:	4b21      	ldr	r3, [pc, #132]	; (80032dc <HAL_RCC_OscConfig+0x91c>)
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	4a20      	ldr	r2, [pc, #128]	; (80032dc <HAL_RCC_OscConfig+0x91c>)
 800325a:	f023 0304 	bic.w	r3, r3, #4
 800325e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003260:	1d3b      	adds	r3, r7, #4
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d06a      	beq.n	8003340 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800326a:	f7fe f8ed 	bl	8001448 <HAL_GetTick>
 800326e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003272:	e00b      	b.n	800328c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003274:	f7fe f8e8 	bl	8001448 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	f241 3288 	movw	r2, #5000	; 0x1388
 8003284:	4293      	cmp	r3, r2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e2a7      	b.n	80037dc <HAL_RCC_OscConfig+0xe1c>
 800328c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003290:	2202      	movs	r2, #2
 8003292:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003294:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	fa93 f2a3 	rbit	r2, r3
 800329e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80032a8:	2202      	movs	r2, #2
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	fa93 f2a3 	rbit	r2, r3
 80032b6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80032ba:	601a      	str	r2, [r3, #0]
  return result;
 80032bc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80032c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c2:	fab3 f383 	clz	r3, r3
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	f043 0302 	orr.w	r3, r3, #2
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d108      	bne.n	80032e8 <HAL_RCC_OscConfig+0x928>
 80032d6:	4b01      	ldr	r3, [pc, #4]	; (80032dc <HAL_RCC_OscConfig+0x91c>)
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	e013      	b.n	8003304 <HAL_RCC_OscConfig+0x944>
 80032dc:	40021000 	.word	0x40021000
 80032e0:	10908120 	.word	0x10908120
 80032e4:	40007000 	.word	0x40007000
 80032e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032ec:	2202      	movs	r2, #2
 80032ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	fa93 f2a3 	rbit	r2, r3
 80032fa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	4bc0      	ldr	r3, [pc, #768]	; (8003604 <HAL_RCC_OscConfig+0xc44>)
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003308:	2102      	movs	r1, #2
 800330a:	6011      	str	r1, [r2, #0]
 800330c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	fa92 f1a2 	rbit	r1, r2
 8003316:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800331a:	6011      	str	r1, [r2, #0]
  return result;
 800331c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	fab2 f282 	clz	r2, r2
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	f002 021f 	and.w	r2, r2, #31
 8003332:	2101      	movs	r1, #1
 8003334:	fa01 f202 	lsl.w	r2, r1, r2
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d09a      	beq.n	8003274 <HAL_RCC_OscConfig+0x8b4>
 800333e:	e063      	b.n	8003408 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003340:	f7fe f882 	bl	8001448 <HAL_GetTick>
 8003344:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003348:	e00b      	b.n	8003362 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800334a:	f7fe f87d 	bl	8001448 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	; 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e23c      	b.n	80037dc <HAL_RCC_OscConfig+0xe1c>
 8003362:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003366:	2202      	movs	r2, #2
 8003368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	fa93 f2a3 	rbit	r2, r3
 8003374:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800337e:	2202      	movs	r2, #2
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	fa93 f2a3 	rbit	r2, r3
 800338c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003390:	601a      	str	r2, [r3, #0]
  return result;
 8003392:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003396:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003398:	fab3 f383 	clz	r3, r3
 800339c:	b2db      	uxtb	r3, r3
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	f043 0302 	orr.w	r3, r3, #2
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d102      	bne.n	80033b2 <HAL_RCC_OscConfig+0x9f2>
 80033ac:	4b95      	ldr	r3, [pc, #596]	; (8003604 <HAL_RCC_OscConfig+0xc44>)
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	e00d      	b.n	80033ce <HAL_RCC_OscConfig+0xa0e>
 80033b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80033b6:	2202      	movs	r2, #2
 80033b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	fa93 f2a3 	rbit	r2, r3
 80033c4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	4b8e      	ldr	r3, [pc, #568]	; (8003604 <HAL_RCC_OscConfig+0xc44>)
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80033d2:	2102      	movs	r1, #2
 80033d4:	6011      	str	r1, [r2, #0]
 80033d6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	fa92 f1a2 	rbit	r1, r2
 80033e0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80033e4:	6011      	str	r1, [r2, #0]
  return result;
 80033e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80033ea:	6812      	ldr	r2, [r2, #0]
 80033ec:	fab2 f282 	clz	r2, r2
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	f002 021f 	and.w	r2, r2, #31
 80033fc:	2101      	movs	r1, #1
 80033fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003402:	4013      	ands	r3, r2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1a0      	bne.n	800334a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003408:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800340c:	2b01      	cmp	r3, #1
 800340e:	d105      	bne.n	800341c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003410:	4b7c      	ldr	r3, [pc, #496]	; (8003604 <HAL_RCC_OscConfig+0xc44>)
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	4a7b      	ldr	r2, [pc, #492]	; (8003604 <HAL_RCC_OscConfig+0xc44>)
 8003416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800341c:	1d3b      	adds	r3, r7, #4
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 81d9 	beq.w	80037da <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003428:	4b76      	ldr	r3, [pc, #472]	; (8003604 <HAL_RCC_OscConfig+0xc44>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 030c 	and.w	r3, r3, #12
 8003430:	2b08      	cmp	r3, #8
 8003432:	f000 81a6 	beq.w	8003782 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003436:	1d3b      	adds	r3, r7, #4
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2b02      	cmp	r3, #2
 800343e:	f040 811e 	bne.w	800367e <HAL_RCC_OscConfig+0xcbe>
 8003442:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003446:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800344a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	fa93 f2a3 	rbit	r2, r3
 8003456:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800345a:	601a      	str	r2, [r3, #0]
  return result;
 800345c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003460:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003462:	fab3 f383 	clz	r3, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800346c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	461a      	mov	r2, r3
 8003474:	2300      	movs	r3, #0
 8003476:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003478:	f7fd ffe6 	bl	8001448 <HAL_GetTick>
 800347c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003480:	e009      	b.n	8003496 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003482:	f7fd ffe1 	bl	8001448 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e1a2      	b.n	80037dc <HAL_RCC_OscConfig+0xe1c>
 8003496:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800349a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800349e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	fa93 f2a3 	rbit	r2, r3
 80034aa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80034ae:	601a      	str	r2, [r3, #0]
  return result;
 80034b0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80034b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b6:	fab3 f383 	clz	r3, r3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d102      	bne.n	80034d0 <HAL_RCC_OscConfig+0xb10>
 80034ca:	4b4e      	ldr	r3, [pc, #312]	; (8003604 <HAL_RCC_OscConfig+0xc44>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	e01b      	b.n	8003508 <HAL_RCC_OscConfig+0xb48>
 80034d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	fa93 f2a3 	rbit	r2, r3
 80034e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80034ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	fa93 f2a3 	rbit	r2, r3
 80034fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	4b3f      	ldr	r3, [pc, #252]	; (8003604 <HAL_RCC_OscConfig+0xc44>)
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800350c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003510:	6011      	str	r1, [r2, #0]
 8003512:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003516:	6812      	ldr	r2, [r2, #0]
 8003518:	fa92 f1a2 	rbit	r1, r2
 800351c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003520:	6011      	str	r1, [r2, #0]
  return result;
 8003522:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	fab2 f282 	clz	r2, r2
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	f042 0220 	orr.w	r2, r2, #32
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	f002 021f 	and.w	r2, r2, #31
 8003538:	2101      	movs	r1, #1
 800353a:	fa01 f202 	lsl.w	r2, r1, r2
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d19e      	bne.n	8003482 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003544:	4b2f      	ldr	r3, [pc, #188]	; (8003604 <HAL_RCC_OscConfig+0xc44>)
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	f023 020f 	bic.w	r2, r3, #15
 800354c:	1d3b      	adds	r3, r7, #4
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	492c      	ldr	r1, [pc, #176]	; (8003604 <HAL_RCC_OscConfig+0xc44>)
 8003554:	4313      	orrs	r3, r2
 8003556:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003558:	4b2a      	ldr	r3, [pc, #168]	; (8003604 <HAL_RCC_OscConfig+0xc44>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003560:	1d3b      	adds	r3, r7, #4
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6a19      	ldr	r1, [r3, #32]
 8003566:	1d3b      	adds	r3, r7, #4
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	430b      	orrs	r3, r1
 800356e:	4925      	ldr	r1, [pc, #148]	; (8003604 <HAL_RCC_OscConfig+0xc44>)
 8003570:	4313      	orrs	r3, r2
 8003572:	604b      	str	r3, [r1, #4]
 8003574:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003578:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800357c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	fa93 f2a3 	rbit	r2, r3
 8003588:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800358c:	601a      	str	r2, [r3, #0]
  return result;
 800358e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003592:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003594:	fab3 f383 	clz	r3, r3
 8003598:	b2db      	uxtb	r3, r3
 800359a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800359e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	461a      	mov	r2, r3
 80035a6:	2301      	movs	r3, #1
 80035a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035aa:	f7fd ff4d 	bl	8001448 <HAL_GetTick>
 80035ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035b2:	e009      	b.n	80035c8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b4:	f7fd ff48 	bl	8001448 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e109      	b.n	80037dc <HAL_RCC_OscConfig+0xe1c>
 80035c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	fa93 f2a3 	rbit	r2, r3
 80035dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035e0:	601a      	str	r2, [r3, #0]
  return result;
 80035e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e8:	fab3 f383 	clz	r3, r3
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	f043 0301 	orr.w	r3, r3, #1
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d105      	bne.n	8003608 <HAL_RCC_OscConfig+0xc48>
 80035fc:	4b01      	ldr	r3, [pc, #4]	; (8003604 <HAL_RCC_OscConfig+0xc44>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	e01e      	b.n	8003640 <HAL_RCC_OscConfig+0xc80>
 8003602:	bf00      	nop
 8003604:	40021000 	.word	0x40021000
 8003608:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800360c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003612:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	fa93 f2a3 	rbit	r2, r3
 800361c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003626:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	fa93 f2a3 	rbit	r2, r3
 8003636:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	4b6a      	ldr	r3, [pc, #424]	; (80037e8 <HAL_RCC_OscConfig+0xe28>)
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003644:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003648:	6011      	str	r1, [r2, #0]
 800364a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	fa92 f1a2 	rbit	r1, r2
 8003654:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003658:	6011      	str	r1, [r2, #0]
  return result;
 800365a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800365e:	6812      	ldr	r2, [r2, #0]
 8003660:	fab2 f282 	clz	r2, r2
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	f042 0220 	orr.w	r2, r2, #32
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	f002 021f 	and.w	r2, r2, #31
 8003670:	2101      	movs	r1, #1
 8003672:	fa01 f202 	lsl.w	r2, r1, r2
 8003676:	4013      	ands	r3, r2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d09b      	beq.n	80035b4 <HAL_RCC_OscConfig+0xbf4>
 800367c:	e0ad      	b.n	80037da <HAL_RCC_OscConfig+0xe1a>
 800367e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003682:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003686:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	fa93 f2a3 	rbit	r2, r3
 8003692:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003696:	601a      	str	r2, [r3, #0]
  return result;
 8003698:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800369c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369e:	fab3 f383 	clz	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	461a      	mov	r2, r3
 80036b0:	2300      	movs	r3, #0
 80036b2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b4:	f7fd fec8 	bl	8001448 <HAL_GetTick>
 80036b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036bc:	e009      	b.n	80036d2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036be:	f7fd fec3 	bl	8001448 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e084      	b.n	80037dc <HAL_RCC_OscConfig+0xe1c>
 80036d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	fa93 f2a3 	rbit	r2, r3
 80036e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036ea:	601a      	str	r2, [r3, #0]
  return result;
 80036ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f2:	fab3 f383 	clz	r3, r3
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	095b      	lsrs	r3, r3, #5
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b01      	cmp	r3, #1
 8003704:	d102      	bne.n	800370c <HAL_RCC_OscConfig+0xd4c>
 8003706:	4b38      	ldr	r3, [pc, #224]	; (80037e8 <HAL_RCC_OscConfig+0xe28>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	e01b      	b.n	8003744 <HAL_RCC_OscConfig+0xd84>
 800370c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003710:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003714:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	fa93 f2a3 	rbit	r2, r3
 8003720:	f107 0320 	add.w	r3, r7, #32
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	f107 031c 	add.w	r3, r7, #28
 800372a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	f107 031c 	add.w	r3, r7, #28
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	fa93 f2a3 	rbit	r2, r3
 800373a:	f107 0318 	add.w	r3, r7, #24
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	4b29      	ldr	r3, [pc, #164]	; (80037e8 <HAL_RCC_OscConfig+0xe28>)
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	f107 0214 	add.w	r2, r7, #20
 8003748:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800374c:	6011      	str	r1, [r2, #0]
 800374e:	f107 0214 	add.w	r2, r7, #20
 8003752:	6812      	ldr	r2, [r2, #0]
 8003754:	fa92 f1a2 	rbit	r1, r2
 8003758:	f107 0210 	add.w	r2, r7, #16
 800375c:	6011      	str	r1, [r2, #0]
  return result;
 800375e:	f107 0210 	add.w	r2, r7, #16
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	fab2 f282 	clz	r2, r2
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	f042 0220 	orr.w	r2, r2, #32
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	f002 021f 	and.w	r2, r2, #31
 8003774:	2101      	movs	r1, #1
 8003776:	fa01 f202 	lsl.w	r2, r1, r2
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d19e      	bne.n	80036be <HAL_RCC_OscConfig+0xcfe>
 8003780:	e02b      	b.n	80037da <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003782:	1d3b      	adds	r3, r7, #4
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e025      	b.n	80037dc <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003790:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <HAL_RCC_OscConfig+0xe28>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003798:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <HAL_RCC_OscConfig+0xe28>)
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037a4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80037a8:	1d3b      	adds	r3, r7, #4
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d111      	bne.n	80037d6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80037b2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80037b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037ba:	1d3b      	adds	r3, r7, #4
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d108      	bne.n	80037d6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80037c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037c8:	f003 020f 	and.w	r2, r3, #15
 80037cc:	1d3b      	adds	r3, r7, #4
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d001      	beq.n	80037da <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40021000 	.word	0x40021000

080037ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b09e      	sub	sp, #120	; 0x78
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e162      	b.n	8003aca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003804:	4b90      	ldr	r3, [pc, #576]	; (8003a48 <HAL_RCC_ClockConfig+0x25c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d910      	bls.n	8003834 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003812:	4b8d      	ldr	r3, [pc, #564]	; (8003a48 <HAL_RCC_ClockConfig+0x25c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 0207 	bic.w	r2, r3, #7
 800381a:	498b      	ldr	r1, [pc, #556]	; (8003a48 <HAL_RCC_ClockConfig+0x25c>)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	4313      	orrs	r3, r2
 8003820:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b89      	ldr	r3, [pc, #548]	; (8003a48 <HAL_RCC_ClockConfig+0x25c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e14a      	b.n	8003aca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003840:	4b82      	ldr	r3, [pc, #520]	; (8003a4c <HAL_RCC_ClockConfig+0x260>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	497f      	ldr	r1, [pc, #508]	; (8003a4c <HAL_RCC_ClockConfig+0x260>)
 800384e:	4313      	orrs	r3, r2
 8003850:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 80dc 	beq.w	8003a18 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d13c      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xf6>
 8003868:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800386c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003870:	fa93 f3a3 	rbit	r3, r3
 8003874:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003878:	fab3 f383 	clz	r3, r3
 800387c:	b2db      	uxtb	r3, r3
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	b2db      	uxtb	r3, r3
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b01      	cmp	r3, #1
 800388a:	d102      	bne.n	8003892 <HAL_RCC_ClockConfig+0xa6>
 800388c:	4b6f      	ldr	r3, [pc, #444]	; (8003a4c <HAL_RCC_ClockConfig+0x260>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	e00f      	b.n	80038b2 <HAL_RCC_ClockConfig+0xc6>
 8003892:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003896:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003898:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800389a:	fa93 f3a3 	rbit	r3, r3
 800389e:	667b      	str	r3, [r7, #100]	; 0x64
 80038a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038a4:	663b      	str	r3, [r7, #96]	; 0x60
 80038a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038a8:	fa93 f3a3 	rbit	r3, r3
 80038ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038ae:	4b67      	ldr	r3, [pc, #412]	; (8003a4c <HAL_RCC_ClockConfig+0x260>)
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80038b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038ba:	fa92 f2a2 	rbit	r2, r2
 80038be:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80038c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038c2:	fab2 f282 	clz	r2, r2
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	f042 0220 	orr.w	r2, r2, #32
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	f002 021f 	and.w	r2, r2, #31
 80038d2:	2101      	movs	r1, #1
 80038d4:	fa01 f202 	lsl.w	r2, r1, r2
 80038d8:	4013      	ands	r3, r2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d17b      	bne.n	80039d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e0f3      	b.n	8003aca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d13c      	bne.n	8003964 <HAL_RCC_ClockConfig+0x178>
 80038ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038ee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038f2:	fa93 f3a3 	rbit	r3, r3
 80038f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fa:	fab3 f383 	clz	r3, r3
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	095b      	lsrs	r3, r3, #5
 8003902:	b2db      	uxtb	r3, r3
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b01      	cmp	r3, #1
 800390c:	d102      	bne.n	8003914 <HAL_RCC_ClockConfig+0x128>
 800390e:	4b4f      	ldr	r3, [pc, #316]	; (8003a4c <HAL_RCC_ClockConfig+0x260>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	e00f      	b.n	8003934 <HAL_RCC_ClockConfig+0x148>
 8003914:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003918:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800391c:	fa93 f3a3 	rbit	r3, r3
 8003920:	647b      	str	r3, [r7, #68]	; 0x44
 8003922:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003926:	643b      	str	r3, [r7, #64]	; 0x40
 8003928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800392a:	fa93 f3a3 	rbit	r3, r3
 800392e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003930:	4b46      	ldr	r3, [pc, #280]	; (8003a4c <HAL_RCC_ClockConfig+0x260>)
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003938:	63ba      	str	r2, [r7, #56]	; 0x38
 800393a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800393c:	fa92 f2a2 	rbit	r2, r2
 8003940:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003942:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003944:	fab2 f282 	clz	r2, r2
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	f042 0220 	orr.w	r2, r2, #32
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	f002 021f 	and.w	r2, r2, #31
 8003954:	2101      	movs	r1, #1
 8003956:	fa01 f202 	lsl.w	r2, r1, r2
 800395a:	4013      	ands	r3, r2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d13a      	bne.n	80039d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0b2      	b.n	8003aca <HAL_RCC_ClockConfig+0x2de>
 8003964:	2302      	movs	r3, #2
 8003966:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396a:	fa93 f3a3 	rbit	r3, r3
 800396e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003972:	fab3 f383 	clz	r3, r3
 8003976:	b2db      	uxtb	r3, r3
 8003978:	095b      	lsrs	r3, r3, #5
 800397a:	b2db      	uxtb	r3, r3
 800397c:	f043 0301 	orr.w	r3, r3, #1
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b01      	cmp	r3, #1
 8003984:	d102      	bne.n	800398c <HAL_RCC_ClockConfig+0x1a0>
 8003986:	4b31      	ldr	r3, [pc, #196]	; (8003a4c <HAL_RCC_ClockConfig+0x260>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	e00d      	b.n	80039a8 <HAL_RCC_ClockConfig+0x1bc>
 800398c:	2302      	movs	r3, #2
 800398e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003992:	fa93 f3a3 	rbit	r3, r3
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
 8003998:	2302      	movs	r3, #2
 800399a:	623b      	str	r3, [r7, #32]
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	fa93 f3a3 	rbit	r3, r3
 80039a2:	61fb      	str	r3, [r7, #28]
 80039a4:	4b29      	ldr	r3, [pc, #164]	; (8003a4c <HAL_RCC_ClockConfig+0x260>)
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	2202      	movs	r2, #2
 80039aa:	61ba      	str	r2, [r7, #24]
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	fa92 f2a2 	rbit	r2, r2
 80039b2:	617a      	str	r2, [r7, #20]
  return result;
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	fab2 f282 	clz	r2, r2
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	f042 0220 	orr.w	r2, r2, #32
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	f002 021f 	and.w	r2, r2, #31
 80039c6:	2101      	movs	r1, #1
 80039c8:	fa01 f202 	lsl.w	r2, r1, r2
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e079      	b.n	8003aca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039d6:	4b1d      	ldr	r3, [pc, #116]	; (8003a4c <HAL_RCC_ClockConfig+0x260>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f023 0203 	bic.w	r2, r3, #3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	491a      	ldr	r1, [pc, #104]	; (8003a4c <HAL_RCC_ClockConfig+0x260>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039e8:	f7fd fd2e 	bl	8001448 <HAL_GetTick>
 80039ec:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ee:	e00a      	b.n	8003a06 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f0:	f7fd fd2a 	bl	8001448 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e061      	b.n	8003aca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a06:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <HAL_RCC_ClockConfig+0x260>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f003 020c 	and.w	r2, r3, #12
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d1eb      	bne.n	80039f0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <HAL_RCC_ClockConfig+0x25c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d214      	bcs.n	8003a50 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a26:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <HAL_RCC_ClockConfig+0x25c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f023 0207 	bic.w	r2, r3, #7
 8003a2e:	4906      	ldr	r1, [pc, #24]	; (8003a48 <HAL_RCC_ClockConfig+0x25c>)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a36:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <HAL_RCC_ClockConfig+0x25c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d005      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e040      	b.n	8003aca <HAL_RCC_ClockConfig+0x2de>
 8003a48:	40022000 	.word	0x40022000
 8003a4c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d008      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a5c:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <HAL_RCC_ClockConfig+0x2e8>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	491a      	ldr	r1, [pc, #104]	; (8003ad4 <HAL_RCC_ClockConfig+0x2e8>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d009      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a7a:	4b16      	ldr	r3, [pc, #88]	; (8003ad4 <HAL_RCC_ClockConfig+0x2e8>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4912      	ldr	r1, [pc, #72]	; (8003ad4 <HAL_RCC_ClockConfig+0x2e8>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a8e:	f000 f829 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8003a92:	4601      	mov	r1, r0
 8003a94:	4b0f      	ldr	r3, [pc, #60]	; (8003ad4 <HAL_RCC_ClockConfig+0x2e8>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a9c:	22f0      	movs	r2, #240	; 0xf0
 8003a9e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	fa92 f2a2 	rbit	r2, r2
 8003aa6:	60fa      	str	r2, [r7, #12]
  return result;
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	fab2 f282 	clz	r2, r2
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	40d3      	lsrs	r3, r2
 8003ab2:	4a09      	ldr	r2, [pc, #36]	; (8003ad8 <HAL_RCC_ClockConfig+0x2ec>)
 8003ab4:	5cd3      	ldrb	r3, [r2, r3]
 8003ab6:	fa21 f303 	lsr.w	r3, r1, r3
 8003aba:	4a08      	ldr	r2, [pc, #32]	; (8003adc <HAL_RCC_ClockConfig+0x2f0>)
 8003abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003abe:	4b08      	ldr	r3, [pc, #32]	; (8003ae0 <HAL_RCC_ClockConfig+0x2f4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fd fc7c 	bl	80013c0 <HAL_InitTick>
  
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3778      	adds	r7, #120	; 0x78
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	08004a90 	.word	0x08004a90
 8003adc:	20000000 	.word	0x20000000
 8003ae0:	20000004 	.word	0x20000004

08003ae4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b08b      	sub	sp, #44	; 0x2c
 8003ae8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
 8003aee:	2300      	movs	r3, #0
 8003af0:	61bb      	str	r3, [r7, #24]
 8003af2:	2300      	movs	r3, #0
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003afe:	4b2a      	ldr	r3, [pc, #168]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d002      	beq.n	8003b14 <HAL_RCC_GetSysClockFreq+0x30>
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d003      	beq.n	8003b1a <HAL_RCC_GetSysClockFreq+0x36>
 8003b12:	e03f      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b14:	4b25      	ldr	r3, [pc, #148]	; (8003bac <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b16:	623b      	str	r3, [r7, #32]
      break;
 8003b18:	e03f      	b.n	8003b9a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b20:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003b24:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	fa92 f2a2 	rbit	r2, r2
 8003b2c:	607a      	str	r2, [r7, #4]
  return result;
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	fab2 f282 	clz	r2, r2
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	40d3      	lsrs	r3, r2
 8003b38:	4a1d      	ldr	r2, [pc, #116]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b3a:	5cd3      	ldrb	r3, [r2, r3]
 8003b3c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	220f      	movs	r2, #15
 8003b48:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	fa92 f2a2 	rbit	r2, r2
 8003b50:	60fa      	str	r2, [r7, #12]
  return result;
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	fab2 f282 	clz	r2, r2
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	40d3      	lsrs	r3, r2
 8003b5c:	4a15      	ldr	r2, [pc, #84]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b5e:	5cd3      	ldrb	r3, [r2, r3]
 8003b60:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b6c:	4a0f      	ldr	r2, [pc, #60]	; (8003bac <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	fb02 f303 	mul.w	r3, r2, r3
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7c:	e007      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b7e:	4a0b      	ldr	r2, [pc, #44]	; (8003bac <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	fb02 f303 	mul.w	r3, r2, r3
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	623b      	str	r3, [r7, #32]
      break;
 8003b92:	e002      	b.n	8003b9a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b94:	4b05      	ldr	r3, [pc, #20]	; (8003bac <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b96:	623b      	str	r3, [r7, #32]
      break;
 8003b98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	372c      	adds	r7, #44	; 0x2c
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	007a1200 	.word	0x007a1200
 8003bb0:	08004aa8 	.word	0x08004aa8
 8003bb4:	08004ab8 	.word	0x08004ab8

08003bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bbc:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	20000000 	.word	0x20000000

08003bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003bd6:	f7ff ffef 	bl	8003bb8 <HAL_RCC_GetHCLKFreq>
 8003bda:	4601      	mov	r1, r0
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003be4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003be8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	fa92 f2a2 	rbit	r2, r2
 8003bf0:	603a      	str	r2, [r7, #0]
  return result;
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	fab2 f282 	clz	r2, r2
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	40d3      	lsrs	r3, r2
 8003bfc:	4a04      	ldr	r2, [pc, #16]	; (8003c10 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003bfe:	5cd3      	ldrb	r3, [r2, r3]
 8003c00:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003c04:	4618      	mov	r0, r3
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	08004aa0 	.word	0x08004aa0

08003c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003c1a:	f7ff ffcd 	bl	8003bb8 <HAL_RCC_GetHCLKFreq>
 8003c1e:	4601      	mov	r1, r0
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003c28:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003c2c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	fa92 f2a2 	rbit	r2, r2
 8003c34:	603a      	str	r2, [r7, #0]
  return result;
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	fab2 f282 	clz	r2, r2
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	40d3      	lsrs	r3, r2
 8003c40:	4a04      	ldr	r2, [pc, #16]	; (8003c54 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003c42:	5cd3      	ldrb	r3, [r2, r3]
 8003c44:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40021000 	.word	0x40021000
 8003c54:	08004aa0 	.word	0x08004aa0

08003c58 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b092      	sub	sp, #72	; 0x48
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 80d4 	beq.w	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c7c:	4b4e      	ldr	r3, [pc, #312]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10e      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c88:	4b4b      	ldr	r3, [pc, #300]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	4a4a      	ldr	r2, [pc, #296]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c92:	61d3      	str	r3, [r2, #28]
 8003c94:	4b48      	ldr	r3, [pc, #288]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca6:	4b45      	ldr	r3, [pc, #276]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d118      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cb2:	4b42      	ldr	r3, [pc, #264]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a41      	ldr	r2, [pc, #260]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cbc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cbe:	f7fd fbc3 	bl	8001448 <HAL_GetTick>
 8003cc2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc6:	f7fd fbbf 	bl	8001448 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b64      	cmp	r3, #100	; 0x64
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e1d6      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd8:	4b38      	ldr	r3, [pc, #224]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0f0      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ce4:	4b34      	ldr	r3, [pc, #208]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cec:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8084 	beq.w	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d07c      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d04:	4b2c      	ldr	r3, [pc, #176]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d16:	fa93 f3a3 	rbit	r3, r3
 8003d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d1e:	fab3 f383 	clz	r3, r3
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	461a      	mov	r2, r3
 8003d26:	4b26      	ldr	r3, [pc, #152]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	2301      	movs	r3, #1
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3a:	fa93 f3a3 	rbit	r3, r3
 8003d3e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d42:	fab3 f383 	clz	r3, r3
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4b1d      	ldr	r3, [pc, #116]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	461a      	mov	r2, r3
 8003d52:	2300      	movs	r3, #0
 8003d54:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d56:	4a18      	ldr	r2, [pc, #96]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d04b      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d66:	f7fd fb6f 	bl	8001448 <HAL_GetTick>
 8003d6a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6c:	e00a      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6e:	f7fd fb6b 	bl	8001448 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e180      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003d84:	2302      	movs	r3, #2
 8003d86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	fa93 f3a3 	rbit	r3, r3
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d90:	2302      	movs	r3, #2
 8003d92:	623b      	str	r3, [r7, #32]
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	fa93 f3a3 	rbit	r3, r3
 8003d9a:	61fb      	str	r3, [r7, #28]
  return result;
 8003d9c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9e:	fab3 f383 	clz	r3, r3
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	f043 0302 	orr.w	r3, r3, #2
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d108      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003db2:	4b01      	ldr	r3, [pc, #4]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	e00d      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	40007000 	.word	0x40007000
 8003dc0:	10908100 	.word	0x10908100
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	fa93 f3a3 	rbit	r3, r3
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	4ba0      	ldr	r3, [pc, #640]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	613a      	str	r2, [r7, #16]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	fa92 f2a2 	rbit	r2, r2
 8003dde:	60fa      	str	r2, [r7, #12]
  return result;
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	fab2 f282 	clz	r2, r2
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	f002 021f 	and.w	r2, r2, #31
 8003df2:	2101      	movs	r1, #1
 8003df4:	fa01 f202 	lsl.w	r2, r1, r2
 8003df8:	4013      	ands	r3, r2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0b7      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003dfe:	4b95      	ldr	r3, [pc, #596]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	4992      	ldr	r1, [pc, #584]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e10:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d105      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e18:	4b8e      	ldr	r3, [pc, #568]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	4a8d      	ldr	r2, [pc, #564]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e22:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d008      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e30:	4b88      	ldr	r3, [pc, #544]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	f023 0203 	bic.w	r2, r3, #3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	4985      	ldr	r1, [pc, #532]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d008      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e4e:	4b81      	ldr	r3, [pc, #516]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	497e      	ldr	r1, [pc, #504]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e6c:	4b79      	ldr	r3, [pc, #484]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	4976      	ldr	r1, [pc, #472]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d008      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e8a:	4b72      	ldr	r3, [pc, #456]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	f023 0210 	bic.w	r2, r3, #16
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	496f      	ldr	r1, [pc, #444]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d008      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003ea8:	4b6a      	ldr	r3, [pc, #424]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb4:	4967      	ldr	r1, [pc, #412]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d008      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ec6:	4b63      	ldr	r3, [pc, #396]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	f023 0220 	bic.w	r2, r3, #32
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	4960      	ldr	r1, [pc, #384]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d008      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ee4:	4b5b      	ldr	r3, [pc, #364]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	4958      	ldr	r1, [pc, #352]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d008      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f02:	4b54      	ldr	r3, [pc, #336]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	4951      	ldr	r1, [pc, #324]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d008      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f20:	4b4c      	ldr	r3, [pc, #304]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	4949      	ldr	r1, [pc, #292]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d008      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f3e:	4b45      	ldr	r3, [pc, #276]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4a:	4942      	ldr	r1, [pc, #264]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d008      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f5c:	4b3d      	ldr	r3, [pc, #244]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f68:	493a      	ldr	r1, [pc, #232]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d008      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003f7a:	4b36      	ldr	r3, [pc, #216]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f86:	4933      	ldr	r1, [pc, #204]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003f98:	4b2e      	ldr	r3, [pc, #184]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa4:	492b      	ldr	r1, [pc, #172]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d008      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003fb6:	4b27      	ldr	r3, [pc, #156]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	4924      	ldr	r1, [pc, #144]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003fd4:	4b1f      	ldr	r3, [pc, #124]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	491c      	ldr	r1, [pc, #112]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d008      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003ff2:	4b18      	ldr	r3, [pc, #96]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffe:	4915      	ldr	r1, [pc, #84]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004000:	4313      	orrs	r3, r2
 8004002:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004010:	4b10      	ldr	r3, [pc, #64]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004014:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401c:	490d      	ldr	r1, [pc, #52]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800401e:	4313      	orrs	r3, r2
 8004020:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d008      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800402e:	4b09      	ldr	r3, [pc, #36]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800403a:	4906      	ldr	r1, [pc, #24]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800403c:	4313      	orrs	r3, r2
 800403e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00c      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800404c:	4b01      	ldr	r3, [pc, #4]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	e002      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004052:	bf00      	nop
 8004054:	40021000 	.word	0x40021000
 8004058:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004060:	490b      	ldr	r1, [pc, #44]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004062:	4313      	orrs	r3, r2
 8004064:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d008      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004072:	4b07      	ldr	r3, [pc, #28]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407e:	4904      	ldr	r1, [pc, #16]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004080:	4313      	orrs	r3, r2
 8004082:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3748      	adds	r7, #72	; 0x48
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40021000 	.word	0x40021000

08004094 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e040      	b.n	8004128 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d106      	bne.n	80040bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7fd f8b2 	bl	8001220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2224      	movs	r2, #36	; 0x24
 80040c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0201 	bic.w	r2, r2, #1
 80040d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f8c0 	bl	8004258 <UART_SetConfig>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e022      	b.n	8004128 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 fa88 	bl	8004600 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800410e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0201 	orr.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fb0f 	bl	8004744 <UART_CheckIdleState>
 8004126:	4603      	mov	r3, r0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08a      	sub	sp, #40	; 0x28
 8004134:	af02      	add	r7, sp, #8
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	4613      	mov	r3, r2
 800413e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004144:	2b20      	cmp	r3, #32
 8004146:	f040 8082 	bne.w	800424e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_UART_Transmit+0x26>
 8004150:	88fb      	ldrh	r3, [r7, #6]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e07a      	b.n	8004250 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_UART_Transmit+0x38>
 8004164:	2302      	movs	r3, #2
 8004166:	e073      	b.n	8004250 <HAL_UART_Transmit+0x120>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2221      	movs	r2, #33	; 0x21
 800417c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800417e:	f7fd f963 	bl	8001448 <HAL_GetTick>
 8004182:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	88fa      	ldrh	r2, [r7, #6]
 8004188:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	88fa      	ldrh	r2, [r7, #6]
 8004190:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800419c:	d108      	bne.n	80041b0 <HAL_UART_Transmit+0x80>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d104      	bne.n	80041b0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	61bb      	str	r3, [r7, #24]
 80041ae:	e003      	b.n	80041b8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80041c0:	e02d      	b.n	800421e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2200      	movs	r2, #0
 80041ca:	2180      	movs	r1, #128	; 0x80
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 fb02 	bl	80047d6 <UART_WaitOnFlagUntilTimeout>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e039      	b.n	8004250 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10b      	bne.n	80041fa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	881a      	ldrh	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041ee:	b292      	uxth	r2, r2
 80041f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	3302      	adds	r3, #2
 80041f6:	61bb      	str	r3, [r7, #24]
 80041f8:	e008      	b.n	800420c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	781a      	ldrb	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	b292      	uxth	r2, r2
 8004204:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	3301      	adds	r3, #1
 800420a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1cb      	bne.n	80041c2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2200      	movs	r2, #0
 8004232:	2140      	movs	r1, #64	; 0x40
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 face 	bl	80047d6 <UART_WaitOnFlagUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e005      	b.n	8004250 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2220      	movs	r2, #32
 8004248:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	e000      	b.n	8004250 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800424e:	2302      	movs	r3, #2
  }
}
 8004250:	4618      	mov	r0, r3
 8004252:	3720      	adds	r7, #32
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	431a      	orrs	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	4baa      	ldr	r3, [pc, #680]	; (800452c <UART_SetConfig+0x2d4>)
 8004284:	4013      	ands	r3, r2
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6812      	ldr	r2, [r2, #0]
 800428a:	6979      	ldr	r1, [r7, #20]
 800428c:	430b      	orrs	r3, r1
 800428e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a98      	ldr	r2, [pc, #608]	; (8004530 <UART_SetConfig+0x2d8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d121      	bne.n	8004318 <UART_SetConfig+0xc0>
 80042d4:	4b97      	ldr	r3, [pc, #604]	; (8004534 <UART_SetConfig+0x2dc>)
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d817      	bhi.n	8004310 <UART_SetConfig+0xb8>
 80042e0:	a201      	add	r2, pc, #4	; (adr r2, 80042e8 <UART_SetConfig+0x90>)
 80042e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e6:	bf00      	nop
 80042e8:	080042f9 	.word	0x080042f9
 80042ec:	08004305 	.word	0x08004305
 80042f0:	0800430b 	.word	0x0800430b
 80042f4:	080042ff 	.word	0x080042ff
 80042f8:	2301      	movs	r3, #1
 80042fa:	77fb      	strb	r3, [r7, #31]
 80042fc:	e0b2      	b.n	8004464 <UART_SetConfig+0x20c>
 80042fe:	2302      	movs	r3, #2
 8004300:	77fb      	strb	r3, [r7, #31]
 8004302:	e0af      	b.n	8004464 <UART_SetConfig+0x20c>
 8004304:	2304      	movs	r3, #4
 8004306:	77fb      	strb	r3, [r7, #31]
 8004308:	e0ac      	b.n	8004464 <UART_SetConfig+0x20c>
 800430a:	2308      	movs	r3, #8
 800430c:	77fb      	strb	r3, [r7, #31]
 800430e:	e0a9      	b.n	8004464 <UART_SetConfig+0x20c>
 8004310:	2310      	movs	r3, #16
 8004312:	77fb      	strb	r3, [r7, #31]
 8004314:	bf00      	nop
 8004316:	e0a5      	b.n	8004464 <UART_SetConfig+0x20c>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a86      	ldr	r2, [pc, #536]	; (8004538 <UART_SetConfig+0x2e0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d123      	bne.n	800436a <UART_SetConfig+0x112>
 8004322:	4b84      	ldr	r3, [pc, #528]	; (8004534 <UART_SetConfig+0x2dc>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800432a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800432e:	d012      	beq.n	8004356 <UART_SetConfig+0xfe>
 8004330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004334:	d802      	bhi.n	800433c <UART_SetConfig+0xe4>
 8004336:	2b00      	cmp	r3, #0
 8004338:	d007      	beq.n	800434a <UART_SetConfig+0xf2>
 800433a:	e012      	b.n	8004362 <UART_SetConfig+0x10a>
 800433c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004340:	d00c      	beq.n	800435c <UART_SetConfig+0x104>
 8004342:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004346:	d003      	beq.n	8004350 <UART_SetConfig+0xf8>
 8004348:	e00b      	b.n	8004362 <UART_SetConfig+0x10a>
 800434a:	2300      	movs	r3, #0
 800434c:	77fb      	strb	r3, [r7, #31]
 800434e:	e089      	b.n	8004464 <UART_SetConfig+0x20c>
 8004350:	2302      	movs	r3, #2
 8004352:	77fb      	strb	r3, [r7, #31]
 8004354:	e086      	b.n	8004464 <UART_SetConfig+0x20c>
 8004356:	2304      	movs	r3, #4
 8004358:	77fb      	strb	r3, [r7, #31]
 800435a:	e083      	b.n	8004464 <UART_SetConfig+0x20c>
 800435c:	2308      	movs	r3, #8
 800435e:	77fb      	strb	r3, [r7, #31]
 8004360:	e080      	b.n	8004464 <UART_SetConfig+0x20c>
 8004362:	2310      	movs	r3, #16
 8004364:	77fb      	strb	r3, [r7, #31]
 8004366:	bf00      	nop
 8004368:	e07c      	b.n	8004464 <UART_SetConfig+0x20c>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a73      	ldr	r2, [pc, #460]	; (800453c <UART_SetConfig+0x2e4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d123      	bne.n	80043bc <UART_SetConfig+0x164>
 8004374:	4b6f      	ldr	r3, [pc, #444]	; (8004534 <UART_SetConfig+0x2dc>)
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800437c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004380:	d012      	beq.n	80043a8 <UART_SetConfig+0x150>
 8004382:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004386:	d802      	bhi.n	800438e <UART_SetConfig+0x136>
 8004388:	2b00      	cmp	r3, #0
 800438a:	d007      	beq.n	800439c <UART_SetConfig+0x144>
 800438c:	e012      	b.n	80043b4 <UART_SetConfig+0x15c>
 800438e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004392:	d00c      	beq.n	80043ae <UART_SetConfig+0x156>
 8004394:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004398:	d003      	beq.n	80043a2 <UART_SetConfig+0x14a>
 800439a:	e00b      	b.n	80043b4 <UART_SetConfig+0x15c>
 800439c:	2300      	movs	r3, #0
 800439e:	77fb      	strb	r3, [r7, #31]
 80043a0:	e060      	b.n	8004464 <UART_SetConfig+0x20c>
 80043a2:	2302      	movs	r3, #2
 80043a4:	77fb      	strb	r3, [r7, #31]
 80043a6:	e05d      	b.n	8004464 <UART_SetConfig+0x20c>
 80043a8:	2304      	movs	r3, #4
 80043aa:	77fb      	strb	r3, [r7, #31]
 80043ac:	e05a      	b.n	8004464 <UART_SetConfig+0x20c>
 80043ae:	2308      	movs	r3, #8
 80043b0:	77fb      	strb	r3, [r7, #31]
 80043b2:	e057      	b.n	8004464 <UART_SetConfig+0x20c>
 80043b4:	2310      	movs	r3, #16
 80043b6:	77fb      	strb	r3, [r7, #31]
 80043b8:	bf00      	nop
 80043ba:	e053      	b.n	8004464 <UART_SetConfig+0x20c>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a5f      	ldr	r2, [pc, #380]	; (8004540 <UART_SetConfig+0x2e8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d123      	bne.n	800440e <UART_SetConfig+0x1b6>
 80043c6:	4b5b      	ldr	r3, [pc, #364]	; (8004534 <UART_SetConfig+0x2dc>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80043ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043d2:	d012      	beq.n	80043fa <UART_SetConfig+0x1a2>
 80043d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043d8:	d802      	bhi.n	80043e0 <UART_SetConfig+0x188>
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d007      	beq.n	80043ee <UART_SetConfig+0x196>
 80043de:	e012      	b.n	8004406 <UART_SetConfig+0x1ae>
 80043e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043e4:	d00c      	beq.n	8004400 <UART_SetConfig+0x1a8>
 80043e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043ea:	d003      	beq.n	80043f4 <UART_SetConfig+0x19c>
 80043ec:	e00b      	b.n	8004406 <UART_SetConfig+0x1ae>
 80043ee:	2300      	movs	r3, #0
 80043f0:	77fb      	strb	r3, [r7, #31]
 80043f2:	e037      	b.n	8004464 <UART_SetConfig+0x20c>
 80043f4:	2302      	movs	r3, #2
 80043f6:	77fb      	strb	r3, [r7, #31]
 80043f8:	e034      	b.n	8004464 <UART_SetConfig+0x20c>
 80043fa:	2304      	movs	r3, #4
 80043fc:	77fb      	strb	r3, [r7, #31]
 80043fe:	e031      	b.n	8004464 <UART_SetConfig+0x20c>
 8004400:	2308      	movs	r3, #8
 8004402:	77fb      	strb	r3, [r7, #31]
 8004404:	e02e      	b.n	8004464 <UART_SetConfig+0x20c>
 8004406:	2310      	movs	r3, #16
 8004408:	77fb      	strb	r3, [r7, #31]
 800440a:	bf00      	nop
 800440c:	e02a      	b.n	8004464 <UART_SetConfig+0x20c>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a4c      	ldr	r2, [pc, #304]	; (8004544 <UART_SetConfig+0x2ec>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d123      	bne.n	8004460 <UART_SetConfig+0x208>
 8004418:	4b46      	ldr	r3, [pc, #280]	; (8004534 <UART_SetConfig+0x2dc>)
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004420:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004424:	d012      	beq.n	800444c <UART_SetConfig+0x1f4>
 8004426:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800442a:	d802      	bhi.n	8004432 <UART_SetConfig+0x1da>
 800442c:	2b00      	cmp	r3, #0
 800442e:	d007      	beq.n	8004440 <UART_SetConfig+0x1e8>
 8004430:	e012      	b.n	8004458 <UART_SetConfig+0x200>
 8004432:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004436:	d00c      	beq.n	8004452 <UART_SetConfig+0x1fa>
 8004438:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800443c:	d003      	beq.n	8004446 <UART_SetConfig+0x1ee>
 800443e:	e00b      	b.n	8004458 <UART_SetConfig+0x200>
 8004440:	2300      	movs	r3, #0
 8004442:	77fb      	strb	r3, [r7, #31]
 8004444:	e00e      	b.n	8004464 <UART_SetConfig+0x20c>
 8004446:	2302      	movs	r3, #2
 8004448:	77fb      	strb	r3, [r7, #31]
 800444a:	e00b      	b.n	8004464 <UART_SetConfig+0x20c>
 800444c:	2304      	movs	r3, #4
 800444e:	77fb      	strb	r3, [r7, #31]
 8004450:	e008      	b.n	8004464 <UART_SetConfig+0x20c>
 8004452:	2308      	movs	r3, #8
 8004454:	77fb      	strb	r3, [r7, #31]
 8004456:	e005      	b.n	8004464 <UART_SetConfig+0x20c>
 8004458:	2310      	movs	r3, #16
 800445a:	77fb      	strb	r3, [r7, #31]
 800445c:	bf00      	nop
 800445e:	e001      	b.n	8004464 <UART_SetConfig+0x20c>
 8004460:	2310      	movs	r3, #16
 8004462:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800446c:	d16e      	bne.n	800454c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800446e:	7ffb      	ldrb	r3, [r7, #31]
 8004470:	2b08      	cmp	r3, #8
 8004472:	d828      	bhi.n	80044c6 <UART_SetConfig+0x26e>
 8004474:	a201      	add	r2, pc, #4	; (adr r2, 800447c <UART_SetConfig+0x224>)
 8004476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447a:	bf00      	nop
 800447c:	080044a1 	.word	0x080044a1
 8004480:	080044a9 	.word	0x080044a9
 8004484:	080044b1 	.word	0x080044b1
 8004488:	080044c7 	.word	0x080044c7
 800448c:	080044b7 	.word	0x080044b7
 8004490:	080044c7 	.word	0x080044c7
 8004494:	080044c7 	.word	0x080044c7
 8004498:	080044c7 	.word	0x080044c7
 800449c:	080044bf 	.word	0x080044bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044a0:	f7ff fb96 	bl	8003bd0 <HAL_RCC_GetPCLK1Freq>
 80044a4:	61b8      	str	r0, [r7, #24]
        break;
 80044a6:	e013      	b.n	80044d0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044a8:	f7ff fbb4 	bl	8003c14 <HAL_RCC_GetPCLK2Freq>
 80044ac:	61b8      	str	r0, [r7, #24]
        break;
 80044ae:	e00f      	b.n	80044d0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044b0:	4b25      	ldr	r3, [pc, #148]	; (8004548 <UART_SetConfig+0x2f0>)
 80044b2:	61bb      	str	r3, [r7, #24]
        break;
 80044b4:	e00c      	b.n	80044d0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044b6:	f7ff fb15 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 80044ba:	61b8      	str	r0, [r7, #24]
        break;
 80044bc:	e008      	b.n	80044d0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044c2:	61bb      	str	r3, [r7, #24]
        break;
 80044c4:	e004      	b.n	80044d0 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	77bb      	strb	r3, [r7, #30]
        break;
 80044ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 8086 	beq.w	80045e4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	005a      	lsls	r2, r3, #1
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	085b      	lsrs	r3, r3, #1
 80044e2:	441a      	add	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	2b0f      	cmp	r3, #15
 80044f4:	d916      	bls.n	8004524 <UART_SetConfig+0x2cc>
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fc:	d212      	bcs.n	8004524 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	b29b      	uxth	r3, r3
 8004502:	f023 030f 	bic.w	r3, r3, #15
 8004506:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	085b      	lsrs	r3, r3, #1
 800450c:	b29b      	uxth	r3, r3
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	b29a      	uxth	r2, r3
 8004514:	89fb      	ldrh	r3, [r7, #14]
 8004516:	4313      	orrs	r3, r2
 8004518:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	89fa      	ldrh	r2, [r7, #14]
 8004520:	60da      	str	r2, [r3, #12]
 8004522:	e05f      	b.n	80045e4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	77bb      	strb	r3, [r7, #30]
 8004528:	e05c      	b.n	80045e4 <UART_SetConfig+0x38c>
 800452a:	bf00      	nop
 800452c:	efff69f3 	.word	0xefff69f3
 8004530:	40013800 	.word	0x40013800
 8004534:	40021000 	.word	0x40021000
 8004538:	40004400 	.word	0x40004400
 800453c:	40004800 	.word	0x40004800
 8004540:	40004c00 	.word	0x40004c00
 8004544:	40005000 	.word	0x40005000
 8004548:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 800454c:	7ffb      	ldrb	r3, [r7, #31]
 800454e:	2b08      	cmp	r3, #8
 8004550:	d827      	bhi.n	80045a2 <UART_SetConfig+0x34a>
 8004552:	a201      	add	r2, pc, #4	; (adr r2, 8004558 <UART_SetConfig+0x300>)
 8004554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004558:	0800457d 	.word	0x0800457d
 800455c:	08004585 	.word	0x08004585
 8004560:	0800458d 	.word	0x0800458d
 8004564:	080045a3 	.word	0x080045a3
 8004568:	08004593 	.word	0x08004593
 800456c:	080045a3 	.word	0x080045a3
 8004570:	080045a3 	.word	0x080045a3
 8004574:	080045a3 	.word	0x080045a3
 8004578:	0800459b 	.word	0x0800459b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800457c:	f7ff fb28 	bl	8003bd0 <HAL_RCC_GetPCLK1Freq>
 8004580:	61b8      	str	r0, [r7, #24]
        break;
 8004582:	e013      	b.n	80045ac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004584:	f7ff fb46 	bl	8003c14 <HAL_RCC_GetPCLK2Freq>
 8004588:	61b8      	str	r0, [r7, #24]
        break;
 800458a:	e00f      	b.n	80045ac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800458c:	4b1b      	ldr	r3, [pc, #108]	; (80045fc <UART_SetConfig+0x3a4>)
 800458e:	61bb      	str	r3, [r7, #24]
        break;
 8004590:	e00c      	b.n	80045ac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004592:	f7ff faa7 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8004596:	61b8      	str	r0, [r7, #24]
        break;
 8004598:	e008      	b.n	80045ac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800459a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800459e:	61bb      	str	r3, [r7, #24]
        break;
 80045a0:	e004      	b.n	80045ac <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	77bb      	strb	r3, [r7, #30]
        break;
 80045aa:	bf00      	nop
    }

    if (pclk != 0U)
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d018      	beq.n	80045e4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	085a      	lsrs	r2, r3, #1
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	441a      	add	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	2b0f      	cmp	r3, #15
 80045cc:	d908      	bls.n	80045e0 <UART_SetConfig+0x388>
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d4:	d204      	bcs.n	80045e0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	60da      	str	r2, [r3, #12]
 80045de:	e001      	b.n	80045e4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80045f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3720      	adds	r7, #32
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	007a1200 	.word	0x007a1200

08004600 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	f003 0320 	and.w	r3, r3, #32
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d01a      	beq.n	8004716 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046fe:	d10a      	bne.n	8004716 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	605a      	str	r2, [r3, #4]
  }
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af02      	add	r7, sp, #8
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004754:	f7fc fe78 	bl	8001448 <HAL_GetTick>
 8004758:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b08      	cmp	r3, #8
 8004766:	d10e      	bne.n	8004786 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004768:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f82d 	bl	80047d6 <UART_WaitOnFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e023      	b.n	80047ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b04      	cmp	r3, #4
 8004792:	d10e      	bne.n	80047b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004794:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f817 	bl	80047d6 <UART_WaitOnFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e00d      	b.n	80047ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2220      	movs	r2, #32
 80047b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2220      	movs	r2, #32
 80047bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	603b      	str	r3, [r7, #0]
 80047e2:	4613      	mov	r3, r2
 80047e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e6:	e05e      	b.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ee:	d05a      	beq.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f0:	f7fc fe2a 	bl	8001448 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d302      	bcc.n	8004806 <UART_WaitOnFlagUntilTimeout+0x30>
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d11b      	bne.n	800483e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004814:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0201 	bic.w	r2, r2, #1
 8004824:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2220      	movs	r2, #32
 800482a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2220      	movs	r2, #32
 8004830:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e043      	b.n	80048c6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d02c      	beq.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800485a:	d124      	bne.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004864:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004874:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0201 	bic.w	r2, r2, #1
 8004884:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2220      	movs	r2, #32
 800488a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2220      	movs	r2, #32
 8004890:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2220      	movs	r2, #32
 8004896:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e00f      	b.n	80048c6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69da      	ldr	r2, [r3, #28]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4013      	ands	r3, r2
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	bf0c      	ite	eq
 80048b6:	2301      	moveq	r3, #1
 80048b8:	2300      	movne	r3, #0
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	79fb      	ldrb	r3, [r7, #7]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d091      	beq.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <__libc_init_array>:
 80048d0:	b570      	push	{r4, r5, r6, lr}
 80048d2:	4e0d      	ldr	r6, [pc, #52]	; (8004908 <__libc_init_array+0x38>)
 80048d4:	4c0d      	ldr	r4, [pc, #52]	; (800490c <__libc_init_array+0x3c>)
 80048d6:	1ba4      	subs	r4, r4, r6
 80048d8:	10a4      	asrs	r4, r4, #2
 80048da:	2500      	movs	r5, #0
 80048dc:	42a5      	cmp	r5, r4
 80048de:	d109      	bne.n	80048f4 <__libc_init_array+0x24>
 80048e0:	4e0b      	ldr	r6, [pc, #44]	; (8004910 <__libc_init_array+0x40>)
 80048e2:	4c0c      	ldr	r4, [pc, #48]	; (8004914 <__libc_init_array+0x44>)
 80048e4:	f000 f878 	bl	80049d8 <_init>
 80048e8:	1ba4      	subs	r4, r4, r6
 80048ea:	10a4      	asrs	r4, r4, #2
 80048ec:	2500      	movs	r5, #0
 80048ee:	42a5      	cmp	r5, r4
 80048f0:	d105      	bne.n	80048fe <__libc_init_array+0x2e>
 80048f2:	bd70      	pop	{r4, r5, r6, pc}
 80048f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048f8:	4798      	blx	r3
 80048fa:	3501      	adds	r5, #1
 80048fc:	e7ee      	b.n	80048dc <__libc_init_array+0xc>
 80048fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004902:	4798      	blx	r3
 8004904:	3501      	adds	r5, #1
 8004906:	e7f2      	b.n	80048ee <__libc_init_array+0x1e>
 8004908:	08004af0 	.word	0x08004af0
 800490c:	08004af0 	.word	0x08004af0
 8004910:	08004af0 	.word	0x08004af0
 8004914:	08004af4 	.word	0x08004af4

08004918 <__itoa>:
 8004918:	1e93      	subs	r3, r2, #2
 800491a:	2b22      	cmp	r3, #34	; 0x22
 800491c:	b510      	push	{r4, lr}
 800491e:	460c      	mov	r4, r1
 8004920:	d904      	bls.n	800492c <__itoa+0x14>
 8004922:	2300      	movs	r3, #0
 8004924:	700b      	strb	r3, [r1, #0]
 8004926:	461c      	mov	r4, r3
 8004928:	4620      	mov	r0, r4
 800492a:	bd10      	pop	{r4, pc}
 800492c:	2a0a      	cmp	r2, #10
 800492e:	d109      	bne.n	8004944 <__itoa+0x2c>
 8004930:	2800      	cmp	r0, #0
 8004932:	da07      	bge.n	8004944 <__itoa+0x2c>
 8004934:	232d      	movs	r3, #45	; 0x2d
 8004936:	700b      	strb	r3, [r1, #0]
 8004938:	4240      	negs	r0, r0
 800493a:	2101      	movs	r1, #1
 800493c:	4421      	add	r1, r4
 800493e:	f000 f80d 	bl	800495c <__utoa>
 8004942:	e7f1      	b.n	8004928 <__itoa+0x10>
 8004944:	2100      	movs	r1, #0
 8004946:	e7f9      	b.n	800493c <__itoa+0x24>

08004948 <itoa>:
 8004948:	f7ff bfe6 	b.w	8004918 <__itoa>

0800494c <memset>:
 800494c:	4402      	add	r2, r0
 800494e:	4603      	mov	r3, r0
 8004950:	4293      	cmp	r3, r2
 8004952:	d100      	bne.n	8004956 <memset+0xa>
 8004954:	4770      	bx	lr
 8004956:	f803 1b01 	strb.w	r1, [r3], #1
 800495a:	e7f9      	b.n	8004950 <memset+0x4>

0800495c <__utoa>:
 800495c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800495e:	4b1d      	ldr	r3, [pc, #116]	; (80049d4 <__utoa+0x78>)
 8004960:	b08b      	sub	sp, #44	; 0x2c
 8004962:	4605      	mov	r5, r0
 8004964:	460c      	mov	r4, r1
 8004966:	466e      	mov	r6, sp
 8004968:	f103 0c20 	add.w	ip, r3, #32
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	6859      	ldr	r1, [r3, #4]
 8004970:	4637      	mov	r7, r6
 8004972:	c703      	stmia	r7!, {r0, r1}
 8004974:	3308      	adds	r3, #8
 8004976:	4563      	cmp	r3, ip
 8004978:	463e      	mov	r6, r7
 800497a:	d1f7      	bne.n	800496c <__utoa+0x10>
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	791b      	ldrb	r3, [r3, #4]
 8004980:	713b      	strb	r3, [r7, #4]
 8004982:	1e93      	subs	r3, r2, #2
 8004984:	2b22      	cmp	r3, #34	; 0x22
 8004986:	6038      	str	r0, [r7, #0]
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	d904      	bls.n	8004998 <__utoa+0x3c>
 800498e:	7023      	strb	r3, [r4, #0]
 8004990:	461c      	mov	r4, r3
 8004992:	4620      	mov	r0, r4
 8004994:	b00b      	add	sp, #44	; 0x2c
 8004996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004998:	1e66      	subs	r6, r4, #1
 800499a:	fbb5 f0f2 	udiv	r0, r5, r2
 800499e:	af0a      	add	r7, sp, #40	; 0x28
 80049a0:	fb02 5510 	mls	r5, r2, r0, r5
 80049a4:	443d      	add	r5, r7
 80049a6:	1c59      	adds	r1, r3, #1
 80049a8:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80049ac:	f806 5f01 	strb.w	r5, [r6, #1]!
 80049b0:	4605      	mov	r5, r0
 80049b2:	b968      	cbnz	r0, 80049d0 <__utoa+0x74>
 80049b4:	5460      	strb	r0, [r4, r1]
 80049b6:	4423      	add	r3, r4
 80049b8:	4622      	mov	r2, r4
 80049ba:	1b19      	subs	r1, r3, r4
 80049bc:	1b10      	subs	r0, r2, r4
 80049be:	4281      	cmp	r1, r0
 80049c0:	dde7      	ble.n	8004992 <__utoa+0x36>
 80049c2:	7811      	ldrb	r1, [r2, #0]
 80049c4:	7818      	ldrb	r0, [r3, #0]
 80049c6:	f802 0b01 	strb.w	r0, [r2], #1
 80049ca:	f803 1901 	strb.w	r1, [r3], #-1
 80049ce:	e7f4      	b.n	80049ba <__utoa+0x5e>
 80049d0:	460b      	mov	r3, r1
 80049d2:	e7e2      	b.n	800499a <__utoa+0x3e>
 80049d4:	08004ac8 	.word	0x08004ac8

080049d8 <_init>:
 80049d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049da:	bf00      	nop
 80049dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049de:	bc08      	pop	{r3}
 80049e0:	469e      	mov	lr, r3
 80049e2:	4770      	bx	lr

080049e4 <_fini>:
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e6:	bf00      	nop
 80049e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ea:	bc08      	pop	{r3}
 80049ec:	469e      	mov	lr, r3
 80049ee:	4770      	bx	lr
