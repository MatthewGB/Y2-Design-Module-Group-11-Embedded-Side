
First_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b41c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  0800b5b8  0800b5b8  0001b5b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbc8  0800bbc8  00020bf8  2**0
                  CONTENTS
  4 .ARM          00000000  0800bbc8  0800bbc8  00020bf8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bbc8  0800bbc8  00020bf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbc8  0800bbc8  0001bbc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbcc  0800bbcc  0001bbcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000bf8  20000000  0800bbd0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c680  20000bf8  0800c7c8  00020bf8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d278  0800c7c8  0002d278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020bf8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c64  00000000  00000000  00020c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026f9  00000000  00000000  0003488c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011a8  00000000  00000000  00036f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010b8  00000000  00000000  00038130  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022adf  00000000  00000000  000391e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011aee  00000000  00000000  0005bcc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d62d3  00000000  00000000  0006d7b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00143a88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005530  00000000  00000000  00143b04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000bf8 	.word	0x20000bf8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800b59c 	.word	0x0800b59c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000bfc 	.word	0x20000bfc
 80001d4:	0800b59c 	.word	0x0800b59c

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	; 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033a:	f1a4 0401 	sub.w	r4, r4, #1
 800033e:	d1e9      	bne.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_dmul>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000582:	bf1d      	ittte	ne
 8000584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000588:	ea94 0f0c 	teqne	r4, ip
 800058c:	ea95 0f0c 	teqne	r5, ip
 8000590:	f000 f8de 	bleq	8000750 <__aeabi_dmul+0x1dc>
 8000594:	442c      	add	r4, r5
 8000596:	ea81 0603 	eor.w	r6, r1, r3
 800059a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a6:	bf18      	it	ne
 80005a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b4:	d038      	beq.n	8000628 <__aeabi_dmul+0xb4>
 80005b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ca:	f04f 0600 	mov.w	r6, #0
 80005ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d2:	f09c 0f00 	teq	ip, #0
 80005d6:	bf18      	it	ne
 80005d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e8:	d204      	bcs.n	80005f4 <__aeabi_dmul+0x80>
 80005ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ee:	416d      	adcs	r5, r5
 80005f0:	eb46 0606 	adc.w	r6, r6, r6
 80005f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000608:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800060c:	bf88      	it	hi
 800060e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000612:	d81e      	bhi.n	8000652 <__aeabi_dmul+0xde>
 8000614:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800062c:	ea46 0101 	orr.w	r1, r6, r1
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	ea81 0103 	eor.w	r1, r1, r3
 8000638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800063c:	bfc2      	ittt	gt
 800063e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000646:	bd70      	popgt	{r4, r5, r6, pc}
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f04f 0e00 	mov.w	lr, #0
 8000650:	3c01      	subs	r4, #1
 8000652:	f300 80ab 	bgt.w	80007ac <__aeabi_dmul+0x238>
 8000656:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065a:	bfde      	ittt	le
 800065c:	2000      	movle	r0, #0
 800065e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000662:	bd70      	pople	{r4, r5, r6, pc}
 8000664:	f1c4 0400 	rsb	r4, r4, #0
 8000668:	3c20      	subs	r4, #32
 800066a:	da35      	bge.n	80006d8 <__aeabi_dmul+0x164>
 800066c:	340c      	adds	r4, #12
 800066e:	dc1b      	bgt.n	80006a8 <__aeabi_dmul+0x134>
 8000670:	f104 0414 	add.w	r4, r4, #20
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f305 	lsl.w	r3, r0, r5
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	fa21 f604 	lsr.w	r6, r1, r4
 8000698:	eb42 0106 	adc.w	r1, r2, r6
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 040c 	rsb	r4, r4, #12
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f304 	lsl.w	r3, r0, r4
 80006b4:	fa20 f005 	lsr.w	r0, r0, r5
 80006b8:	fa01 f204 	lsl.w	r2, r1, r4
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	f141 0100 	adc.w	r1, r1, #0
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f205 	lsl.w	r2, r0, r5
 80006e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e4:	fa20 f304 	lsr.w	r3, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea43 0302 	orr.w	r3, r3, r2
 80006f0:	fa21 f004 	lsr.w	r0, r1, r4
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	fa21 f204 	lsr.w	r2, r1, r4
 80006fc:	ea20 0002 	bic.w	r0, r0, r2
 8000700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f094 0f00 	teq	r4, #0
 8000714:	d10f      	bne.n	8000736 <__aeabi_dmul+0x1c2>
 8000716:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071a:	0040      	lsls	r0, r0, #1
 800071c:	eb41 0101 	adc.w	r1, r1, r1
 8000720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3c01      	subeq	r4, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1a6>
 800072a:	ea41 0106 	orr.w	r1, r1, r6
 800072e:	f095 0f00 	teq	r5, #0
 8000732:	bf18      	it	ne
 8000734:	4770      	bxne	lr
 8000736:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	eb43 0303 	adc.w	r3, r3, r3
 8000740:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000744:	bf08      	it	eq
 8000746:	3d01      	subeq	r5, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1c6>
 800074a:	ea43 0306 	orr.w	r3, r3, r6
 800074e:	4770      	bx	lr
 8000750:	ea94 0f0c 	teq	r4, ip
 8000754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000758:	bf18      	it	ne
 800075a:	ea95 0f0c 	teqne	r5, ip
 800075e:	d00c      	beq.n	800077a <__aeabi_dmul+0x206>
 8000760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076a:	d1d1      	bne.n	8000710 <__aeabi_dmul+0x19c>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077e:	bf06      	itte	eq
 8000780:	4610      	moveq	r0, r2
 8000782:	4619      	moveq	r1, r3
 8000784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000788:	d019      	beq.n	80007be <__aeabi_dmul+0x24a>
 800078a:	ea94 0f0c 	teq	r4, ip
 800078e:	d102      	bne.n	8000796 <__aeabi_dmul+0x222>
 8000790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000794:	d113      	bne.n	80007be <__aeabi_dmul+0x24a>
 8000796:	ea95 0f0c 	teq	r5, ip
 800079a:	d105      	bne.n	80007a8 <__aeabi_dmul+0x234>
 800079c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a0:	bf1c      	itt	ne
 80007a2:	4610      	movne	r0, r2
 80007a4:	4619      	movne	r1, r3
 80007a6:	d10a      	bne.n	80007be <__aeabi_dmul+0x24a>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__aeabi_ddiv>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d6:	bf1d      	ittte	ne
 80007d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007dc:	ea94 0f0c 	teqne	r4, ip
 80007e0:	ea95 0f0c 	teqne	r5, ip
 80007e4:	f000 f8a7 	bleq	8000936 <__aeabi_ddiv+0x16e>
 80007e8:	eba4 0405 	sub.w	r4, r4, r5
 80007ec:	ea81 0e03 	eor.w	lr, r1, r3
 80007f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f8:	f000 8088 	beq.w	800090c <__aeabi_ddiv+0x144>
 80007fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000800:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800080c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000818:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800081c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000820:	429d      	cmp	r5, r3
 8000822:	bf08      	it	eq
 8000824:	4296      	cmpeq	r6, r2
 8000826:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082e:	d202      	bcs.n	8000836 <__aeabi_ddiv+0x6e>
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	1ab6      	subs	r6, r6, r2
 8000838:	eb65 0503 	sbc.w	r5, r5, r3
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000846:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 000c 	orrcs.w	r0, r0, ip
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a8:	d018      	beq.n	80008dc <__aeabi_ddiv+0x114>
 80008aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c6:	d1c0      	bne.n	800084a <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	d10b      	bne.n	80008e6 <__aeabi_ddiv+0x11e>
 80008ce:	ea41 0100 	orr.w	r1, r1, r0
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008da:	e7b6      	b.n	800084a <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	bf04      	itt	eq
 80008e2:	4301      	orreq	r1, r0
 80008e4:	2000      	moveq	r0, #0
 80008e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ea:	bf88      	it	hi
 80008ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f0:	f63f aeaf 	bhi.w	8000652 <__aeabi_dmul+0xde>
 80008f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f8:	bf04      	itt	eq
 80008fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000918:	bfc2      	ittt	gt
 800091a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000922:	bd70      	popgt	{r4, r5, r6, pc}
 8000924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000928:	f04f 0e00 	mov.w	lr, #0
 800092c:	3c01      	subs	r4, #1
 800092e:	e690      	b.n	8000652 <__aeabi_dmul+0xde>
 8000930:	ea45 0e06 	orr.w	lr, r5, r6
 8000934:	e68d      	b.n	8000652 <__aeabi_dmul+0xde>
 8000936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093a:	ea94 0f0c 	teq	r4, ip
 800093e:	bf08      	it	eq
 8000940:	ea95 0f0c 	teqeq	r5, ip
 8000944:	f43f af3b 	beq.w	80007be <__aeabi_dmul+0x24a>
 8000948:	ea94 0f0c 	teq	r4, ip
 800094c:	d10a      	bne.n	8000964 <__aeabi_ddiv+0x19c>
 800094e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000952:	f47f af34 	bne.w	80007be <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	f47f af25 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e72c      	b.n	80007be <__aeabi_dmul+0x24a>
 8000964:	ea95 0f0c 	teq	r5, ip
 8000968:	d106      	bne.n	8000978 <__aeabi_ddiv+0x1b0>
 800096a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096e:	f43f aefd 	beq.w	800076c <__aeabi_dmul+0x1f8>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e722      	b.n	80007be <__aeabi_dmul+0x24a>
 8000978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000982:	f47f aec5 	bne.w	8000710 <__aeabi_dmul+0x19c>
 8000986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098a:	f47f af0d 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800098e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000992:	f47f aeeb 	bne.w	800076c <__aeabi_dmul+0x1f8>
 8000996:	e712      	b.n	80007be <__aeabi_dmul+0x24a>

08000998 <__gedf2>:
 8000998:	f04f 3cff 	mov.w	ip, #4294967295
 800099c:	e006      	b.n	80009ac <__cmpdf2+0x4>
 800099e:	bf00      	nop

080009a0 <__ledf2>:
 80009a0:	f04f 0c01 	mov.w	ip, #1
 80009a4:	e002      	b.n	80009ac <__cmpdf2+0x4>
 80009a6:	bf00      	nop

080009a8 <__cmpdf2>:
 80009a8:	f04f 0c01 	mov.w	ip, #1
 80009ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009bc:	bf18      	it	ne
 80009be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c2:	d01b      	beq.n	80009fc <__cmpdf2+0x54>
 80009c4:	b001      	add	sp, #4
 80009c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ca:	bf0c      	ite	eq
 80009cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d0:	ea91 0f03 	teqne	r1, r3
 80009d4:	bf02      	ittt	eq
 80009d6:	ea90 0f02 	teqeq	r0, r2
 80009da:	2000      	moveq	r0, #0
 80009dc:	4770      	bxeq	lr
 80009de:	f110 0f00 	cmn.w	r0, #0
 80009e2:	ea91 0f03 	teq	r1, r3
 80009e6:	bf58      	it	pl
 80009e8:	4299      	cmppl	r1, r3
 80009ea:	bf08      	it	eq
 80009ec:	4290      	cmpeq	r0, r2
 80009ee:	bf2c      	ite	cs
 80009f0:	17d8      	asrcs	r0, r3, #31
 80009f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009f6:	f040 0001 	orr.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__cmpdf2+0x64>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d107      	bne.n	8000a1c <__cmpdf2+0x74>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d1d6      	bne.n	80009c4 <__cmpdf2+0x1c>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d0d3      	beq.n	80009c4 <__cmpdf2+0x1c>
 8000a1c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdrcmple>:
 8000a24:	4684      	mov	ip, r0
 8000a26:	4610      	mov	r0, r2
 8000a28:	4662      	mov	r2, ip
 8000a2a:	468c      	mov	ip, r1
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4663      	mov	r3, ip
 8000a30:	e000      	b.n	8000a34 <__aeabi_cdcmpeq>
 8000a32:	bf00      	nop

08000a34 <__aeabi_cdcmpeq>:
 8000a34:	b501      	push	{r0, lr}
 8000a36:	f7ff ffb7 	bl	80009a8 <__cmpdf2>
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	bf48      	it	mi
 8000a3e:	f110 0f00 	cmnmi.w	r0, #0
 8000a42:	bd01      	pop	{r0, pc}

08000a44 <__aeabi_dcmpeq>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff fff4 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a4c:	bf0c      	ite	eq
 8000a4e:	2001      	moveq	r0, #1
 8000a50:	2000      	movne	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmplt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffea 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmple>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffe0 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpge>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffce 	bl	8000a24 <__aeabi_cdrcmple>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpgt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffc4 	bl	8000a24 <__aeabi_cdrcmple>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2uiz>:
 8000af8:	004a      	lsls	r2, r1, #1
 8000afa:	d211      	bcs.n	8000b20 <__aeabi_d2uiz+0x28>
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d211      	bcs.n	8000b26 <__aeabi_d2uiz+0x2e>
 8000b02:	d50d      	bpl.n	8000b20 <__aeabi_d2uiz+0x28>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d40e      	bmi.n	8000b2c <__aeabi_d2uiz+0x34>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d102      	bne.n	8000b32 <__aeabi_d2uiz+0x3a>
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	4770      	bx	lr
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	4770      	bx	lr

08000b38 <serialOut>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void serialOut(UART_HandleTypeDef *huart, char _out[], uint32_t len){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(huart, (uint8_t *) _out, len, 100);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	2364      	movs	r3, #100	; 0x64
 8000b4a:	68b9      	ldr	r1, [r7, #8]
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	f007 fc79 	bl	8008444 <HAL_UART_Transmit>
}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <printStr>:

void printStr(char str[])
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	serialOut(&huart2, str, strlen(str));
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff fb41 	bl	80001ec <strlen>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	4803      	ldr	r0, [pc, #12]	; (8000b80 <printStr+0x24>)
 8000b72:	f7ff ffe1 	bl	8000b38 <serialOut>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000d1a8 	.word	0x2000d1a8

08000b84 <printChar>:

void printChar(char chr)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	char str1[2] = {chr , '\0'};
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	753b      	strb	r3, [r7, #20]
 8000b92:	2300      	movs	r3, #0
 8000b94:	757b      	strb	r3, [r7, #21]
	char str2[5] = "";
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	743b      	strb	r3, [r7, #16]
	strcpy(str2,str1);
 8000b9e:	f107 0214 	add.w	r2, r7, #20
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f008 fe11 	bl	80097d0 <strcpy>
	serialOut(&huart2, str2, strlen(str2));
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fb1a 	bl	80001ec <strlen>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <printChar+0x4c>)
 8000bc2:	f7ff ffb9 	bl	8000b38 <serialOut>
}
 8000bc6:	bf00      	nop
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000d1a8 	.word	0x2000d1a8

08000bd4 <printInt>:

void printInt(int i)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	char str[5];
	itoa(i, str, 10);
 8000bdc:	f107 0308 	add.w	r3, r7, #8
 8000be0:	220a      	movs	r2, #10
 8000be2:	4619      	mov	r1, r3
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f008 fde9 	bl	80097bc <itoa>
	serialOut(&huart2, str, strlen(str));
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fafc 	bl	80001ec <strlen>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4803      	ldr	r0, [pc, #12]	; (8000c0c <printInt+0x38>)
 8000bfe:	f7ff ff9b 	bl	8000b38 <serialOut>
}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	2000d1a8 	.word	0x2000d1a8

08000c10 <printStrLn>:

/**
 * Print string and go to next line (currently broken)
 */
void printStrLn(char str[])
{
 8000c10:	b5b0      	push	{r4, r5, r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	466b      	mov	r3, sp
 8000c1a:	461d      	mov	r5, r3
	char newstr[strlen(str)+5];
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff fae5 	bl	80001ec <strlen>
 8000c22:	4603      	mov	r3, r0
 8000c24:	1d58      	adds	r0, r3, #5
 8000c26:	4603      	mov	r3, r0
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	4601      	mov	r1, r0
 8000c2e:	f04f 0200 	mov.w	r2, #0
 8000c32:	f04f 0300 	mov.w	r3, #0
 8000c36:	f04f 0400 	mov.w	r4, #0
 8000c3a:	00d4      	lsls	r4, r2, #3
 8000c3c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000c40:	00cb      	lsls	r3, r1, #3
 8000c42:	4601      	mov	r1, r0
 8000c44:	f04f 0200 	mov.w	r2, #0
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	f04f 0400 	mov.w	r4, #0
 8000c50:	00d4      	lsls	r4, r2, #3
 8000c52:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000c56:	00cb      	lsls	r3, r1, #3
 8000c58:	1dc3      	adds	r3, r0, #7
 8000c5a:	08db      	lsrs	r3, r3, #3
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	ebad 0d03 	sub.w	sp, sp, r3
 8000c62:	466b      	mov	r3, sp
 8000c64:	3300      	adds	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
	strcpy(newstr, str);
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f008 fdaf 	bl	80097d0 <strcpy>
	strcat(newstr, "\r\n");
 8000c72:	68bc      	ldr	r4, [r7, #8]
 8000c74:	4620      	mov	r0, r4
 8000c76:	f7ff fab9 	bl	80001ec <strlen>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4423      	add	r3, r4
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <printStrLn+0x98>)
 8000c80:	8811      	ldrh	r1, [r2, #0]
 8000c82:	7892      	ldrb	r2, [r2, #2]
 8000c84:	8019      	strh	r1, [r3, #0]
 8000c86:	709a      	strb	r2, [r3, #2]
	serialOut(&huart2, str, strlen(newstr));
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff faae 	bl	80001ec <strlen>
 8000c90:	4603      	mov	r3, r0
 8000c92:	461a      	mov	r2, r3
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <printStrLn+0x9c>)
 8000c98:	f7ff ff4e 	bl	8000b38 <serialOut>
 8000c9c:	46ad      	mov	sp, r5
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	0800b5b8 	.word	0x0800b5b8
 8000cac:	2000d1a8 	.word	0x2000d1a8

08000cb0 <printWaveform>:

void printWaveform(short data[], int size)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
	for(int i = 0; i<size; i++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	e00e      	b.n	8000cde <printWaveform+0x2e>
	{
		printStr("|");
 8000cc0:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <printWaveform+0x40>)
 8000cc2:	f7ff ff4b 	bl	8000b5c <printStr>
		printInt(data[i]);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff7e 	bl	8000bd4 <printInt>
	for(int i = 0; i<size; i++)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	dbec      	blt.n	8000cc0 <printWaveform+0x10>
	}
}
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	0800b5bc 	.word	0x0800b5bc

08000cf4 <readSerial>:
 * Read "readsize" number of characters from serial port, and outputs to outputString
 * Returns 1 if timed out, else 0
 * printchar echoes the typed character back to the PC
 */
int readSerial(char* outputString, int readsize, int timeout, int printchar)
{
 8000cf4:	b5b0      	push	{r4, r5, r7, lr}
 8000cf6:	b08c      	sub	sp, #48	; 0x30
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	466b      	mov	r3, sp
 8000d04:	461d      	mov	r5, r3
	int starttime = HAL_GetTick();
 8000d06:	f001 ff5b 	bl	8002bc0 <HAL_GetTick>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	61fb      	str	r3, [r7, #28]
	char rxedString[readsize+1];
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	1c58      	adds	r0, r3, #1
 8000d12:	1e43      	subs	r3, r0, #1
 8000d14:	61bb      	str	r3, [r7, #24]
 8000d16:	4603      	mov	r3, r0
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f04f 0200 	mov.w	r2, #0
 8000d1e:	f04f 0300 	mov.w	r3, #0
 8000d22:	f04f 0400 	mov.w	r4, #0
 8000d26:	00d4      	lsls	r4, r2, #3
 8000d28:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000d2c:	00cb      	lsls	r3, r1, #3
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4619      	mov	r1, r3
 8000d32:	f04f 0200 	mov.w	r2, #0
 8000d36:	f04f 0300 	mov.w	r3, #0
 8000d3a:	f04f 0400 	mov.w	r4, #0
 8000d3e:	00d4      	lsls	r4, r2, #3
 8000d40:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000d44:	00cb      	lsls	r3, r1, #3
 8000d46:	4603      	mov	r3, r0
 8000d48:	3307      	adds	r3, #7
 8000d4a:	08db      	lsrs	r3, r3, #3
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	ebad 0d03 	sub.w	sp, sp, r3
 8000d52:	466b      	mov	r3, sp
 8000d54:	3300      	adds	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
	for(int i = 0; i<readsize; i++)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d5c:	e007      	b.n	8000d6e <readSerial+0x7a>
	{
		rxedString[i] = '#';
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	4413      	add	r3, r2
 8000d64:	2223      	movs	r2, #35	; 0x23
 8000d66:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<readsize; i++)
 8000d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	dbf3      	blt.n	8000d5e <readSerial+0x6a>
	}
	char rxedChar[1] = "#";
 8000d76:	2323      	movs	r3, #35	; 0x23
 8000d78:	743b      	strb	r3, [r7, #16]
	int charnum = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
	while (1)
	{
		  HAL_UART_Receive(&huart2, (uint8_t *)rxedChar, 1, 100);
 8000d7e:	f107 0110 	add.w	r1, r7, #16
 8000d82:	2364      	movs	r3, #100	; 0x64
 8000d84:	2201      	movs	r2, #1
 8000d86:	482b      	ldr	r0, [pc, #172]	; (8000e34 <readSerial+0x140>)
 8000d88:	f007 fbf0 	bl	800856c <HAL_UART_Receive>

		  if (rxedChar[0] == '\n' || rxedChar[0] == '\r' || rxedChar[0] == ' ') {
 8000d8c:	7c3b      	ldrb	r3, [r7, #16]
 8000d8e:	2b0a      	cmp	r3, #10
 8000d90:	d02b      	beq.n	8000dea <readSerial+0xf6>
 8000d92:	7c3b      	ldrb	r3, [r7, #16]
 8000d94:	2b0d      	cmp	r3, #13
 8000d96:	d028      	beq.n	8000dea <readSerial+0xf6>
 8000d98:	7c3b      	ldrb	r3, [r7, #16]
 8000d9a:	2b20      	cmp	r3, #32
 8000d9c:	d025      	beq.n	8000dea <readSerial+0xf6>
			  break;
		  }

		  if(rxedChar[0] != '#')
 8000d9e:	7c3b      	ldrb	r3, [r7, #16]
 8000da0:	2b23      	cmp	r3, #35	; 0x23
 8000da2:	d011      	beq.n	8000dc8 <readSerial+0xd4>
		  {
			  rxedString[charnum] = rxedChar[0];
 8000da4:	7c39      	ldrb	r1, [r7, #16]
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000daa:	4413      	add	r3, r2
 8000dac:	460a      	mov	r2, r1
 8000dae:	701a      	strb	r2, [r3, #0]
			  charnum += 1;
 8000db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db2:	3301      	adds	r3, #1
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
			  if(printchar == 1)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d103      	bne.n	8000dc4 <readSerial+0xd0>
			  {
				  printChar(rxedChar[0]);
 8000dbc:	7c3b      	ldrb	r3, [r7, #16]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fee0 	bl	8000b84 <printChar>
			  }
			  rxedChar[0] = '#';
 8000dc4:	2323      	movs	r3, #35	; 0x23
 8000dc6:	743b      	strb	r3, [r7, #16]
		  }

		  if(rxedString[readsize-1] != '#')
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	697a      	ldr	r2, [r7, #20]
 8000dce:	5cd3      	ldrb	r3, [r2, r3]
 8000dd0:	2b23      	cmp	r3, #35	; 0x23
 8000dd2:	d109      	bne.n	8000de8 <readSerial+0xf4>
		  {
			  break; //String is full
		  }

		  if(HAL_GetTick()-starttime > timeout)
 8000dd4:	f001 fef4 	bl	8002bc0 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	1ad2      	subs	r2, r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d9cc      	bls.n	8000d7e <readSerial+0x8a>
		  {
			  return 1;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e020      	b.n	8000e2a <readSerial+0x136>
			  break; //String is full
 8000de8:	bf00      	nop
		  }
	}

	int truesize = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i<readsize; i++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
 8000df2:	e00b      	b.n	8000e0c <readSerial+0x118>
	{
		if(rxedString[i] != '#')
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	6a3b      	ldr	r3, [r7, #32]
 8000df8:	4413      	add	r3, r2
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b23      	cmp	r3, #35	; 0x23
 8000dfe:	d002      	beq.n	8000e06 <readSerial+0x112>
		{
			truesize += 1;
 8000e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e02:	3301      	adds	r3, #1
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i<readsize; i++)
 8000e06:	6a3b      	ldr	r3, [r7, #32]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	623b      	str	r3, [r7, #32]
 8000e0c:	6a3a      	ldr	r2, [r7, #32]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	dbef      	blt.n	8000df4 <readSerial+0x100>
		}
	}
	rxedString[truesize] = 0; //Terminates string correctly
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e18:	4413      	add	r3, r2
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]

	strcpy(outputString, rxedString);
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	4619      	mov	r1, r3
 8000e22:	68f8      	ldr	r0, [r7, #12]
 8000e24:	f008 fcd4 	bl	80097d0 <strcpy>
	return 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	46ad      	mov	sp, r5
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3730      	adds	r7, #48	; 0x30
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bdb0      	pop	{r4, r5, r7, pc}
 8000e34:	2000d1a8 	.word	0x2000d1a8

08000e38 <compressWaveform>:

/**
 * Either extrapolates between samples to fit resolution_x or uses multiple samples per pixel
 */
void compressWaveform(short* data, short *newdata, int samples_taken, int resolution_x, int output_offset)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
 8000e44:	603b      	str	r3, [r7, #0]
	if(output_offset != 0)
 8000e46:	6a3b      	ldr	r3, [r7, #32]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d002      	beq.n	8000e52 <compressWaveform+0x1a>
	{
		output_offset += 1;
 8000e4c:	6a3b      	ldr	r3, [r7, #32]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	623b      	str	r3, [r7, #32]
	}
	if(debug)
 8000e52:	4b29      	ldr	r3, [pc, #164]	; (8000ef8 <compressWaveform+0xc0>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d008      	beq.n	8000e6c <compressWaveform+0x34>
	{
		printStr("Compressing waveform... at offset");
 8000e5a:	4828      	ldr	r0, [pc, #160]	; (8000efc <compressWaveform+0xc4>)
 8000e5c:	f7ff fe7e 	bl	8000b5c <printStr>
		printInt(output_offset);
 8000e60:	6a38      	ldr	r0, [r7, #32]
 8000e62:	f7ff feb7 	bl	8000bd4 <printInt>
		printStr("\n\r");
 8000e66:	4826      	ldr	r0, [pc, #152]	; (8000f00 <compressWaveform+0xc8>)
 8000e68:	f7ff fe78 	bl	8000b5c <printStr>
			printStr("\n\r");
			newdata[current_pixel+output_offset] = sample;
		}
		printStr("2");
	}*/
	for(int current_pixel = output_offset; current_pixel<resolution_x; current_pixel++)
 8000e6c:	6a3b      	ldr	r3, [r7, #32]
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	e033      	b.n	8000eda <compressWaveform+0xa2>
	{
		if(debug)
 8000e72:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <compressWaveform+0xc0>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d005      	beq.n	8000e86 <compressWaveform+0x4e>
		{
			printStr("\n\r");
 8000e7a:	4821      	ldr	r0, [pc, #132]	; (8000f00 <compressWaveform+0xc8>)
 8000e7c:	f7ff fe6e 	bl	8000b5c <printStr>
			printInt(current_pixel);
 8000e80:	6978      	ldr	r0, [r7, #20]
 8000e82:	f7ff fea7 	bl	8000bd4 <printInt>
		}
		int samplenum = ((float)(current_pixel-output_offset)/(resolution_x-output_offset))*samples_taken;
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	6a3b      	ldr	r3, [r7, #32]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	ee07 3a90 	vmov	s15, r3
 8000e90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e94:	683a      	ldr	r2, [r7, #0]
 8000e96:	6a3b      	ldr	r3, [r7, #32]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	ee07 3a90 	vmov	s15, r3
 8000e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	ee07 3a90 	vmov	s15, r3
 8000eac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eb8:	ee17 3a90 	vmov	r3, s15
 8000ebc:	613b      	str	r3, [r7, #16]
		newdata[current_pixel] = data[samplenum];
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	441a      	add	r2, r3
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	68b9      	ldr	r1, [r7, #8]
 8000ecc:	440b      	add	r3, r1
 8000ece:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ed2:	801a      	strh	r2, [r3, #0]
	for(int current_pixel = output_offset; current_pixel<resolution_x; current_pixel++)
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	dbc7      	blt.n	8000e72 <compressWaveform+0x3a>
	}
	if(debug)
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <compressWaveform+0xc0>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d002      	beq.n	8000ef0 <compressWaveform+0xb8>
	{
		printStrLn("Compression complete \n\r");
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <compressWaveform+0xcc>)
 8000eec:	f7ff fe90 	bl	8000c10 <printStrLn>
			current_pixel++;
		}
		newdata[current_pixel] += data[current_sample];
		current_sample++;
	}*/
}
 8000ef0:	bf00      	nop
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000c14 	.word	0x20000c14
 8000efc:	0800b5c0 	.word	0x0800b5c0
 8000f00:	0800b5e4 	.word	0x0800b5e4
 8000f04:	0800b5e8 	.word	0x0800b5e8

08000f08 <getDataAndWait>:

void getDataAndWait(short* data, int samples)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
	sample_completed = 0;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <getDataAndWait+0x38>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)data, samples);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	6879      	ldr	r1, [r7, #4]
 8000f1e:	4809      	ldr	r0, [pc, #36]	; (8000f44 <getDataAndWait+0x3c>)
 8000f20:	f002 fab8 	bl	8003494 <HAL_ADC_Start_DMA>
	while(sample_completed == 0)
 8000f24:	e001      	b.n	8000f2a <getDataAndWait+0x22>
	{
		int a = 1;
 8000f26:	2301      	movs	r3, #1
 8000f28:	60fb      	str	r3, [r7, #12]
	while(sample_completed == 0)
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <getDataAndWait+0x38>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d0f9      	beq.n	8000f26 <getDataAndWait+0x1e>
	}
	HAL_ADC_Stop_DMA(&hadc1);
 8000f32:	4804      	ldr	r0, [pc, #16]	; (8000f44 <getDataAndWait+0x3c>)
 8000f34:	f002 fbca 	bl	80036cc <HAL_ADC_Stop_DMA>
}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000c24 	.word	0x20000c24
 8000f44:	20000d78 	.word	0x20000d78

08000f48 <getTriggeredWaveform>:

int getTriggeredWaveform(short* data_out, int resolution_x, double sample_time)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	ed87 0b00 	vstr	d0, [r7]
	interrupted = 0;
 8000f56:	4b23      	ldr	r3, [pc, #140]	; (8000fe4 <getTriggeredWaveform+0x9c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]

	//HAL_TIM_Base_Start_IT(&htim4);
	char rx[2];
	HAL_UART_Receive_IT(&huart2,rx,1);
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	2201      	movs	r2, #1
 8000f62:	4619      	mov	r1, r3
 8000f64:	4820      	ldr	r0, [pc, #128]	; (8000fe8 <getTriggeredWaveform+0xa0>)
 8000f66:	f007 fbd2 	bl	800870e <HAL_UART_Receive_IT>

	HAL_ADC_Start(&hadc1);
 8000f6a:	4820      	ldr	r0, [pc, #128]	; (8000fec <getTriggeredWaveform+0xa4>)
 8000f6c:	f002 f84c 	bl	8003008 <HAL_ADC_Start>
	while(1)
	{
		HAL_ADC_PollForConversion(&hadc1, 10);
 8000f70:	210a      	movs	r1, #10
 8000f72:	481e      	ldr	r0, [pc, #120]	; (8000fec <getTriggeredWaveform+0xa4>)
 8000f74:	f002 f994 	bl	80032a0 <HAL_ADC_PollForConversion>
		uint32_t value = HAL_ADC_GetValue(&hadc1);
 8000f78:	481c      	ldr	r0, [pc, #112]	; (8000fec <getTriggeredWaveform+0xa4>)
 8000f7a:	f002 fc09 	bl	8003790 <HAL_ADC_GetValue>
 8000f7e:	6178      	str	r0, [r7, #20]
		if(trigger_rising == 1)
 8000f80:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <getTriggeredWaveform+0xa8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d109      	bne.n	8000f9c <getTriggeredWaveform+0x54>
		{
			if(value > trigger_level)
 8000f88:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <getTriggeredWaveform+0xac>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d90d      	bls.n	8000fb0 <getTriggeredWaveform+0x68>
			{
				HAL_ADC_Stop(&hadc1);
 8000f94:	4815      	ldr	r0, [pc, #84]	; (8000fec <getTriggeredWaveform+0xa4>)
 8000f96:	f002 f94d 	bl	8003234 <HAL_ADC_Stop>
				break;
 8000f9a:	e00f      	b.n	8000fbc <getTriggeredWaveform+0x74>
			}
		}
		else
		{
			if(value < trigger_level)
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <getTriggeredWaveform+0xac>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d203      	bcs.n	8000fb0 <getTriggeredWaveform+0x68>
			{
				HAL_ADC_Stop(&hadc1);
 8000fa8:	4810      	ldr	r0, [pc, #64]	; (8000fec <getTriggeredWaveform+0xa4>)
 8000faa:	f002 f943 	bl	8003234 <HAL_ADC_Stop>
				break;
 8000fae:	e005      	b.n	8000fbc <getTriggeredWaveform+0x74>
			}
		}
		if(interrupted == 1)
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <getTriggeredWaveform+0x9c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d000      	beq.n	8000fba <getTriggeredWaveform+0x72>
	{
 8000fb8:	e7da      	b.n	8000f70 <getTriggeredWaveform+0x28>
		{
			break;
 8000fba:	bf00      	nop
		}
	}
	if(interrupted == 0)
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <getTriggeredWaveform+0x9c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d10a      	bne.n	8000fda <getTriggeredWaveform+0x92>
	{
		getWaveform(data_out, resolution_x, sample_time);
 8000fc4:	ed97 0b00 	vldr	d0, [r7]
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f000 f814 	bl	8000ff8 <getWaveform>
		HAL_UART_AbortReceive_IT(&huart2);
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <getTriggeredWaveform+0xa0>)
 8000fd2:	f007 fbd9 	bl	8008788 <HAL_UART_AbortReceive_IT>
		return 1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e000      	b.n	8000fdc <getTriggeredWaveform+0x94>
	}
	else
	{
		return 0;
 8000fda:	2300      	movs	r3, #0
	}
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000a18 	.word	0x20000a18
 8000fe8:	2000d1a8 	.word	0x2000d1a8
 8000fec:	20000d78 	.word	0x20000d78
 8000ff0:	20000a14 	.word	0x20000a14
 8000ff4:	20000a10 	.word	0x20000a10

08000ff8 <getWaveform>:

/**
 * Get the set amount of samples in the timeframe, and store in data
 */
void getWaveform(short* data_out, int resolution_x, double sample_time)
{
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	b090      	sub	sp, #64	; 0x40
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	ed87 0b00 	vstr	d0, [r7]
	//double a = timeframe/0.0251;

	//samples_needed = 220000*timeframe*0.001;
	//printInt(samples_needed);
	//int samples_needed = (double)samples_per_ms*timeframe;
	int samples_needed = (sample_time/7.96)*MAX_SAMPLES; //At 19.5 cycles per reading, 25000 samples are taken in 8ms
 8001006:	a3c6      	add	r3, pc, #792	; (adr r3, 8001320 <getWaveform+0x328>)
 8001008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001010:	f7ff fbda 	bl	80007c8 <__aeabi_ddiv>
 8001014:	4603      	mov	r3, r0
 8001016:	460c      	mov	r4, r1
 8001018:	4625      	mov	r5, r4
 800101a:	461c      	mov	r4, r3
 800101c:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fa3d 	bl	80004a0 <__aeabi_i2d>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4620      	mov	r0, r4
 800102c:	4629      	mov	r1, r5
 800102e:	f7ff faa1 	bl	8000574 <__aeabi_dmul>
 8001032:	4603      	mov	r3, r0
 8001034:	460c      	mov	r4, r1
 8001036:	4618      	mov	r0, r3
 8001038:	4621      	mov	r1, r4
 800103a:	f7ff fd35 	bl	8000aa8 <__aeabi_d2iz>
 800103e:	4603      	mov	r3, r0
 8001040:	633b      	str	r3, [r7, #48]	; 0x30
	if(samples_needed < MAX_SAMPLES)
 8001042:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001048:	4293      	cmp	r3, r2
 800104a:	da3b      	bge.n	80010c4 <getWaveform+0xcc>
	{
		if(debug)
 800104c:	4baa      	ldr	r3, [pc, #680]	; (80012f8 <getWaveform+0x300>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d008      	beq.n	8001066 <getWaveform+0x6e>
		{
			printStr("High sample rate mode\n\r");
 8001054:	48a9      	ldr	r0, [pc, #676]	; (80012fc <getWaveform+0x304>)
 8001056:	f7ff fd81 	bl	8000b5c <printStr>
			printInt(samples_needed);
 800105a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800105c:	f7ff fdba 	bl	8000bd4 <printInt>
			printStr(" samples needed\n\r");
 8001060:	48a7      	ldr	r0, [pc, #668]	; (8001300 <getWaveform+0x308>)
 8001062:	f7ff fd7b 	bl	8000b5c <printStr>
		}
		sample_completed = 0;
 8001066:	4ba7      	ldr	r3, [pc, #668]	; (8001304 <getWaveform+0x30c>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)data, samples_needed);
 800106c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800106e:	461a      	mov	r2, r3
 8001070:	49a5      	ldr	r1, [pc, #660]	; (8001308 <getWaveform+0x310>)
 8001072:	48a6      	ldr	r0, [pc, #664]	; (800130c <getWaveform+0x314>)
 8001074:	f002 fa0e 	bl	8003494 <HAL_ADC_Start_DMA>
		unsigned long t1 = DWT->CYCCNT; //32400
 8001078:	4ba5      	ldr	r3, [pc, #660]	; (8001310 <getWaveform+0x318>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	61fb      	str	r3, [r7, #28]
		while(sample_completed == 0)
 800107e:	e001      	b.n	8001084 <getWaveform+0x8c>
		{
			int a = 1;
 8001080:	2301      	movs	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
		while(sample_completed == 0)
 8001084:	4b9f      	ldr	r3, [pc, #636]	; (8001304 <getWaveform+0x30c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0f9      	beq.n	8001080 <getWaveform+0x88>
		}
		unsigned long time2 = (DWT->CYCCNT);
 800108c:	4ba0      	ldr	r3, [pc, #640]	; (8001310 <getWaveform+0x318>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	61bb      	str	r3, [r7, #24]
		HAL_ADC_Stop_DMA(&hadc1);
 8001092:	489e      	ldr	r0, [pc, #632]	; (800130c <getWaveform+0x314>)
 8001094:	f002 fb1a 	bl	80036cc <HAL_ADC_Stop_DMA>
		//printStr("Time:");
		//printInt(time2);
		/*
		printStr("Time2:");
		printInt(t1);*/
		if(debug)
 8001098:	4b97      	ldr	r3, [pc, #604]	; (80012f8 <getWaveform+0x300>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d008      	beq.n	80010b2 <getWaveform+0xba>
		{
			printStr("time delta:");
 80010a0:	489c      	ldr	r0, [pc, #624]	; (8001314 <getWaveform+0x31c>)
 80010a2:	f7ff fd5b 	bl	8000b5c <printStr>
			printInt(time2-t1);
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fd91 	bl	8000bd4 <printInt>

		//HAL_ADC_Start_IT(&hadc1);
		//printStr("Data:");
		//printInt(data[0]);

		compressWaveform(data, data_out, samples_needed, resolution_x, 0);
 80010b2:	2300      	movs	r3, #0
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010ba:	68f9      	ldr	r1, [r7, #12]
 80010bc:	4892      	ldr	r0, [pc, #584]	; (8001308 <getWaveform+0x310>)
 80010be:	f7ff febb 	bl	8000e38 <compressWaveform>
			printInt(datasets_done);
			printStr(" out of ");
			printInt(datasets_needed);*/
		}
	}
}
 80010c2:	e233      	b.n	800152c <getWaveform+0x534>
		if(debug)
 80010c4:	4b8c      	ldr	r3, [pc, #560]	; (80012f8 <getWaveform+0x300>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d008      	beq.n	80010de <getWaveform+0xe6>
			printStr("mode 2\n\r");
 80010cc:	4892      	ldr	r0, [pc, #584]	; (8001318 <getWaveform+0x320>)
 80010ce:	f7ff fd45 	bl	8000b5c <printStr>
			printInt(samples_needed);
 80010d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010d4:	f7ff fd7e 	bl	8000bd4 <printInt>
			printStr(" samples needed\n\r");
 80010d8:	4889      	ldr	r0, [pc, #548]	; (8001300 <getWaveform+0x308>)
 80010da:	f7ff fd3f 	bl	8000b5c <printStr>
		double datasets_needed = (double)samples_needed/MAX_SAMPLES;
 80010de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010e0:	f7ff f9de 	bl	80004a0 <__aeabi_i2d>
 80010e4:	4604      	mov	r4, r0
 80010e6:	460d      	mov	r5, r1
 80010e8:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f9d7 	bl	80004a0 <__aeabi_i2d>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4620      	mov	r0, r4
 80010f8:	4629      	mov	r1, r5
 80010fa:	f7ff fb65 	bl	80007c8 <__aeabi_ddiv>
 80010fe:	4603      	mov	r3, r0
 8001100:	460c      	mov	r4, r1
 8001102:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		int datasets_done = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	637b      	str	r3, [r7, #52]	; 0x34
		int samples_per_dataset = ((double)MAX_SAMPLES/samples_needed)*resolution_x;
 800110a:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff f9c6 	bl	80004a0 <__aeabi_i2d>
 8001114:	4604      	mov	r4, r0
 8001116:	460d      	mov	r5, r1
 8001118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800111a:	f7ff f9c1 	bl	80004a0 <__aeabi_i2d>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4620      	mov	r0, r4
 8001124:	4629      	mov	r1, r5
 8001126:	f7ff fb4f 	bl	80007c8 <__aeabi_ddiv>
 800112a:	4603      	mov	r3, r0
 800112c:	460c      	mov	r4, r1
 800112e:	4625      	mov	r5, r4
 8001130:	461c      	mov	r4, r3
 8001132:	68b8      	ldr	r0, [r7, #8]
 8001134:	f7ff f9b4 	bl	80004a0 <__aeabi_i2d>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4620      	mov	r0, r4
 800113e:	4629      	mov	r1, r5
 8001140:	f7ff fa18 	bl	8000574 <__aeabi_dmul>
 8001144:	4603      	mov	r3, r0
 8001146:	460c      	mov	r4, r1
 8001148:	4618      	mov	r0, r3
 800114a:	4621      	mov	r1, r4
 800114c:	f7ff fcac 	bl	8000aa8 <__aeabi_d2iz>
 8001150:	4603      	mov	r3, r0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
		while(datasets_done < datasets_needed)
 8001154:	e1db      	b.n	800150e <getWaveform+0x516>
			sample_completed = 0;
 8001156:	4b6b      	ldr	r3, [pc, #428]	; (8001304 <getWaveform+0x30c>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
			if(datasets_needed - datasets_done > 1)
 800115c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800115e:	f7ff f99f 	bl	80004a0 <__aeabi_i2d>
 8001162:	4603      	mov	r3, r0
 8001164:	460c      	mov	r4, r1
 8001166:	461a      	mov	r2, r3
 8001168:	4623      	mov	r3, r4
 800116a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800116e:	f7ff f849 	bl	8000204 <__aeabi_dsub>
 8001172:	4603      	mov	r3, r0
 8001174:	460c      	mov	r4, r1
 8001176:	4618      	mov	r0, r3
 8001178:	4621      	mov	r1, r4
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	4b67      	ldr	r3, [pc, #412]	; (800131c <getWaveform+0x324>)
 8001180:	f7ff fc88 	bl	8000a94 <__aeabi_dcmpgt>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 80ce 	beq.w	8001328 <getWaveform+0x330>
				getDataAndWait(data, MAX_SAMPLES);
 800118c:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8001190:	4619      	mov	r1, r3
 8001192:	485d      	ldr	r0, [pc, #372]	; (8001308 <getWaveform+0x310>)
 8001194:	f7ff feb8 	bl	8000f08 <getDataAndWait>
				compressWaveform(data, data_out, MAX_SAMPLES, (((float)(MAX_SAMPLES*(datasets_done+1))/(samples_needed))*resolution_x), ((float)(MAX_SAMPLES*datasets_done)/(samples_needed))*resolution_x);//datasets_done * samples_per_dataset);
 8001198:	f246 11a8 	movw	r1, #25000	; 0x61a8
 800119c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800119e:	3301      	adds	r3, #1
 80011a0:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80011a4:	fb02 f303 	mul.w	r3, r2, r3
 80011a8:	ee07 3a90 	vmov	s15, r3
 80011ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	ee07 3a90 	vmov	s15, r3
 80011c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011cc:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 80011d0:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80011d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d6:	fb03 f302 	mul.w	r3, r3, r2
 80011da:	ee07 3a90 	vmov	s15, r3
 80011de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e4:	ee07 3a90 	vmov	s15, r3
 80011e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	ee07 3a90 	vmov	s15, r3
 80011f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001202:	ee17 3a90 	vmov	r3, s15
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	ee16 3a10 	vmov	r3, s12
 800120c:	460a      	mov	r2, r1
 800120e:	68f9      	ldr	r1, [r7, #12]
 8001210:	483d      	ldr	r0, [pc, #244]	; (8001308 <getWaveform+0x310>)
 8001212:	f7ff fe11 	bl	8000e38 <compressWaveform>
				if(datasets_done != 0)
 8001216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 8175 	beq.w	8001508 <getWaveform+0x510>
					data_out[(int)((((float)(MAX_SAMPLES*(datasets_done))/(samples_needed))*resolution_x))+1] = data[25];
 800121e:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001224:	fb03 f302 	mul.w	r3, r3, r2
 8001228:	ee07 3a90 	vmov	s15, r3
 800122c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001232:	ee07 3a90 	vmov	s15, r3
 8001236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	ee07 3a90 	vmov	s15, r3
 8001244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800124c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001250:	ee17 3a90 	vmov	r3, s15
 8001254:	3301      	adds	r3, #1
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	4413      	add	r3, r2
 800125c:	4a2a      	ldr	r2, [pc, #168]	; (8001308 <getWaveform+0x310>)
 800125e:	f9b2 2032 	ldrsh.w	r2, [r2, #50]	; 0x32
 8001262:	801a      	strh	r2, [r3, #0]
					data_out[(int)((((float)(MAX_SAMPLES*(datasets_done))/(samples_needed))*resolution_x))] = data[20];
 8001264:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800126a:	fb03 f302 	mul.w	r3, r3, r2
 800126e:	ee07 3a90 	vmov	s15, r3
 8001272:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001278:	ee07 3a90 	vmov	s15, r3
 800127c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001280:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	ee07 3a90 	vmov	s15, r3
 800128a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800128e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001292:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001296:	ee17 3a90 	vmov	r3, s15
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	4413      	add	r3, r2
 80012a0:	4a19      	ldr	r2, [pc, #100]	; (8001308 <getWaveform+0x310>)
 80012a2:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	; 0x28
 80012a6:	801a      	strh	r2, [r3, #0]
					data_out[(int)((((float)(MAX_SAMPLES*(datasets_done))/(samples_needed))*resolution_x))-1] = data[15];
 80012a8:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80012ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ae:	fb03 f302 	mul.w	r3, r3, r2
 80012b2:	ee07 3a90 	vmov	s15, r3
 80012b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	ee07 3a90 	vmov	s15, r3
 80012ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012da:	ee17 3a90 	vmov	r3, s15
 80012de:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80012e2:	3b01      	subs	r3, #1
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	4413      	add	r3, r2
 80012ea:	4a07      	ldr	r2, [pc, #28]	; (8001308 <getWaveform+0x310>)
 80012ec:	f9b2 201e 	ldrsh.w	r2, [r2, #30]
 80012f0:	801a      	strh	r2, [r3, #0]
 80012f2:	e109      	b.n	8001508 <getWaveform+0x510>
 80012f4:	f3af 8000 	nop.w
 80012f8:	20000c14 	.word	0x20000c14
 80012fc:	0800b600 	.word	0x0800b600
 8001300:	0800b618 	.word	0x0800b618
 8001304:	20000c24 	.word	0x20000c24
 8001308:	20000e0c 	.word	0x20000e0c
 800130c:	20000d78 	.word	0x20000d78
 8001310:	e0001000 	.word	0xe0001000
 8001314:	0800b62c 	.word	0x0800b62c
 8001318:	0800b638 	.word	0x0800b638
 800131c:	3ff00000 	.word	0x3ff00000
 8001320:	3d70a3d7 	.word	0x3d70a3d7
 8001324:	401fd70a 	.word	0x401fd70a
				if(debug)
 8001328:	4b82      	ldr	r3, [pc, #520]	; (8001534 <getWaveform+0x53c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d03d      	beq.n	80013ac <getWaveform+0x3b4>
					printStr("Datasets left: ");
 8001330:	4881      	ldr	r0, [pc, #516]	; (8001538 <getWaveform+0x540>)
 8001332:	f7ff fc13 	bl	8000b5c <printStr>
					printInt((int)((datasets_needed - datasets_done)*100));
 8001336:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001338:	f7ff f8b2 	bl	80004a0 <__aeabi_i2d>
 800133c:	4603      	mov	r3, r0
 800133e:	460c      	mov	r4, r1
 8001340:	461a      	mov	r2, r3
 8001342:	4623      	mov	r3, r4
 8001344:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001348:	f7fe ff5c 	bl	8000204 <__aeabi_dsub>
 800134c:	4603      	mov	r3, r0
 800134e:	460c      	mov	r4, r1
 8001350:	4618      	mov	r0, r3
 8001352:	4621      	mov	r1, r4
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	4b78      	ldr	r3, [pc, #480]	; (800153c <getWaveform+0x544>)
 800135a:	f7ff f90b 	bl	8000574 <__aeabi_dmul>
 800135e:	4603      	mov	r3, r0
 8001360:	460c      	mov	r4, r1
 8001362:	4618      	mov	r0, r3
 8001364:	4621      	mov	r1, r4
 8001366:	f7ff fb9f 	bl	8000aa8 <__aeabi_d2iz>
 800136a:	4603      	mov	r3, r0
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fc31 	bl	8000bd4 <printInt>
					printStr("samples left as %");
 8001372:	4873      	ldr	r0, [pc, #460]	; (8001540 <getWaveform+0x548>)
 8001374:	f7ff fbf2 	bl	8000b5c <printStr>
					printInt(((float)(MAX_SAMPLES*datasets_done)/(samples_needed))*100);
 8001378:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800137c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800137e:	fb03 f302 	mul.w	r3, r3, r2
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800138a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001398:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8001544 <getWaveform+0x54c>
 800139c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a4:	ee17 0a90 	vmov	r0, s15
 80013a8:	f7ff fc14 	bl	8000bd4 <printInt>
				int samples_current_dataset = MAX_SAMPLES*(datasets_needed - datasets_done);
 80013ac:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f875 	bl	80004a0 <__aeabi_i2d>
 80013b6:	4604      	mov	r4, r0
 80013b8:	460d      	mov	r5, r1
 80013ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013bc:	f7ff f870 	bl	80004a0 <__aeabi_i2d>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013c8:	f7fe ff1c 	bl	8000204 <__aeabi_dsub>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4620      	mov	r0, r4
 80013d2:	4629      	mov	r1, r5
 80013d4:	f7ff f8ce 	bl	8000574 <__aeabi_dmul>
 80013d8:	4603      	mov	r3, r0
 80013da:	460c      	mov	r4, r1
 80013dc:	4618      	mov	r0, r3
 80013de:	4621      	mov	r1, r4
 80013e0:	f7ff fb62 	bl	8000aa8 <__aeabi_d2iz>
 80013e4:	4603      	mov	r3, r0
 80013e6:	623b      	str	r3, [r7, #32]
				getDataAndWait(data, samples_current_dataset);
 80013e8:	6a39      	ldr	r1, [r7, #32]
 80013ea:	4857      	ldr	r0, [pc, #348]	; (8001548 <getWaveform+0x550>)
 80013ec:	f7ff fd8c 	bl	8000f08 <getDataAndWait>
				compressWaveform(data, data_out, samples_current_dataset, resolution_x, (((float)(MAX_SAMPLES*datasets_done)/(samples_needed))*resolution_x));
 80013f0:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80013f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f6:	fb03 f302 	mul.w	r3, r3, r2
 80013fa:	ee07 3a90 	vmov	s15, r3
 80013fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001404:	ee07 3a90 	vmov	s15, r3
 8001408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	ee07 3a90 	vmov	s15, r3
 8001416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001422:	ee17 3a90 	vmov	r3, s15
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	6a3a      	ldr	r2, [r7, #32]
 800142c:	68f9      	ldr	r1, [r7, #12]
 800142e:	4846      	ldr	r0, [pc, #280]	; (8001548 <getWaveform+0x550>)
 8001430:	f7ff fd02 	bl	8000e38 <compressWaveform>
				data_out[(int)((((float)(MAX_SAMPLES*(datasets_done))/(samples_needed))*resolution_x))+1] = data[25];
 8001434:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800143a:	fb03 f302 	mul.w	r3, r3, r2
 800143e:	ee07 3a90 	vmov	s15, r3
 8001442:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001448:	ee07 3a90 	vmov	s15, r3
 800144c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001450:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	ee07 3a90 	vmov	s15, r3
 800145a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800145e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001466:	ee17 3a90 	vmov	r3, s15
 800146a:	3301      	adds	r3, #1
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	4413      	add	r3, r2
 8001472:	4a35      	ldr	r2, [pc, #212]	; (8001548 <getWaveform+0x550>)
 8001474:	f9b2 2032 	ldrsh.w	r2, [r2, #50]	; 0x32
 8001478:	801a      	strh	r2, [r3, #0]
				data_out[(int)((((float)(MAX_SAMPLES*(datasets_done))/(samples_needed))*resolution_x))] = data[20];
 800147a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800147e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001480:	fb03 f302 	mul.w	r3, r3, r2
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800148c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800148e:	ee07 3a90 	vmov	s15, r3
 8001492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	ee07 3a90 	vmov	s15, r3
 80014a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ac:	ee17 3a90 	vmov	r3, s15
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	4413      	add	r3, r2
 80014b6:	4a24      	ldr	r2, [pc, #144]	; (8001548 <getWaveform+0x550>)
 80014b8:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	; 0x28
 80014bc:	801a      	strh	r2, [r3, #0]
				data_out[(int)((((float)(MAX_SAMPLES*(datasets_done))/(samples_needed))*resolution_x))-1] = data[15];
 80014be:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80014c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c4:	fb03 f302 	mul.w	r3, r3, r2
 80014c8:	ee07 3a90 	vmov	s15, r3
 80014cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014d2:	ee07 3a90 	vmov	s15, r3
 80014d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	ee07 3a90 	vmov	s15, r3
 80014e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014f0:	ee17 3a90 	vmov	r3, s15
 80014f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80014f8:	3b01      	subs	r3, #1
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	4413      	add	r3, r2
 8001500:	4a11      	ldr	r2, [pc, #68]	; (8001548 <getWaveform+0x550>)
 8001502:	f9b2 201e 	ldrsh.w	r2, [r2, #30]
 8001506:	801a      	strh	r2, [r3, #0]
			datasets_done++;
 8001508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800150a:	3301      	adds	r3, #1
 800150c:	637b      	str	r3, [r7, #52]	; 0x34
		while(datasets_done < datasets_needed)
 800150e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001510:	f7fe ffc6 	bl	80004a0 <__aeabi_i2d>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	461a      	mov	r2, r3
 800151a:	4623      	mov	r3, r4
 800151c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001520:	f7ff fab8 	bl	8000a94 <__aeabi_dcmpgt>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	f47f ae15 	bne.w	8001156 <getWaveform+0x15e>
}
 800152c:	bf00      	nop
 800152e:	3738      	adds	r7, #56	; 0x38
 8001530:	46bd      	mov	sp, r7
 8001532:	bdb0      	pop	{r4, r5, r7, pc}
 8001534:	20000c14 	.word	0x20000c14
 8001538:	0800b644 	.word	0x0800b644
 800153c:	40590000 	.word	0x40590000
 8001540:	0800b654 	.word	0x0800b654
 8001544:	42c80000 	.word	0x42c80000
 8001548:	20000e0c 	.word	0x20000e0c

0800154c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	sample_completed = 1;
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001556:	2201      	movs	r2, #1
 8001558:	601a      	str	r2, [r3, #0]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000c24 	.word	0x20000c24

0800156c <afgAmplitudeAdjustment>:
{
    HAL_ADC_IRQHandler(&hadc1);
}

void afgAmplitudeAdjustment(int new_amplitude)
{
 800156c:	b480      	push	{r7}
 800156e:	b087      	sub	sp, #28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	AFG_Amplitude = new_amplitude;
 8001574:	4a2a      	ldr	r2, [pc, #168]	; (8001620 <afgAmplitudeAdjustment+0xb4>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6013      	str	r3, [r2, #0]
	float ratio = AFG_Amplitude/3300.0f;
 800157a:	4b29      	ldr	r3, [pc, #164]	; (8001620 <afgAmplitudeAdjustment+0xb4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	ee07 3a90 	vmov	s15, r3
 8001582:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001586:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001624 <afgAmplitudeAdjustment+0xb8>
 800158a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800158e:	edc7 7a04 	vstr	s15, [r7, #16]
	for(int i = 0; i<128; i++)
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	e03a      	b.n	800160e <afgAmplitudeAdjustment+0xa2>
	{
		int previous_amplitude = LUT_CurrentWave[i];
 8001598:	4a23      	ldr	r2, [pc, #140]	; (8001628 <afgAmplitudeAdjustment+0xbc>)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a0:	60fb      	str	r3, [r7, #12]
		if(previous_amplitude > 2048)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015a8:	dd17      	ble.n	80015da <afgAmplitudeAdjustment+0x6e>
		{
			LUT_CurrentWave[i] = 2048+((previous_amplitude-2048)*ratio);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80015b0:	ee07 3a90 	vmov	s15, r3
 80015b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80015bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800162c <afgAmplitudeAdjustment+0xc0>
 80015c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015cc:	ee17 1a90 	vmov	r1, s15
 80015d0:	4a15      	ldr	r2, [pc, #84]	; (8001628 <afgAmplitudeAdjustment+0xbc>)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80015d8:	e016      	b.n	8001608 <afgAmplitudeAdjustment+0x9c>
		}
		else
		{
			LUT_CurrentWave[i] = 2048-((2048-previous_amplitude)*ratio);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80015ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800162c <afgAmplitudeAdjustment+0xc0>
 80015f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015fc:	ee17 1a90 	vmov	r1, s15
 8001600:	4a09      	ldr	r2, [pc, #36]	; (8001628 <afgAmplitudeAdjustment+0xbc>)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<128; i++)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	3301      	adds	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2b7f      	cmp	r3, #127	; 0x7f
 8001612:	ddc1      	ble.n	8001598 <afgAmplitudeAdjustment+0x2c>
		}
	}
}
 8001614:	bf00      	nop
 8001616:	371c      	adds	r7, #28
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	20000c1c 	.word	0x20000c1c
 8001624:	454e4000 	.word	0x454e4000
 8001628:	20000800 	.word	0x20000800
 800162c:	45000000 	.word	0x45000000

08001630 <changeAFGWaveform>:

void changeAFGWaveform(char* name)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	if(strcmp(name, "square") == 0)
 8001638:	4935      	ldr	r1, [pc, #212]	; (8001710 <changeAFGWaveform+0xe0>)
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7fe fdcc 	bl	80001d8 <strcmp>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d111      	bne.n	800166a <changeAFGWaveform+0x3a>
	{
		for(int i = 0; i<128; i++)
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	e00a      	b.n	8001662 <changeAFGWaveform+0x32>
		{
			LUT_CurrentWave[i] = LUT_SquareWave[i];
 800164c:	4a31      	ldr	r2, [pc, #196]	; (8001714 <changeAFGWaveform+0xe4>)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001654:	4930      	ldr	r1, [pc, #192]	; (8001718 <changeAFGWaveform+0xe8>)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i<128; i++)
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	3301      	adds	r3, #1
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2b7f      	cmp	r3, #127	; 0x7f
 8001666:	ddf1      	ble.n	800164c <changeAFGWaveform+0x1c>
	}
	else
	{
		printStr("Invalid waveform name");
	}
}
 8001668:	e04d      	b.n	8001706 <changeAFGWaveform+0xd6>
	else if(strcmp(name, "sine") == 0)
 800166a:	492c      	ldr	r1, [pc, #176]	; (800171c <changeAFGWaveform+0xec>)
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7fe fdb3 	bl	80001d8 <strcmp>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d111      	bne.n	800169c <changeAFGWaveform+0x6c>
		for(int i = 0; i<128; i++)
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	e00a      	b.n	8001694 <changeAFGWaveform+0x64>
			LUT_CurrentWave[i] = LUT_SineWave[i];
 800167e:	4a28      	ldr	r2, [pc, #160]	; (8001720 <changeAFGWaveform+0xf0>)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001686:	4924      	ldr	r1, [pc, #144]	; (8001718 <changeAFGWaveform+0xe8>)
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i<128; i++)
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	3301      	adds	r3, #1
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	2b7f      	cmp	r3, #127	; 0x7f
 8001698:	ddf1      	ble.n	800167e <changeAFGWaveform+0x4e>
}
 800169a:	e034      	b.n	8001706 <changeAFGWaveform+0xd6>
	else if(strcmp(name, "sawtooth") == 0)
 800169c:	4921      	ldr	r1, [pc, #132]	; (8001724 <changeAFGWaveform+0xf4>)
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7fe fd9a 	bl	80001d8 <strcmp>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d111      	bne.n	80016ce <changeAFGWaveform+0x9e>
		for(int i = 0; i<128; i++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	e00a      	b.n	80016c6 <changeAFGWaveform+0x96>
			LUT_CurrentWave[i] = LUT_SawtoothWave[i];
 80016b0:	4a1d      	ldr	r2, [pc, #116]	; (8001728 <changeAFGWaveform+0xf8>)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016b8:	4917      	ldr	r1, [pc, #92]	; (8001718 <changeAFGWaveform+0xe8>)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i<128; i++)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	3301      	adds	r3, #1
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2b7f      	cmp	r3, #127	; 0x7f
 80016ca:	ddf1      	ble.n	80016b0 <changeAFGWaveform+0x80>
}
 80016cc:	e01b      	b.n	8001706 <changeAFGWaveform+0xd6>
	else if(strcmp(name, "noise") == 0)
 80016ce:	4917      	ldr	r1, [pc, #92]	; (800172c <changeAFGWaveform+0xfc>)
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7fe fd81 	bl	80001d8 <strcmp>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d111      	bne.n	8001700 <changeAFGWaveform+0xd0>
		for(int i = 0; i<128; i++)
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	e00a      	b.n	80016f8 <changeAFGWaveform+0xc8>
			LUT_CurrentWave[i] = LUT_Noise[i];
 80016e2:	4a13      	ldr	r2, [pc, #76]	; (8001730 <changeAFGWaveform+0x100>)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016ea:	490b      	ldr	r1, [pc, #44]	; (8001718 <changeAFGWaveform+0xe8>)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i<128; i++)
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	3301      	adds	r3, #1
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	2b7f      	cmp	r3, #127	; 0x7f
 80016fc:	ddf1      	ble.n	80016e2 <changeAFGWaveform+0xb2>
}
 80016fe:	e002      	b.n	8001706 <changeAFGWaveform+0xd6>
		printStr("Invalid waveform name");
 8001700:	480c      	ldr	r0, [pc, #48]	; (8001734 <changeAFGWaveform+0x104>)
 8001702:	f7ff fa2b 	bl	8000b5c <printStr>
}
 8001706:	bf00      	nop
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	0800b668 	.word	0x0800b668
 8001714:	20000200 	.word	0x20000200
 8001718:	20000800 	.word	0x20000800
 800171c:	0800b670 	.word	0x0800b670
 8001720:	20000000 	.word	0x20000000
 8001724:	0800b678 	.word	0x0800b678
 8001728:	20000400 	.word	0x20000400
 800172c:	0800b684 	.word	0x0800b684
 8001730:	20000600 	.word	0x20000600
 8001734:	0800b68c 	.word	0x0800b68c

08001738 <startAFG>:

void startAFG()
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af02      	add	r7, sp, #8
    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)LUT_CurrentWave, 128, DAC_ALIGN_12B_R);
 800173e:	2300      	movs	r3, #0
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	4a05      	ldr	r2, [pc, #20]	; (800175c <startAFG+0x24>)
 8001746:	2100      	movs	r1, #0
 8001748:	4805      	ldr	r0, [pc, #20]	; (8001760 <startAFG+0x28>)
 800174a:	f003 fabf 	bl	8004ccc <HAL_DAC_Start_DMA>
    HAL_TIM_Base_Start(&htim2);
 800174e:	4805      	ldr	r0, [pc, #20]	; (8001764 <startAFG+0x2c>)
 8001750:	f005 fc34 	bl	8006fbc <HAL_TIM_Base_Start>
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000800 	.word	0x20000800
 8001760:	20000c84 	.word	0x20000c84
 8001764:	2000d15c 	.word	0x2000d15c

08001768 <stopAFG>:

void stopAFG()
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800176c:	2100      	movs	r1, #0
 800176e:	4802      	ldr	r0, [pc, #8]	; (8001778 <stopAFG+0x10>)
 8001770:	f003 fa33 	bl	8004bda <HAL_DAC_Stop_DMA>
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000c84 	.word	0x20000c84

0800177c <HAL_TIM_PeriodElapsedCallback>:
    }
  }
}
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
  if (htim == &htim4)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a06      	ldr	r2, [pc, #24]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d102      	bne.n	8001792 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
	  interrupted = 1;
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800178e:	2201      	movs	r2, #1
 8001790:	601a      	str	r2, [r3, #0]
  }
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	20000c38 	.word	0x20000c38
 80017a4:	20000a18 	.word	0x20000a18

080017a8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017ac:	4806      	ldr	r0, [pc, #24]	; (80017c8 <USART2_IRQHandler+0x20>)
 80017ae:	f007 f86b 	bl	8008888 <HAL_UART_IRQHandler>
  interrupted = 1;
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <USART2_IRQHandler+0x24>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
  HAL_ADC_Stop(&hadc1);
 80017b8:	4805      	ldr	r0, [pc, #20]	; (80017d0 <USART2_IRQHandler+0x28>)
 80017ba:	f001 fd3b 	bl	8003234 <HAL_ADC_Stop>
  HAL_UART_AbortReceive_IT(&huart2);
 80017be:	4802      	ldr	r0, [pc, #8]	; (80017c8 <USART2_IRQHandler+0x20>)
 80017c0:	f006 ffe2 	bl	8008788 <HAL_UART_AbortReceive_IT>

  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	2000d1a8 	.word	0x2000d1a8
 80017cc:	20000a18 	.word	0x20000a18
 80017d0:	20000d78 	.word	0x20000d78

080017d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d4:	b5b0      	push	{r4, r5, r7, lr}
 80017d6:	b0a6      	sub	sp, #152	; 0x98
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017da:	f001 f997 	bl	8002b0c <HAL_Init>

  /* USER CODE BEGIN Init */

  //Enable clock cycle counter
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80017de:	4bc5      	ldr	r3, [pc, #788]	; (8001af4 <main+0x320>)
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	4ac4      	ldr	r2, [pc, #784]	; (8001af4 <main+0x320>)
 80017e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017e8:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 80017ea:	4bc3      	ldr	r3, [pc, #780]	; (8001af8 <main+0x324>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80017f0:	4bc1      	ldr	r3, [pc, #772]	; (8001af8 <main+0x324>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4ac0      	ldr	r2, [pc, #768]	; (8001af8 <main+0x324>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6013      	str	r3, [r2, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017fc:	f000 fae8 	bl	8001dd0 <SystemClock_Config>
  // RCC->APB1ENR |= RCC_APB1ENR_DAC1EN;

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001800:	f000 fdc4 	bl	800238c <MX_GPIO_Init>
  MX_DMA_Init();
 8001804:	f000 fd88 	bl	8002318 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001808:	f000 fd56 	bl	80022b8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800180c:	f000 fb48 	bl	8001ea0 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001810:	f000 fc14 	bl	800203c <MX_DAC1_Init>
  MX_TIM2_Init();
 8001814:	f000 fc3c 	bl	8002090 <MX_TIM2_Init>
  MX_ADC2_Init();
 8001818:	f000 fbb2 	bl	8001f80 <MX_ADC2_Init>
  MX_TIM3_Init();
 800181c:	f000 fc86 	bl	800212c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001820:	f000 fcfa 	bl	8002218 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001824:	2108      	movs	r1, #8
 8001826:	48b5      	ldr	r0, [pc, #724]	; (8001afc <main+0x328>)
 8001828:	f005 fc92 	bl	8007150 <HAL_TIM_PWM_Start>

  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, 32);
 800182c:	4bb3      	ldr	r3, [pc, #716]	; (8001afc <main+0x328>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2220      	movs	r2, #32
 8001832:	63da      	str	r2, [r3, #60]	; 0x3c

  //HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, DAC_Offset, 2, DAC_ALIGN_12B_R);

  //HAL_TIM_Base_Start(&htim2);

  if(debug) { printStr("Ready\n\r"); }
 8001834:	4bb2      	ldr	r3, [pc, #712]	; (8001b00 <main+0x32c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d002      	beq.n	8001842 <main+0x6e>
 800183c:	48b1      	ldr	r0, [pc, #708]	; (8001b04 <main+0x330>)
 800183e:	f7ff f98d 	bl	8000b5c <printStr>

  while(1)
  {

	  printStr(">");
 8001842:	48b1      	ldr	r0, [pc, #708]	; (8001b08 <main+0x334>)
 8001844:	f7ff f98a 	bl	8000b5c <printStr>
	  char input[2];
	  while(readSerial(input, 1, 100000, debug) == 1)
 8001848:	e002      	b.n	8001850 <main+0x7c>
	  {
		  printStr(">");
 800184a:	48af      	ldr	r0, [pc, #700]	; (8001b08 <main+0x334>)
 800184c:	f7ff f986 	bl	8000b5c <printStr>
	  while(readSerial(input, 1, 100000, debug) == 1)
 8001850:	4bab      	ldr	r3, [pc, #684]	; (8001b00 <main+0x32c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001858:	4aac      	ldr	r2, [pc, #688]	; (8001b0c <main+0x338>)
 800185a:	2101      	movs	r1, #1
 800185c:	f7ff fa4a 	bl	8000cf4 <readSerial>
 8001860:	4603      	mov	r3, r0
 8001862:	2b01      	cmp	r3, #1
 8001864:	d0f1      	beq.n	800184a <main+0x76>
	  }

	  if(input[0] == 'A') //Acquire data
 8001866:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800186a:	2b41      	cmp	r3, #65	; 0x41
 800186c:	d155      	bne.n	800191a <main+0x146>
	  {
 800186e:	466b      	mov	r3, sp
 8001870:	461d      	mov	r5, r3
		  short newdata[resolution_x];
 8001872:	4ba7      	ldr	r3, [pc, #668]	; (8001b10 <main+0x33c>)
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	1e43      	subs	r3, r0, #1
 8001878:	65fb      	str	r3, [r7, #92]	; 0x5c
 800187a:	4603      	mov	r3, r0
 800187c:	4619      	mov	r1, r3
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	f04f 0400 	mov.w	r4, #0
 800188a:	0114      	lsls	r4, r2, #4
 800188c:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8001890:	010b      	lsls	r3, r1, #4
 8001892:	4603      	mov	r3, r0
 8001894:	4619      	mov	r1, r3
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	f04f 0400 	mov.w	r4, #0
 80018a2:	0114      	lsls	r4, r2, #4
 80018a4:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80018a8:	010b      	lsls	r3, r1, #4
 80018aa:	4603      	mov	r3, r0
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	3301      	adds	r3, #1
 80018b0:	3307      	adds	r3, #7
 80018b2:	08db      	lsrs	r3, r3, #3
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	ebad 0d03 	sub.w	sp, sp, r3
 80018ba:	466b      	mov	r3, sp
 80018bc:	3301      	adds	r3, #1
 80018be:	085b      	lsrs	r3, r3, #1
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	65bb      	str	r3, [r7, #88]	; 0x58
		  for(int i = 0; i<resolution_x; i++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80018ca:	e00a      	b.n	80018e2 <main+0x10e>
		  {
			  newdata[i] = 0;
 80018cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018ce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80018d2:	2100      	movs	r1, #0
 80018d4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  for(int i = 0; i<resolution_x; i++)
 80018d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018dc:	3301      	adds	r3, #1
 80018de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80018e2:	4b8b      	ldr	r3, [pc, #556]	; (8001b10 <main+0x33c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80018ea:	429a      	cmp	r2, r3
 80018ec:	dbee      	blt.n	80018cc <main+0xf8>
		  }
		  getWaveform(newdata, resolution_x, sample_time);
 80018ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80018f0:	4b87      	ldr	r3, [pc, #540]	; (8001b10 <main+0x33c>)
 80018f2:	6819      	ldr	r1, [r3, #0]
 80018f4:	4b87      	ldr	r3, [pc, #540]	; (8001b14 <main+0x340>)
 80018f6:	ed93 7b00 	vldr	d7, [r3]
 80018fa:	eeb0 0a47 	vmov.f32	s0, s14
 80018fe:	eef0 0a67 	vmov.f32	s1, s15
 8001902:	4610      	mov	r0, r2
 8001904:	f7ff fb78 	bl	8000ff8 <getWaveform>
		  printWaveform(newdata, resolution_x);
 8001908:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800190a:	4b81      	ldr	r3, [pc, #516]	; (8001b10 <main+0x33c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4619      	mov	r1, r3
 8001910:	4610      	mov	r0, r2
 8001912:	f7ff f9cd 	bl	8000cb0 <printWaveform>
 8001916:	46ad      	mov	sp, r5
 8001918:	e793      	b.n	8001842 <main+0x6e>
		  //printInt(measureFrequency(newdata, 1920, sample_time, 3000));
	  }
	  else if(input[0] == 'T') //Acquire data on trigger
 800191a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800191e:	2b54      	cmp	r3, #84	; 0x54
 8001920:	d16a      	bne.n	80019f8 <main+0x224>
	  {
 8001922:	466b      	mov	r3, sp
 8001924:	461d      	mov	r5, r3
		  if(debug)
 8001926:	4b76      	ldr	r3, [pc, #472]	; (8001b00 <main+0x32c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <main+0x160>
		  {
			  printStr("Waiting for trigger... ");
 800192e:	487a      	ldr	r0, [pc, #488]	; (8001b18 <main+0x344>)
 8001930:	f7ff f914 	bl	8000b5c <printStr>
		  }
		  short newdata[resolution_x];
 8001934:	4b76      	ldr	r3, [pc, #472]	; (8001b10 <main+0x33c>)
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	1e43      	subs	r3, r0, #1
 800193a:	667b      	str	r3, [r7, #100]	; 0x64
 800193c:	4603      	mov	r3, r0
 800193e:	4619      	mov	r1, r3
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	f04f 0300 	mov.w	r3, #0
 8001948:	f04f 0400 	mov.w	r4, #0
 800194c:	0114      	lsls	r4, r2, #4
 800194e:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8001952:	010b      	lsls	r3, r1, #4
 8001954:	4603      	mov	r3, r0
 8001956:	4619      	mov	r1, r3
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	f04f 0400 	mov.w	r4, #0
 8001964:	0114      	lsls	r4, r2, #4
 8001966:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 800196a:	010b      	lsls	r3, r1, #4
 800196c:	4603      	mov	r3, r0
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	3301      	adds	r3, #1
 8001972:	3307      	adds	r3, #7
 8001974:	08db      	lsrs	r3, r3, #3
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	ebad 0d03 	sub.w	sp, sp, r3
 800197c:	466b      	mov	r3, sp
 800197e:	3301      	adds	r3, #1
 8001980:	085b      	lsrs	r3, r3, #1
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	663b      	str	r3, [r7, #96]	; 0x60
		  for(int i = 0; i<resolution_x; i++)
 8001986:	2300      	movs	r3, #0
 8001988:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800198c:	e00a      	b.n	80019a4 <main+0x1d0>
		  {
			  newdata[i] = 0;
 800198e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001990:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001994:	2100      	movs	r1, #0
 8001996:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  for(int i = 0; i<resolution_x; i++)
 800199a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800199e:	3301      	adds	r3, #1
 80019a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80019a4:	4b5a      	ldr	r3, [pc, #360]	; (8001b10 <main+0x33c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80019ac:	429a      	cmp	r2, r3
 80019ae:	dbee      	blt.n	800198e <main+0x1ba>
		  }
		  if(getTriggeredWaveform(newdata, resolution_x, sample_time) == 1)
 80019b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019b2:	4b57      	ldr	r3, [pc, #348]	; (8001b10 <main+0x33c>)
 80019b4:	6819      	ldr	r1, [r3, #0]
 80019b6:	4b57      	ldr	r3, [pc, #348]	; (8001b14 <main+0x340>)
 80019b8:	ed93 7b00 	vldr	d7, [r3]
 80019bc:	eeb0 0a47 	vmov.f32	s0, s14
 80019c0:	eef0 0a67 	vmov.f32	s1, s15
 80019c4:	4610      	mov	r0, r2
 80019c6:	f7ff fabf 	bl	8000f48 <getTriggeredWaveform>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d107      	bne.n	80019e0 <main+0x20c>
		  {
			  printWaveform(newdata, resolution_x);
 80019d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019d2:	4b4f      	ldr	r3, [pc, #316]	; (8001b10 <main+0x33c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4619      	mov	r1, r3
 80019d8:	4610      	mov	r0, r2
 80019da:	f7ff f969 	bl	8000cb0 <printWaveform>
 80019de:	e009      	b.n	80019f4 <main+0x220>
		  }
		  else
		  {
			  printStr(" ");
 80019e0:	484e      	ldr	r0, [pc, #312]	; (8001b1c <main+0x348>)
 80019e2:	f7ff f8bb 	bl	8000b5c <printStr>
			  if(debug)
 80019e6:	4b46      	ldr	r3, [pc, #280]	; (8001b00 <main+0x32c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <main+0x220>
			  {
				  printStr("Cancelled");
 80019ee:	484c      	ldr	r0, [pc, #304]	; (8001b20 <main+0x34c>)
 80019f0:	f7ff f8b4 	bl	8000b5c <printStr>
 80019f4:	46ad      	mov	sp, r5
 80019f6:	e724      	b.n	8001842 <main+0x6e>
			  }
		  }
		  //printInt(measureFrequency(newdata, 1920, sample_time, 3000));
	  }
	  else if(input[0] == 'S') //Set variable
 80019f8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80019fc:	2b53      	cmp	r3, #83	; 0x53
 80019fe:	f040 81ac 	bne.w	8001d5a <main+0x586>
	  {
		  if(debug) { printStr("SetVar"); }
 8001a02:	4b3f      	ldr	r3, [pc, #252]	; (8001b00 <main+0x32c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <main+0x23c>
 8001a0a:	4846      	ldr	r0, [pc, #280]	; (8001b24 <main+0x350>)
 8001a0c:	f7ff f8a6 	bl	8000b5c <printStr>

		  char variable_name[21];
		  readSerial(variable_name, 20, 20000, 1);
 8001a10:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001a14:	2301      	movs	r3, #1
 8001a16:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a1a:	2114      	movs	r1, #20
 8001a1c:	f7ff f96a 	bl	8000cf4 <readSerial>
		  variable_name[20] = '\0';
 8001a20:	2300      	movs	r3, #0
 8001a22:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

		  char variable_value[21];
		  readSerial(variable_value, 20, 20000, 1);
 8001a26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a30:	2114      	movs	r1, #20
 8001a32:	f7ff f95f 	bl	8000cf4 <readSerial>
		  variable_value[20] = '\0';
 8001a36:	2300      	movs	r3, #0
 8001a38:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

		  if(strcmp(variable_name, "resolution_x") == 0)
 8001a3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a40:	4939      	ldr	r1, [pc, #228]	; (8001b28 <main+0x354>)
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fbc8 	bl	80001d8 <strcmp>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d113      	bne.n	8001a76 <main+0x2a2>
		  {
			  char *end;
			  int newval = strtol(variable_value, &end, 10);
 8001a4e:	f107 0120 	add.w	r1, r7, #32
 8001a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a56:	220a      	movs	r2, #10
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f008 fd61 	bl	800a520 <strtol>
 8001a5e:	66b8      	str	r0, [r7, #104]	; 0x68
			  if(newval == 0)
 8001a60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d103      	bne.n	8001a6e <main+0x29a>
			  {
				  printStr("Invalid number");
 8001a66:	4831      	ldr	r0, [pc, #196]	; (8001b2c <main+0x358>)
 8001a68:	f7ff f878 	bl	8000b5c <printStr>
 8001a6c:	e6e9      	b.n	8001842 <main+0x6e>
			  }
			  else
			  {
				  resolution_x = newval;
 8001a6e:	4a28      	ldr	r2, [pc, #160]	; (8001b10 <main+0x33c>)
 8001a70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	e6e5      	b.n	8001842 <main+0x6e>
			  }
		  }
		  else if(strcmp(variable_name, "resolution_y") == 0)
 8001a76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a7a:	492d      	ldr	r1, [pc, #180]	; (8001b30 <main+0x35c>)
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fbab 	bl	80001d8 <strcmp>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d113      	bne.n	8001ab0 <main+0x2dc>
		  {
			  char *end;
			  int newval = strtol(variable_value, &end, 10);
 8001a88:	f107 011c 	add.w	r1, r7, #28
 8001a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a90:	220a      	movs	r2, #10
 8001a92:	4618      	mov	r0, r3
 8001a94:	f008 fd44 	bl	800a520 <strtol>
 8001a98:	66f8      	str	r0, [r7, #108]	; 0x6c
			  if(newval == 0)
 8001a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d103      	bne.n	8001aa8 <main+0x2d4>
			  {
				  printStr("Invalid number");
 8001aa0:	4822      	ldr	r0, [pc, #136]	; (8001b2c <main+0x358>)
 8001aa2:	f7ff f85b 	bl	8000b5c <printStr>
 8001aa6:	e6cc      	b.n	8001842 <main+0x6e>
			  }
			  else
			  {
				  resolution_y = newval;
 8001aa8:	4a22      	ldr	r2, [pc, #136]	; (8001b34 <main+0x360>)
 8001aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e6c8      	b.n	8001842 <main+0x6e>
			  }
		  }
		  else if(strcmp(variable_name, "sample_time") == 0)
 8001ab0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ab4:	4920      	ldr	r1, [pc, #128]	; (8001b38 <main+0x364>)
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fb8e 	bl	80001d8 <strcmp>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d142      	bne.n	8001b48 <main+0x374>
		  {
			  char *end;
			  double newval = strtod(variable_value, &end);
 8001ac2:	f107 0218 	add.w	r2, r7, #24
 8001ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aca:	4611      	mov	r1, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f008 fc97 	bl	800a400 <strtod>
 8001ad2:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70
			  if(newval == 0)
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001ae2:	f7fe ffaf 	bl	8000a44 <__aeabi_dcmpeq>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d027      	beq.n	8001b3c <main+0x368>
			  {
				  printStr("Invalid number");
 8001aec:	480f      	ldr	r0, [pc, #60]	; (8001b2c <main+0x358>)
 8001aee:	f7ff f835 	bl	8000b5c <printStr>
 8001af2:	e6a6      	b.n	8001842 <main+0x6e>
 8001af4:	e000edf0 	.word	0xe000edf0
 8001af8:	e0001000 	.word	0xe0001000
 8001afc:	20000d2c 	.word	0x20000d2c
 8001b00:	20000c14 	.word	0x20000c14
 8001b04:	0800b6a4 	.word	0x0800b6a4
 8001b08:	0800b6ac 	.word	0x0800b6ac
 8001b0c:	000186a0 	.word	0x000186a0
 8001b10:	20000a00 	.word	0x20000a00
 8001b14:	20000a08 	.word	0x20000a08
 8001b18:	0800b6b0 	.word	0x0800b6b0
 8001b1c:	0800b6c8 	.word	0x0800b6c8
 8001b20:	0800b6cc 	.word	0x0800b6cc
 8001b24:	0800b6d8 	.word	0x0800b6d8
 8001b28:	0800b6e0 	.word	0x0800b6e0
 8001b2c:	0800b6f0 	.word	0x0800b6f0
 8001b30:	0800b700 	.word	0x0800b700
 8001b34:	20000a04 	.word	0x20000a04
 8001b38:	0800b710 	.word	0x0800b710
			  }
			  else
			  {
				  sample_time = newval;
 8001b3c:	4a8e      	ldr	r2, [pc, #568]	; (8001d78 <main+0x5a4>)
 8001b3e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8001b42:	e9c2 3400 	strd	r3, r4, [r2]
 8001b46:	e67c      	b.n	8001842 <main+0x6e>
			  }
		  }
		  else if(strcmp(variable_name, "trigger_level") == 0)
 8001b48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b4c:	498b      	ldr	r1, [pc, #556]	; (8001d7c <main+0x5a8>)
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fb42 	bl	80001d8 <strcmp>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d11a      	bne.n	8001b90 <main+0x3bc>
		  {
			  char *endptr;
			  int newval = strtol(variable_value, &endptr, 10);
 8001b5a:	f107 0114 	add.w	r1, r7, #20
 8001b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b62:	220a      	movs	r2, #10
 8001b64:	4618      	mov	r0, r3
 8001b66:	f008 fcdb 	bl	800a520 <strtol>
 8001b6a:	67b8      	str	r0, [r7, #120]	; 0x78
			  if(endptr == variable_value || newval > 4097)
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d004      	beq.n	8001b80 <main+0x3ac>
 8001b76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b78:	f241 0201 	movw	r2, #4097	; 0x1001
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	dd03      	ble.n	8001b88 <main+0x3b4>
			  {
				  printStr("Invalid number, must be <= 4096");
 8001b80:	487f      	ldr	r0, [pc, #508]	; (8001d80 <main+0x5ac>)
 8001b82:	f7fe ffeb 	bl	8000b5c <printStr>
 8001b86:	e0f6      	b.n	8001d76 <main+0x5a2>
			  }
			  else
			  {
				  trigger_level = newval;
 8001b88:	4a7e      	ldr	r2, [pc, #504]	; (8001d84 <main+0x5b0>)
 8001b8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e658      	b.n	8001842 <main+0x6e>
			  }
		  }
		  else if(strcmp(variable_name, "trigger_rising") == 0)
 8001b90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b94:	497c      	ldr	r1, [pc, #496]	; (8001d88 <main+0x5b4>)
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fb1e 	bl	80001d8 <strcmp>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d118      	bne.n	8001bd4 <main+0x400>
		  {
			  char *endptr;
			  int newval = strtol(variable_value, &endptr, 10);
 8001ba2:	f107 0110 	add.w	r1, r7, #16
 8001ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001baa:	220a      	movs	r2, #10
 8001bac:	4618      	mov	r0, r3
 8001bae:	f008 fcb7 	bl	800a520 <strtol>
 8001bb2:	67f8      	str	r0, [r7, #124]	; 0x7c
			  if(endptr == variable_value || newval > 1)
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d002      	beq.n	8001bc4 <main+0x3f0>
 8001bbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	dd03      	ble.n	8001bcc <main+0x3f8>
			  {
				  printStr("Invalid number, must be 1 for rising or 0 for falling edge");
 8001bc4:	4871      	ldr	r0, [pc, #452]	; (8001d8c <main+0x5b8>)
 8001bc6:	f7fe ffc9 	bl	8000b5c <printStr>
 8001bca:	e0d4      	b.n	8001d76 <main+0x5a2>
			  }
			  else
			  {
				  trigger_rising = newval;
 8001bcc:	4a70      	ldr	r2, [pc, #448]	; (8001d90 <main+0x5bc>)
 8001bce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e636      	b.n	8001842 <main+0x6e>
			  }
		  }
		  else if(strcmp(variable_name, "amplifier_x10") == 0)
 8001bd4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001bd8:	496e      	ldr	r1, [pc, #440]	; (8001d94 <main+0x5c0>)
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fafc 	bl	80001d8 <strcmp>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d12a      	bne.n	8001c3c <main+0x468>
		  {
			  char *endptr;
			  int newval = strtol(variable_value, &endptr, 10);
 8001be6:	f107 010c 	add.w	r1, r7, #12
 8001bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bee:	220a      	movs	r2, #10
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f008 fc95 	bl	800a520 <strtol>
 8001bf6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
			  if(endptr == variable_value || newval > 1)
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d003      	beq.n	8001c0c <main+0x438>
 8001c04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	dd03      	ble.n	8001c14 <main+0x440>
			  {
				  printStr("Invalid number, must be 1 for x10, 0 for x1");
 8001c0c:	4862      	ldr	r0, [pc, #392]	; (8001d98 <main+0x5c4>)
 8001c0e:	f7fe ffa5 	bl	8000b5c <printStr>
 8001c12:	e0b0      	b.n	8001d76 <main+0x5a2>
			  }
			  else
			  {
				  if(newval == 1)
 8001c14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d107      	bne.n	8001c2c <main+0x458>
				  {
					  amplifier_x10 = 1;
 8001c1c:	4b5f      	ldr	r3, [pc, #380]	; (8001d9c <main+0x5c8>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]
					  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, 5);
 8001c22:	4b5f      	ldr	r3, [pc, #380]	; (8001da0 <main+0x5cc>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2205      	movs	r2, #5
 8001c28:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c2a:	e60a      	b.n	8001842 <main+0x6e>
				  }
				  else
				  {
					  amplifier_x10 = 0;
 8001c2c:	4b5b      	ldr	r3, [pc, #364]	; (8001d9c <main+0x5c8>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
					  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, 32);
 8001c32:	4b5b      	ldr	r3, [pc, #364]	; (8001da0 <main+0x5cc>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2220      	movs	r2, #32
 8001c38:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c3a:	e602      	b.n	8001842 <main+0x6e>
				  }
			  }
		  }
		  else if(strcmp(variable_name, "afg_freq") == 0)
 8001c3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c40:	4958      	ldr	r1, [pc, #352]	; (8001da4 <main+0x5d0>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fac8 	bl	80001d8 <strcmp>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d132      	bne.n	8001cb4 <main+0x4e0>
		  {
			  char *endptr;
			  int newval = strtol(variable_value, &endptr, 10);
 8001c4e:	f107 0108 	add.w	r1, r7, #8
 8001c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c56:	220a      	movs	r2, #10
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f008 fc61 	bl	800a520 <strtol>
 8001c5e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
			  if(endptr == variable_value)
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d103      	bne.n	8001c74 <main+0x4a0>
			  {
				  printStr("Invalid number");
 8001c6c:	484e      	ldr	r0, [pc, #312]	; (8001da8 <main+0x5d4>)
 8001c6e:	f7fe ff75 	bl	8000b5c <printStr>
 8001c72:	e5e6      	b.n	8001842 <main+0x6e>
			  }
			  else
			  {
				  if(newval>0)
 8001c74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	dd18      	ble.n	8001cae <main+0x4da>
				  {
					  TIM2->ARR = round(TIMER_FREQ_TIMES_ARR/newval);
 8001c7c:	4a4b      	ldr	r2, [pc, #300]	; (8001dac <main+0x5d8>)
 8001c7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c82:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fc0a 	bl	80004a0 <__aeabi_i2d>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	f7fe ff2e 	bl	8000af8 <__aeabi_d2uiz>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	62e3      	str	r3, [r4, #44]	; 0x2c
					  AFG_Freq = newval;
 8001ca0:	4a43      	ldr	r2, [pc, #268]	; (8001db0 <main+0x5dc>)
 8001ca2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ca6:	6013      	str	r3, [r2, #0]
					  startAFG();
 8001ca8:	f7ff fd46 	bl	8001738 <startAFG>
 8001cac:	e5c9      	b.n	8001842 <main+0x6e>
				  }
				  else
				  {
					  stopAFG();
 8001cae:	f7ff fd5b 	bl	8001768 <stopAFG>
 8001cb2:	e5c6      	b.n	8001842 <main+0x6e>
				  }
			  }
		  }
		  else if(strcmp(variable_name, "afg_amplitude") == 0)
 8001cb4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cb8:	493e      	ldr	r1, [pc, #248]	; (8001db4 <main+0x5e0>)
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fa8c 	bl	80001d8 <strcmp>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d116      	bne.n	8001cf4 <main+0x520>
		  {
			  char *endptr;
			  int newval = strtol(variable_value, &endptr, 10);
 8001cc6:	1d39      	adds	r1, r7, #4
 8001cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ccc:	220a      	movs	r2, #10
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f008 fc26 	bl	800a520 <strtol>
 8001cd4:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
			  if(endptr == variable_value)
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d103      	bne.n	8001cea <main+0x516>
			  {
				  printStr("Invalid number");
 8001ce2:	4831      	ldr	r0, [pc, #196]	; (8001da8 <main+0x5d4>)
 8001ce4:	f7fe ff3a 	bl	8000b5c <printStr>
 8001ce8:	e5ab      	b.n	8001842 <main+0x6e>
			  }
			  else
			  {
				  afgAmplitudeAdjustment(newval);
 8001cea:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001cee:	f7ff fc3d 	bl	800156c <afgAmplitudeAdjustment>
 8001cf2:	e5a6      	b.n	8001842 <main+0x6e>
			  }
		  }
		  else if(strcmp(variable_name, "afg_waveform") == 0)
 8001cf4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cf8:	492f      	ldr	r1, [pc, #188]	; (8001db8 <main+0x5e4>)
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fa6c 	bl	80001d8 <strcmp>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d105      	bne.n	8001d12 <main+0x53e>
		  {
			  changeAFGWaveform(variable_value);
 8001d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fc90 	bl	8001630 <changeAFGWaveform>
 8001d10:	e597      	b.n	8001842 <main+0x6e>
		  }
		  else if(strcmp(variable_name, "DEBUG") == 0)
 8001d12:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d16:	4929      	ldr	r1, [pc, #164]	; (8001dbc <main+0x5e8>)
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fa5d 	bl	80001d8 <strcmp>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d116      	bne.n	8001d52 <main+0x57e>
		  {
			  char *endptr;
			  int newval = strtol(variable_value, &endptr, 10);
 8001d24:	4639      	mov	r1, r7
 8001d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2a:	220a      	movs	r2, #10
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f008 fbf7 	bl	800a520 <strtol>
 8001d32:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			  if(endptr == variable_value)
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d103      	bne.n	8001d48 <main+0x574>
			  {
				  printStr("Invalid number");
 8001d40:	4819      	ldr	r0, [pc, #100]	; (8001da8 <main+0x5d4>)
 8001d42:	f7fe ff0b 	bl	8000b5c <printStr>
 8001d46:	e57c      	b.n	8001842 <main+0x6e>
			  }
			  else
			  {
				  debug = newval;
 8001d48:	4a1d      	ldr	r2, [pc, #116]	; (8001dc0 <main+0x5ec>)
 8001d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	e577      	b.n	8001842 <main+0x6e>
			  }
		  }
		  else
		  {
			  printStr("Variable not found. Valid variables are resolution_x, sample_time, afg_freq, afg_waveform, afg_amplitude and DEBUG");
 8001d52:	481c      	ldr	r0, [pc, #112]	; (8001dc4 <main+0x5f0>)
 8001d54:	f7fe ff02 	bl	8000b5c <printStr>
 8001d58:	e573      	b.n	8001842 <main+0x6e>
		  }
	  }
	  else
	  {
		  printStr("'");
 8001d5a:	481b      	ldr	r0, [pc, #108]	; (8001dc8 <main+0x5f4>)
 8001d5c:	f7fe fefe 	bl	8000b5c <printStr>
		  printStr(input[0]);
 8001d60:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fef9 	bl	8000b5c <printStr>
		  printStr("'");
 8001d6a:	4817      	ldr	r0, [pc, #92]	; (8001dc8 <main+0x5f4>)
 8001d6c:	f7fe fef6 	bl	8000b5c <printStr>
		  printStr("is an invalid command. Use A to acquire data or S to set a variable");
 8001d70:	4816      	ldr	r0, [pc, #88]	; (8001dcc <main+0x5f8>)
 8001d72:	f7fe fef3 	bl	8000b5c <printStr>
  {
 8001d76:	e564      	b.n	8001842 <main+0x6e>
 8001d78:	20000a08 	.word	0x20000a08
 8001d7c:	0800b71c 	.word	0x0800b71c
 8001d80:	0800b72c 	.word	0x0800b72c
 8001d84:	20000a10 	.word	0x20000a10
 8001d88:	0800b74c 	.word	0x0800b74c
 8001d8c:	0800b75c 	.word	0x0800b75c
 8001d90:	20000a14 	.word	0x20000a14
 8001d94:	0800b798 	.word	0x0800b798
 8001d98:	0800b7a8 	.word	0x0800b7a8
 8001d9c:	20000c20 	.word	0x20000c20
 8001da0:	20000d2c 	.word	0x20000d2c
 8001da4:	0800b7d4 	.word	0x0800b7d4
 8001da8:	0800b6f0 	.word	0x0800b6f0
 8001dac:	00088b80 	.word	0x00088b80
 8001db0:	20000c18 	.word	0x20000c18
 8001db4:	0800b7e0 	.word	0x0800b7e0
 8001db8:	0800b7f0 	.word	0x0800b7f0
 8001dbc:	0800b800 	.word	0x0800b800
 8001dc0:	20000c14 	.word	0x20000c14
 8001dc4:	0800b808 	.word	0x0800b808
 8001dc8:	0800b87c 	.word	0x0800b87c
 8001dcc:	0800b880 	.word	0x0800b880

08001dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b0a6      	sub	sp, #152	; 0x98
 8001dd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dd6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001dda:	2228      	movs	r2, #40	; 0x28
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f007 fcee 	bl	80097c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	2258      	movs	r2, #88	; 0x58
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f007 fce0 	bl	80097c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e00:	2302      	movs	r3, #2
 8001e02:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e04:	2301      	movs	r3, #1
 8001e06:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e08:	2310      	movs	r3, #16
 8001e0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e1c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e2a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 fd02 	bl	8005838 <HAL_RCC_OscConfig>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001e3a:	f000 fb0f 	bl	800245c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e3e:	230f      	movs	r3, #15
 8001e40:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e42:	2302      	movs	r3, #2
 8001e44:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e46:	2300      	movs	r3, #0
 8001e48:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e4e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e50:	2300      	movs	r3, #0
 8001e52:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e54:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e58:	2102      	movs	r1, #2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f004 fc02 	bl	8006664 <HAL_RCC_ClockConfig>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001e66:	f000 faf9 	bl	800245c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <SystemClock_Config+0xcc>)
 8001e6c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	4618      	mov	r0, r3
 8001e84:	f004 fe24 	bl	8006ad0 <HAL_RCCEx_PeriphCLKConfig>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e8e:	f000 fae5 	bl	800245c <Error_Handler>
  }
}
 8001e92:	bf00      	nop
 8001e94:	3798      	adds	r7, #152	; 0x98
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	00300082 	.word	0x00300082

08001ea0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001ea6:	f107 031c 	add.w	r3, r7, #28
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
 8001ec0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ec2:	4b2e      	ldr	r3, [pc, #184]	; (8001f7c <MX_ADC1_Init+0xdc>)
 8001ec4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001ec8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001eca:	4b2c      	ldr	r3, [pc, #176]	; (8001f7c <MX_ADC1_Init+0xdc>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ed0:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <MX_ADC1_Init+0xdc>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ed6:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <MX_ADC1_Init+0xdc>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001edc:	4b27      	ldr	r3, [pc, #156]	; (8001f7c <MX_ADC1_Init+0xdc>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ee2:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <MX_ADC1_Init+0xdc>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001eea:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <MX_ADC1_Init+0xdc>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ef0:	4b22      	ldr	r3, [pc, #136]	; (8001f7c <MX_ADC1_Init+0xdc>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ef6:	4b21      	ldr	r3, [pc, #132]	; (8001f7c <MX_ADC1_Init+0xdc>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001efc:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <MX_ADC1_Init+0xdc>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001f02:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <MX_ADC1_Init+0xdc>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <MX_ADC1_Init+0xdc>)
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f10:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <MX_ADC1_Init+0xdc>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001f16:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <MX_ADC1_Init+0xdc>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f1c:	4817      	ldr	r0, [pc, #92]	; (8001f7c <MX_ADC1_Init+0xdc>)
 8001f1e:	f000 fe79 	bl	8002c14 <HAL_ADC_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001f28:	f000 fa98 	bl	800245c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001f30:	f107 031c 	add.w	r3, r7, #28
 8001f34:	4619      	mov	r1, r3
 8001f36:	4811      	ldr	r0, [pc, #68]	; (8001f7c <MX_ADC1_Init+0xdc>)
 8001f38:	f002 fa58 	bl	80043ec <HAL_ADCEx_MultiModeConfigChannel>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001f42:	f000 fa8b 	bl	800245c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f46:	2301      	movs	r3, #1
 8001f48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8001f52:	2304      	movs	r3, #4
 8001f54:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	4619      	mov	r1, r3
 8001f62:	4806      	ldr	r0, [pc, #24]	; (8001f7c <MX_ADC1_Init+0xdc>)
 8001f64:	f001 ff56 	bl	8003e14 <HAL_ADC_ConfigChannel>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001f6e:	f000 fa75 	bl	800245c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f72:	bf00      	nop
 8001f74:	3728      	adds	r7, #40	; 0x28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000d78 	.word	0x20000d78

08001f80 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f86:	463b      	mov	r3, r7
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
 8001f94:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001f96:	4b27      	ldr	r3, [pc, #156]	; (8002034 <MX_ADC2_Init+0xb4>)
 8001f98:	4a27      	ldr	r2, [pc, #156]	; (8002038 <MX_ADC2_Init+0xb8>)
 8001f9a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001f9c:	4b25      	ldr	r3, [pc, #148]	; (8002034 <MX_ADC2_Init+0xb4>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001fa2:	4b24      	ldr	r3, [pc, #144]	; (8002034 <MX_ADC2_Init+0xb4>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001fa8:	4b22      	ldr	r3, [pc, #136]	; (8002034 <MX_ADC2_Init+0xb4>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001fae:	4b21      	ldr	r3, [pc, #132]	; (8002034 <MX_ADC2_Init+0xb4>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001fb4:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <MX_ADC2_Init+0xb4>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <MX_ADC2_Init+0xb4>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <MX_ADC2_Init+0xb4>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <MX_ADC2_Init+0xb4>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001fce:	4b19      	ldr	r3, [pc, #100]	; (8002034 <MX_ADC2_Init+0xb4>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001fd4:	4b17      	ldr	r3, [pc, #92]	; (8002034 <MX_ADC2_Init+0xb4>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fdc:	4b15      	ldr	r3, [pc, #84]	; (8002034 <MX_ADC2_Init+0xb4>)
 8001fde:	2204      	movs	r2, #4
 8001fe0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001fe2:	4b14      	ldr	r3, [pc, #80]	; (8002034 <MX_ADC2_Init+0xb4>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <MX_ADC2_Init+0xb4>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001fee:	4811      	ldr	r0, [pc, #68]	; (8002034 <MX_ADC2_Init+0xb4>)
 8001ff0:	f000 fe10 	bl	8002c14 <HAL_ADC_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001ffa:	f000 fa2f 	bl	800245c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001ffe:	2303      	movs	r3, #3
 8002000:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002002:	2301      	movs	r3, #1
 8002004:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002016:	463b      	mov	r3, r7
 8002018:	4619      	mov	r1, r3
 800201a:	4806      	ldr	r0, [pc, #24]	; (8002034 <MX_ADC2_Init+0xb4>)
 800201c:	f001 fefa 	bl	8003e14 <HAL_ADC_ConfigChannel>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8002026:	f000 fa19 	bl	800245c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800202a:	bf00      	nop
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000c98 	.word	0x20000c98
 8002038:	50000100 	.word	0x50000100

0800203c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800204c:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <MX_DAC1_Init+0x4c>)
 800204e:	4a0f      	ldr	r2, [pc, #60]	; (800208c <MX_DAC1_Init+0x50>)
 8002050:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002052:	480d      	ldr	r0, [pc, #52]	; (8002088 <MX_DAC1_Init+0x4c>)
 8002054:	f002 fd9f 	bl	8004b96 <HAL_DAC_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 800205e:	f000 f9fd 	bl	800245c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002062:	2324      	movs	r3, #36	; 0x24
 8002064:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	2200      	movs	r2, #0
 800206e:	4619      	mov	r1, r3
 8002070:	4805      	ldr	r0, [pc, #20]	; (8002088 <MX_DAC1_Init+0x4c>)
 8002072:	f002 ff33 	bl	8004edc <HAL_DAC_ConfigChannel>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 800207c:	f000 f9ee 	bl	800245c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000c84 	.word	0x20000c84
 800208c:	40007400 	.word	0x40007400

08002090 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002096:	f107 0310 	add.w	r3, r7, #16
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a4:	1d3b      	adds	r3, r7, #4
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020ae:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <MX_TIM2_Init+0x98>)
 80020b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020b6:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <MX_TIM2_Init+0x98>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020bc:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <MX_TIM2_Init+0x98>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 80020c2:	4b19      	ldr	r3, [pc, #100]	; (8002128 <MX_TIM2_Init+0x98>)
 80020c4:	f44f 721c 	mov.w	r2, #624	; 0x270
 80020c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ca:	4b17      	ldr	r3, [pc, #92]	; (8002128 <MX_TIM2_Init+0x98>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d0:	4b15      	ldr	r3, [pc, #84]	; (8002128 <MX_TIM2_Init+0x98>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020d6:	4814      	ldr	r0, [pc, #80]	; (8002128 <MX_TIM2_Init+0x98>)
 80020d8:	f004 ff18 	bl	8006f0c <HAL_TIM_Base_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80020e2:	f000 f9bb 	bl	800245c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020ec:	f107 0310 	add.w	r3, r7, #16
 80020f0:	4619      	mov	r1, r3
 80020f2:	480d      	ldr	r0, [pc, #52]	; (8002128 <MX_TIM2_Init+0x98>)
 80020f4:	f005 fb68 	bl	80077c8 <HAL_TIM_ConfigClockSource>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80020fe:	f000 f9ad 	bl	800245c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002102:	2320      	movs	r3, #32
 8002104:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	4619      	mov	r1, r3
 800210e:	4806      	ldr	r0, [pc, #24]	; (8002128 <MX_TIM2_Init+0x98>)
 8002110:	f006 f8a0 	bl	8008254 <HAL_TIMEx_MasterConfigSynchronization>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800211a:	f000 f99f 	bl	800245c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800211e:	bf00      	nop
 8002120:	3720      	adds	r7, #32
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	2000d15c 	.word	0x2000d15c

0800212c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08e      	sub	sp, #56	; 0x38
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002132:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002140:	f107 031c 	add.w	r3, r7, #28
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800214c:	463b      	mov	r3, r7
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	60da      	str	r2, [r3, #12]
 8002158:	611a      	str	r2, [r3, #16]
 800215a:	615a      	str	r2, [r3, #20]
 800215c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800215e:	4b2c      	ldr	r3, [pc, #176]	; (8002210 <MX_TIM3_Init+0xe4>)
 8002160:	4a2c      	ldr	r2, [pc, #176]	; (8002214 <MX_TIM3_Init+0xe8>)
 8002162:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8002164:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <MX_TIM3_Init+0xe4>)
 8002166:	2203      	movs	r2, #3
 8002168:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800216a:	4b29      	ldr	r3, [pc, #164]	; (8002210 <MX_TIM3_Init+0xe4>)
 800216c:	2200      	movs	r2, #0
 800216e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50;
 8002170:	4b27      	ldr	r3, [pc, #156]	; (8002210 <MX_TIM3_Init+0xe4>)
 8002172:	2232      	movs	r2, #50	; 0x32
 8002174:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002176:	4b26      	ldr	r3, [pc, #152]	; (8002210 <MX_TIM3_Init+0xe4>)
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800217c:	4b24      	ldr	r3, [pc, #144]	; (8002210 <MX_TIM3_Init+0xe4>)
 800217e:	2200      	movs	r2, #0
 8002180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002182:	4823      	ldr	r0, [pc, #140]	; (8002210 <MX_TIM3_Init+0xe4>)
 8002184:	f004 fec2 	bl	8006f0c <HAL_TIM_Base_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800218e:	f000 f965 	bl	800245c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002198:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800219c:	4619      	mov	r1, r3
 800219e:	481c      	ldr	r0, [pc, #112]	; (8002210 <MX_TIM3_Init+0xe4>)
 80021a0:	f005 fb12 	bl	80077c8 <HAL_TIM_ConfigClockSource>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80021aa:	f000 f957 	bl	800245c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80021ae:	4818      	ldr	r0, [pc, #96]	; (8002210 <MX_TIM3_Init+0xe4>)
 80021b0:	f004 ff6c 	bl	800708c <HAL_TIM_PWM_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80021ba:	f000 f94f 	bl	800245c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021c6:	f107 031c 	add.w	r3, r7, #28
 80021ca:	4619      	mov	r1, r3
 80021cc:	4810      	ldr	r0, [pc, #64]	; (8002210 <MX_TIM3_Init+0xe4>)
 80021ce:	f006 f841 	bl	8008254 <HAL_TIMEx_MasterConfigSynchronization>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80021d8:	f000 f940 	bl	800245c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021dc:	2360      	movs	r3, #96	; 0x60
 80021de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021ec:	463b      	mov	r3, r7
 80021ee:	2208      	movs	r2, #8
 80021f0:	4619      	mov	r1, r3
 80021f2:	4807      	ldr	r0, [pc, #28]	; (8002210 <MX_TIM3_Init+0xe4>)
 80021f4:	f005 f9d8 	bl	80075a8 <HAL_TIM_PWM_ConfigChannel>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80021fe:	f000 f92d 	bl	800245c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002202:	4803      	ldr	r0, [pc, #12]	; (8002210 <MX_TIM3_Init+0xe4>)
 8002204:	f000 fb08 	bl	8002818 <HAL_TIM_MspPostInit>

}
 8002208:	bf00      	nop
 800220a:	3738      	adds	r7, #56	; 0x38
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000d2c 	.word	0x20000d2c
 8002214:	40000400 	.word	0x40000400

08002218 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800221e:	f107 0310 	add.w	r3, r7, #16
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	609a      	str	r2, [r3, #8]
 800222a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800222c:	1d3b      	adds	r3, r7, #4
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002236:	4b1e      	ldr	r3, [pc, #120]	; (80022b0 <MX_TIM4_Init+0x98>)
 8002238:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <MX_TIM4_Init+0x9c>)
 800223a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6000;
 800223c:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <MX_TIM4_Init+0x98>)
 800223e:	f241 7270 	movw	r2, #6000	; 0x1770
 8002242:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002244:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <MX_TIM4_Init+0x98>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800224a:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <MX_TIM4_Init+0x98>)
 800224c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002250:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002252:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <MX_TIM4_Init+0x98>)
 8002254:	2200      	movs	r2, #0
 8002256:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002258:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <MX_TIM4_Init+0x98>)
 800225a:	2200      	movs	r2, #0
 800225c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800225e:	4814      	ldr	r0, [pc, #80]	; (80022b0 <MX_TIM4_Init+0x98>)
 8002260:	f004 fe54 	bl	8006f0c <HAL_TIM_Base_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800226a:	f000 f8f7 	bl	800245c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800226e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002272:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002274:	f107 0310 	add.w	r3, r7, #16
 8002278:	4619      	mov	r1, r3
 800227a:	480d      	ldr	r0, [pc, #52]	; (80022b0 <MX_TIM4_Init+0x98>)
 800227c:	f005 faa4 	bl	80077c8 <HAL_TIM_ConfigClockSource>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002286:	f000 f8e9 	bl	800245c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	4619      	mov	r1, r3
 8002296:	4806      	ldr	r0, [pc, #24]	; (80022b0 <MX_TIM4_Init+0x98>)
 8002298:	f005 ffdc 	bl	8008254 <HAL_TIMEx_MasterConfigSynchronization>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80022a2:	f000 f8db 	bl	800245c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80022a6:	bf00      	nop
 80022a8:	3720      	adds	r7, #32
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000c38 	.word	0x20000c38
 80022b4:	40000800 	.word	0x40000800

080022b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022bc:	4b14      	ldr	r3, [pc, #80]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022be:	4a15      	ldr	r2, [pc, #84]	; (8002314 <MX_USART2_UART_Init+0x5c>)
 80022c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1843200;
 80022c2:	4b13      	ldr	r3, [pc, #76]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022c4:	f44f 12e1 	mov.w	r2, #1843200	; 0x1c2000
 80022c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022ca:	4b11      	ldr	r3, [pc, #68]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022d6:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022d8:	2200      	movs	r2, #0
 80022da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022de:	220c      	movs	r2, #12
 80022e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022e2:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ee:	4b08      	ldr	r3, [pc, #32]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022fa:	4805      	ldr	r0, [pc, #20]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022fc:	f006 f854 	bl	80083a8 <HAL_UART_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002306:	f000 f8a9 	bl	800245c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	2000d1a8 	.word	0x2000d1a8
 8002314:	40004400 	.word	0x40004400

08002318 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800231e:	4b1a      	ldr	r3, [pc, #104]	; (8002388 <MX_DMA_Init+0x70>)
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	4a19      	ldr	r2, [pc, #100]	; (8002388 <MX_DMA_Init+0x70>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6153      	str	r3, [r2, #20]
 800232a:	4b17      	ldr	r3, [pc, #92]	; (8002388 <MX_DMA_Init+0x70>)
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002336:	4b14      	ldr	r3, [pc, #80]	; (8002388 <MX_DMA_Init+0x70>)
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	4a13      	ldr	r2, [pc, #76]	; (8002388 <MX_DMA_Init+0x70>)
 800233c:	f043 0302 	orr.w	r3, r3, #2
 8002340:	6153      	str	r3, [r2, #20]
 8002342:	4b11      	ldr	r3, [pc, #68]	; (8002388 <MX_DMA_Init+0x70>)
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800234e:	2200      	movs	r2, #0
 8002350:	2100      	movs	r1, #0
 8002352:	200b      	movs	r0, #11
 8002354:	f002 fbe9 	bl	8004b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002358:	200b      	movs	r0, #11
 800235a:	f002 fc02 	bl	8004b62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800235e:	2200      	movs	r2, #0
 8002360:	2100      	movs	r1, #0
 8002362:	200d      	movs	r0, #13
 8002364:	f002 fbe1 	bl	8004b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002368:	200d      	movs	r0, #13
 800236a:	f002 fbfa 	bl	8004b62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	2100      	movs	r1, #0
 8002372:	2038      	movs	r0, #56	; 0x38
 8002374:	f002 fbd9 	bl	8004b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002378:	2038      	movs	r0, #56	; 0x38
 800237a:	f002 fbf2 	bl	8004b62 <HAL_NVIC_EnableIRQ>

}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000

0800238c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002392:	f107 0314 	add.w	r3, r7, #20
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]
 800239e:	60da      	str	r2, [r3, #12]
 80023a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a2:	4b2b      	ldr	r3, [pc, #172]	; (8002450 <MX_GPIO_Init+0xc4>)
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	4a2a      	ldr	r2, [pc, #168]	; (8002450 <MX_GPIO_Init+0xc4>)
 80023a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80023ac:	6153      	str	r3, [r2, #20]
 80023ae:	4b28      	ldr	r3, [pc, #160]	; (8002450 <MX_GPIO_Init+0xc4>)
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023ba:	4b25      	ldr	r3, [pc, #148]	; (8002450 <MX_GPIO_Init+0xc4>)
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	4a24      	ldr	r2, [pc, #144]	; (8002450 <MX_GPIO_Init+0xc4>)
 80023c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023c4:	6153      	str	r3, [r2, #20]
 80023c6:	4b22      	ldr	r3, [pc, #136]	; (8002450 <MX_GPIO_Init+0xc4>)
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d2:	4b1f      	ldr	r3, [pc, #124]	; (8002450 <MX_GPIO_Init+0xc4>)
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	4a1e      	ldr	r2, [pc, #120]	; (8002450 <MX_GPIO_Init+0xc4>)
 80023d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023dc:	6153      	str	r3, [r2, #20]
 80023de:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <MX_GPIO_Init+0xc4>)
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ea:	4b19      	ldr	r3, [pc, #100]	; (8002450 <MX_GPIO_Init+0xc4>)
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	4a18      	ldr	r2, [pc, #96]	; (8002450 <MX_GPIO_Init+0xc4>)
 80023f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f4:	6153      	str	r3, [r2, #20]
 80023f6:	4b16      	ldr	r3, [pc, #88]	; (8002450 <MX_GPIO_Init+0xc4>)
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023fe:	607b      	str	r3, [r7, #4]
 8002400:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002402:	2200      	movs	r2, #0
 8002404:	2120      	movs	r1, #32
 8002406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800240a:	f003 f9fd 	bl	8005808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800240e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002414:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <MX_GPIO_Init+0xc8>)
 8002416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	4619      	mov	r1, r3
 8002422:	480d      	ldr	r0, [pc, #52]	; (8002458 <MX_GPIO_Init+0xcc>)
 8002424:	f003 f866 	bl	80054f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002428:	2320      	movs	r3, #32
 800242a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800242c:	2301      	movs	r3, #1
 800242e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002430:	2302      	movs	r3, #2
 8002432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002434:	2303      	movs	r3, #3
 8002436:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	4619      	mov	r1, r3
 800243e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002442:	f003 f857 	bl	80054f4 <HAL_GPIO_Init>

}
 8002446:	bf00      	nop
 8002448:	3728      	adds	r7, #40	; 0x28
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000
 8002454:	10210000 	.word	0x10210000
 8002458:	48000800 	.word	0x48000800

0800245c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002460:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002462:	e7fe      	b.n	8002462 <Error_Handler+0x6>

08002464 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246a:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <HAL_MspInit+0x44>)
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	4a0e      	ldr	r2, [pc, #56]	; (80024a8 <HAL_MspInit+0x44>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6193      	str	r3, [r2, #24]
 8002476:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <HAL_MspInit+0x44>)
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	607b      	str	r3, [r7, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <HAL_MspInit+0x44>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	4a08      	ldr	r2, [pc, #32]	; (80024a8 <HAL_MspInit+0x44>)
 8002488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248c:	61d3      	str	r3, [r2, #28]
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_MspInit+0x44>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800249a:	2007      	movs	r0, #7
 800249c:	f002 fb3a 	bl	8004b14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40021000 	.word	0x40021000

080024ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08c      	sub	sp, #48	; 0x30
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	f107 031c 	add.w	r3, r7, #28
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024cc:	d15e      	bne.n	800258c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80024ce:	4b63      	ldr	r3, [pc, #396]	; (800265c <HAL_ADC_MspInit+0x1b0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	3301      	adds	r3, #1
 80024d4:	4a61      	ldr	r2, [pc, #388]	; (800265c <HAL_ADC_MspInit+0x1b0>)
 80024d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80024d8:	4b60      	ldr	r3, [pc, #384]	; (800265c <HAL_ADC_MspInit+0x1b0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d10b      	bne.n	80024f8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80024e0:	4b5f      	ldr	r3, [pc, #380]	; (8002660 <HAL_ADC_MspInit+0x1b4>)
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	4a5e      	ldr	r2, [pc, #376]	; (8002660 <HAL_ADC_MspInit+0x1b4>)
 80024e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ea:	6153      	str	r3, [r2, #20]
 80024ec:	4b5c      	ldr	r3, [pc, #368]	; (8002660 <HAL_ADC_MspInit+0x1b4>)
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f4:	61bb      	str	r3, [r7, #24]
 80024f6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f8:	4b59      	ldr	r3, [pc, #356]	; (8002660 <HAL_ADC_MspInit+0x1b4>)
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	4a58      	ldr	r2, [pc, #352]	; (8002660 <HAL_ADC_MspInit+0x1b4>)
 80024fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002502:	6153      	str	r3, [r2, #20]
 8002504:	4b56      	ldr	r3, [pc, #344]	; (8002660 <HAL_ADC_MspInit+0x1b4>)
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002510:	2301      	movs	r3, #1
 8002512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002514:	2303      	movs	r3, #3
 8002516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251c:	f107 031c 	add.w	r3, r7, #28
 8002520:	4619      	mov	r1, r3
 8002522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002526:	f002 ffe5 	bl	80054f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800252a:	4b4e      	ldr	r3, [pc, #312]	; (8002664 <HAL_ADC_MspInit+0x1b8>)
 800252c:	4a4e      	ldr	r2, [pc, #312]	; (8002668 <HAL_ADC_MspInit+0x1bc>)
 800252e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002530:	4b4c      	ldr	r3, [pc, #304]	; (8002664 <HAL_ADC_MspInit+0x1b8>)
 8002532:	2200      	movs	r2, #0
 8002534:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002536:	4b4b      	ldr	r3, [pc, #300]	; (8002664 <HAL_ADC_MspInit+0x1b8>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800253c:	4b49      	ldr	r3, [pc, #292]	; (8002664 <HAL_ADC_MspInit+0x1b8>)
 800253e:	2280      	movs	r2, #128	; 0x80
 8002540:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002542:	4b48      	ldr	r3, [pc, #288]	; (8002664 <HAL_ADC_MspInit+0x1b8>)
 8002544:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002548:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800254a:	4b46      	ldr	r3, [pc, #280]	; (8002664 <HAL_ADC_MspInit+0x1b8>)
 800254c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002550:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002552:	4b44      	ldr	r3, [pc, #272]	; (8002664 <HAL_ADC_MspInit+0x1b8>)
 8002554:	2220      	movs	r2, #32
 8002556:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002558:	4b42      	ldr	r3, [pc, #264]	; (8002664 <HAL_ADC_MspInit+0x1b8>)
 800255a:	2200      	movs	r2, #0
 800255c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800255e:	4841      	ldr	r0, [pc, #260]	; (8002664 <HAL_ADC_MspInit+0x1b8>)
 8002560:	f002 fd9d 	bl	800509e <HAL_DMA_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 800256a:	f7ff ff77 	bl	800245c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a3c      	ldr	r2, [pc, #240]	; (8002664 <HAL_ADC_MspInit+0x1b8>)
 8002572:	639a      	str	r2, [r3, #56]	; 0x38
 8002574:	4a3b      	ldr	r2, [pc, #236]	; (8002664 <HAL_ADC_MspInit+0x1b8>)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	2012      	movs	r0, #18
 8002580:	f002 fad3 	bl	8004b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002584:	2012      	movs	r0, #18
 8002586:	f002 faec 	bl	8004b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800258a:	e062      	b.n	8002652 <HAL_ADC_MspInit+0x1a6>
  else if(hadc->Instance==ADC2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a36      	ldr	r2, [pc, #216]	; (800266c <HAL_ADC_MspInit+0x1c0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d15d      	bne.n	8002652 <HAL_ADC_MspInit+0x1a6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002596:	4b31      	ldr	r3, [pc, #196]	; (800265c <HAL_ADC_MspInit+0x1b0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	3301      	adds	r3, #1
 800259c:	4a2f      	ldr	r2, [pc, #188]	; (800265c <HAL_ADC_MspInit+0x1b0>)
 800259e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80025a0:	4b2e      	ldr	r3, [pc, #184]	; (800265c <HAL_ADC_MspInit+0x1b0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d10b      	bne.n	80025c0 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80025a8:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <HAL_ADC_MspInit+0x1b4>)
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	4a2c      	ldr	r2, [pc, #176]	; (8002660 <HAL_ADC_MspInit+0x1b4>)
 80025ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b2:	6153      	str	r3, [r2, #20]
 80025b4:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <HAL_ADC_MspInit+0x1b4>)
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c0:	4b27      	ldr	r3, [pc, #156]	; (8002660 <HAL_ADC_MspInit+0x1b4>)
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	4a26      	ldr	r2, [pc, #152]	; (8002660 <HAL_ADC_MspInit+0x1b4>)
 80025c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ca:	6153      	str	r3, [r2, #20]
 80025cc:	4b24      	ldr	r3, [pc, #144]	; (8002660 <HAL_ADC_MspInit+0x1b4>)
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025d8:	2340      	movs	r3, #64	; 0x40
 80025da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025dc:	2303      	movs	r3, #3
 80025de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e4:	f107 031c 	add.w	r3, r7, #28
 80025e8:	4619      	mov	r1, r3
 80025ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ee:	f002 ff81 	bl	80054f4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 80025f2:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <HAL_ADC_MspInit+0x1c4>)
 80025f4:	4a1f      	ldr	r2, [pc, #124]	; (8002674 <HAL_ADC_MspInit+0x1c8>)
 80025f6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025f8:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <HAL_ADC_MspInit+0x1c4>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80025fe:	4b1c      	ldr	r3, [pc, #112]	; (8002670 <HAL_ADC_MspInit+0x1c4>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002604:	4b1a      	ldr	r3, [pc, #104]	; (8002670 <HAL_ADC_MspInit+0x1c4>)
 8002606:	2280      	movs	r2, #128	; 0x80
 8002608:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800260a:	4b19      	ldr	r3, [pc, #100]	; (8002670 <HAL_ADC_MspInit+0x1c4>)
 800260c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002610:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002612:	4b17      	ldr	r3, [pc, #92]	; (8002670 <HAL_ADC_MspInit+0x1c4>)
 8002614:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002618:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <HAL_ADC_MspInit+0x1c4>)
 800261c:	2220      	movs	r2, #32
 800261e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002620:	4b13      	ldr	r3, [pc, #76]	; (8002670 <HAL_ADC_MspInit+0x1c4>)
 8002622:	2200      	movs	r2, #0
 8002624:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002626:	4812      	ldr	r0, [pc, #72]	; (8002670 <HAL_ADC_MspInit+0x1c4>)
 8002628:	f002 fd39 	bl	800509e <HAL_DMA_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_ADC_MspInit+0x18a>
      Error_Handler();
 8002632:	f7ff ff13 	bl	800245c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a0d      	ldr	r2, [pc, #52]	; (8002670 <HAL_ADC_MspInit+0x1c4>)
 800263a:	639a      	str	r2, [r3, #56]	; 0x38
 800263c:	4a0c      	ldr	r2, [pc, #48]	; (8002670 <HAL_ADC_MspInit+0x1c4>)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002642:	2200      	movs	r2, #0
 8002644:	2100      	movs	r1, #0
 8002646:	2012      	movs	r0, #18
 8002648:	f002 fa6f 	bl	8004b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800264c:	2012      	movs	r0, #18
 800264e:	f002 fa88 	bl	8004b62 <HAL_NVIC_EnableIRQ>
}
 8002652:	bf00      	nop
 8002654:	3730      	adds	r7, #48	; 0x30
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000c28 	.word	0x20000c28
 8002660:	40021000 	.word	0x40021000
 8002664:	20000dc8 	.word	0x20000dc8
 8002668:	40020008 	.word	0x40020008
 800266c:	50000100 	.word	0x50000100
 8002670:	2000d22c 	.word	0x2000d22c
 8002674:	40020408 	.word	0x40020408

08002678 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	; 0x28
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002680:	f107 0314 	add.w	r3, r7, #20
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a31      	ldr	r2, [pc, #196]	; (800275c <HAL_DAC_MspInit+0xe4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d15b      	bne.n	8002752 <HAL_DAC_MspInit+0xda>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800269a:	4b31      	ldr	r3, [pc, #196]	; (8002760 <HAL_DAC_MspInit+0xe8>)
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	4a30      	ldr	r2, [pc, #192]	; (8002760 <HAL_DAC_MspInit+0xe8>)
 80026a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026a4:	61d3      	str	r3, [r2, #28]
 80026a6:	4b2e      	ldr	r3, [pc, #184]	; (8002760 <HAL_DAC_MspInit+0xe8>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b2:	4b2b      	ldr	r3, [pc, #172]	; (8002760 <HAL_DAC_MspInit+0xe8>)
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	4a2a      	ldr	r2, [pc, #168]	; (8002760 <HAL_DAC_MspInit+0xe8>)
 80026b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026bc:	6153      	str	r3, [r2, #20]
 80026be:	4b28      	ldr	r3, [pc, #160]	; (8002760 <HAL_DAC_MspInit+0xe8>)
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026ca:	2310      	movs	r3, #16
 80026cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026ce:	2303      	movs	r3, #3
 80026d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d6:	f107 0314 	add.w	r3, r7, #20
 80026da:	4619      	mov	r1, r3
 80026dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026e0:	f002 ff08 	bl	80054f4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 80026e4:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <HAL_DAC_MspInit+0xec>)
 80026e6:	4a20      	ldr	r2, [pc, #128]	; (8002768 <HAL_DAC_MspInit+0xf0>)
 80026e8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026ea:	4b1e      	ldr	r3, [pc, #120]	; (8002764 <HAL_DAC_MspInit+0xec>)
 80026ec:	2210      	movs	r2, #16
 80026ee:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f0:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <HAL_DAC_MspInit+0xec>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80026f6:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <HAL_DAC_MspInit+0xec>)
 80026f8:	2280      	movs	r2, #128	; 0x80
 80026fa:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_DAC_MspInit+0xec>)
 80026fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002702:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002704:	4b17      	ldr	r3, [pc, #92]	; (8002764 <HAL_DAC_MspInit+0xec>)
 8002706:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800270a:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800270c:	4b15      	ldr	r3, [pc, #84]	; (8002764 <HAL_DAC_MspInit+0xec>)
 800270e:	2220      	movs	r2, #32
 8002710:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002712:	4b14      	ldr	r3, [pc, #80]	; (8002764 <HAL_DAC_MspInit+0xec>)
 8002714:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002718:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800271a:	4812      	ldr	r0, [pc, #72]	; (8002764 <HAL_DAC_MspInit+0xec>)
 800271c:	f002 fcbf 	bl	800509e <HAL_DMA_Init>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8002726:	f7ff fe99 	bl	800245c <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <HAL_DAC_MspInit+0xf4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a0f      	ldr	r2, [pc, #60]	; (800276c <HAL_DAC_MspInit+0xf4>)
 8002730:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002734:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <HAL_DAC_MspInit+0xec>)
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	4a09      	ldr	r2, [pc, #36]	; (8002764 <HAL_DAC_MspInit+0xec>)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6253      	str	r3, [r2, #36]	; 0x24

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002742:	2200      	movs	r2, #0
 8002744:	2100      	movs	r1, #0
 8002746:	2036      	movs	r0, #54	; 0x36
 8002748:	f002 f9ef 	bl	8004b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800274c:	2036      	movs	r0, #54	; 0x36
 800274e:	f002 fa08 	bl	8004b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002752:	bf00      	nop
 8002754:	3728      	adds	r7, #40	; 0x28
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40007400 	.word	0x40007400
 8002760:	40021000 	.word	0x40021000
 8002764:	20000ce8 	.word	0x20000ce8
 8002768:	40020030 	.word	0x40020030
 800276c:	40010000 	.word	0x40010000

08002770 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002780:	d114      	bne.n	80027ac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002782:	4b22      	ldr	r3, [pc, #136]	; (800280c <HAL_TIM_Base_MspInit+0x9c>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	4a21      	ldr	r2, [pc, #132]	; (800280c <HAL_TIM_Base_MspInit+0x9c>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	61d3      	str	r3, [r2, #28]
 800278e:	4b1f      	ldr	r3, [pc, #124]	; (800280c <HAL_TIM_Base_MspInit+0x9c>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800279a:	2200      	movs	r2, #0
 800279c:	2100      	movs	r1, #0
 800279e:	201c      	movs	r0, #28
 80027a0:	f002 f9c3 	bl	8004b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027a4:	201c      	movs	r0, #28
 80027a6:	f002 f9dc 	bl	8004b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80027aa:	e02a      	b.n	8002802 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a17      	ldr	r2, [pc, #92]	; (8002810 <HAL_TIM_Base_MspInit+0xa0>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d10c      	bne.n	80027d0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <HAL_TIM_Base_MspInit+0x9c>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	4a14      	ldr	r2, [pc, #80]	; (800280c <HAL_TIM_Base_MspInit+0x9c>)
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	61d3      	str	r3, [r2, #28]
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_TIM_Base_MspInit+0x9c>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	693b      	ldr	r3, [r7, #16]
}
 80027ce:	e018      	b.n	8002802 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a0f      	ldr	r2, [pc, #60]	; (8002814 <HAL_TIM_Base_MspInit+0xa4>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d113      	bne.n	8002802 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027da:	4b0c      	ldr	r3, [pc, #48]	; (800280c <HAL_TIM_Base_MspInit+0x9c>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	4a0b      	ldr	r2, [pc, #44]	; (800280c <HAL_TIM_Base_MspInit+0x9c>)
 80027e0:	f043 0304 	orr.w	r3, r3, #4
 80027e4:	61d3      	str	r3, [r2, #28]
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <HAL_TIM_Base_MspInit+0x9c>)
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2100      	movs	r1, #0
 80027f6:	201e      	movs	r0, #30
 80027f8:	f002 f997 	bl	8004b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027fc:	201e      	movs	r0, #30
 80027fe:	f002 f9b0 	bl	8004b62 <HAL_NVIC_EnableIRQ>
}
 8002802:	bf00      	nop
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	40000400 	.word	0x40000400
 8002814:	40000800 	.word	0x40000800

08002818 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 030c 	add.w	r3, r7, #12
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a11      	ldr	r2, [pc, #68]	; (800287c <HAL_TIM_MspPostInit+0x64>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d11b      	bne.n	8002872 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800283a:	4b11      	ldr	r3, [pc, #68]	; (8002880 <HAL_TIM_MspPostInit+0x68>)
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	4a10      	ldr	r2, [pc, #64]	; (8002880 <HAL_TIM_MspPostInit+0x68>)
 8002840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002844:	6153      	str	r3, [r2, #20]
 8002846:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <HAL_TIM_MspPostInit+0x68>)
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002852:	2301      	movs	r3, #1
 8002854:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002856:	2302      	movs	r3, #2
 8002858:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285e:	2300      	movs	r3, #0
 8002860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002862:	2302      	movs	r3, #2
 8002864:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002866:	f107 030c 	add.w	r3, r7, #12
 800286a:	4619      	mov	r1, r3
 800286c:	4805      	ldr	r0, [pc, #20]	; (8002884 <HAL_TIM_MspPostInit+0x6c>)
 800286e:	f002 fe41 	bl	80054f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002872:	bf00      	nop
 8002874:	3720      	adds	r7, #32
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40000400 	.word	0x40000400
 8002880:	40021000 	.word	0x40021000
 8002884:	48000400 	.word	0x48000400

08002888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08a      	sub	sp, #40	; 0x28
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002890:	f107 0314 	add.w	r3, r7, #20
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1b      	ldr	r2, [pc, #108]	; (8002914 <HAL_UART_MspInit+0x8c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d130      	bne.n	800290c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028aa:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <HAL_UART_MspInit+0x90>)
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	4a1a      	ldr	r2, [pc, #104]	; (8002918 <HAL_UART_MspInit+0x90>)
 80028b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b4:	61d3      	str	r3, [r2, #28]
 80028b6:	4b18      	ldr	r3, [pc, #96]	; (8002918 <HAL_UART_MspInit+0x90>)
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c2:	4b15      	ldr	r3, [pc, #84]	; (8002918 <HAL_UART_MspInit+0x90>)
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	4a14      	ldr	r2, [pc, #80]	; (8002918 <HAL_UART_MspInit+0x90>)
 80028c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028cc:	6153      	str	r3, [r2, #20]
 80028ce:	4b12      	ldr	r3, [pc, #72]	; (8002918 <HAL_UART_MspInit+0x90>)
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80028da:	230c      	movs	r3, #12
 80028dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028de:	2302      	movs	r3, #2
 80028e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e6:	2300      	movs	r3, #0
 80028e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028ea:	2307      	movs	r3, #7
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ee:	f107 0314 	add.w	r3, r7, #20
 80028f2:	4619      	mov	r1, r3
 80028f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028f8:	f002 fdfc 	bl	80054f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80028fc:	2200      	movs	r2, #0
 80028fe:	2100      	movs	r1, #0
 8002900:	2026      	movs	r0, #38	; 0x26
 8002902:	f002 f912 	bl	8004b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002906:	2026      	movs	r0, #38	; 0x26
 8002908:	f002 f92b 	bl	8004b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800290c:	bf00      	nop
 800290e:	3728      	adds	r7, #40	; 0x28
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40004400 	.word	0x40004400
 8002918:	40021000 	.word	0x40021000

0800291c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002920:	e7fe      	b.n	8002920 <NMI_Handler+0x4>
	...

08002924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printStr("Error: Hard fault");
 8002928:	4801      	ldr	r0, [pc, #4]	; (8002930 <HardFault_Handler+0xc>)
 800292a:	f7fe f917 	bl	8000b5c <printStr>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800292e:	e7fe      	b.n	800292e <HardFault_Handler+0xa>
 8002930:	0800b8c4 	.word	0x0800b8c4

08002934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002938:	e7fe      	b.n	8002938 <MemManage_Handler+0x4>
	...

0800293c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  printStr("Error: Bus fault");
 8002940:	4801      	ldr	r0, [pc, #4]	; (8002948 <BusFault_Handler+0xc>)
 8002942:	f7fe f90b 	bl	8000b5c <printStr>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002946:	e7fe      	b.n	8002946 <BusFault_Handler+0xa>
 8002948:	0800b8d8 	.word	0x0800b8d8

0800294c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  printStr("Error: Usage fault");
 8002950:	4801      	ldr	r0, [pc, #4]	; (8002958 <UsageFault_Handler+0xc>)
 8002952:	f7fe f903 	bl	8000b5c <printStr>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002956:	e7fe      	b.n	8002956 <UsageFault_Handler+0xa>
 8002958:	0800b8ec 	.word	0x0800b8ec

0800295c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800296a:	b480      	push	{r7}
 800296c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800298a:	f000 f905 	bl	8002b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002998:	4802      	ldr	r0, [pc, #8]	; (80029a4 <DMA1_Channel1_IRQHandler+0x10>)
 800299a:	f002 fc9d 	bl	80052d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000dc8 	.word	0x20000dc8

080029a8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80029ac:	4802      	ldr	r0, [pc, #8]	; (80029b8 <DMA1_Channel3_IRQHandler+0x10>)
 80029ae:	f002 fc93 	bl	80052d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20000ce8 	.word	0x20000ce8

080029bc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80029c0:	4803      	ldr	r0, [pc, #12]	; (80029d0 <ADC1_2_IRQHandler+0x14>)
 80029c2:	f000 fef3 	bl	80037ac <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80029c6:	4803      	ldr	r0, [pc, #12]	; (80029d4 <ADC1_2_IRQHandler+0x18>)
 80029c8:	f000 fef0 	bl	80037ac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000d78 	.word	0x20000d78
 80029d4:	20000c98 	.word	0x20000c98

080029d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029dc:	4802      	ldr	r0, [pc, #8]	; (80029e8 <TIM2_IRQHandler+0x10>)
 80029de:	f004 fcc3 	bl	8007368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	2000d15c 	.word	0x2000d15c

080029ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80029f0:	4802      	ldr	r0, [pc, #8]	; (80029fc <TIM4_IRQHandler+0x10>)
 80029f2:	f004 fcb9 	bl	8007368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20000c38 	.word	0x20000c38

08002a00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8002a04:	4802      	ldr	r0, [pc, #8]	; (8002a10 <TIM6_DAC_IRQHandler+0x10>)
 8002a06:	f002 fa0f 	bl	8004e28 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000c84 	.word	0x20000c84

08002a14 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002a18:	4802      	ldr	r0, [pc, #8]	; (8002a24 <DMA2_Channel1_IRQHandler+0x10>)
 8002a1a:	f002 fc5d 	bl	80052d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	2000d22c 	.word	0x2000d22c

08002a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a30:	4a14      	ldr	r2, [pc, #80]	; (8002a84 <_sbrk+0x5c>)
 8002a32:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <_sbrk+0x60>)
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a3c:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <_sbrk+0x64>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d102      	bne.n	8002a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a44:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <_sbrk+0x64>)
 8002a46:	4a12      	ldr	r2, [pc, #72]	; (8002a90 <_sbrk+0x68>)
 8002a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a4a:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <_sbrk+0x64>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4413      	add	r3, r2
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d207      	bcs.n	8002a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a58:	f006 fe6e 	bl	8009738 <__errno>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	230c      	movs	r3, #12
 8002a60:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002a62:	f04f 33ff 	mov.w	r3, #4294967295
 8002a66:	e009      	b.n	8002a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a68:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <_sbrk+0x64>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a6e:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <_sbrk+0x64>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	4a05      	ldr	r2, [pc, #20]	; (8002a8c <_sbrk+0x64>)
 8002a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20010000 	.word	0x20010000
 8002a88:	00000400 	.word	0x00000400
 8002a8c:	20000c2c 	.word	0x20000c2c
 8002a90:	2000d278 	.word	0x2000d278

08002a94 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <SystemInit+0x20>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9e:	4a05      	ldr	r2, [pc, #20]	; (8002ab4 <SystemInit+0x20>)
 8002aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002af0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002abc:	480d      	ldr	r0, [pc, #52]	; (8002af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002abe:	490e      	ldr	r1, [pc, #56]	; (8002af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ac0:	4a0e      	ldr	r2, [pc, #56]	; (8002afc <LoopForever+0xe>)
  movs r3, #0
 8002ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ac4:	e002      	b.n	8002acc <LoopCopyDataInit>

08002ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aca:	3304      	adds	r3, #4

08002acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ad0:	d3f9      	bcc.n	8002ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ad2:	4a0b      	ldr	r2, [pc, #44]	; (8002b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ad4:	4c0b      	ldr	r4, [pc, #44]	; (8002b04 <LoopForever+0x16>)
  movs r3, #0
 8002ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ad8:	e001      	b.n	8002ade <LoopFillZerobss>

08002ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002adc:	3204      	adds	r2, #4

08002ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ae0:	d3fb      	bcc.n	8002ada <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ae2:	f7ff ffd7 	bl	8002a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ae6:	f006 fe2d 	bl	8009744 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002aea:	f7fe fe73 	bl	80017d4 <main>

08002aee <LoopForever>:

LoopForever:
    b LoopForever
 8002aee:	e7fe      	b.n	8002aee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002af0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002af8:	20000bf8 	.word	0x20000bf8
  ldr r2, =_sidata
 8002afc:	0800bbd0 	.word	0x0800bbd0
  ldr r2, =_sbss
 8002b00:	20000bf8 	.word	0x20000bf8
  ldr r4, =_ebss
 8002b04:	2000d278 	.word	0x2000d278

08002b08 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b08:	e7fe      	b.n	8002b08 <ADC3_IRQHandler>
	...

08002b0c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b10:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <HAL_Init+0x28>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a07      	ldr	r2, [pc, #28]	; (8002b34 <HAL_Init+0x28>)
 8002b16:	f043 0310 	orr.w	r3, r3, #16
 8002b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b1c:	2003      	movs	r0, #3
 8002b1e:	f001 fff9 	bl	8004b14 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b22:	2000      	movs	r0, #0
 8002b24:	f000 f808 	bl	8002b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b28:	f7ff fc9c 	bl	8002464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40022000 	.word	0x40022000

08002b38 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_InitTick+0x54>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <HAL_InitTick+0x58>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b56:	4618      	mov	r0, r3
 8002b58:	f002 f811 	bl	8004b7e <HAL_SYSTICK_Config>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e00e      	b.n	8002b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b0f      	cmp	r3, #15
 8002b6a:	d80a      	bhi.n	8002b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	f04f 30ff 	mov.w	r0, #4294967295
 8002b74:	f001 ffd9 	bl	8004b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b78:	4a06      	ldr	r2, [pc, #24]	; (8002b94 <HAL_InitTick+0x5c>)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e000      	b.n	8002b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20000a1c 	.word	0x20000a1c
 8002b90:	20000a24 	.word	0x20000a24
 8002b94:	20000a20 	.word	0x20000a20

08002b98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_IncTick+0x20>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_IncTick+0x24>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <HAL_IncTick+0x24>)
 8002baa:	6013      	str	r3, [r2, #0]
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	20000a24 	.word	0x20000a24
 8002bbc:	2000d270 	.word	0x2000d270

08002bc0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return uwTick;  
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <HAL_GetTick+0x14>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	2000d270 	.word	0x2000d270

08002bd8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b09a      	sub	sp, #104	; 0x68
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e1e3      	b.n	8002ffc <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d176      	bne.n	8002d34 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d152      	bne.n	8002cf4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff fc1f 	bl	80024ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d13b      	bne.n	8002cf4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f001 fd6b 	bl	8004758 <ADC_Disable>
 8002c82:	4603      	mov	r3, r0
 8002c84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d12f      	bne.n	8002cf4 <HAL_ADC_Init+0xe0>
 8002c94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d12b      	bne.n	8002cf4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ca4:	f023 0302 	bic.w	r3, r3, #2
 8002ca8:	f043 0202 	orr.w	r2, r3, #2
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cbe:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002cce:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002cd0:	4b92      	ldr	r3, [pc, #584]	; (8002f1c <HAL_ADC_Init+0x308>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a92      	ldr	r2, [pc, #584]	; (8002f20 <HAL_ADC_Init+0x30c>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	0c9a      	lsrs	r2, r3, #18
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ce6:	e002      	b.n	8002cee <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f9      	bne.n	8002ce8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d007      	beq.n	8002d12 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002d0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d10:	d110      	bne.n	8002d34 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f023 0312 	bic.w	r3, r3, #18
 8002d1a:	f043 0210 	orr.w	r2, r3, #16
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	f043 0201 	orr.w	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	f003 0310 	and.w	r3, r3, #16
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f040 8150 	bne.w	8002fe2 <HAL_ADC_Init+0x3ce>
 8002d42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f040 814b 	bne.w	8002fe2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f040 8143 	bne.w	8002fe2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d64:	f043 0202 	orr.w	r2, r3, #2
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d74:	d004      	beq.n	8002d80 <HAL_ADC_Init+0x16c>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a6a      	ldr	r2, [pc, #424]	; (8002f24 <HAL_ADC_Init+0x310>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d101      	bne.n	8002d84 <HAL_ADC_Init+0x170>
 8002d80:	4b69      	ldr	r3, [pc, #420]	; (8002f28 <HAL_ADC_Init+0x314>)
 8002d82:	e000      	b.n	8002d86 <HAL_ADC_Init+0x172>
 8002d84:	4b69      	ldr	r3, [pc, #420]	; (8002f2c <HAL_ADC_Init+0x318>)
 8002d86:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d90:	d102      	bne.n	8002d98 <HAL_ADC_Init+0x184>
 8002d92:	4b64      	ldr	r3, [pc, #400]	; (8002f24 <HAL_ADC_Init+0x310>)
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	e01a      	b.n	8002dce <HAL_ADC_Init+0x1ba>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a61      	ldr	r2, [pc, #388]	; (8002f24 <HAL_ADC_Init+0x310>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d103      	bne.n	8002daa <HAL_ADC_Init+0x196>
 8002da2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	e011      	b.n	8002dce <HAL_ADC_Init+0x1ba>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a60      	ldr	r2, [pc, #384]	; (8002f30 <HAL_ADC_Init+0x31c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d102      	bne.n	8002dba <HAL_ADC_Init+0x1a6>
 8002db4:	4b5f      	ldr	r3, [pc, #380]	; (8002f34 <HAL_ADC_Init+0x320>)
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	e009      	b.n	8002dce <HAL_ADC_Init+0x1ba>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a5d      	ldr	r2, [pc, #372]	; (8002f34 <HAL_ADC_Init+0x320>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d102      	bne.n	8002dca <HAL_ADC_Init+0x1b6>
 8002dc4:	4b5a      	ldr	r3, [pc, #360]	; (8002f30 <HAL_ADC_Init+0x31c>)
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	e001      	b.n	8002dce <HAL_ADC_Init+0x1ba>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d108      	bne.n	8002dee <HAL_ADC_Init+0x1da>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_ADC_Init+0x1da>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <HAL_ADC_Init+0x1dc>
 8002dee:	2300      	movs	r3, #0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d11c      	bne.n	8002e2e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002df4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d010      	beq.n	8002e1c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d107      	bne.n	8002e16 <HAL_ADC_Init+0x202>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_ADC_Init+0x202>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <HAL_ADC_Init+0x204>
 8002e16:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d108      	bne.n	8002e2e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002e1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e2c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	7e5b      	ldrb	r3, [r3, #25]
 8002e32:	035b      	lsls	r3, r3, #13
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e38:	2a01      	cmp	r2, #1
 8002e3a:	d002      	beq.n	8002e42 <HAL_ADC_Init+0x22e>
 8002e3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e40:	e000      	b.n	8002e44 <HAL_ADC_Init+0x230>
 8002e42:	2200      	movs	r2, #0
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e54:	4313      	orrs	r3, r2
 8002e56:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d11b      	bne.n	8002e9a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	7e5b      	ldrb	r3, [r3, #25]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	045a      	lsls	r2, r3, #17
 8002e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7a:	663b      	str	r3, [r7, #96]	; 0x60
 8002e7c:	e00d      	b.n	8002e9a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002e86:	f043 0220 	orr.w	r2, r3, #32
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	f043 0201 	orr.w	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d054      	beq.n	8002f4c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a22      	ldr	r2, [pc, #136]	; (8002f30 <HAL_ADC_Init+0x31c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d004      	beq.n	8002eb6 <HAL_ADC_Init+0x2a2>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a20      	ldr	r2, [pc, #128]	; (8002f34 <HAL_ADC_Init+0x320>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d140      	bne.n	8002f38 <HAL_ADC_Init+0x324>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002ebe:	d02a      	beq.n	8002f16 <HAL_ADC_Init+0x302>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec8:	d022      	beq.n	8002f10 <HAL_ADC_Init+0x2fc>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002ed2:	d01a      	beq.n	8002f0a <HAL_ADC_Init+0x2f6>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8002edc:	d012      	beq.n	8002f04 <HAL_ADC_Init+0x2f0>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002ee6:	d00a      	beq.n	8002efe <HAL_ADC_Init+0x2ea>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002ef0:	d002      	beq.n	8002ef8 <HAL_ADC_Init+0x2e4>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef6:	e023      	b.n	8002f40 <HAL_ADC_Init+0x32c>
 8002ef8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002efc:	e020      	b.n	8002f40 <HAL_ADC_Init+0x32c>
 8002efe:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002f02:	e01d      	b.n	8002f40 <HAL_ADC_Init+0x32c>
 8002f04:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002f08:	e01a      	b.n	8002f40 <HAL_ADC_Init+0x32c>
 8002f0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f0e:	e017      	b.n	8002f40 <HAL_ADC_Init+0x32c>
 8002f10:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002f14:	e014      	b.n	8002f40 <HAL_ADC_Init+0x32c>
 8002f16:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002f1a:	e011      	b.n	8002f40 <HAL_ADC_Init+0x32c>
 8002f1c:	20000a1c 	.word	0x20000a1c
 8002f20:	431bde83 	.word	0x431bde83
 8002f24:	50000100 	.word	0x50000100
 8002f28:	50000300 	.word	0x50000300
 8002f2c:	50000700 	.word	0x50000700
 8002f30:	50000400 	.word	0x50000400
 8002f34:	50000500 	.word	0x50000500
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f44:	4313      	orrs	r3, r2
 8002f46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d114      	bne.n	8002f84 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f68:	f023 0302 	bic.w	r3, r3, #2
 8002f6c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	7e1b      	ldrb	r3, [r3, #24]
 8002f72:	039a      	lsls	r2, r3, #14
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f80:	4313      	orrs	r3, r2
 8002f82:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	4b1e      	ldr	r3, [pc, #120]	; (8003004 <HAL_ADC_Init+0x3f0>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002f94:	430b      	orrs	r3, r1
 8002f96:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d10c      	bne.n	8002fba <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f023 010f 	bic.w	r1, r3, #15
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	1e5a      	subs	r2, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
 8002fb8:	e007      	b.n	8002fca <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 020f 	bic.w	r2, r2, #15
 8002fc8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	f023 0303 	bic.w	r3, r3, #3
 8002fd8:	f043 0201 	orr.w	r2, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	641a      	str	r2, [r3, #64]	; 0x40
 8002fe0:	e00a      	b.n	8002ff8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f023 0312 	bic.w	r3, r3, #18
 8002fea:	f043 0210 	orr.w	r2, r3, #16
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002ff8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3768      	adds	r7, #104	; 0x68
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	fff0c007 	.word	0xfff0c007

08003008 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b00      	cmp	r3, #0
 8003020:	f040 80f9 	bne.w	8003216 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_ADC_Start+0x2a>
 800302e:	2302      	movs	r3, #2
 8003030:	e0f4      	b.n	800321c <HAL_ADC_Start+0x214>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f001 fb2e 	bl	800469c <ADC_Enable>
 8003040:	4603      	mov	r3, r0
 8003042:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	2b00      	cmp	r3, #0
 8003048:	f040 80e0 	bne.w	800320c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003068:	d004      	beq.n	8003074 <HAL_ADC_Start+0x6c>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a6d      	ldr	r2, [pc, #436]	; (8003224 <HAL_ADC_Start+0x21c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d106      	bne.n	8003082 <HAL_ADC_Start+0x7a>
 8003074:	4b6c      	ldr	r3, [pc, #432]	; (8003228 <HAL_ADC_Start+0x220>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	2b00      	cmp	r3, #0
 800307e:	d010      	beq.n	80030a2 <HAL_ADC_Start+0x9a>
 8003080:	e005      	b.n	800308e <HAL_ADC_Start+0x86>
 8003082:	4b6a      	ldr	r3, [pc, #424]	; (800322c <HAL_ADC_Start+0x224>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <HAL_ADC_Start+0x9a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003096:	d004      	beq.n	80030a2 <HAL_ADC_Start+0x9a>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a64      	ldr	r2, [pc, #400]	; (8003230 <HAL_ADC_Start+0x228>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d115      	bne.n	80030ce <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d036      	beq.n	800312a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80030cc:	e02d      	b.n	800312a <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030e2:	d004      	beq.n	80030ee <HAL_ADC_Start+0xe6>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a4e      	ldr	r2, [pc, #312]	; (8003224 <HAL_ADC_Start+0x21c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d10a      	bne.n	8003104 <HAL_ADC_Start+0xfc>
 80030ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bf14      	ite	ne
 80030fc:	2301      	movne	r3, #1
 80030fe:	2300      	moveq	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	e008      	b.n	8003116 <HAL_ADC_Start+0x10e>
 8003104:	4b4a      	ldr	r3, [pc, #296]	; (8003230 <HAL_ADC_Start+0x228>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf14      	ite	ne
 8003110:	2301      	movne	r3, #1
 8003112:	2300      	moveq	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d007      	beq.n	800312a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003122:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003136:	d106      	bne.n	8003146 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313c:	f023 0206 	bic.w	r2, r3, #6
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	645a      	str	r2, [r3, #68]	; 0x44
 8003144:	e002      	b.n	800314c <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	221c      	movs	r2, #28
 800315a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003164:	d004      	beq.n	8003170 <HAL_ADC_Start+0x168>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a2e      	ldr	r2, [pc, #184]	; (8003224 <HAL_ADC_Start+0x21c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d106      	bne.n	800317e <HAL_ADC_Start+0x176>
 8003170:	4b2d      	ldr	r3, [pc, #180]	; (8003228 <HAL_ADC_Start+0x220>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	2b00      	cmp	r3, #0
 800317a:	d03e      	beq.n	80031fa <HAL_ADC_Start+0x1f2>
 800317c:	e005      	b.n	800318a <HAL_ADC_Start+0x182>
 800317e:	4b2b      	ldr	r3, [pc, #172]	; (800322c <HAL_ADC_Start+0x224>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 031f 	and.w	r3, r3, #31
 8003186:	2b00      	cmp	r3, #0
 8003188:	d037      	beq.n	80031fa <HAL_ADC_Start+0x1f2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003192:	d004      	beq.n	800319e <HAL_ADC_Start+0x196>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a22      	ldr	r2, [pc, #136]	; (8003224 <HAL_ADC_Start+0x21c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d106      	bne.n	80031ac <HAL_ADC_Start+0x1a4>
 800319e:	4b22      	ldr	r3, [pc, #136]	; (8003228 <HAL_ADC_Start+0x220>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 031f 	and.w	r3, r3, #31
 80031a6:	2b05      	cmp	r3, #5
 80031a8:	d027      	beq.n	80031fa <HAL_ADC_Start+0x1f2>
 80031aa:	e005      	b.n	80031b8 <HAL_ADC_Start+0x1b0>
 80031ac:	4b1f      	ldr	r3, [pc, #124]	; (800322c <HAL_ADC_Start+0x224>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	2b05      	cmp	r3, #5
 80031b6:	d020      	beq.n	80031fa <HAL_ADC_Start+0x1f2>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031c0:	d004      	beq.n	80031cc <HAL_ADC_Start+0x1c4>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a17      	ldr	r2, [pc, #92]	; (8003224 <HAL_ADC_Start+0x21c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d106      	bne.n	80031da <HAL_ADC_Start+0x1d2>
 80031cc:	4b16      	ldr	r3, [pc, #88]	; (8003228 <HAL_ADC_Start+0x220>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	2b09      	cmp	r3, #9
 80031d6:	d010      	beq.n	80031fa <HAL_ADC_Start+0x1f2>
 80031d8:	e005      	b.n	80031e6 <HAL_ADC_Start+0x1de>
 80031da:	4b14      	ldr	r3, [pc, #80]	; (800322c <HAL_ADC_Start+0x224>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 031f 	and.w	r3, r3, #31
 80031e2:	2b09      	cmp	r3, #9
 80031e4:	d009      	beq.n	80031fa <HAL_ADC_Start+0x1f2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031ee:	d004      	beq.n	80031fa <HAL_ADC_Start+0x1f2>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0e      	ldr	r2, [pc, #56]	; (8003230 <HAL_ADC_Start+0x228>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d10f      	bne.n	800321a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0204 	orr.w	r2, r2, #4
 8003208:	609a      	str	r2, [r3, #8]
 800320a:	e006      	b.n	800321a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003214:	e001      	b.n	800321a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003216:	2302      	movs	r3, #2
 8003218:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800321a:	7bfb      	ldrb	r3, [r7, #15]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	50000100 	.word	0x50000100
 8003228:	50000300 	.word	0x50000300
 800322c:	50000700 	.word	0x50000700
 8003230:	50000400 	.word	0x50000400

08003234 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_ADC_Stop+0x1a>
 800324a:	2302      	movs	r3, #2
 800324c:	e023      	b.n	8003296 <HAL_ADC_Stop+0x62>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003256:	216c      	movs	r1, #108	; 0x6c
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f001 fadd 	bl	8004818 <ADC_ConversionStop>
 800325e:	4603      	mov	r3, r0
 8003260:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d111      	bne.n	800328c <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f001 fa75 	bl	8004758 <ADC_Disable>
 800326e:	4603      	mov	r3, r0
 8003270:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d109      	bne.n	800328c <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	f043 0201 	orr.w	r2, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003294:	7bfb      	ldrb	r3, [r7, #15]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d102      	bne.n	80032bc <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80032b6:	2308      	movs	r3, #8
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	e03a      	b.n	8003332 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032c4:	d004      	beq.n	80032d0 <HAL_ADC_PollForConversion+0x30>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a6e      	ldr	r2, [pc, #440]	; (8003484 <HAL_ADC_PollForConversion+0x1e4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d101      	bne.n	80032d4 <HAL_ADC_PollForConversion+0x34>
 80032d0:	4b6d      	ldr	r3, [pc, #436]	; (8003488 <HAL_ADC_PollForConversion+0x1e8>)
 80032d2:	e000      	b.n	80032d6 <HAL_ADC_PollForConversion+0x36>
 80032d4:	4b6d      	ldr	r3, [pc, #436]	; (800348c <HAL_ADC_PollForConversion+0x1ec>)
 80032d6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d112      	bne.n	800330a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d11d      	bne.n	800332e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f043 0220 	orr.w	r2, r3, #32
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e0b8      	b.n	800347c <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00b      	beq.n	800332e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f043 0220 	orr.w	r2, r3, #32
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e0a6      	b.n	800347c <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800332e:	230c      	movs	r3, #12
 8003330:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800333a:	d004      	beq.n	8003346 <HAL_ADC_PollForConversion+0xa6>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a50      	ldr	r2, [pc, #320]	; (8003484 <HAL_ADC_PollForConversion+0x1e4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d106      	bne.n	8003354 <HAL_ADC_PollForConversion+0xb4>
 8003346:	4b50      	ldr	r3, [pc, #320]	; (8003488 <HAL_ADC_PollForConversion+0x1e8>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 031f 	and.w	r3, r3, #31
 800334e:	2b00      	cmp	r3, #0
 8003350:	d010      	beq.n	8003374 <HAL_ADC_PollForConversion+0xd4>
 8003352:	e005      	b.n	8003360 <HAL_ADC_PollForConversion+0xc0>
 8003354:	4b4d      	ldr	r3, [pc, #308]	; (800348c <HAL_ADC_PollForConversion+0x1ec>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 031f 	and.w	r3, r3, #31
 800335c:	2b00      	cmp	r3, #0
 800335e:	d009      	beq.n	8003374 <HAL_ADC_PollForConversion+0xd4>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003368:	d004      	beq.n	8003374 <HAL_ADC_PollForConversion+0xd4>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a48      	ldr	r2, [pc, #288]	; (8003490 <HAL_ADC_PollForConversion+0x1f0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d104      	bne.n	800337e <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	e00f      	b.n	800339e <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003386:	d004      	beq.n	8003392 <HAL_ADC_PollForConversion+0xf2>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a3d      	ldr	r2, [pc, #244]	; (8003484 <HAL_ADC_PollForConversion+0x1e4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d102      	bne.n	8003398 <HAL_ADC_PollForConversion+0xf8>
 8003392:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003396:	e000      	b.n	800339a <HAL_ADC_PollForConversion+0xfa>
 8003398:	4b3d      	ldr	r3, [pc, #244]	; (8003490 <HAL_ADC_PollForConversion+0x1f0>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800339e:	f7ff fc0f 	bl	8002bc0 <HAL_GetTick>
 80033a2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80033a4:	e01a      	b.n	80033dc <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ac:	d016      	beq.n	80033dc <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d007      	beq.n	80033c4 <HAL_ADC_PollForConversion+0x124>
 80033b4:	f7ff fc04 	bl	8002bc0 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d20b      	bcs.n	80033dc <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	f043 0204 	orr.w	r2, r3, #4
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e04f      	b.n	800347c <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0dd      	beq.n	80033a6 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003400:	2b00      	cmp	r3, #0
 8003402:	d131      	bne.n	8003468 <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800340a:	2b00      	cmp	r3, #0
 800340c:	d12c      	bne.n	8003468 <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b08      	cmp	r3, #8
 800341a:	d125      	bne.n	8003468 <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b00      	cmp	r3, #0
 8003428:	d112      	bne.n	8003450 <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d112      	bne.n	8003468 <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f043 0201 	orr.w	r2, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	641a      	str	r2, [r3, #64]	; 0x40
 800344e:	e00b      	b.n	8003468 <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	f043 0220 	orr.w	r2, r3, #32
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003460:	f043 0201 	orr.w	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d103      	bne.n	800347a <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	50000100 	.word	0x50000100
 8003488:	50000300 	.word	0x50000300
 800348c:	50000700 	.word	0x50000700
 8003490:	50000400 	.word	0x50000400

08003494 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034a0:	2300      	movs	r3, #0
 80034a2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f040 80f7 	bne.w	80036a2 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_ADC_Start_DMA+0x2e>
 80034be:	2302      	movs	r3, #2
 80034c0:	e0f2      	b.n	80036a8 <HAL_ADC_Start_DMA+0x214>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034d2:	d004      	beq.n	80034de <HAL_ADC_Start_DMA+0x4a>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a75      	ldr	r2, [pc, #468]	; (80036b0 <HAL_ADC_Start_DMA+0x21c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d109      	bne.n	80034f2 <HAL_ADC_Start_DMA+0x5e>
 80034de:	4b75      	ldr	r3, [pc, #468]	; (80036b4 <HAL_ADC_Start_DMA+0x220>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	bf0c      	ite	eq
 80034ea:	2301      	moveq	r3, #1
 80034ec:	2300      	movne	r3, #0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	e008      	b.n	8003504 <HAL_ADC_Start_DMA+0x70>
 80034f2:	4b71      	ldr	r3, [pc, #452]	; (80036b8 <HAL_ADC_Start_DMA+0x224>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 031f 	and.w	r3, r3, #31
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bf0c      	ite	eq
 80034fe:	2301      	moveq	r3, #1
 8003500:	2300      	movne	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 80c5 	beq.w	8003694 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f001 f8c6 	bl	800469c <ADC_Enable>
 8003510:	4603      	mov	r3, r0
 8003512:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003514:	7dfb      	ldrb	r3, [r7, #23]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f040 80b7 	bne.w	800368a <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003524:	f023 0301 	bic.w	r3, r3, #1
 8003528:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003538:	d004      	beq.n	8003544 <HAL_ADC_Start_DMA+0xb0>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a5c      	ldr	r2, [pc, #368]	; (80036b0 <HAL_ADC_Start_DMA+0x21c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d106      	bne.n	8003552 <HAL_ADC_Start_DMA+0xbe>
 8003544:	4b5b      	ldr	r3, [pc, #364]	; (80036b4 <HAL_ADC_Start_DMA+0x220>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 031f 	and.w	r3, r3, #31
 800354c:	2b00      	cmp	r3, #0
 800354e:	d010      	beq.n	8003572 <HAL_ADC_Start_DMA+0xde>
 8003550:	e005      	b.n	800355e <HAL_ADC_Start_DMA+0xca>
 8003552:	4b59      	ldr	r3, [pc, #356]	; (80036b8 <HAL_ADC_Start_DMA+0x224>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	2b00      	cmp	r3, #0
 800355c:	d009      	beq.n	8003572 <HAL_ADC_Start_DMA+0xde>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003566:	d004      	beq.n	8003572 <HAL_ADC_Start_DMA+0xde>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a53      	ldr	r2, [pc, #332]	; (80036bc <HAL_ADC_Start_DMA+0x228>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d115      	bne.n	800359e <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d036      	beq.n	80035fa <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003594:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800359c:	e02d      	b.n	80035fa <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035b2:	d004      	beq.n	80035be <HAL_ADC_Start_DMA+0x12a>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a3d      	ldr	r2, [pc, #244]	; (80036b0 <HAL_ADC_Start_DMA+0x21c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d10a      	bne.n	80035d4 <HAL_ADC_Start_DMA+0x140>
 80035be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	bf14      	ite	ne
 80035cc:	2301      	movne	r3, #1
 80035ce:	2300      	moveq	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	e008      	b.n	80035e6 <HAL_ADC_Start_DMA+0x152>
 80035d4:	4b39      	ldr	r3, [pc, #228]	; (80036bc <HAL_ADC_Start_DMA+0x228>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf14      	ite	ne
 80035e0:	2301      	movne	r3, #1
 80035e2:	2300      	moveq	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003606:	d106      	bne.n	8003616 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360c:	f023 0206 	bic.w	r2, r3, #6
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	645a      	str	r2, [r3, #68]	; 0x44
 8003614:	e002      	b.n	800361c <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003628:	4a25      	ldr	r2, [pc, #148]	; (80036c0 <HAL_ADC_Start_DMA+0x22c>)
 800362a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003630:	4a24      	ldr	r2, [pc, #144]	; (80036c4 <HAL_ADC_Start_DMA+0x230>)
 8003632:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003638:	4a23      	ldr	r2, [pc, #140]	; (80036c8 <HAL_ADC_Start_DMA+0x234>)
 800363a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	221c      	movs	r2, #28
 8003642:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0210 	orr.w	r2, r2, #16
 8003652:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0201 	orr.w	r2, r2, #1
 8003662:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3340      	adds	r3, #64	; 0x40
 800366e:	4619      	mov	r1, r3
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f001 fd5a 	bl	800512c <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0204 	orr.w	r2, r2, #4
 8003686:	609a      	str	r2, [r3, #8]
 8003688:	e00d      	b.n	80036a6 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003692:	e008      	b.n	80036a6 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80036a0:	e001      	b.n	80036a6 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80036a2:	2302      	movs	r3, #2
 80036a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80036a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	50000100 	.word	0x50000100
 80036b4:	50000300 	.word	0x50000300
 80036b8:	50000700 	.word	0x50000700
 80036bc:	50000400 	.word	0x50000400
 80036c0:	080045d1 	.word	0x080045d1
 80036c4:	0800464b 	.word	0x0800464b
 80036c8:	08004667 	.word	0x08004667

080036cc <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_ADC_Stop_DMA+0x1a>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e050      	b.n	8003788 <HAL_ADC_Stop_DMA+0xbc>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80036ee:	216c      	movs	r1, #108	; 0x6c
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f001 f891 	bl	8004818 <ADC_ConversionStop>
 80036f6:	4603      	mov	r3, r0
 80036f8:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d13e      	bne.n	800377e <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0201 	bic.w	r2, r2, #1
 800370e:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003718:	2b02      	cmp	r3, #2
 800371a:	d10f      	bne.n	800373c <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	4618      	mov	r0, r3
 8003722:	f001 fd62 	bl	80051ea <HAL_DMA_Abort>
 8003726:	4603      	mov	r3, r0
 8003728:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0210 	bic.w	r2, r2, #16
 800374a:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d105      	bne.n	800375e <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f001 f800 	bl	8004758 <ADC_Disable>
 8003758:	4603      	mov	r3, r0
 800375a:	73fb      	strb	r3, [r7, #15]
 800375c:	e002      	b.n	8003764 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fffa 	bl	8004758 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003764:	7bfb      	ldrb	r3, [r7, #15]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d109      	bne.n	800377e <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003772:	f023 0301 	bic.w	r3, r3, #1
 8003776:	f043 0201 	orr.w	r2, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003786:	7bfb      	ldrb	r3, [r7, #15]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800379e:	4618      	mov	r0, r3
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
	...

080037ac <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d106      	bne.n	80037dc <HAL_ADC_IRQHandler+0x30>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d00f      	beq.n	80037fc <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	f040 80c0 	bne.w	800396c <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	f040 80b8 	bne.w	800396c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	2b00      	cmp	r3, #0
 8003806:	d105      	bne.n	8003814 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800381c:	d004      	beq.n	8003828 <HAL_ADC_IRQHandler+0x7c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a95      	ldr	r2, [pc, #596]	; (8003a78 <HAL_ADC_IRQHandler+0x2cc>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d106      	bne.n	8003836 <HAL_ADC_IRQHandler+0x8a>
 8003828:	4b94      	ldr	r3, [pc, #592]	; (8003a7c <HAL_ADC_IRQHandler+0x2d0>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	2b00      	cmp	r3, #0
 8003832:	d03e      	beq.n	80038b2 <HAL_ADC_IRQHandler+0x106>
 8003834:	e005      	b.n	8003842 <HAL_ADC_IRQHandler+0x96>
 8003836:	4b92      	ldr	r3, [pc, #584]	; (8003a80 <HAL_ADC_IRQHandler+0x2d4>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 031f 	and.w	r3, r3, #31
 800383e:	2b00      	cmp	r3, #0
 8003840:	d037      	beq.n	80038b2 <HAL_ADC_IRQHandler+0x106>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800384a:	d004      	beq.n	8003856 <HAL_ADC_IRQHandler+0xaa>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a89      	ldr	r2, [pc, #548]	; (8003a78 <HAL_ADC_IRQHandler+0x2cc>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d106      	bne.n	8003864 <HAL_ADC_IRQHandler+0xb8>
 8003856:	4b89      	ldr	r3, [pc, #548]	; (8003a7c <HAL_ADC_IRQHandler+0x2d0>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	2b05      	cmp	r3, #5
 8003860:	d027      	beq.n	80038b2 <HAL_ADC_IRQHandler+0x106>
 8003862:	e005      	b.n	8003870 <HAL_ADC_IRQHandler+0xc4>
 8003864:	4b86      	ldr	r3, [pc, #536]	; (8003a80 <HAL_ADC_IRQHandler+0x2d4>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 031f 	and.w	r3, r3, #31
 800386c:	2b05      	cmp	r3, #5
 800386e:	d020      	beq.n	80038b2 <HAL_ADC_IRQHandler+0x106>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003878:	d004      	beq.n	8003884 <HAL_ADC_IRQHandler+0xd8>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a7e      	ldr	r2, [pc, #504]	; (8003a78 <HAL_ADC_IRQHandler+0x2cc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d106      	bne.n	8003892 <HAL_ADC_IRQHandler+0xe6>
 8003884:	4b7d      	ldr	r3, [pc, #500]	; (8003a7c <HAL_ADC_IRQHandler+0x2d0>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	2b09      	cmp	r3, #9
 800388e:	d010      	beq.n	80038b2 <HAL_ADC_IRQHandler+0x106>
 8003890:	e005      	b.n	800389e <HAL_ADC_IRQHandler+0xf2>
 8003892:	4b7b      	ldr	r3, [pc, #492]	; (8003a80 <HAL_ADC_IRQHandler+0x2d4>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	2b09      	cmp	r3, #9
 800389c:	d009      	beq.n	80038b2 <HAL_ADC_IRQHandler+0x106>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038a6:	d004      	beq.n	80038b2 <HAL_ADC_IRQHandler+0x106>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a75      	ldr	r2, [pc, #468]	; (8003a84 <HAL_ADC_IRQHandler+0x2d8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d104      	bne.n	80038bc <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	e00f      	b.n	80038dc <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038c4:	d004      	beq.n	80038d0 <HAL_ADC_IRQHandler+0x124>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a6b      	ldr	r2, [pc, #428]	; (8003a78 <HAL_ADC_IRQHandler+0x2cc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d102      	bne.n	80038d6 <HAL_ADC_IRQHandler+0x12a>
 80038d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80038d4:	e000      	b.n	80038d8 <HAL_ADC_IRQHandler+0x12c>
 80038d6:	4b6b      	ldr	r3, [pc, #428]	; (8003a84 <HAL_ADC_IRQHandler+0x2d8>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d139      	bne.n	800395e <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d134      	bne.n	800395e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d12d      	bne.n	800395e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d11a      	bne.n	8003946 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 020c 	bic.w	r2, r2, #12
 800391e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d112      	bne.n	800395e <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	f043 0201 	orr.w	r2, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	641a      	str	r2, [r3, #64]	; 0x40
 8003944:	e00b      	b.n	800395e <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f043 0210 	orr.w	r2, r3, #16
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003956:	f043 0201 	orr.w	r2, r3, #1
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fd fdf4 	bl	800154c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	220c      	movs	r2, #12
 800396a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	2b20      	cmp	r3, #32
 8003978:	d106      	bne.n	8003988 <HAL_ADC_IRQHandler+0x1dc>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b20      	cmp	r3, #32
 8003986:	d00f      	beq.n	80039a8 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8003992:	2b40      	cmp	r3, #64	; 0x40
 8003994:	f040 813c 	bne.w	8003c10 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a2:	2b40      	cmp	r3, #64	; 0x40
 80039a4:	f040 8134 	bne.w	8003c10 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039bc:	d004      	beq.n	80039c8 <HAL_ADC_IRQHandler+0x21c>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a2d      	ldr	r2, [pc, #180]	; (8003a78 <HAL_ADC_IRQHandler+0x2cc>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d106      	bne.n	80039d6 <HAL_ADC_IRQHandler+0x22a>
 80039c8:	4b2c      	ldr	r3, [pc, #176]	; (8003a7c <HAL_ADC_IRQHandler+0x2d0>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 031f 	and.w	r3, r3, #31
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d03e      	beq.n	8003a52 <HAL_ADC_IRQHandler+0x2a6>
 80039d4:	e005      	b.n	80039e2 <HAL_ADC_IRQHandler+0x236>
 80039d6:	4b2a      	ldr	r3, [pc, #168]	; (8003a80 <HAL_ADC_IRQHandler+0x2d4>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 031f 	and.w	r3, r3, #31
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d037      	beq.n	8003a52 <HAL_ADC_IRQHandler+0x2a6>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039ea:	d004      	beq.n	80039f6 <HAL_ADC_IRQHandler+0x24a>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a21      	ldr	r2, [pc, #132]	; (8003a78 <HAL_ADC_IRQHandler+0x2cc>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d106      	bne.n	8003a04 <HAL_ADC_IRQHandler+0x258>
 80039f6:	4b21      	ldr	r3, [pc, #132]	; (8003a7c <HAL_ADC_IRQHandler+0x2d0>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	2b05      	cmp	r3, #5
 8003a00:	d027      	beq.n	8003a52 <HAL_ADC_IRQHandler+0x2a6>
 8003a02:	e005      	b.n	8003a10 <HAL_ADC_IRQHandler+0x264>
 8003a04:	4b1e      	ldr	r3, [pc, #120]	; (8003a80 <HAL_ADC_IRQHandler+0x2d4>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	2b05      	cmp	r3, #5
 8003a0e:	d020      	beq.n	8003a52 <HAL_ADC_IRQHandler+0x2a6>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a18:	d004      	beq.n	8003a24 <HAL_ADC_IRQHandler+0x278>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a16      	ldr	r2, [pc, #88]	; (8003a78 <HAL_ADC_IRQHandler+0x2cc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d106      	bne.n	8003a32 <HAL_ADC_IRQHandler+0x286>
 8003a24:	4b15      	ldr	r3, [pc, #84]	; (8003a7c <HAL_ADC_IRQHandler+0x2d0>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	2b09      	cmp	r3, #9
 8003a2e:	d010      	beq.n	8003a52 <HAL_ADC_IRQHandler+0x2a6>
 8003a30:	e005      	b.n	8003a3e <HAL_ADC_IRQHandler+0x292>
 8003a32:	4b13      	ldr	r3, [pc, #76]	; (8003a80 <HAL_ADC_IRQHandler+0x2d4>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 031f 	and.w	r3, r3, #31
 8003a3a:	2b09      	cmp	r3, #9
 8003a3c:	d009      	beq.n	8003a52 <HAL_ADC_IRQHandler+0x2a6>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a46:	d004      	beq.n	8003a52 <HAL_ADC_IRQHandler+0x2a6>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a0d      	ldr	r2, [pc, #52]	; (8003a84 <HAL_ADC_IRQHandler+0x2d8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d104      	bne.n	8003a5c <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	e018      	b.n	8003a8e <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a64:	d004      	beq.n	8003a70 <HAL_ADC_IRQHandler+0x2c4>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a03      	ldr	r2, [pc, #12]	; (8003a78 <HAL_ADC_IRQHandler+0x2cc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d10b      	bne.n	8003a88 <HAL_ADC_IRQHandler+0x2dc>
 8003a70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a74:	e009      	b.n	8003a8a <HAL_ADC_IRQHandler+0x2de>
 8003a76:	bf00      	nop
 8003a78:	50000100 	.word	0x50000100
 8003a7c:	50000300 	.word	0x50000300
 8003a80:	50000700 	.word	0x50000700
 8003a84:	50000400 	.word	0x50000400
 8003a88:	4b9d      	ldr	r3, [pc, #628]	; (8003d00 <HAL_ADC_IRQHandler+0x554>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a94:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f040 80b2 	bne.w	8003c02 <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00d      	beq.n	8003ac4 <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f040 80a5 	bne.w	8003c02 <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f040 809f 	bne.w	8003c02 <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ace:	2b40      	cmp	r3, #64	; 0x40
 8003ad0:	f040 8097 	bne.w	8003c02 <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003adc:	d004      	beq.n	8003ae8 <HAL_ADC_IRQHandler+0x33c>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a88      	ldr	r2, [pc, #544]	; (8003d04 <HAL_ADC_IRQHandler+0x558>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d106      	bne.n	8003af6 <HAL_ADC_IRQHandler+0x34a>
 8003ae8:	4b87      	ldr	r3, [pc, #540]	; (8003d08 <HAL_ADC_IRQHandler+0x55c>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d03e      	beq.n	8003b72 <HAL_ADC_IRQHandler+0x3c6>
 8003af4:	e005      	b.n	8003b02 <HAL_ADC_IRQHandler+0x356>
 8003af6:	4b85      	ldr	r3, [pc, #532]	; (8003d0c <HAL_ADC_IRQHandler+0x560>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 031f 	and.w	r3, r3, #31
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d037      	beq.n	8003b72 <HAL_ADC_IRQHandler+0x3c6>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b0a:	d004      	beq.n	8003b16 <HAL_ADC_IRQHandler+0x36a>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a7c      	ldr	r2, [pc, #496]	; (8003d04 <HAL_ADC_IRQHandler+0x558>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d106      	bne.n	8003b24 <HAL_ADC_IRQHandler+0x378>
 8003b16:	4b7c      	ldr	r3, [pc, #496]	; (8003d08 <HAL_ADC_IRQHandler+0x55c>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 031f 	and.w	r3, r3, #31
 8003b1e:	2b06      	cmp	r3, #6
 8003b20:	d027      	beq.n	8003b72 <HAL_ADC_IRQHandler+0x3c6>
 8003b22:	e005      	b.n	8003b30 <HAL_ADC_IRQHandler+0x384>
 8003b24:	4b79      	ldr	r3, [pc, #484]	; (8003d0c <HAL_ADC_IRQHandler+0x560>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 031f 	and.w	r3, r3, #31
 8003b2c:	2b06      	cmp	r3, #6
 8003b2e:	d020      	beq.n	8003b72 <HAL_ADC_IRQHandler+0x3c6>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b38:	d004      	beq.n	8003b44 <HAL_ADC_IRQHandler+0x398>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a71      	ldr	r2, [pc, #452]	; (8003d04 <HAL_ADC_IRQHandler+0x558>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d106      	bne.n	8003b52 <HAL_ADC_IRQHandler+0x3a6>
 8003b44:	4b70      	ldr	r3, [pc, #448]	; (8003d08 <HAL_ADC_IRQHandler+0x55c>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 031f 	and.w	r3, r3, #31
 8003b4c:	2b07      	cmp	r3, #7
 8003b4e:	d010      	beq.n	8003b72 <HAL_ADC_IRQHandler+0x3c6>
 8003b50:	e005      	b.n	8003b5e <HAL_ADC_IRQHandler+0x3b2>
 8003b52:	4b6e      	ldr	r3, [pc, #440]	; (8003d0c <HAL_ADC_IRQHandler+0x560>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 031f 	and.w	r3, r3, #31
 8003b5a:	2b07      	cmp	r3, #7
 8003b5c:	d009      	beq.n	8003b72 <HAL_ADC_IRQHandler+0x3c6>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b66:	d004      	beq.n	8003b72 <HAL_ADC_IRQHandler+0x3c6>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a64      	ldr	r2, [pc, #400]	; (8003d00 <HAL_ADC_IRQHandler+0x554>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d104      	bne.n	8003b7c <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	e00f      	b.n	8003b9c <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b84:	d004      	beq.n	8003b90 <HAL_ADC_IRQHandler+0x3e4>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a5e      	ldr	r2, [pc, #376]	; (8003d04 <HAL_ADC_IRQHandler+0x558>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d102      	bne.n	8003b96 <HAL_ADC_IRQHandler+0x3ea>
 8003b90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b94:	e000      	b.n	8003b98 <HAL_ADC_IRQHandler+0x3ec>
 8003b96:	4b5a      	ldr	r3, [pc, #360]	; (8003d00 <HAL_ADC_IRQHandler+0x554>)
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d12d      	bne.n	8003c02 <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d11a      	bne.n	8003bea <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bc2:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d112      	bne.n	8003c02 <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be0:	f043 0201 	orr.w	r2, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40
 8003be8:	e00b      	b.n	8003c02 <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f043 0210 	orr.w	r2, r3, #16
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	f043 0201 	orr.w	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f8de 	bl	8003dc4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2260      	movs	r2, #96	; 0x60
 8003c0e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1a:	2b80      	cmp	r3, #128	; 0x80
 8003c1c:	d113      	bne.n	8003c46 <HAL_ADC_IRQHandler+0x49a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c28:	2b80      	cmp	r3, #128	; 0x80
 8003c2a:	d10c      	bne.n	8003c46 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7fe ffd7 	bl	8002bec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2280      	movs	r2, #128	; 0x80
 8003c44:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c54:	d115      	bne.n	8003c82 <HAL_ADC_IRQHandler+0x4d6>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c64:	d10d      	bne.n	8003c82 <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f8ba 	bl	8003dec <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c80:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c90:	d115      	bne.n	8003cbe <HAL_ADC_IRQHandler+0x512>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ca0:	d10d      	bne.n	8003cbe <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f8a6 	bl	8003e00 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cbc:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d151      	bne.n	8003d70 <HAL_ADC_IRQHandler+0x5c4>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f003 0310 	and.w	r3, r3, #16
 8003cd6:	2b10      	cmp	r3, #16
 8003cd8:	d14a      	bne.n	8003d70 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d102      	bne.n	8003ce8 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	e02d      	b.n	8003d44 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cf0:	d004      	beq.n	8003cfc <HAL_ADC_IRQHandler+0x550>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a03      	ldr	r2, [pc, #12]	; (8003d04 <HAL_ADC_IRQHandler+0x558>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d109      	bne.n	8003d10 <HAL_ADC_IRQHandler+0x564>
 8003cfc:	4b02      	ldr	r3, [pc, #8]	; (8003d08 <HAL_ADC_IRQHandler+0x55c>)
 8003cfe:	e008      	b.n	8003d12 <HAL_ADC_IRQHandler+0x566>
 8003d00:	50000400 	.word	0x50000400
 8003d04:	50000100 	.word	0x50000100
 8003d08:	50000300 	.word	0x50000300
 8003d0c:	50000700 	.word	0x50000700
 8003d10:	4b2b      	ldr	r3, [pc, #172]	; (8003dc0 <HAL_ADC_IRQHandler+0x614>)
 8003d12:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d109      	bne.n	8003d34 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d10a      	bne.n	8003d44 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8003d2e:	2301      	movs	r3, #1
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	e007      	b.n	8003d44 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8003d40:	2301      	movs	r3, #1
 8003d42:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d10e      	bne.n	8003d68 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5a:	f043 0202 	orr.w	r2, r3, #2
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7fe ff4c 	bl	8002c00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2210      	movs	r2, #16
 8003d6e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7e:	d11b      	bne.n	8003db8 <HAL_ADC_IRQHandler+0x60c>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d8e:	d113      	bne.n	8003db8 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da0:	f043 0208 	orr.w	r2, r3, #8
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003db0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f810 	bl	8003dd8 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8003db8:	bf00      	nop
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	50000700 	.word	0x50000700

08003dc4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b09b      	sub	sp, #108	; 0x6c
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x22>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e2cb      	b.n	80043ce <HAL_ADC_ConfigChannel+0x5ba>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f040 82af 	bne.w	80043ac <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d81c      	bhi.n	8003e90 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	4413      	add	r3, r2
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	461a      	mov	r2, r3
 8003e6a:	231f      	movs	r3, #31
 8003e6c:	4093      	lsls	r3, r2
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	4019      	ands	r1, r3
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	4413      	add	r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	fa00 f203 	lsl.w	r2, r0, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	631a      	str	r2, [r3, #48]	; 0x30
 8003e8e:	e063      	b.n	8003f58 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b09      	cmp	r3, #9
 8003e96:	d81e      	bhi.n	8003ed6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	4413      	add	r3, r2
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	3b1e      	subs	r3, #30
 8003eac:	221f      	movs	r2, #31
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	4019      	ands	r1, r3
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	4413      	add	r3, r2
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	3b1e      	subs	r3, #30
 8003ec8:	fa00 f203 	lsl.w	r2, r0, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	635a      	str	r2, [r3, #52]	; 0x34
 8003ed4:	e040      	b.n	8003f58 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b0e      	cmp	r3, #14
 8003edc:	d81e      	bhi.n	8003f1c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	4413      	add	r3, r2
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	3b3c      	subs	r3, #60	; 0x3c
 8003ef2:	221f      	movs	r2, #31
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	4019      	ands	r1, r3
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	6818      	ldr	r0, [r3, #0]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	4613      	mov	r3, r2
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	4413      	add	r3, r2
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	3b3c      	subs	r3, #60	; 0x3c
 8003f0e:	fa00 f203 	lsl.w	r2, r0, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	639a      	str	r2, [r3, #56]	; 0x38
 8003f1a:	e01d      	b.n	8003f58 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	4413      	add	r3, r2
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	3b5a      	subs	r3, #90	; 0x5a
 8003f30:	221f      	movs	r2, #31
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	43db      	mvns	r3, r3
 8003f38:	4019      	ands	r1, r3
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	4413      	add	r3, r2
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	3b5a      	subs	r3, #90	; 0x5a
 8003f4c:	fa00 f203 	lsl.w	r2, r0, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 030c 	and.w	r3, r3, #12
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f040 80e5 	bne.w	8004132 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b09      	cmp	r3, #9
 8003f6e:	d91c      	bls.n	8003faa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6999      	ldr	r1, [r3, #24]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	4413      	add	r3, r2
 8003f80:	3b1e      	subs	r3, #30
 8003f82:	2207      	movs	r2, #7
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	4019      	ands	r1, r3
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	6898      	ldr	r0, [r3, #8]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	4613      	mov	r3, r2
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	4413      	add	r3, r2
 8003f9a:	3b1e      	subs	r3, #30
 8003f9c:	fa00 f203 	lsl.w	r2, r0, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	619a      	str	r2, [r3, #24]
 8003fa8:	e019      	b.n	8003fde <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6959      	ldr	r1, [r3, #20]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	4413      	add	r3, r2
 8003fba:	2207      	movs	r2, #7
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	4019      	ands	r1, r3
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	6898      	ldr	r0, [r3, #8]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	4413      	add	r3, r2
 8003fd2:	fa00 f203 	lsl.w	r2, r0, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	08db      	lsrs	r3, r3, #3
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d84f      	bhi.n	80040a0 <HAL_ADC_ConfigChannel+0x28c>
 8004000:	a201      	add	r2, pc, #4	; (adr r2, 8004008 <HAL_ADC_ConfigChannel+0x1f4>)
 8004002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004006:	bf00      	nop
 8004008:	08004019 	.word	0x08004019
 800400c:	0800403b 	.word	0x0800403b
 8004010:	0800405d 	.word	0x0800405d
 8004014:	0800407f 	.word	0x0800407f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800401e:	4b9f      	ldr	r3, [pc, #636]	; (800429c <HAL_ADC_ConfigChannel+0x488>)
 8004020:	4013      	ands	r3, r2
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	6812      	ldr	r2, [r2, #0]
 8004026:	0691      	lsls	r1, r2, #26
 8004028:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800402a:	430a      	orrs	r2, r1
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004036:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004038:	e07e      	b.n	8004138 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004040:	4b96      	ldr	r3, [pc, #600]	; (800429c <HAL_ADC_ConfigChannel+0x488>)
 8004042:	4013      	ands	r3, r2
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	0691      	lsls	r1, r2, #26
 800404a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800404c:	430a      	orrs	r2, r1
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004058:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800405a:	e06d      	b.n	8004138 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004062:	4b8e      	ldr	r3, [pc, #568]	; (800429c <HAL_ADC_ConfigChannel+0x488>)
 8004064:	4013      	ands	r3, r2
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	6812      	ldr	r2, [r2, #0]
 800406a:	0691      	lsls	r1, r2, #26
 800406c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800406e:	430a      	orrs	r2, r1
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800407a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800407c:	e05c      	b.n	8004138 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004084:	4b85      	ldr	r3, [pc, #532]	; (800429c <HAL_ADC_ConfigChannel+0x488>)
 8004086:	4013      	ands	r3, r2
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	0691      	lsls	r1, r2, #26
 800408e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004090:	430a      	orrs	r2, r1
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800409c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800409e:	e04b      	b.n	8004138 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	069b      	lsls	r3, r3, #26
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d107      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80040c2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	069b      	lsls	r3, r3, #26
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d107      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80040e6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	069b      	lsls	r3, r3, #26
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d107      	bne.n	800410c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800410a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004112:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	069b      	lsls	r3, r3, #26
 800411c:	429a      	cmp	r2, r3
 800411e:	d10a      	bne.n	8004136 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800412e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004130:	e001      	b.n	8004136 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8004132:	bf00      	nop
 8004134:	e000      	b.n	8004138 <HAL_ADC_ConfigChannel+0x324>
      break;
 8004136:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	2b01      	cmp	r3, #1
 8004144:	d108      	bne.n	8004158 <HAL_ADC_ConfigChannel+0x344>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_ADC_ConfigChannel+0x344>
 8004154:	2301      	movs	r3, #1
 8004156:	e000      	b.n	800415a <HAL_ADC_ConfigChannel+0x346>
 8004158:	2300      	movs	r3, #0
 800415a:	2b00      	cmp	r3, #0
 800415c:	f040 8131 	bne.w	80043c2 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d00f      	beq.n	8004188 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2201      	movs	r2, #1
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43da      	mvns	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	400a      	ands	r2, r1
 8004182:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004186:	e049      	b.n	800421c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2201      	movs	r2, #1
 8004196:	409a      	lsls	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b09      	cmp	r3, #9
 80041a8:	d91c      	bls.n	80041e4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6999      	ldr	r1, [r3, #24]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	4613      	mov	r3, r2
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	4413      	add	r3, r2
 80041ba:	3b1b      	subs	r3, #27
 80041bc:	2207      	movs	r2, #7
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	43db      	mvns	r3, r3
 80041c4:	4019      	ands	r1, r3
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	6898      	ldr	r0, [r3, #8]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	4613      	mov	r3, r2
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	4413      	add	r3, r2
 80041d4:	3b1b      	subs	r3, #27
 80041d6:	fa00 f203 	lsl.w	r2, r0, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	619a      	str	r2, [r3, #24]
 80041e2:	e01b      	b.n	800421c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6959      	ldr	r1, [r3, #20]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	4613      	mov	r3, r2
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	4413      	add	r3, r2
 80041f6:	2207      	movs	r2, #7
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	43db      	mvns	r3, r3
 80041fe:	4019      	ands	r1, r3
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	6898      	ldr	r0, [r3, #8]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	4613      	mov	r3, r2
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	4413      	add	r3, r2
 8004210:	fa00 f203 	lsl.w	r2, r0, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004224:	d004      	beq.n	8004230 <HAL_ADC_ConfigChannel+0x41c>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a1d      	ldr	r2, [pc, #116]	; (80042a0 <HAL_ADC_ConfigChannel+0x48c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d101      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x420>
 8004230:	4b1c      	ldr	r3, [pc, #112]	; (80042a4 <HAL_ADC_ConfigChannel+0x490>)
 8004232:	e000      	b.n	8004236 <HAL_ADC_ConfigChannel+0x422>
 8004234:	4b1c      	ldr	r3, [pc, #112]	; (80042a8 <HAL_ADC_ConfigChannel+0x494>)
 8004236:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b10      	cmp	r3, #16
 800423e:	d105      	bne.n	800424c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004248:	2b00      	cmp	r3, #0
 800424a:	d015      	beq.n	8004278 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004250:	2b11      	cmp	r3, #17
 8004252:	d105      	bne.n	8004260 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00b      	beq.n	8004278 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004264:	2b12      	cmp	r3, #18
 8004266:	f040 80ac 	bne.w	80043c2 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800426a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004272:	2b00      	cmp	r3, #0
 8004274:	f040 80a5 	bne.w	80043c2 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004280:	d102      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x474>
 8004282:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <HAL_ADC_ConfigChannel+0x48c>)
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	e023      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x4bc>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a04      	ldr	r2, [pc, #16]	; (80042a0 <HAL_ADC_ConfigChannel+0x48c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d10c      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x498>
 8004292:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	e01a      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x4bc>
 800429a:	bf00      	nop
 800429c:	83fff000 	.word	0x83fff000
 80042a0:	50000100 	.word	0x50000100
 80042a4:	50000300 	.word	0x50000300
 80042a8:	50000700 	.word	0x50000700
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a4a      	ldr	r2, [pc, #296]	; (80043dc <HAL_ADC_ConfigChannel+0x5c8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d102      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x4a8>
 80042b6:	4b4a      	ldr	r3, [pc, #296]	; (80043e0 <HAL_ADC_ConfigChannel+0x5cc>)
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	e009      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x4bc>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a47      	ldr	r2, [pc, #284]	; (80043e0 <HAL_ADC_ConfigChannel+0x5cc>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d102      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x4b8>
 80042c6:	4b45      	ldr	r3, [pc, #276]	; (80043dc <HAL_ADC_ConfigChannel+0x5c8>)
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	e001      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x4bc>
 80042cc:	2300      	movs	r3, #0
 80042ce:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d108      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x4dc>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x4dc>
 80042ec:	2301      	movs	r3, #1
 80042ee:	e000      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x4de>
 80042f0:	2300      	movs	r3, #0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d150      	bne.n	8004398 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80042f6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d010      	beq.n	800431e <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 0303 	and.w	r3, r3, #3
 8004304:	2b01      	cmp	r3, #1
 8004306:	d107      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x504>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x504>
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <HAL_ADC_ConfigChannel+0x506>
 8004318:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800431a:	2b00      	cmp	r3, #0
 800431c:	d13c      	bne.n	8004398 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b10      	cmp	r3, #16
 8004324:	d11d      	bne.n	8004362 <HAL_ADC_ConfigChannel+0x54e>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800432e:	d118      	bne.n	8004362 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800433a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800433c:	4b29      	ldr	r3, [pc, #164]	; (80043e4 <HAL_ADC_ConfigChannel+0x5d0>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a29      	ldr	r2, [pc, #164]	; (80043e8 <HAL_ADC_ConfigChannel+0x5d4>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	0c9a      	lsrs	r2, r3, #18
 8004348:	4613      	mov	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004352:	e002      	b.n	800435a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	3b01      	subs	r3, #1
 8004358:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1f9      	bne.n	8004354 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004360:	e02e      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b11      	cmp	r3, #17
 8004368:	d10b      	bne.n	8004382 <HAL_ADC_ConfigChannel+0x56e>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004372:	d106      	bne.n	8004382 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800437c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800437e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004380:	e01e      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b12      	cmp	r3, #18
 8004388:	d11a      	bne.n	80043c0 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800438a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004394:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004396:	e013      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	f043 0220 	orr.w	r2, r3, #32
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80043aa:	e00a      	b.n	80043c2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b0:	f043 0220 	orr.w	r2, r3, #32
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80043be:	e000      	b.n	80043c2 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80043c0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80043ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	376c      	adds	r7, #108	; 0x6c
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	50000400 	.word	0x50000400
 80043e0:	50000500 	.word	0x50000500
 80043e4:	20000a1c 	.word	0x20000a1c
 80043e8:	431bde83 	.word	0x431bde83

080043ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b099      	sub	sp, #100	; 0x64
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004404:	d102      	bne.n	800440c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8004406:	4b6d      	ldr	r3, [pc, #436]	; (80045bc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004408:	60bb      	str	r3, [r7, #8]
 800440a:	e01a      	b.n	8004442 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a6a      	ldr	r2, [pc, #424]	; (80045bc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d103      	bne.n	800441e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8004416:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800441a:	60bb      	str	r3, [r7, #8]
 800441c:	e011      	b.n	8004442 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a67      	ldr	r2, [pc, #412]	; (80045c0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d102      	bne.n	800442e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004428:	4b66      	ldr	r3, [pc, #408]	; (80045c4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800442a:	60bb      	str	r3, [r7, #8]
 800442c:	e009      	b.n	8004442 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a64      	ldr	r2, [pc, #400]	; (80045c4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d102      	bne.n	800443e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004438:	4b61      	ldr	r3, [pc, #388]	; (80045c0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	e001      	b.n	8004442 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800443e:	2300      	movs	r3, #0
 8004440:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e0b0      	b.n	80045ae <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8004456:	2302      	movs	r3, #2
 8004458:	e0a9      	b.n	80045ae <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	f040 808d 	bne.w	800458c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b00      	cmp	r3, #0
 800447c:	f040 8086 	bne.w	800458c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004488:	d004      	beq.n	8004494 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a4b      	ldr	r2, [pc, #300]	; (80045bc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d101      	bne.n	8004498 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004494:	4b4c      	ldr	r3, [pc, #304]	; (80045c8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8004496:	e000      	b.n	800449a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004498:	4b4c      	ldr	r3, [pc, #304]	; (80045cc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800449a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d040      	beq.n	8004526 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80044a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	6859      	ldr	r1, [r3, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044b6:	035b      	lsls	r3, r3, #13
 80044b8:	430b      	orrs	r3, r1
 80044ba:	431a      	orrs	r2, r3
 80044bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044be:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d108      	bne.n	80044e0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80044e0:	2300      	movs	r3, #0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d15c      	bne.n	80045a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d107      	bne.n	8004502 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80044fe:	2301      	movs	r3, #1
 8004500:	e000      	b.n	8004504 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8004502:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004504:	2b00      	cmp	r3, #0
 8004506:	d14b      	bne.n	80045a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004508:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004510:	f023 030f 	bic.w	r3, r3, #15
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	6811      	ldr	r1, [r2, #0]
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	6892      	ldr	r2, [r2, #8]
 800451c:	430a      	orrs	r2, r1
 800451e:	431a      	orrs	r2, r3
 8004520:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004522:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004524:	e03c      	b.n	80045a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004526:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800452e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004530:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 0303 	and.w	r3, r3, #3
 800453c:	2b01      	cmp	r3, #1
 800453e:	d108      	bne.n	8004552 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004552:	2300      	movs	r3, #0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d123      	bne.n	80045a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 0303 	and.w	r3, r3, #3
 8004560:	2b01      	cmp	r3, #1
 8004562:	d107      	bne.n	8004574 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8004574:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004576:	2b00      	cmp	r3, #0
 8004578:	d112      	bne.n	80045a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800457a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004582:	f023 030f 	bic.w	r3, r3, #15
 8004586:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004588:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800458a:	e009      	b.n	80045a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	f043 0220 	orr.w	r2, r3, #32
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800459e:	e000      	b.n	80045a2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80045a0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80045aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80045ae:	4618      	mov	r0, r3
 80045b0:	3764      	adds	r7, #100	; 0x64
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	50000100 	.word	0x50000100
 80045c0:	50000400 	.word	0x50000400
 80045c4:	50000500 	.word	0x50000500
 80045c8:	50000300 	.word	0x50000300
 80045cc:	50000700 	.word	0x50000700

080045d0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d126      	bne.n	8004638 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004600:	2b00      	cmp	r3, #0
 8004602:	d115      	bne.n	8004630 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004608:	2b00      	cmp	r3, #0
 800460a:	d111      	bne.n	8004630 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d105      	bne.n	8004630 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	f043 0201 	orr.w	r2, r3, #1
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f7fc ff8b 	bl	800154c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004636:	e004      	b.n	8004642 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	4798      	blx	r3
}
 8004642:	bf00      	nop
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b084      	sub	sp, #16
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f7fe fabd 	bl	8002bd8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800465e:	bf00      	nop
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b084      	sub	sp, #16
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004684:	f043 0204 	orr.w	r2, r3, #4
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f7fe fab7 	bl	8002c00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004692:	bf00      	nop
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d108      	bne.n	80046c8 <ADC_Enable+0x2c>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d101      	bne.n	80046c8 <ADC_Enable+0x2c>
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <ADC_Enable+0x2e>
 80046c8:	2300      	movs	r3, #0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d13c      	bne.n	8004748 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	4b1f      	ldr	r3, [pc, #124]	; (8004754 <ADC_Enable+0xb8>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00d      	beq.n	80046f8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	f043 0210 	orr.w	r2, r3, #16
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ec:	f043 0201 	orr.w	r2, r3, #1
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e028      	b.n	800474a <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004708:	f7fe fa5a 	bl	8002bc0 <HAL_GetTick>
 800470c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800470e:	e014      	b.n	800473a <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004710:	f7fe fa56 	bl	8002bc0 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d90d      	bls.n	800473a <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	f043 0210 	orr.w	r2, r3, #16
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472e:	f043 0201 	orr.w	r2, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e007      	b.n	800474a <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b01      	cmp	r3, #1
 8004746:	d1e3      	bne.n	8004710 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	8000003f 	.word	0x8000003f

08004758 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	2b01      	cmp	r3, #1
 8004770:	d108      	bne.n	8004784 <ADC_Disable+0x2c>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <ADC_Disable+0x2c>
 8004780:	2301      	movs	r3, #1
 8004782:	e000      	b.n	8004786 <ADC_Disable+0x2e>
 8004784:	2300      	movs	r3, #0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d040      	beq.n	800480c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 030d 	and.w	r3, r3, #13
 8004794:	2b01      	cmp	r3, #1
 8004796:	d10f      	bne.n	80047b8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0202 	orr.w	r2, r2, #2
 80047a6:	609a      	str	r2, [r3, #8]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2203      	movs	r2, #3
 80047ae:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80047b0:	f7fe fa06 	bl	8002bc0 <HAL_GetTick>
 80047b4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80047b6:	e022      	b.n	80047fe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	f043 0210 	orr.w	r2, r3, #16
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c8:	f043 0201 	orr.w	r2, r3, #1
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e01c      	b.n	800480e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80047d4:	f7fe f9f4 	bl	8002bc0 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d90d      	bls.n	80047fe <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	f043 0210 	orr.w	r2, r3, #16
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f2:	f043 0201 	orr.w	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e007      	b.n	800480e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b01      	cmp	r3, #1
 800480a:	d0e3      	beq.n	80047d4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8004822:	2300      	movs	r3, #0
 8004824:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 030c 	and.w	r3, r3, #12
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 8093 	beq.w	8004964 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004848:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800484c:	d12a      	bne.n	80048a4 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004852:	2b01      	cmp	r3, #1
 8004854:	d126      	bne.n	80048a4 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800485a:	2b01      	cmp	r3, #1
 800485c:	d122      	bne.n	80048a4 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800485e:	230c      	movs	r3, #12
 8004860:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004862:	e014      	b.n	800488e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	4a42      	ldr	r2, [pc, #264]	; (8004970 <ADC_ConversionStop+0x158>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d90d      	bls.n	8004888 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	f043 0210 	orr.w	r2, r3, #16
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487c:	f043 0201 	orr.w	r2, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e06e      	b.n	8004966 <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	3301      	adds	r3, #1
 800488c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004898:	2b40      	cmp	r3, #64	; 0x40
 800489a:	d1e3      	bne.n	8004864 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2240      	movs	r2, #64	; 0x40
 80048a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b60      	cmp	r3, #96	; 0x60
 80048a8:	d015      	beq.n	80048d6 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d10e      	bne.n	80048d6 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d107      	bne.n	80048d6 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f042 0210 	orr.w	r2, r2, #16
 80048d4:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b0c      	cmp	r3, #12
 80048da:	d015      	beq.n	8004908 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d10e      	bne.n	8004908 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d107      	bne.n	8004908 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0220 	orr.w	r2, r2, #32
 8004906:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b60      	cmp	r3, #96	; 0x60
 800490c:	d004      	beq.n	8004918 <ADC_ConversionStop+0x100>
 800490e:	2b6c      	cmp	r3, #108	; 0x6c
 8004910:	d105      	bne.n	800491e <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004912:	230c      	movs	r3, #12
 8004914:	617b      	str	r3, [r7, #20]
        break;
 8004916:	e005      	b.n	8004924 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004918:	2308      	movs	r3, #8
 800491a:	617b      	str	r3, [r7, #20]
        break;
 800491c:	e002      	b.n	8004924 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800491e:	2304      	movs	r3, #4
 8004920:	617b      	str	r3, [r7, #20]
        break;
 8004922:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004924:	f7fe f94c 	bl	8002bc0 <HAL_GetTick>
 8004928:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800492a:	e014      	b.n	8004956 <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800492c:	f7fe f948 	bl	8002bc0 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b0b      	cmp	r3, #11
 8004938:	d90d      	bls.n	8004956 <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	f043 0210 	orr.w	r2, r3, #16
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	f043 0201 	orr.w	r2, r3, #1
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e007      	b.n	8004966 <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	4013      	ands	r3, r2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e3      	bne.n	800492c <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	000993ff 	.word	0x000993ff

08004974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004984:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004990:	4013      	ands	r3, r2
 8004992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800499c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049a6:	4a04      	ldr	r2, [pc, #16]	; (80049b8 <__NVIC_SetPriorityGrouping+0x44>)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	60d3      	str	r3, [r2, #12]
}
 80049ac:	bf00      	nop
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	e000ed00 	.word	0xe000ed00

080049bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049c0:	4b04      	ldr	r3, [pc, #16]	; (80049d4 <__NVIC_GetPriorityGrouping+0x18>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	0a1b      	lsrs	r3, r3, #8
 80049c6:	f003 0307 	and.w	r3, r3, #7
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	e000ed00 	.word	0xe000ed00

080049d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	4603      	mov	r3, r0
 80049e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	db0b      	blt.n	8004a02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	f003 021f 	and.w	r2, r3, #31
 80049f0:	4907      	ldr	r1, [pc, #28]	; (8004a10 <__NVIC_EnableIRQ+0x38>)
 80049f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	2001      	movs	r0, #1
 80049fa:	fa00 f202 	lsl.w	r2, r0, r2
 80049fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	e000e100 	.word	0xe000e100

08004a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	6039      	str	r1, [r7, #0]
 8004a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	db0a      	blt.n	8004a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	490c      	ldr	r1, [pc, #48]	; (8004a60 <__NVIC_SetPriority+0x4c>)
 8004a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a32:	0112      	lsls	r2, r2, #4
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	440b      	add	r3, r1
 8004a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a3c:	e00a      	b.n	8004a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	4908      	ldr	r1, [pc, #32]	; (8004a64 <__NVIC_SetPriority+0x50>)
 8004a44:	79fb      	ldrb	r3, [r7, #7]
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	3b04      	subs	r3, #4
 8004a4c:	0112      	lsls	r2, r2, #4
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	440b      	add	r3, r1
 8004a52:	761a      	strb	r2, [r3, #24]
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	e000e100 	.word	0xe000e100
 8004a64:	e000ed00 	.word	0xe000ed00

08004a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b089      	sub	sp, #36	; 0x24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	f1c3 0307 	rsb	r3, r3, #7
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	bf28      	it	cs
 8004a86:	2304      	movcs	r3, #4
 8004a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	2b06      	cmp	r3, #6
 8004a90:	d902      	bls.n	8004a98 <NVIC_EncodePriority+0x30>
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	3b03      	subs	r3, #3
 8004a96:	e000      	b.n	8004a9a <NVIC_EncodePriority+0x32>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	43da      	mvns	r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	401a      	ands	r2, r3
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aba:	43d9      	mvns	r1, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac0:	4313      	orrs	r3, r2
         );
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3724      	adds	r7, #36	; 0x24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ae0:	d301      	bcc.n	8004ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e00f      	b.n	8004b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ae6:	4a0a      	ldr	r2, [pc, #40]	; (8004b10 <SysTick_Config+0x40>)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004aee:	210f      	movs	r1, #15
 8004af0:	f04f 30ff 	mov.w	r0, #4294967295
 8004af4:	f7ff ff8e 	bl	8004a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004af8:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <SysTick_Config+0x40>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004afe:	4b04      	ldr	r3, [pc, #16]	; (8004b10 <SysTick_Config+0x40>)
 8004b00:	2207      	movs	r2, #7
 8004b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	e000e010 	.word	0xe000e010

08004b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f7ff ff29 	bl	8004974 <__NVIC_SetPriorityGrouping>
}
 8004b22:	bf00      	nop
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b086      	sub	sp, #24
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	4603      	mov	r3, r0
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	607a      	str	r2, [r7, #4]
 8004b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b3c:	f7ff ff3e 	bl	80049bc <__NVIC_GetPriorityGrouping>
 8004b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	68b9      	ldr	r1, [r7, #8]
 8004b46:	6978      	ldr	r0, [r7, #20]
 8004b48:	f7ff ff8e 	bl	8004a68 <NVIC_EncodePriority>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b52:	4611      	mov	r1, r2
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff ff5d 	bl	8004a14 <__NVIC_SetPriority>
}
 8004b5a:	bf00      	nop
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b082      	sub	sp, #8
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	4603      	mov	r3, r0
 8004b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff ff31 	bl	80049d8 <__NVIC_EnableIRQ>
}
 8004b76:	bf00      	nop
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b082      	sub	sp, #8
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7ff ffa2 	bl	8004ad0 <SysTick_Config>
 8004b8c:	4603      	mov	r3, r0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b082      	sub	sp, #8
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e014      	b.n	8004bd2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	791b      	ldrb	r3, [r3, #4]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d105      	bne.n	8004bbe <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7fd fd5d 	bl	8002678 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	73fb      	strb	r3, [r7, #15]
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6819      	ldr	r1, [r3, #0]
 8004bee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf8:	43da      	mvns	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	400a      	ands	r2, r1
 8004c00:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6819      	ldr	r1, [r3, #0]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	43da      	mvns	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	400a      	ands	r2, r1
 8004c18:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10f      	bne.n	8004c40 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 fae0 	bl	80051ea <HAL_DMA_Abort>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	e00e      	b.n	8004c5e <HAL_DAC_Stop_DMA+0x84>
  /* For all products including channel 2U */
  /* DAC channel 2 is available on top of DAC channel 1U */
  else /* Channel2 is used */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fad0 	bl	80051ea <HAL_DMA_Abort>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004c5c:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <HAL_DAC_Stop_DMA+0x92>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2204      	movs	r2, #4
 8004c68:	711a      	strb	r2, [r3, #4]
 8004c6a:	e002      	b.n	8004c72 <HAL_DAC_Stop_DMA+0x98>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	711a      	strb	r2, [r3, #4]
  }
  
  /* Return function status */
  return status;
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	795b      	ldrb	r3, [r3, #5]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_DAC_Start_DMA+0x1e>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e08e      	b.n	8004e08 <HAL_DAC_Start_DMA+0x13c>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2201      	movs	r2, #1
 8004cee:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d12a      	bne.n	8004d52 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	4a43      	ldr	r2, [pc, #268]	; (8004e10 <HAL_DAC_Start_DMA+0x144>)
 8004d02:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	4a42      	ldr	r2, [pc, #264]	; (8004e14 <HAL_DAC_Start_DMA+0x148>)
 8004d0a:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	4a41      	ldr	r2, [pc, #260]	; (8004e18 <HAL_DAC_Start_DMA+0x14c>)
 8004d12:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d22:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d009      	beq.n	8004d3e <HAL_DAC_Start_DMA+0x72>
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d00c      	beq.n	8004d48 <HAL_DAC_Start_DMA+0x7c>
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d000      	beq.n	8004d34 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004d32:	e039      	b.n	8004da8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3308      	adds	r3, #8
 8004d3a:	617b      	str	r3, [r7, #20]
        break;
 8004d3c:	e034      	b.n	8004da8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	330c      	adds	r3, #12
 8004d44:	617b      	str	r3, [r7, #20]
        break;
 8004d46:	e02f      	b.n	8004da8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3310      	adds	r3, #16
 8004d4e:	617b      	str	r3, [r7, #20]
        break;
 8004d50:	e02a      	b.n	8004da8 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	4a31      	ldr	r2, [pc, #196]	; (8004e1c <HAL_DAC_Start_DMA+0x150>)
 8004d58:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	4a30      	ldr	r2, [pc, #192]	; (8004e20 <HAL_DAC_Start_DMA+0x154>)
 8004d60:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	4a2f      	ldr	r2, [pc, #188]	; (8004e24 <HAL_DAC_Start_DMA+0x158>)
 8004d68:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004d78:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	d009      	beq.n	8004d94 <HAL_DAC_Start_DMA+0xc8>
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d00c      	beq.n	8004d9e <HAL_DAC_Start_DMA+0xd2>
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d000      	beq.n	8004d8a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004d88:	e00e      	b.n	8004da8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3314      	adds	r3, #20
 8004d90:	617b      	str	r3, [r7, #20]
        break;
 8004d92:	e009      	b.n	8004da8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3318      	adds	r3, #24
 8004d9a:	617b      	str	r3, [r7, #20]
        break;
 8004d9c:	e004      	b.n	8004da8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	331c      	adds	r3, #28
 8004da4:	617b      	str	r3, [r7, #20]
        break;
 8004da6:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10f      	bne.n	8004dce <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dbc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6898      	ldr	r0, [r3, #8]
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	f000 f9b0 	bl	800512c <HAL_DMA_Start_IT>
 8004dcc:	e00e      	b.n	8004dec <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004ddc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	68d8      	ldr	r0, [r3, #12]
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	f000 f9a0 	bl	800512c <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6819      	ldr	r1, [r3, #0]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	409a      	lsls	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	08004fc7 	.word	0x08004fc7
 8004e14:	08004fe9 	.word	0x08004fe9
 8004e18:	08005005 	.word	0x08005005
 8004e1c:	08005033 	.word	0x08005033
 8004e20:	08005055 	.word	0x08005055
 8004e24:	08005071 	.word	0x08005071

08004e28 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e3e:	d120      	bne.n	8004e82 <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e4e:	d118      	bne.n	8004e82 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2204      	movs	r2, #4
 8004e54:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f043 0201 	orr.w	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	611a      	str	r2, [r3, #16]
          
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e6a:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e7a:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7ff ff1b 	bl	8004cb8 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif
    }
  }
  
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e90:	d120      	bne.n	8004ed4 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ea0:	d118      	bne.n	8004ed4 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2204      	movs	r2, #4
 8004ea6:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	f043 0202 	orr.w	r2, r3, #2
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004ebc:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004ecc:	601a      	str	r2, [r3, #0]
   
      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f86f 	bl	8004fb2 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif
    }
  }
}
 8004ed4:	bf00      	nop
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	2300      	movs	r3, #0
 8004eee:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	795b      	ldrb	r3, [r3, #5]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d101      	bne.n	8004efc <HAL_DAC_ConfigChannel+0x20>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	e036      	b.n	8004f6a <HAL_DAC_ConfigChannel+0x8e>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2201      	movs	r2, #1
 8004f00:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2202      	movs	r2, #2
 8004f06:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004f10:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	fa02 f303 	lsl.w	r3, r2, r3
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6819      	ldr	r1, [r3, #0]
 8004f4a:	22c0      	movs	r2, #192	; 0xc0
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	43da      	mvns	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	400a      	ands	r2, r1
 8004f5a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	371c      	adds	r7, #28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b084      	sub	sp, #16
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f7ff fe51 	bl	8004c7c <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	711a      	strb	r2, [r3, #4]
}
 8004fe0:	bf00      	nop
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f7ff fe4a 	bl	8004c90 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8004ffc:	bf00      	nop
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f043 0204 	orr.w	r2, r3, #4
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f7ff fe40 	bl	8004ca4 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2201      	movs	r2, #1
 8005028:	711a      	strb	r2, [r3, #4]
}
 800502a:	bf00      	nop
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b084      	sub	sp, #16
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f7ff ff98 	bl	8004f76 <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2201      	movs	r2, #1
 800504a:	711a      	strb	r2, [r3, #4]
}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f7ff ff91 	bl	8004f8a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8005068:	bf00      	nop
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f043 0204 	orr.w	r2, r3, #4
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f7ff ff87 	bl	8004f9e <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2201      	movs	r2, #1
 8005094:	711a      	strb	r2, [r3, #4]
}
 8005096:	bf00      	nop
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800509e:	b580      	push	{r7, lr}
 80050a0:	b084      	sub	sp, #16
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e037      	b.n	8005124 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80050ca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80050ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80050d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f9b8 	bl	800547c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}  
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_DMA_Start_IT+0x20>
 8005148:	2302      	movs	r3, #2
 800514a:	e04a      	b.n	80051e2 <HAL_DMA_Start_IT+0xb6>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800515a:	2b01      	cmp	r3, #1
 800515c:	d13a      	bne.n	80051d4 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2202      	movs	r2, #2
 8005162:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0201 	bic.w	r2, r2, #1
 800517a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 f94b 	bl	800541e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518c:	2b00      	cmp	r3, #0
 800518e:	d008      	beq.n	80051a2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 020e 	orr.w	r2, r2, #14
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	e00f      	b.n	80051c2 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f042 020a 	orr.w	r2, r2, #10
 80051b0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 0204 	bic.w	r2, r2, #4
 80051c0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0201 	orr.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	e005      	b.n	80051e0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80051dc:	2302      	movs	r3, #2
 80051de:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80051e0:	7dfb      	ldrb	r3, [r7, #23]
} 
 80051e2:	4618      	mov	r0, r3
 80051e4:	3718      	adds	r7, #24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d008      	beq.n	800520e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2204      	movs	r2, #4
 8005200:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e020      	b.n	8005250 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 020e 	bic.w	r2, r2, #14
 800521c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0201 	bic.w	r2, r2, #1
 800522c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005236:	2101      	movs	r1, #1
 8005238:	fa01 f202 	lsl.w	r2, r1, r2
 800523c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005264:	2300      	movs	r3, #0
 8005266:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800526e:	2b02      	cmp	r3, #2
 8005270:	d005      	beq.n	800527e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2204      	movs	r2, #4
 8005276:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	73fb      	strb	r3, [r7, #15]
 800527c:	e027      	b.n	80052ce <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 020e 	bic.w	r2, r2, #14
 800528c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0201 	bic.w	r2, r2, #1
 800529c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a6:	2101      	movs	r1, #1
 80052a8:	fa01 f202 	lsl.w	r2, r1, r2
 80052ac:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	4798      	blx	r3
    } 
  }
  return status;
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	2204      	movs	r2, #4
 80052f6:	409a      	lsls	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4013      	ands	r3, r2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d024      	beq.n	800534a <HAL_DMA_IRQHandler+0x72>
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f003 0304 	and.w	r3, r3, #4
 8005306:	2b00      	cmp	r3, #0
 8005308:	d01f      	beq.n	800534a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0320 	and.w	r3, r3, #32
 8005314:	2b00      	cmp	r3, #0
 8005316:	d107      	bne.n	8005328 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0204 	bic.w	r2, r2, #4
 8005326:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005330:	2104      	movs	r1, #4
 8005332:	fa01 f202 	lsl.w	r2, r1, r2
 8005336:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	2b00      	cmp	r3, #0
 800533e:	d06a      	beq.n	8005416 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005348:	e065      	b.n	8005416 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	2202      	movs	r2, #2
 8005350:	409a      	lsls	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4013      	ands	r3, r2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d02c      	beq.n	80053b4 <HAL_DMA_IRQHandler+0xdc>
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d027      	beq.n	80053b4 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10b      	bne.n	800538a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 020a 	bic.w	r2, r2, #10
 8005380:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005392:	2102      	movs	r1, #2
 8005394:	fa01 f202 	lsl.w	r2, r1, r2
 8005398:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d035      	beq.n	8005416 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80053b2:	e030      	b.n	8005416 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b8:	2208      	movs	r2, #8
 80053ba:	409a      	lsls	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4013      	ands	r3, r2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d028      	beq.n	8005416 <HAL_DMA_IRQHandler+0x13e>
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f003 0308 	and.w	r3, r3, #8
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d023      	beq.n	8005416 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 020e 	bic.w	r2, r2, #14
 80053dc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e6:	2101      	movs	r1, #1
 80053e8:	fa01 f202 	lsl.w	r2, r1, r2
 80053ec:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005408:	2b00      	cmp	r3, #0
 800540a:	d004      	beq.n	8005416 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	4798      	blx	r3
    }
  }
}  
 8005414:	e7ff      	b.n	8005416 <HAL_DMA_IRQHandler+0x13e>
 8005416:	bf00      	nop
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800541e:	b480      	push	{r7}
 8005420:	b085      	sub	sp, #20
 8005422:	af00      	add	r7, sp, #0
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	607a      	str	r2, [r7, #4]
 800542a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005434:	2101      	movs	r1, #1
 8005436:	fa01 f202 	lsl.w	r2, r1, r2
 800543a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2b10      	cmp	r3, #16
 800544a:	d108      	bne.n	800545e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800545c:	e007      	b.n	800546e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	60da      	str	r2, [r3, #12]
}
 800546e:	bf00      	nop
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
	...

0800547c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	461a      	mov	r2, r3
 800548a:	4b14      	ldr	r3, [pc, #80]	; (80054dc <DMA_CalcBaseAndBitshift+0x60>)
 800548c:	429a      	cmp	r2, r3
 800548e:	d80f      	bhi.n	80054b0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	461a      	mov	r2, r3
 8005496:	4b12      	ldr	r3, [pc, #72]	; (80054e0 <DMA_CalcBaseAndBitshift+0x64>)
 8005498:	4413      	add	r3, r2
 800549a:	4a12      	ldr	r2, [pc, #72]	; (80054e4 <DMA_CalcBaseAndBitshift+0x68>)
 800549c:	fba2 2303 	umull	r2, r3, r2, r3
 80054a0:	091b      	lsrs	r3, r3, #4
 80054a2:	009a      	lsls	r2, r3, #2
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a0f      	ldr	r2, [pc, #60]	; (80054e8 <DMA_CalcBaseAndBitshift+0x6c>)
 80054ac:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80054ae:	e00e      	b.n	80054ce <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	461a      	mov	r2, r3
 80054b6:	4b0d      	ldr	r3, [pc, #52]	; (80054ec <DMA_CalcBaseAndBitshift+0x70>)
 80054b8:	4413      	add	r3, r2
 80054ba:	4a0a      	ldr	r2, [pc, #40]	; (80054e4 <DMA_CalcBaseAndBitshift+0x68>)
 80054bc:	fba2 2303 	umull	r2, r3, r2, r3
 80054c0:	091b      	lsrs	r3, r3, #4
 80054c2:	009a      	lsls	r2, r3, #2
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a09      	ldr	r2, [pc, #36]	; (80054f0 <DMA_CalcBaseAndBitshift+0x74>)
 80054cc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40020407 	.word	0x40020407
 80054e0:	bffdfff8 	.word	0xbffdfff8
 80054e4:	cccccccd 	.word	0xcccccccd
 80054e8:	40020000 	.word	0x40020000
 80054ec:	bffdfbf8 	.word	0xbffdfbf8
 80054f0:	40020400 	.word	0x40020400

080054f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80054fe:	2300      	movs	r3, #0
 8005500:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005502:	e160      	b.n	80057c6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	2101      	movs	r1, #1
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	fa01 f303 	lsl.w	r3, r1, r3
 8005510:	4013      	ands	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 8152 	beq.w	80057c0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d00b      	beq.n	800553c <HAL_GPIO_Init+0x48>
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b02      	cmp	r3, #2
 800552a:	d007      	beq.n	800553c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005530:	2b11      	cmp	r3, #17
 8005532:	d003      	beq.n	800553c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b12      	cmp	r3, #18
 800553a:	d130      	bne.n	800559e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	2203      	movs	r2, #3
 8005548:	fa02 f303 	lsl.w	r3, r2, r3
 800554c:	43db      	mvns	r3, r3
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4013      	ands	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	4313      	orrs	r3, r2
 8005564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005572:	2201      	movs	r2, #1
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	fa02 f303 	lsl.w	r3, r2, r3
 800557a:	43db      	mvns	r3, r3
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4013      	ands	r3, r2
 8005580:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	091b      	lsrs	r3, r3, #4
 8005588:	f003 0201 	and.w	r2, r3, #1
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	fa02 f303 	lsl.w	r3, r2, r3
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	4313      	orrs	r3, r2
 8005596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	2203      	movs	r2, #3
 80055aa:	fa02 f303 	lsl.w	r3, r2, r3
 80055ae:	43db      	mvns	r3, r3
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	4013      	ands	r3, r2
 80055b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	fa02 f303 	lsl.w	r3, r2, r3
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d003      	beq.n	80055de <HAL_GPIO_Init+0xea>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b12      	cmp	r3, #18
 80055dc:	d123      	bne.n	8005626 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	08da      	lsrs	r2, r3, #3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	3208      	adds	r2, #8
 80055e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	220f      	movs	r2, #15
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	43db      	mvns	r3, r3
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4013      	ands	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	691a      	ldr	r2, [r3, #16]
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4313      	orrs	r3, r2
 8005616:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	08da      	lsrs	r2, r3, #3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3208      	adds	r2, #8
 8005620:	6939      	ldr	r1, [r7, #16]
 8005622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	2203      	movs	r2, #3
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	43db      	mvns	r3, r3
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4013      	ands	r3, r2
 800563c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f003 0203 	and.w	r2, r3, #3
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 80ac 	beq.w	80057c0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005668:	4b5e      	ldr	r3, [pc, #376]	; (80057e4 <HAL_GPIO_Init+0x2f0>)
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	4a5d      	ldr	r2, [pc, #372]	; (80057e4 <HAL_GPIO_Init+0x2f0>)
 800566e:	f043 0301 	orr.w	r3, r3, #1
 8005672:	6193      	str	r3, [r2, #24]
 8005674:	4b5b      	ldr	r3, [pc, #364]	; (80057e4 <HAL_GPIO_Init+0x2f0>)
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005680:	4a59      	ldr	r2, [pc, #356]	; (80057e8 <HAL_GPIO_Init+0x2f4>)
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	089b      	lsrs	r3, r3, #2
 8005686:	3302      	adds	r3, #2
 8005688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800568c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f003 0303 	and.w	r3, r3, #3
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	220f      	movs	r2, #15
 8005698:	fa02 f303 	lsl.w	r3, r2, r3
 800569c:	43db      	mvns	r3, r3
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4013      	ands	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80056aa:	d025      	beq.n	80056f8 <HAL_GPIO_Init+0x204>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a4f      	ldr	r2, [pc, #316]	; (80057ec <HAL_GPIO_Init+0x2f8>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d01f      	beq.n	80056f4 <HAL_GPIO_Init+0x200>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a4e      	ldr	r2, [pc, #312]	; (80057f0 <HAL_GPIO_Init+0x2fc>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d019      	beq.n	80056f0 <HAL_GPIO_Init+0x1fc>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a4d      	ldr	r2, [pc, #308]	; (80057f4 <HAL_GPIO_Init+0x300>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d013      	beq.n	80056ec <HAL_GPIO_Init+0x1f8>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a4c      	ldr	r2, [pc, #304]	; (80057f8 <HAL_GPIO_Init+0x304>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00d      	beq.n	80056e8 <HAL_GPIO_Init+0x1f4>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a4b      	ldr	r2, [pc, #300]	; (80057fc <HAL_GPIO_Init+0x308>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d007      	beq.n	80056e4 <HAL_GPIO_Init+0x1f0>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a4a      	ldr	r2, [pc, #296]	; (8005800 <HAL_GPIO_Init+0x30c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d101      	bne.n	80056e0 <HAL_GPIO_Init+0x1ec>
 80056dc:	2306      	movs	r3, #6
 80056de:	e00c      	b.n	80056fa <HAL_GPIO_Init+0x206>
 80056e0:	2307      	movs	r3, #7
 80056e2:	e00a      	b.n	80056fa <HAL_GPIO_Init+0x206>
 80056e4:	2305      	movs	r3, #5
 80056e6:	e008      	b.n	80056fa <HAL_GPIO_Init+0x206>
 80056e8:	2304      	movs	r3, #4
 80056ea:	e006      	b.n	80056fa <HAL_GPIO_Init+0x206>
 80056ec:	2303      	movs	r3, #3
 80056ee:	e004      	b.n	80056fa <HAL_GPIO_Init+0x206>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e002      	b.n	80056fa <HAL_GPIO_Init+0x206>
 80056f4:	2301      	movs	r3, #1
 80056f6:	e000      	b.n	80056fa <HAL_GPIO_Init+0x206>
 80056f8:	2300      	movs	r3, #0
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	f002 0203 	and.w	r2, r2, #3
 8005700:	0092      	lsls	r2, r2, #2
 8005702:	4093      	lsls	r3, r2
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800570a:	4937      	ldr	r1, [pc, #220]	; (80057e8 <HAL_GPIO_Init+0x2f4>)
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	089b      	lsrs	r3, r3, #2
 8005710:	3302      	adds	r3, #2
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005718:	4b3a      	ldr	r3, [pc, #232]	; (8005804 <HAL_GPIO_Init+0x310>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	43db      	mvns	r3, r3
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	4013      	ands	r3, r2
 8005726:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4313      	orrs	r3, r2
 800573a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800573c:	4a31      	ldr	r2, [pc, #196]	; (8005804 <HAL_GPIO_Init+0x310>)
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005742:	4b30      	ldr	r3, [pc, #192]	; (8005804 <HAL_GPIO_Init+0x310>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	43db      	mvns	r3, r3
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4013      	ands	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005766:	4a27      	ldr	r2, [pc, #156]	; (8005804 <HAL_GPIO_Init+0x310>)
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800576c:	4b25      	ldr	r3, [pc, #148]	; (8005804 <HAL_GPIO_Init+0x310>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	43db      	mvns	r3, r3
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	4013      	ands	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4313      	orrs	r3, r2
 800578e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005790:	4a1c      	ldr	r2, [pc, #112]	; (8005804 <HAL_GPIO_Init+0x310>)
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005796:	4b1b      	ldr	r3, [pc, #108]	; (8005804 <HAL_GPIO_Init+0x310>)
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	43db      	mvns	r3, r3
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4013      	ands	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80057ba:	4a12      	ldr	r2, [pc, #72]	; (8005804 <HAL_GPIO_Init+0x310>)
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	3301      	adds	r3, #1
 80057c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	fa22 f303 	lsr.w	r3, r2, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f47f ae97 	bne.w	8005504 <HAL_GPIO_Init+0x10>
  }
}
 80057d6:	bf00      	nop
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40021000 	.word	0x40021000
 80057e8:	40010000 	.word	0x40010000
 80057ec:	48000400 	.word	0x48000400
 80057f0:	48000800 	.word	0x48000800
 80057f4:	48000c00 	.word	0x48000c00
 80057f8:	48001000 	.word	0x48001000
 80057fc:	48001400 	.word	0x48001400
 8005800:	48001800 	.word	0x48001800
 8005804:	40010400 	.word	0x40010400

08005808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	460b      	mov	r3, r1
 8005812:	807b      	strh	r3, [r7, #2]
 8005814:	4613      	mov	r3, r2
 8005816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005818:	787b      	ldrb	r3, [r7, #1]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800581e:	887a      	ldrh	r2, [r7, #2]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005824:	e002      	b.n	800582c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005826:	887a      	ldrh	r2, [r7, #2]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800583e:	af00      	add	r7, sp, #0
 8005840:	1d3b      	adds	r3, r7, #4
 8005842:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005844:	1d3b      	adds	r3, r7, #4
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d102      	bne.n	8005852 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	f000 bf01 	b.w	8006654 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005852:	1d3b      	adds	r3, r7, #4
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 8160 	beq.w	8005b22 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005862:	4bae      	ldr	r3, [pc, #696]	; (8005b1c <HAL_RCC_OscConfig+0x2e4>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f003 030c 	and.w	r3, r3, #12
 800586a:	2b04      	cmp	r3, #4
 800586c:	d00c      	beq.n	8005888 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800586e:	4bab      	ldr	r3, [pc, #684]	; (8005b1c <HAL_RCC_OscConfig+0x2e4>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f003 030c 	and.w	r3, r3, #12
 8005876:	2b08      	cmp	r3, #8
 8005878:	d159      	bne.n	800592e <HAL_RCC_OscConfig+0xf6>
 800587a:	4ba8      	ldr	r3, [pc, #672]	; (8005b1c <HAL_RCC_OscConfig+0x2e4>)
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005886:	d152      	bne.n	800592e <HAL_RCC_OscConfig+0xf6>
 8005888:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800588c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005890:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005894:	fa93 f3a3 	rbit	r3, r3
 8005898:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800589c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058a0:	fab3 f383 	clz	r3, r3
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	095b      	lsrs	r3, r3, #5
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	f043 0301 	orr.w	r3, r3, #1
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d102      	bne.n	80058ba <HAL_RCC_OscConfig+0x82>
 80058b4:	4b99      	ldr	r3, [pc, #612]	; (8005b1c <HAL_RCC_OscConfig+0x2e4>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	e015      	b.n	80058e6 <HAL_RCC_OscConfig+0xae>
 80058ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058be:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80058c6:	fa93 f3a3 	rbit	r3, r3
 80058ca:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80058ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058d2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80058d6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80058da:	fa93 f3a3 	rbit	r3, r3
 80058de:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80058e2:	4b8e      	ldr	r3, [pc, #568]	; (8005b1c <HAL_RCC_OscConfig+0x2e4>)
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80058ea:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80058ee:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80058f2:	fa92 f2a2 	rbit	r2, r2
 80058f6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80058fa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80058fe:	fab2 f282 	clz	r2, r2
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	f042 0220 	orr.w	r2, r2, #32
 8005908:	b2d2      	uxtb	r2, r2
 800590a:	f002 021f 	and.w	r2, r2, #31
 800590e:	2101      	movs	r1, #1
 8005910:	fa01 f202 	lsl.w	r2, r1, r2
 8005914:	4013      	ands	r3, r2
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 8102 	beq.w	8005b20 <HAL_RCC_OscConfig+0x2e8>
 800591c:	1d3b      	adds	r3, r7, #4
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	f040 80fc 	bne.w	8005b20 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	f000 be93 	b.w	8006654 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800592e:	1d3b      	adds	r3, r7, #4
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005938:	d106      	bne.n	8005948 <HAL_RCC_OscConfig+0x110>
 800593a:	4b78      	ldr	r3, [pc, #480]	; (8005b1c <HAL_RCC_OscConfig+0x2e4>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a77      	ldr	r2, [pc, #476]	; (8005b1c <HAL_RCC_OscConfig+0x2e4>)
 8005940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005944:	6013      	str	r3, [r2, #0]
 8005946:	e030      	b.n	80059aa <HAL_RCC_OscConfig+0x172>
 8005948:	1d3b      	adds	r3, r7, #4
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10c      	bne.n	800596c <HAL_RCC_OscConfig+0x134>
 8005952:	4b72      	ldr	r3, [pc, #456]	; (8005b1c <HAL_RCC_OscConfig+0x2e4>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a71      	ldr	r2, [pc, #452]	; (8005b1c <HAL_RCC_OscConfig+0x2e4>)
 8005958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	4b6f      	ldr	r3, [pc, #444]	; (8005b1c <HAL_RCC_OscConfig+0x2e4>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a6e      	ldr	r2, [pc, #440]	; (8005b1c <HAL_RCC_OscConfig+0x2e4>)
 8005964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	e01e      	b.n	80059aa <HAL_RCC_OscConfig+0x172>
 800596c:	1d3b      	adds	r3, r7, #4
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005976:	d10c      	bne.n	8005992 <HAL_RCC_OscConfig+0x15a>
 8005978:	4b68      	ldr	r3, [pc, #416]	; (8005b1c <HAL_RCC_OscConfig+0x2e4>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a67      	ldr	r2, [pc, #412]	; (8005b1c <HAL_RCC_OscConfig+0x2e4>)
 800597e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005982:	6013      	str	r3, [r2, #0]
 8005984:	4b65      	ldr	r3, [pc, #404]	; (8005b1c <HAL_RCC_OscConfig+0x2e4>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a64      	ldr	r2, [pc, #400]	; (8005b1c <HAL_RCC_OscConfig+0x2e4>)
 800598a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800598e:	6013      	str	r3, [r2, #0]
 8005990:	e00b      	b.n	80059aa <HAL_RCC_OscConfig+0x172>
 8005992:	4b62      	ldr	r3, [pc, #392]	; (8005b1c <HAL_RCC_OscConfig+0x2e4>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a61      	ldr	r2, [pc, #388]	; (8005b1c <HAL_RCC_OscConfig+0x2e4>)
 8005998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	4b5f      	ldr	r3, [pc, #380]	; (8005b1c <HAL_RCC_OscConfig+0x2e4>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a5e      	ldr	r2, [pc, #376]	; (8005b1c <HAL_RCC_OscConfig+0x2e4>)
 80059a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059a8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059aa:	1d3b      	adds	r3, r7, #4
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d059      	beq.n	8005a68 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b4:	f7fd f904 	bl	8002bc0 <HAL_GetTick>
 80059b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059bc:	e00a      	b.n	80059d4 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059be:	f7fd f8ff 	bl	8002bc0 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b64      	cmp	r3, #100	; 0x64
 80059cc:	d902      	bls.n	80059d4 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	f000 be40 	b.w	8006654 <HAL_RCC_OscConfig+0xe1c>
 80059d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059d8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059dc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80059e0:	fa93 f3a3 	rbit	r3, r3
 80059e4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80059e8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ec:	fab3 f383 	clz	r3, r3
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	f043 0301 	orr.w	r3, r3, #1
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d102      	bne.n	8005a06 <HAL_RCC_OscConfig+0x1ce>
 8005a00:	4b46      	ldr	r3, [pc, #280]	; (8005b1c <HAL_RCC_OscConfig+0x2e4>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	e015      	b.n	8005a32 <HAL_RCC_OscConfig+0x1fa>
 8005a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a0a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8005a12:	fa93 f3a3 	rbit	r3, r3
 8005a16:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8005a1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a1e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005a22:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8005a26:	fa93 f3a3 	rbit	r3, r3
 8005a2a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005a2e:	4b3b      	ldr	r3, [pc, #236]	; (8005b1c <HAL_RCC_OscConfig+0x2e4>)
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a36:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8005a3a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8005a3e:	fa92 f2a2 	rbit	r2, r2
 8005a42:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8005a46:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005a4a:	fab2 f282 	clz	r2, r2
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	f042 0220 	orr.w	r2, r2, #32
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	f002 021f 	and.w	r2, r2, #31
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a60:	4013      	ands	r3, r2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d0ab      	beq.n	80059be <HAL_RCC_OscConfig+0x186>
 8005a66:	e05c      	b.n	8005b22 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a68:	f7fd f8aa 	bl	8002bc0 <HAL_GetTick>
 8005a6c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a70:	e00a      	b.n	8005a88 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a72:	f7fd f8a5 	bl	8002bc0 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b64      	cmp	r3, #100	; 0x64
 8005a80:	d902      	bls.n	8005a88 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	f000 bde6 	b.w	8006654 <HAL_RCC_OscConfig+0xe1c>
 8005a88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a8c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a90:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8005a94:	fa93 f3a3 	rbit	r3, r3
 8005a98:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8005a9c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aa0:	fab3 f383 	clz	r3, r3
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	095b      	lsrs	r3, r3, #5
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	f043 0301 	orr.w	r3, r3, #1
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d102      	bne.n	8005aba <HAL_RCC_OscConfig+0x282>
 8005ab4:	4b19      	ldr	r3, [pc, #100]	; (8005b1c <HAL_RCC_OscConfig+0x2e4>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	e015      	b.n	8005ae6 <HAL_RCC_OscConfig+0x2ae>
 8005aba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005abe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005ac6:	fa93 f3a3 	rbit	r3, r3
 8005aca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8005ace:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ad2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005ad6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005ada:	fa93 f3a3 	rbit	r3, r3
 8005ade:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005ae2:	4b0e      	ldr	r3, [pc, #56]	; (8005b1c <HAL_RCC_OscConfig+0x2e4>)
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005aea:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8005aee:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8005af2:	fa92 f2a2 	rbit	r2, r2
 8005af6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8005afa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005afe:	fab2 f282 	clz	r2, r2
 8005b02:	b2d2      	uxtb	r2, r2
 8005b04:	f042 0220 	orr.w	r2, r2, #32
 8005b08:	b2d2      	uxtb	r2, r2
 8005b0a:	f002 021f 	and.w	r2, r2, #31
 8005b0e:	2101      	movs	r1, #1
 8005b10:	fa01 f202 	lsl.w	r2, r1, r2
 8005b14:	4013      	ands	r3, r2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1ab      	bne.n	8005a72 <HAL_RCC_OscConfig+0x23a>
 8005b1a:	e002      	b.n	8005b22 <HAL_RCC_OscConfig+0x2ea>
 8005b1c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b22:	1d3b      	adds	r3, r7, #4
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 8170 	beq.w	8005e12 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005b32:	4bd0      	ldr	r3, [pc, #832]	; (8005e74 <HAL_RCC_OscConfig+0x63c>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f003 030c 	and.w	r3, r3, #12
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00c      	beq.n	8005b58 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005b3e:	4bcd      	ldr	r3, [pc, #820]	; (8005e74 <HAL_RCC_OscConfig+0x63c>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f003 030c 	and.w	r3, r3, #12
 8005b46:	2b08      	cmp	r3, #8
 8005b48:	d16d      	bne.n	8005c26 <HAL_RCC_OscConfig+0x3ee>
 8005b4a:	4bca      	ldr	r3, [pc, #808]	; (8005e74 <HAL_RCC_OscConfig+0x63c>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005b52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b56:	d166      	bne.n	8005c26 <HAL_RCC_OscConfig+0x3ee>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b5e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8005b62:	fa93 f3a3 	rbit	r3, r3
 8005b66:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8005b6a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b6e:	fab3 f383 	clz	r3, r3
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	095b      	lsrs	r3, r3, #5
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	f043 0301 	orr.w	r3, r3, #1
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d102      	bne.n	8005b88 <HAL_RCC_OscConfig+0x350>
 8005b82:	4bbc      	ldr	r3, [pc, #752]	; (8005e74 <HAL_RCC_OscConfig+0x63c>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	e013      	b.n	8005bb0 <HAL_RCC_OscConfig+0x378>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b8e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8005b92:	fa93 f3a3 	rbit	r3, r3
 8005b96:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005ba0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005ba4:	fa93 f3a3 	rbit	r3, r3
 8005ba8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005bac:	4bb1      	ldr	r3, [pc, #708]	; (8005e74 <HAL_RCC_OscConfig+0x63c>)
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8005bb6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8005bba:	fa92 f2a2 	rbit	r2, r2
 8005bbe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8005bc2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005bc6:	fab2 f282 	clz	r2, r2
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	f042 0220 	orr.w	r2, r2, #32
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	f002 021f 	and.w	r2, r2, #31
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d007      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x3ba>
 8005be2:	1d3b      	adds	r3, r7, #4
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d002      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	f000 bd31 	b.w	8006654 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf2:	4ba0      	ldr	r3, [pc, #640]	; (8005e74 <HAL_RCC_OscConfig+0x63c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bfa:	1d3b      	adds	r3, r7, #4
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	21f8      	movs	r1, #248	; 0xf8
 8005c02:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c06:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8005c0a:	fa91 f1a1 	rbit	r1, r1
 8005c0e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8005c12:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005c16:	fab1 f181 	clz	r1, r1
 8005c1a:	b2c9      	uxtb	r1, r1
 8005c1c:	408b      	lsls	r3, r1
 8005c1e:	4995      	ldr	r1, [pc, #596]	; (8005e74 <HAL_RCC_OscConfig+0x63c>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c24:	e0f5      	b.n	8005e12 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c26:	1d3b      	adds	r3, r7, #4
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 8085 	beq.w	8005d3c <HAL_RCC_OscConfig+0x504>
 8005c32:	2301      	movs	r3, #1
 8005c34:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c38:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005c3c:	fa93 f3a3 	rbit	r3, r3
 8005c40:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8005c44:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c48:	fab3 f383 	clz	r3, r3
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005c52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	461a      	mov	r2, r3
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c5e:	f7fc ffaf 	bl	8002bc0 <HAL_GetTick>
 8005c62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c66:	e00a      	b.n	8005c7e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c68:	f7fc ffaa 	bl	8002bc0 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d902      	bls.n	8005c7e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	f000 bceb 	b.w	8006654 <HAL_RCC_OscConfig+0xe1c>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c84:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005c88:	fa93 f3a3 	rbit	r3, r3
 8005c8c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8005c90:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c94:	fab3 f383 	clz	r3, r3
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	095b      	lsrs	r3, r3, #5
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	f043 0301 	orr.w	r3, r3, #1
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d102      	bne.n	8005cae <HAL_RCC_OscConfig+0x476>
 8005ca8:	4b72      	ldr	r3, [pc, #456]	; (8005e74 <HAL_RCC_OscConfig+0x63c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	e013      	b.n	8005cd6 <HAL_RCC_OscConfig+0x49e>
 8005cae:	2302      	movs	r3, #2
 8005cb0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cb4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005cb8:	fa93 f3a3 	rbit	r3, r3
 8005cbc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005cc6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005cca:	fa93 f3a3 	rbit	r3, r3
 8005cce:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005cd2:	4b68      	ldr	r3, [pc, #416]	; (8005e74 <HAL_RCC_OscConfig+0x63c>)
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8005cdc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005ce0:	fa92 f2a2 	rbit	r2, r2
 8005ce4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8005ce8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005cec:	fab2 f282 	clz	r2, r2
 8005cf0:	b2d2      	uxtb	r2, r2
 8005cf2:	f042 0220 	orr.w	r2, r2, #32
 8005cf6:	b2d2      	uxtb	r2, r2
 8005cf8:	f002 021f 	and.w	r2, r2, #31
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8005d02:	4013      	ands	r3, r2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0af      	beq.n	8005c68 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d08:	4b5a      	ldr	r3, [pc, #360]	; (8005e74 <HAL_RCC_OscConfig+0x63c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d10:	1d3b      	adds	r3, r7, #4
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	21f8      	movs	r1, #248	; 0xf8
 8005d18:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d1c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8005d20:	fa91 f1a1 	rbit	r1, r1
 8005d24:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8005d28:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005d2c:	fab1 f181 	clz	r1, r1
 8005d30:	b2c9      	uxtb	r1, r1
 8005d32:	408b      	lsls	r3, r1
 8005d34:	494f      	ldr	r1, [pc, #316]	; (8005e74 <HAL_RCC_OscConfig+0x63c>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	600b      	str	r3, [r1, #0]
 8005d3a:	e06a      	b.n	8005e12 <HAL_RCC_OscConfig+0x5da>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d42:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005d46:	fa93 f3a3 	rbit	r3, r3
 8005d4a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8005d4e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d52:	fab3 f383 	clz	r3, r3
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005d5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	461a      	mov	r2, r3
 8005d64:	2300      	movs	r3, #0
 8005d66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d68:	f7fc ff2a 	bl	8002bc0 <HAL_GetTick>
 8005d6c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d70:	e00a      	b.n	8005d88 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d72:	f7fc ff25 	bl	8002bc0 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d902      	bls.n	8005d88 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	f000 bc66 	b.w	8006654 <HAL_RCC_OscConfig+0xe1c>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d92:	fa93 f3a3 	rbit	r3, r3
 8005d96:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8005d9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d9e:	fab3 f383 	clz	r3, r3
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	095b      	lsrs	r3, r3, #5
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	f043 0301 	orr.w	r3, r3, #1
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d102      	bne.n	8005db8 <HAL_RCC_OscConfig+0x580>
 8005db2:	4b30      	ldr	r3, [pc, #192]	; (8005e74 <HAL_RCC_OscConfig+0x63c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	e013      	b.n	8005de0 <HAL_RCC_OscConfig+0x5a8>
 8005db8:	2302      	movs	r3, #2
 8005dba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dc2:	fa93 f3a3 	rbit	r3, r3
 8005dc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005dca:	2302      	movs	r3, #2
 8005dcc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005dd0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005dd4:	fa93 f3a3 	rbit	r3, r3
 8005dd8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ddc:	4b25      	ldr	r3, [pc, #148]	; (8005e74 <HAL_RCC_OscConfig+0x63c>)
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	2202      	movs	r2, #2
 8005de2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005de6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8005dea:	fa92 f2a2 	rbit	r2, r2
 8005dee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8005df2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005df6:	fab2 f282 	clz	r2, r2
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	f042 0220 	orr.w	r2, r2, #32
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	f002 021f 	and.w	r2, r2, #31
 8005e06:	2101      	movs	r1, #1
 8005e08:	fa01 f202 	lsl.w	r2, r1, r2
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1af      	bne.n	8005d72 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e12:	1d3b      	adds	r3, r7, #4
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 80da 	beq.w	8005fd6 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e22:	1d3b      	adds	r3, r7, #4
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d069      	beq.n	8005f00 <HAL_RCC_OscConfig+0x6c8>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e36:	fa93 f3a3 	rbit	r3, r3
 8005e3a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8005e3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e42:	fab3 f383 	clz	r3, r3
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	461a      	mov	r2, r3
 8005e4a:	4b0b      	ldr	r3, [pc, #44]	; (8005e78 <HAL_RCC_OscConfig+0x640>)
 8005e4c:	4413      	add	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	461a      	mov	r2, r3
 8005e52:	2301      	movs	r3, #1
 8005e54:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e56:	f7fc feb3 	bl	8002bc0 <HAL_GetTick>
 8005e5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e5e:	e00d      	b.n	8005e7c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e60:	f7fc feae 	bl	8002bc0 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d905      	bls.n	8005e7c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e3ef      	b.n	8006654 <HAL_RCC_OscConfig+0xe1c>
 8005e74:	40021000 	.word	0x40021000
 8005e78:	10908120 	.word	0x10908120
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e86:	fa93 f2a3 	rbit	r2, r3
 8005e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005e94:	2202      	movs	r2, #2
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	fa93 f2a3 	rbit	r2, r3
 8005ea2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005eac:	2202      	movs	r2, #2
 8005eae:	601a      	str	r2, [r3, #0]
 8005eb0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	fa93 f2a3 	rbit	r2, r3
 8005eba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005ebe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ec0:	4ba4      	ldr	r3, [pc, #656]	; (8006154 <HAL_RCC_OscConfig+0x91c>)
 8005ec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ec4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005ec8:	2102      	movs	r1, #2
 8005eca:	6019      	str	r1, [r3, #0]
 8005ecc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	fa93 f1a3 	rbit	r1, r3
 8005ed6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005eda:	6019      	str	r1, [r3, #0]
  return result;
 8005edc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	fab3 f383 	clz	r3, r3
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	f003 031f 	and.w	r3, r3, #31
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef8:	4013      	ands	r3, r2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d0b0      	beq.n	8005e60 <HAL_RCC_OscConfig+0x628>
 8005efe:	e06a      	b.n	8005fd6 <HAL_RCC_OscConfig+0x79e>
 8005f00:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005f04:	2201      	movs	r2, #1
 8005f06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f08:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	fa93 f2a3 	rbit	r2, r3
 8005f12:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005f16:	601a      	str	r2, [r3, #0]
  return result;
 8005f18:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005f1c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f1e:	fab3 f383 	clz	r3, r3
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	461a      	mov	r2, r3
 8005f26:	4b8c      	ldr	r3, [pc, #560]	; (8006158 <HAL_RCC_OscConfig+0x920>)
 8005f28:	4413      	add	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	2300      	movs	r3, #0
 8005f30:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f32:	f7fc fe45 	bl	8002bc0 <HAL_GetTick>
 8005f36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f3a:	e009      	b.n	8005f50 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f3c:	f7fc fe40 	bl	8002bc0 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d901      	bls.n	8005f50 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e381      	b.n	8006654 <HAL_RCC_OscConfig+0xe1c>
 8005f50:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005f54:	2202      	movs	r2, #2
 8005f56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f58:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	fa93 f2a3 	rbit	r2, r3
 8005f62:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005f6c:	2202      	movs	r2, #2
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	fa93 f2a3 	rbit	r2, r3
 8005f7a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005f7e:	601a      	str	r2, [r3, #0]
 8005f80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005f84:	2202      	movs	r2, #2
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	fa93 f2a3 	rbit	r2, r3
 8005f92:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005f96:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f98:	4b6e      	ldr	r3, [pc, #440]	; (8006154 <HAL_RCC_OscConfig+0x91c>)
 8005f9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005fa0:	2102      	movs	r1, #2
 8005fa2:	6019      	str	r1, [r3, #0]
 8005fa4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	fa93 f1a3 	rbit	r1, r3
 8005fae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005fb2:	6019      	str	r1, [r3, #0]
  return result;
 8005fb4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	fab3 f383 	clz	r3, r3
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	f003 031f 	and.w	r3, r3, #31
 8005fca:	2101      	movs	r1, #1
 8005fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1b2      	bne.n	8005f3c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fd6:	1d3b      	adds	r3, r7, #4
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 8157 	beq.w	8006294 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fec:	4b59      	ldr	r3, [pc, #356]	; (8006154 <HAL_RCC_OscConfig+0x91c>)
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d112      	bne.n	800601e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ff8:	4b56      	ldr	r3, [pc, #344]	; (8006154 <HAL_RCC_OscConfig+0x91c>)
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	4a55      	ldr	r2, [pc, #340]	; (8006154 <HAL_RCC_OscConfig+0x91c>)
 8005ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006002:	61d3      	str	r3, [r2, #28]
 8006004:	4b53      	ldr	r3, [pc, #332]	; (8006154 <HAL_RCC_OscConfig+0x91c>)
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800600c:	f107 030c 	add.w	r3, r7, #12
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	f107 030c 	add.w	r3, r7, #12
 8006016:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006018:	2301      	movs	r3, #1
 800601a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800601e:	4b4f      	ldr	r3, [pc, #316]	; (800615c <HAL_RCC_OscConfig+0x924>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006026:	2b00      	cmp	r3, #0
 8006028:	d11a      	bne.n	8006060 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800602a:	4b4c      	ldr	r3, [pc, #304]	; (800615c <HAL_RCC_OscConfig+0x924>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a4b      	ldr	r2, [pc, #300]	; (800615c <HAL_RCC_OscConfig+0x924>)
 8006030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006034:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006036:	f7fc fdc3 	bl	8002bc0 <HAL_GetTick>
 800603a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800603e:	e009      	b.n	8006054 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006040:	f7fc fdbe 	bl	8002bc0 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	2b64      	cmp	r3, #100	; 0x64
 800604e:	d901      	bls.n	8006054 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e2ff      	b.n	8006654 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006054:	4b41      	ldr	r3, [pc, #260]	; (800615c <HAL_RCC_OscConfig+0x924>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0ef      	beq.n	8006040 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006060:	1d3b      	adds	r3, r7, #4
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d106      	bne.n	8006078 <HAL_RCC_OscConfig+0x840>
 800606a:	4b3a      	ldr	r3, [pc, #232]	; (8006154 <HAL_RCC_OscConfig+0x91c>)
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	4a39      	ldr	r2, [pc, #228]	; (8006154 <HAL_RCC_OscConfig+0x91c>)
 8006070:	f043 0301 	orr.w	r3, r3, #1
 8006074:	6213      	str	r3, [r2, #32]
 8006076:	e02f      	b.n	80060d8 <HAL_RCC_OscConfig+0x8a0>
 8006078:	1d3b      	adds	r3, r7, #4
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10c      	bne.n	800609c <HAL_RCC_OscConfig+0x864>
 8006082:	4b34      	ldr	r3, [pc, #208]	; (8006154 <HAL_RCC_OscConfig+0x91c>)
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	4a33      	ldr	r2, [pc, #204]	; (8006154 <HAL_RCC_OscConfig+0x91c>)
 8006088:	f023 0301 	bic.w	r3, r3, #1
 800608c:	6213      	str	r3, [r2, #32]
 800608e:	4b31      	ldr	r3, [pc, #196]	; (8006154 <HAL_RCC_OscConfig+0x91c>)
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	4a30      	ldr	r2, [pc, #192]	; (8006154 <HAL_RCC_OscConfig+0x91c>)
 8006094:	f023 0304 	bic.w	r3, r3, #4
 8006098:	6213      	str	r3, [r2, #32]
 800609a:	e01d      	b.n	80060d8 <HAL_RCC_OscConfig+0x8a0>
 800609c:	1d3b      	adds	r3, r7, #4
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	2b05      	cmp	r3, #5
 80060a4:	d10c      	bne.n	80060c0 <HAL_RCC_OscConfig+0x888>
 80060a6:	4b2b      	ldr	r3, [pc, #172]	; (8006154 <HAL_RCC_OscConfig+0x91c>)
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	4a2a      	ldr	r2, [pc, #168]	; (8006154 <HAL_RCC_OscConfig+0x91c>)
 80060ac:	f043 0304 	orr.w	r3, r3, #4
 80060b0:	6213      	str	r3, [r2, #32]
 80060b2:	4b28      	ldr	r3, [pc, #160]	; (8006154 <HAL_RCC_OscConfig+0x91c>)
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	4a27      	ldr	r2, [pc, #156]	; (8006154 <HAL_RCC_OscConfig+0x91c>)
 80060b8:	f043 0301 	orr.w	r3, r3, #1
 80060bc:	6213      	str	r3, [r2, #32]
 80060be:	e00b      	b.n	80060d8 <HAL_RCC_OscConfig+0x8a0>
 80060c0:	4b24      	ldr	r3, [pc, #144]	; (8006154 <HAL_RCC_OscConfig+0x91c>)
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	4a23      	ldr	r2, [pc, #140]	; (8006154 <HAL_RCC_OscConfig+0x91c>)
 80060c6:	f023 0301 	bic.w	r3, r3, #1
 80060ca:	6213      	str	r3, [r2, #32]
 80060cc:	4b21      	ldr	r3, [pc, #132]	; (8006154 <HAL_RCC_OscConfig+0x91c>)
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	4a20      	ldr	r2, [pc, #128]	; (8006154 <HAL_RCC_OscConfig+0x91c>)
 80060d2:	f023 0304 	bic.w	r3, r3, #4
 80060d6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060d8:	1d3b      	adds	r3, r7, #4
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d06a      	beq.n	80061b8 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060e2:	f7fc fd6d 	bl	8002bc0 <HAL_GetTick>
 80060e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060ea:	e00b      	b.n	8006104 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060ec:	f7fc fd68 	bl	8002bc0 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d901      	bls.n	8006104 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e2a7      	b.n	8006654 <HAL_RCC_OscConfig+0xe1c>
 8006104:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006108:	2202      	movs	r2, #2
 800610a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800610c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	fa93 f2a3 	rbit	r2, r3
 8006116:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006120:	2202      	movs	r2, #2
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	fa93 f2a3 	rbit	r2, r3
 800612e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006132:	601a      	str	r2, [r3, #0]
  return result;
 8006134:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006138:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800613a:	fab3 f383 	clz	r3, r3
 800613e:	b2db      	uxtb	r3, r3
 8006140:	095b      	lsrs	r3, r3, #5
 8006142:	b2db      	uxtb	r3, r3
 8006144:	f043 0302 	orr.w	r3, r3, #2
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b02      	cmp	r3, #2
 800614c:	d108      	bne.n	8006160 <HAL_RCC_OscConfig+0x928>
 800614e:	4b01      	ldr	r3, [pc, #4]	; (8006154 <HAL_RCC_OscConfig+0x91c>)
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	e013      	b.n	800617c <HAL_RCC_OscConfig+0x944>
 8006154:	40021000 	.word	0x40021000
 8006158:	10908120 	.word	0x10908120
 800615c:	40007000 	.word	0x40007000
 8006160:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006164:	2202      	movs	r2, #2
 8006166:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006168:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	fa93 f2a3 	rbit	r2, r3
 8006172:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	4bc0      	ldr	r3, [pc, #768]	; (800647c <HAL_RCC_OscConfig+0xc44>)
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8006180:	2102      	movs	r1, #2
 8006182:	6011      	str	r1, [r2, #0]
 8006184:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8006188:	6812      	ldr	r2, [r2, #0]
 800618a:	fa92 f1a2 	rbit	r1, r2
 800618e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006192:	6011      	str	r1, [r2, #0]
  return result;
 8006194:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006198:	6812      	ldr	r2, [r2, #0]
 800619a:	fab2 f282 	clz	r2, r2
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061a4:	b2d2      	uxtb	r2, r2
 80061a6:	f002 021f 	and.w	r2, r2, #31
 80061aa:	2101      	movs	r1, #1
 80061ac:	fa01 f202 	lsl.w	r2, r1, r2
 80061b0:	4013      	ands	r3, r2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d09a      	beq.n	80060ec <HAL_RCC_OscConfig+0x8b4>
 80061b6:	e063      	b.n	8006280 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061b8:	f7fc fd02 	bl	8002bc0 <HAL_GetTick>
 80061bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061c0:	e00b      	b.n	80061da <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061c2:	f7fc fcfd 	bl	8002bc0 <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d901      	bls.n	80061da <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e23c      	b.n	8006654 <HAL_RCC_OscConfig+0xe1c>
 80061da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80061de:	2202      	movs	r2, #2
 80061e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	fa93 f2a3 	rbit	r2, r3
 80061ec:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80061f6:	2202      	movs	r2, #2
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	fa93 f2a3 	rbit	r2, r3
 8006204:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006208:	601a      	str	r2, [r3, #0]
  return result;
 800620a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800620e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006210:	fab3 f383 	clz	r3, r3
 8006214:	b2db      	uxtb	r3, r3
 8006216:	095b      	lsrs	r3, r3, #5
 8006218:	b2db      	uxtb	r3, r3
 800621a:	f043 0302 	orr.w	r3, r3, #2
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b02      	cmp	r3, #2
 8006222:	d102      	bne.n	800622a <HAL_RCC_OscConfig+0x9f2>
 8006224:	4b95      	ldr	r3, [pc, #596]	; (800647c <HAL_RCC_OscConfig+0xc44>)
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	e00d      	b.n	8006246 <HAL_RCC_OscConfig+0xa0e>
 800622a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800622e:	2202      	movs	r2, #2
 8006230:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006232:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	fa93 f2a3 	rbit	r2, r3
 800623c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	4b8e      	ldr	r3, [pc, #568]	; (800647c <HAL_RCC_OscConfig+0xc44>)
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800624a:	2102      	movs	r1, #2
 800624c:	6011      	str	r1, [r2, #0]
 800624e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8006252:	6812      	ldr	r2, [r2, #0]
 8006254:	fa92 f1a2 	rbit	r1, r2
 8006258:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800625c:	6011      	str	r1, [r2, #0]
  return result;
 800625e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006262:	6812      	ldr	r2, [r2, #0]
 8006264:	fab2 f282 	clz	r2, r2
 8006268:	b2d2      	uxtb	r2, r2
 800626a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	f002 021f 	and.w	r2, r2, #31
 8006274:	2101      	movs	r1, #1
 8006276:	fa01 f202 	lsl.w	r2, r1, r2
 800627a:	4013      	ands	r3, r2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1a0      	bne.n	80061c2 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006280:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8006284:	2b01      	cmp	r3, #1
 8006286:	d105      	bne.n	8006294 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006288:	4b7c      	ldr	r3, [pc, #496]	; (800647c <HAL_RCC_OscConfig+0xc44>)
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	4a7b      	ldr	r2, [pc, #492]	; (800647c <HAL_RCC_OscConfig+0xc44>)
 800628e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006292:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006294:	1d3b      	adds	r3, r7, #4
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 81d9 	beq.w	8006652 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062a0:	4b76      	ldr	r3, [pc, #472]	; (800647c <HAL_RCC_OscConfig+0xc44>)
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f003 030c 	and.w	r3, r3, #12
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	f000 81a6 	beq.w	80065fa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062ae:	1d3b      	adds	r3, r7, #4
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	f040 811e 	bne.w	80064f6 <HAL_RCC_OscConfig+0xcbe>
 80062ba:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80062be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	fa93 f2a3 	rbit	r2, r3
 80062ce:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80062d2:	601a      	str	r2, [r3, #0]
  return result;
 80062d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80062d8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062da:	fab3 f383 	clz	r3, r3
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80062e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	461a      	mov	r2, r3
 80062ec:	2300      	movs	r3, #0
 80062ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062f0:	f7fc fc66 	bl	8002bc0 <HAL_GetTick>
 80062f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062f8:	e009      	b.n	800630e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062fa:	f7fc fc61 	bl	8002bc0 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b02      	cmp	r3, #2
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e1a2      	b.n	8006654 <HAL_RCC_OscConfig+0xe1c>
 800630e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006312:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006316:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006318:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	fa93 f2a3 	rbit	r2, r3
 8006322:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006326:	601a      	str	r2, [r3, #0]
  return result;
 8006328:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800632c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800632e:	fab3 f383 	clz	r3, r3
 8006332:	b2db      	uxtb	r3, r3
 8006334:	095b      	lsrs	r3, r3, #5
 8006336:	b2db      	uxtb	r3, r3
 8006338:	f043 0301 	orr.w	r3, r3, #1
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b01      	cmp	r3, #1
 8006340:	d102      	bne.n	8006348 <HAL_RCC_OscConfig+0xb10>
 8006342:	4b4e      	ldr	r3, [pc, #312]	; (800647c <HAL_RCC_OscConfig+0xc44>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	e01b      	b.n	8006380 <HAL_RCC_OscConfig+0xb48>
 8006348:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800634c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006350:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006352:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	fa93 f2a3 	rbit	r2, r3
 800635c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006366:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	fa93 f2a3 	rbit	r2, r3
 8006376:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	4b3f      	ldr	r3, [pc, #252]	; (800647c <HAL_RCC_OscConfig+0xc44>)
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006384:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006388:	6011      	str	r1, [r2, #0]
 800638a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800638e:	6812      	ldr	r2, [r2, #0]
 8006390:	fa92 f1a2 	rbit	r1, r2
 8006394:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006398:	6011      	str	r1, [r2, #0]
  return result;
 800639a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800639e:	6812      	ldr	r2, [r2, #0]
 80063a0:	fab2 f282 	clz	r2, r2
 80063a4:	b2d2      	uxtb	r2, r2
 80063a6:	f042 0220 	orr.w	r2, r2, #32
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	f002 021f 	and.w	r2, r2, #31
 80063b0:	2101      	movs	r1, #1
 80063b2:	fa01 f202 	lsl.w	r2, r1, r2
 80063b6:	4013      	ands	r3, r2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d19e      	bne.n	80062fa <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063bc:	4b2f      	ldr	r3, [pc, #188]	; (800647c <HAL_RCC_OscConfig+0xc44>)
 80063be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c0:	f023 020f 	bic.w	r2, r3, #15
 80063c4:	1d3b      	adds	r3, r7, #4
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	492c      	ldr	r1, [pc, #176]	; (800647c <HAL_RCC_OscConfig+0xc44>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	62cb      	str	r3, [r1, #44]	; 0x2c
 80063d0:	4b2a      	ldr	r3, [pc, #168]	; (800647c <HAL_RCC_OscConfig+0xc44>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80063d8:	1d3b      	adds	r3, r7, #4
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6a19      	ldr	r1, [r3, #32]
 80063de:	1d3b      	adds	r3, r7, #4
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	430b      	orrs	r3, r1
 80063e6:	4925      	ldr	r1, [pc, #148]	; (800647c <HAL_RCC_OscConfig+0xc44>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	604b      	str	r3, [r1, #4]
 80063ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80063f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	fa93 f2a3 	rbit	r2, r3
 8006400:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006404:	601a      	str	r2, [r3, #0]
  return result;
 8006406:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800640a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800640c:	fab3 f383 	clz	r3, r3
 8006410:	b2db      	uxtb	r3, r3
 8006412:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006416:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	461a      	mov	r2, r3
 800641e:	2301      	movs	r3, #1
 8006420:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006422:	f7fc fbcd 	bl	8002bc0 <HAL_GetTick>
 8006426:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800642a:	e009      	b.n	8006440 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800642c:	f7fc fbc8 	bl	8002bc0 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d901      	bls.n	8006440 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e109      	b.n	8006654 <HAL_RCC_OscConfig+0xe1c>
 8006440:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006444:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006448:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800644a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	fa93 f2a3 	rbit	r2, r3
 8006454:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006458:	601a      	str	r2, [r3, #0]
  return result;
 800645a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800645e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006460:	fab3 f383 	clz	r3, r3
 8006464:	b2db      	uxtb	r3, r3
 8006466:	095b      	lsrs	r3, r3, #5
 8006468:	b2db      	uxtb	r3, r3
 800646a:	f043 0301 	orr.w	r3, r3, #1
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b01      	cmp	r3, #1
 8006472:	d105      	bne.n	8006480 <HAL_RCC_OscConfig+0xc48>
 8006474:	4b01      	ldr	r3, [pc, #4]	; (800647c <HAL_RCC_OscConfig+0xc44>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	e01e      	b.n	80064b8 <HAL_RCC_OscConfig+0xc80>
 800647a:	bf00      	nop
 800647c:	40021000 	.word	0x40021000
 8006480:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006484:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006488:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800648a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	fa93 f2a3 	rbit	r2, r3
 8006494:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800649e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	fa93 f2a3 	rbit	r2, r3
 80064ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	4b6a      	ldr	r3, [pc, #424]	; (8006660 <HAL_RCC_OscConfig+0xe28>)
 80064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80064bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80064c0:	6011      	str	r1, [r2, #0]
 80064c2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80064c6:	6812      	ldr	r2, [r2, #0]
 80064c8:	fa92 f1a2 	rbit	r1, r2
 80064cc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80064d0:	6011      	str	r1, [r2, #0]
  return result;
 80064d2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80064d6:	6812      	ldr	r2, [r2, #0]
 80064d8:	fab2 f282 	clz	r2, r2
 80064dc:	b2d2      	uxtb	r2, r2
 80064de:	f042 0220 	orr.w	r2, r2, #32
 80064e2:	b2d2      	uxtb	r2, r2
 80064e4:	f002 021f 	and.w	r2, r2, #31
 80064e8:	2101      	movs	r1, #1
 80064ea:	fa01 f202 	lsl.w	r2, r1, r2
 80064ee:	4013      	ands	r3, r2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d09b      	beq.n	800642c <HAL_RCC_OscConfig+0xbf4>
 80064f4:	e0ad      	b.n	8006652 <HAL_RCC_OscConfig+0xe1a>
 80064f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80064fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80064fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006500:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	fa93 f2a3 	rbit	r2, r3
 800650a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800650e:	601a      	str	r2, [r3, #0]
  return result;
 8006510:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006514:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006516:	fab3 f383 	clz	r3, r3
 800651a:	b2db      	uxtb	r3, r3
 800651c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006520:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	461a      	mov	r2, r3
 8006528:	2300      	movs	r3, #0
 800652a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800652c:	f7fc fb48 	bl	8002bc0 <HAL_GetTick>
 8006530:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006534:	e009      	b.n	800654a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006536:	f7fc fb43 	bl	8002bc0 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b02      	cmp	r3, #2
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e084      	b.n	8006654 <HAL_RCC_OscConfig+0xe1c>
 800654a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800654e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006552:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	fa93 f2a3 	rbit	r2, r3
 800655e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006562:	601a      	str	r2, [r3, #0]
  return result;
 8006564:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006568:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800656a:	fab3 f383 	clz	r3, r3
 800656e:	b2db      	uxtb	r3, r3
 8006570:	095b      	lsrs	r3, r3, #5
 8006572:	b2db      	uxtb	r3, r3
 8006574:	f043 0301 	orr.w	r3, r3, #1
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b01      	cmp	r3, #1
 800657c:	d102      	bne.n	8006584 <HAL_RCC_OscConfig+0xd4c>
 800657e:	4b38      	ldr	r3, [pc, #224]	; (8006660 <HAL_RCC_OscConfig+0xe28>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	e01b      	b.n	80065bc <HAL_RCC_OscConfig+0xd84>
 8006584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006588:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800658c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800658e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	fa93 f2a3 	rbit	r2, r3
 8006598:	f107 0320 	add.w	r3, r7, #32
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	f107 031c 	add.w	r3, r7, #28
 80065a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80065a6:	601a      	str	r2, [r3, #0]
 80065a8:	f107 031c 	add.w	r3, r7, #28
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	fa93 f2a3 	rbit	r2, r3
 80065b2:	f107 0318 	add.w	r3, r7, #24
 80065b6:	601a      	str	r2, [r3, #0]
 80065b8:	4b29      	ldr	r3, [pc, #164]	; (8006660 <HAL_RCC_OscConfig+0xe28>)
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	f107 0214 	add.w	r2, r7, #20
 80065c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80065c4:	6011      	str	r1, [r2, #0]
 80065c6:	f107 0214 	add.w	r2, r7, #20
 80065ca:	6812      	ldr	r2, [r2, #0]
 80065cc:	fa92 f1a2 	rbit	r1, r2
 80065d0:	f107 0210 	add.w	r2, r7, #16
 80065d4:	6011      	str	r1, [r2, #0]
  return result;
 80065d6:	f107 0210 	add.w	r2, r7, #16
 80065da:	6812      	ldr	r2, [r2, #0]
 80065dc:	fab2 f282 	clz	r2, r2
 80065e0:	b2d2      	uxtb	r2, r2
 80065e2:	f042 0220 	orr.w	r2, r2, #32
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	f002 021f 	and.w	r2, r2, #31
 80065ec:	2101      	movs	r1, #1
 80065ee:	fa01 f202 	lsl.w	r2, r1, r2
 80065f2:	4013      	ands	r3, r2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d19e      	bne.n	8006536 <HAL_RCC_OscConfig+0xcfe>
 80065f8:	e02b      	b.n	8006652 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065fa:	1d3b      	adds	r3, r7, #4
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d101      	bne.n	8006608 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e025      	b.n	8006654 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006608:	4b15      	ldr	r3, [pc, #84]	; (8006660 <HAL_RCC_OscConfig+0xe28>)
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8006610:	4b13      	ldr	r3, [pc, #76]	; (8006660 <HAL_RCC_OscConfig+0xe28>)
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006614:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006618:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800661c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8006620:	1d3b      	adds	r3, r7, #4
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	429a      	cmp	r2, r3
 8006628:	d111      	bne.n	800664e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800662a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800662e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006632:	1d3b      	adds	r3, r7, #4
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006638:	429a      	cmp	r2, r3
 800663a:	d108      	bne.n	800664e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800663c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006640:	f003 020f 	and.w	r2, r3, #15
 8006644:	1d3b      	adds	r3, r7, #4
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800664a:	429a      	cmp	r2, r3
 800664c:	d001      	beq.n	8006652 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e000      	b.n	8006654 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	40021000 	.word	0x40021000

08006664 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b09e      	sub	sp, #120	; 0x78
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d101      	bne.n	800667c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e162      	b.n	8006942 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800667c:	4b90      	ldr	r3, [pc, #576]	; (80068c0 <HAL_RCC_ClockConfig+0x25c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0307 	and.w	r3, r3, #7
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	429a      	cmp	r2, r3
 8006688:	d910      	bls.n	80066ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800668a:	4b8d      	ldr	r3, [pc, #564]	; (80068c0 <HAL_RCC_ClockConfig+0x25c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f023 0207 	bic.w	r2, r3, #7
 8006692:	498b      	ldr	r1, [pc, #556]	; (80068c0 <HAL_RCC_ClockConfig+0x25c>)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	4313      	orrs	r3, r2
 8006698:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800669a:	4b89      	ldr	r3, [pc, #548]	; (80068c0 <HAL_RCC_ClockConfig+0x25c>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d001      	beq.n	80066ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e14a      	b.n	8006942 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d008      	beq.n	80066ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066b8:	4b82      	ldr	r3, [pc, #520]	; (80068c4 <HAL_RCC_ClockConfig+0x260>)
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	497f      	ldr	r1, [pc, #508]	; (80068c4 <HAL_RCC_ClockConfig+0x260>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 80dc 	beq.w	8006890 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d13c      	bne.n	800675a <HAL_RCC_ClockConfig+0xf6>
 80066e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80066e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066e8:	fa93 f3a3 	rbit	r3, r3
 80066ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80066ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066f0:	fab3 f383 	clz	r3, r3
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	095b      	lsrs	r3, r3, #5
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	f043 0301 	orr.w	r3, r3, #1
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b01      	cmp	r3, #1
 8006702:	d102      	bne.n	800670a <HAL_RCC_ClockConfig+0xa6>
 8006704:	4b6f      	ldr	r3, [pc, #444]	; (80068c4 <HAL_RCC_ClockConfig+0x260>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	e00f      	b.n	800672a <HAL_RCC_ClockConfig+0xc6>
 800670a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800670e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006710:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006712:	fa93 f3a3 	rbit	r3, r3
 8006716:	667b      	str	r3, [r7, #100]	; 0x64
 8006718:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800671c:	663b      	str	r3, [r7, #96]	; 0x60
 800671e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006720:	fa93 f3a3 	rbit	r3, r3
 8006724:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006726:	4b67      	ldr	r3, [pc, #412]	; (80068c4 <HAL_RCC_ClockConfig+0x260>)
 8006728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800672e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006730:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006732:	fa92 f2a2 	rbit	r2, r2
 8006736:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006738:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800673a:	fab2 f282 	clz	r2, r2
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	f042 0220 	orr.w	r2, r2, #32
 8006744:	b2d2      	uxtb	r2, r2
 8006746:	f002 021f 	and.w	r2, r2, #31
 800674a:	2101      	movs	r1, #1
 800674c:	fa01 f202 	lsl.w	r2, r1, r2
 8006750:	4013      	ands	r3, r2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d17b      	bne.n	800684e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e0f3      	b.n	8006942 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2b02      	cmp	r3, #2
 8006760:	d13c      	bne.n	80067dc <HAL_RCC_ClockConfig+0x178>
 8006762:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006766:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800676a:	fa93 f3a3 	rbit	r3, r3
 800676e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006772:	fab3 f383 	clz	r3, r3
 8006776:	b2db      	uxtb	r3, r3
 8006778:	095b      	lsrs	r3, r3, #5
 800677a:	b2db      	uxtb	r3, r3
 800677c:	f043 0301 	orr.w	r3, r3, #1
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b01      	cmp	r3, #1
 8006784:	d102      	bne.n	800678c <HAL_RCC_ClockConfig+0x128>
 8006786:	4b4f      	ldr	r3, [pc, #316]	; (80068c4 <HAL_RCC_ClockConfig+0x260>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	e00f      	b.n	80067ac <HAL_RCC_ClockConfig+0x148>
 800678c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006790:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006794:	fa93 f3a3 	rbit	r3, r3
 8006798:	647b      	str	r3, [r7, #68]	; 0x44
 800679a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800679e:	643b      	str	r3, [r7, #64]	; 0x40
 80067a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067a2:	fa93 f3a3 	rbit	r3, r3
 80067a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067a8:	4b46      	ldr	r3, [pc, #280]	; (80068c4 <HAL_RCC_ClockConfig+0x260>)
 80067aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80067b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80067b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067b4:	fa92 f2a2 	rbit	r2, r2
 80067b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80067ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067bc:	fab2 f282 	clz	r2, r2
 80067c0:	b2d2      	uxtb	r2, r2
 80067c2:	f042 0220 	orr.w	r2, r2, #32
 80067c6:	b2d2      	uxtb	r2, r2
 80067c8:	f002 021f 	and.w	r2, r2, #31
 80067cc:	2101      	movs	r1, #1
 80067ce:	fa01 f202 	lsl.w	r2, r1, r2
 80067d2:	4013      	ands	r3, r2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d13a      	bne.n	800684e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e0b2      	b.n	8006942 <HAL_RCC_ClockConfig+0x2de>
 80067dc:	2302      	movs	r3, #2
 80067de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e2:	fa93 f3a3 	rbit	r3, r3
 80067e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80067e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067ea:	fab3 f383 	clz	r3, r3
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	095b      	lsrs	r3, r3, #5
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	f043 0301 	orr.w	r3, r3, #1
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d102      	bne.n	8006804 <HAL_RCC_ClockConfig+0x1a0>
 80067fe:	4b31      	ldr	r3, [pc, #196]	; (80068c4 <HAL_RCC_ClockConfig+0x260>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	e00d      	b.n	8006820 <HAL_RCC_ClockConfig+0x1bc>
 8006804:	2302      	movs	r3, #2
 8006806:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680a:	fa93 f3a3 	rbit	r3, r3
 800680e:	627b      	str	r3, [r7, #36]	; 0x24
 8006810:	2302      	movs	r3, #2
 8006812:	623b      	str	r3, [r7, #32]
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	fa93 f3a3 	rbit	r3, r3
 800681a:	61fb      	str	r3, [r7, #28]
 800681c:	4b29      	ldr	r3, [pc, #164]	; (80068c4 <HAL_RCC_ClockConfig+0x260>)
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	2202      	movs	r2, #2
 8006822:	61ba      	str	r2, [r7, #24]
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	fa92 f2a2 	rbit	r2, r2
 800682a:	617a      	str	r2, [r7, #20]
  return result;
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	fab2 f282 	clz	r2, r2
 8006832:	b2d2      	uxtb	r2, r2
 8006834:	f042 0220 	orr.w	r2, r2, #32
 8006838:	b2d2      	uxtb	r2, r2
 800683a:	f002 021f 	and.w	r2, r2, #31
 800683e:	2101      	movs	r1, #1
 8006840:	fa01 f202 	lsl.w	r2, r1, r2
 8006844:	4013      	ands	r3, r2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e079      	b.n	8006942 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800684e:	4b1d      	ldr	r3, [pc, #116]	; (80068c4 <HAL_RCC_ClockConfig+0x260>)
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f023 0203 	bic.w	r2, r3, #3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	491a      	ldr	r1, [pc, #104]	; (80068c4 <HAL_RCC_ClockConfig+0x260>)
 800685c:	4313      	orrs	r3, r2
 800685e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006860:	f7fc f9ae 	bl	8002bc0 <HAL_GetTick>
 8006864:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006866:	e00a      	b.n	800687e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006868:	f7fc f9aa 	bl	8002bc0 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	f241 3288 	movw	r2, #5000	; 0x1388
 8006876:	4293      	cmp	r3, r2
 8006878:	d901      	bls.n	800687e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e061      	b.n	8006942 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800687e:	4b11      	ldr	r3, [pc, #68]	; (80068c4 <HAL_RCC_ClockConfig+0x260>)
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f003 020c 	and.w	r2, r3, #12
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	429a      	cmp	r2, r3
 800688e:	d1eb      	bne.n	8006868 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006890:	4b0b      	ldr	r3, [pc, #44]	; (80068c0 <HAL_RCC_ClockConfig+0x25c>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	429a      	cmp	r2, r3
 800689c:	d214      	bcs.n	80068c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800689e:	4b08      	ldr	r3, [pc, #32]	; (80068c0 <HAL_RCC_ClockConfig+0x25c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f023 0207 	bic.w	r2, r3, #7
 80068a6:	4906      	ldr	r1, [pc, #24]	; (80068c0 <HAL_RCC_ClockConfig+0x25c>)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ae:	4b04      	ldr	r3, [pc, #16]	; (80068c0 <HAL_RCC_ClockConfig+0x25c>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0307 	and.w	r3, r3, #7
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d005      	beq.n	80068c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e040      	b.n	8006942 <HAL_RCC_ClockConfig+0x2de>
 80068c0:	40022000 	.word	0x40022000
 80068c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d008      	beq.n	80068e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068d4:	4b1d      	ldr	r3, [pc, #116]	; (800694c <HAL_RCC_ClockConfig+0x2e8>)
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	491a      	ldr	r1, [pc, #104]	; (800694c <HAL_RCC_ClockConfig+0x2e8>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0308 	and.w	r3, r3, #8
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d009      	beq.n	8006906 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068f2:	4b16      	ldr	r3, [pc, #88]	; (800694c <HAL_RCC_ClockConfig+0x2e8>)
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	00db      	lsls	r3, r3, #3
 8006900:	4912      	ldr	r1, [pc, #72]	; (800694c <HAL_RCC_ClockConfig+0x2e8>)
 8006902:	4313      	orrs	r3, r2
 8006904:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006906:	f000 f829 	bl	800695c <HAL_RCC_GetSysClockFreq>
 800690a:	4601      	mov	r1, r0
 800690c:	4b0f      	ldr	r3, [pc, #60]	; (800694c <HAL_RCC_ClockConfig+0x2e8>)
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006914:	22f0      	movs	r2, #240	; 0xf0
 8006916:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	fa92 f2a2 	rbit	r2, r2
 800691e:	60fa      	str	r2, [r7, #12]
  return result;
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	fab2 f282 	clz	r2, r2
 8006926:	b2d2      	uxtb	r2, r2
 8006928:	40d3      	lsrs	r3, r2
 800692a:	4a09      	ldr	r2, [pc, #36]	; (8006950 <HAL_RCC_ClockConfig+0x2ec>)
 800692c:	5cd3      	ldrb	r3, [r2, r3]
 800692e:	fa21 f303 	lsr.w	r3, r1, r3
 8006932:	4a08      	ldr	r2, [pc, #32]	; (8006954 <HAL_RCC_ClockConfig+0x2f0>)
 8006934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006936:	4b08      	ldr	r3, [pc, #32]	; (8006958 <HAL_RCC_ClockConfig+0x2f4>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4618      	mov	r0, r3
 800693c:	f7fc f8fc 	bl	8002b38 <HAL_InitTick>
  
  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3778      	adds	r7, #120	; 0x78
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	40021000 	.word	0x40021000
 8006950:	0800b900 	.word	0x0800b900
 8006954:	20000a1c 	.word	0x20000a1c
 8006958:	20000a20 	.word	0x20000a20

0800695c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800695c:	b480      	push	{r7}
 800695e:	b08b      	sub	sp, #44	; 0x2c
 8006960:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	61fb      	str	r3, [r7, #28]
 8006966:	2300      	movs	r3, #0
 8006968:	61bb      	str	r3, [r7, #24]
 800696a:	2300      	movs	r3, #0
 800696c:	627b      	str	r3, [r7, #36]	; 0x24
 800696e:	2300      	movs	r3, #0
 8006970:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006976:	4b2a      	ldr	r3, [pc, #168]	; (8006a20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	f003 030c 	and.w	r3, r3, #12
 8006982:	2b04      	cmp	r3, #4
 8006984:	d002      	beq.n	800698c <HAL_RCC_GetSysClockFreq+0x30>
 8006986:	2b08      	cmp	r3, #8
 8006988:	d003      	beq.n	8006992 <HAL_RCC_GetSysClockFreq+0x36>
 800698a:	e03f      	b.n	8006a0c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800698c:	4b25      	ldr	r3, [pc, #148]	; (8006a24 <HAL_RCC_GetSysClockFreq+0xc8>)
 800698e:	623b      	str	r3, [r7, #32]
      break;
 8006990:	e03f      	b.n	8006a12 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006998:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800699c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	fa92 f2a2 	rbit	r2, r2
 80069a4:	607a      	str	r2, [r7, #4]
  return result;
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	fab2 f282 	clz	r2, r2
 80069ac:	b2d2      	uxtb	r2, r2
 80069ae:	40d3      	lsrs	r3, r2
 80069b0:	4a1d      	ldr	r2, [pc, #116]	; (8006a28 <HAL_RCC_GetSysClockFreq+0xcc>)
 80069b2:	5cd3      	ldrb	r3, [r2, r3]
 80069b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80069b6:	4b1a      	ldr	r3, [pc, #104]	; (8006a20 <HAL_RCC_GetSysClockFreq+0xc4>)
 80069b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ba:	f003 030f 	and.w	r3, r3, #15
 80069be:	220f      	movs	r2, #15
 80069c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	fa92 f2a2 	rbit	r2, r2
 80069c8:	60fa      	str	r2, [r7, #12]
  return result;
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	fab2 f282 	clz	r2, r2
 80069d0:	b2d2      	uxtb	r2, r2
 80069d2:	40d3      	lsrs	r3, r2
 80069d4:	4a15      	ldr	r2, [pc, #84]	; (8006a2c <HAL_RCC_GetSysClockFreq+0xd0>)
 80069d6:	5cd3      	ldrb	r3, [r2, r3]
 80069d8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d008      	beq.n	80069f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80069e4:	4a0f      	ldr	r2, [pc, #60]	; (8006a24 <HAL_RCC_GetSysClockFreq+0xc8>)
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	fb02 f303 	mul.w	r3, r2, r3
 80069f2:	627b      	str	r3, [r7, #36]	; 0x24
 80069f4:	e007      	b.n	8006a06 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80069f6:	4a0b      	ldr	r2, [pc, #44]	; (8006a24 <HAL_RCC_GetSysClockFreq+0xc8>)
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	fb02 f303 	mul.w	r3, r2, r3
 8006a04:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	623b      	str	r3, [r7, #32]
      break;
 8006a0a:	e002      	b.n	8006a12 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006a0c:	4b05      	ldr	r3, [pc, #20]	; (8006a24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006a0e:	623b      	str	r3, [r7, #32]
      break;
 8006a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a12:	6a3b      	ldr	r3, [r7, #32]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	372c      	adds	r7, #44	; 0x2c
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	40021000 	.word	0x40021000
 8006a24:	007a1200 	.word	0x007a1200
 8006a28:	0800b918 	.word	0x0800b918
 8006a2c:	0800b928 	.word	0x0800b928

08006a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a30:	b480      	push	{r7}
 8006a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a34:	4b03      	ldr	r3, [pc, #12]	; (8006a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a36:	681b      	ldr	r3, [r3, #0]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	20000a1c 	.word	0x20000a1c

08006a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006a4e:	f7ff ffef 	bl	8006a30 <HAL_RCC_GetHCLKFreq>
 8006a52:	4601      	mov	r1, r0
 8006a54:	4b0b      	ldr	r3, [pc, #44]	; (8006a84 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a5c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006a60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	fa92 f2a2 	rbit	r2, r2
 8006a68:	603a      	str	r2, [r7, #0]
  return result;
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	fab2 f282 	clz	r2, r2
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	40d3      	lsrs	r3, r2
 8006a74:	4a04      	ldr	r2, [pc, #16]	; (8006a88 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006a76:	5cd3      	ldrb	r3, [r2, r3]
 8006a78:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	40021000 	.word	0x40021000
 8006a88:	0800b910 	.word	0x0800b910

08006a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006a92:	f7ff ffcd 	bl	8006a30 <HAL_RCC_GetHCLKFreq>
 8006a96:	4601      	mov	r1, r0
 8006a98:	4b0b      	ldr	r3, [pc, #44]	; (8006ac8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006aa0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006aa4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	fa92 f2a2 	rbit	r2, r2
 8006aac:	603a      	str	r2, [r7, #0]
  return result;
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	fab2 f282 	clz	r2, r2
 8006ab4:	b2d2      	uxtb	r2, r2
 8006ab6:	40d3      	lsrs	r3, r2
 8006ab8:	4a04      	ldr	r2, [pc, #16]	; (8006acc <HAL_RCC_GetPCLK2Freq+0x40>)
 8006aba:	5cd3      	ldrb	r3, [r2, r3]
 8006abc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	40021000 	.word	0x40021000
 8006acc:	0800b910 	.word	0x0800b910

08006ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b092      	sub	sp, #72	; 0x48
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f000 80d4 	beq.w	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006af4:	4b4e      	ldr	r3, [pc, #312]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006af6:	69db      	ldr	r3, [r3, #28]
 8006af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10e      	bne.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b00:	4b4b      	ldr	r3, [pc, #300]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	4a4a      	ldr	r2, [pc, #296]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b0a:	61d3      	str	r3, [r2, #28]
 8006b0c:	4b48      	ldr	r3, [pc, #288]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b0e:	69db      	ldr	r3, [r3, #28]
 8006b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b14:	60bb      	str	r3, [r7, #8]
 8006b16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b1e:	4b45      	ldr	r3, [pc, #276]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d118      	bne.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b2a:	4b42      	ldr	r3, [pc, #264]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a41      	ldr	r2, [pc, #260]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b36:	f7fc f843 	bl	8002bc0 <HAL_GetTick>
 8006b3a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b3c:	e008      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b3e:	f7fc f83f 	bl	8002bc0 <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	2b64      	cmp	r3, #100	; 0x64
 8006b4a:	d901      	bls.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e1d6      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b50:	4b38      	ldr	r3, [pc, #224]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0f0      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b5c:	4b34      	ldr	r3, [pc, #208]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b64:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 8084 	beq.w	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d07c      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b7c:	4b2c      	ldr	r3, [pc, #176]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	fa93 f3a3 	rbit	r3, r3
 8006b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b96:	fab3 f383 	clz	r3, r3
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	4b26      	ldr	r3, [pc, #152]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ba0:	4413      	add	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006bae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb2:	fa93 f3a3 	rbit	r3, r3
 8006bb6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006bba:	fab3 f383 	clz	r3, r3
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	4b1d      	ldr	r3, [pc, #116]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006bc4:	4413      	add	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	461a      	mov	r2, r3
 8006bca:	2300      	movs	r3, #0
 8006bcc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006bce:	4a18      	ldr	r2, [pc, #96]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d04b      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bde:	f7fb ffef 	bl	8002bc0 <HAL_GetTick>
 8006be2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006be4:	e00a      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006be6:	f7fb ffeb 	bl	8002bc0 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d901      	bls.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e180      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c02:	fa93 f3a3 	rbit	r3, r3
 8006c06:	627b      	str	r3, [r7, #36]	; 0x24
 8006c08:	2302      	movs	r3, #2
 8006c0a:	623b      	str	r3, [r7, #32]
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	fa93 f3a3 	rbit	r3, r3
 8006c12:	61fb      	str	r3, [r7, #28]
  return result;
 8006c14:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c16:	fab3 f383 	clz	r3, r3
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	095b      	lsrs	r3, r3, #5
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	f043 0302 	orr.w	r3, r3, #2
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d108      	bne.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006c2a:	4b01      	ldr	r3, [pc, #4]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	e00d      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006c30:	40021000 	.word	0x40021000
 8006c34:	40007000 	.word	0x40007000
 8006c38:	10908100 	.word	0x10908100
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	fa93 f3a3 	rbit	r3, r3
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	4ba0      	ldr	r3, [pc, #640]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	613a      	str	r2, [r7, #16]
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	fa92 f2a2 	rbit	r2, r2
 8006c56:	60fa      	str	r2, [r7, #12]
  return result;
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	fab2 f282 	clz	r2, r2
 8006c5e:	b2d2      	uxtb	r2, r2
 8006c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c64:	b2d2      	uxtb	r2, r2
 8006c66:	f002 021f 	and.w	r2, r2, #31
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8006c70:	4013      	ands	r3, r2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d0b7      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006c76:	4b95      	ldr	r3, [pc, #596]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	4992      	ldr	r1, [pc, #584]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006c88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d105      	bne.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c90:	4b8e      	ldr	r3, [pc, #568]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c92:	69db      	ldr	r3, [r3, #28]
 8006c94:	4a8d      	ldr	r2, [pc, #564]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d008      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ca8:	4b88      	ldr	r3, [pc, #544]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cac:	f023 0203 	bic.w	r2, r3, #3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	4985      	ldr	r1, [pc, #532]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0302 	and.w	r3, r3, #2
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d008      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006cc6:	4b81      	ldr	r3, [pc, #516]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	497e      	ldr	r1, [pc, #504]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0304 	and.w	r3, r3, #4
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d008      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006ce4:	4b79      	ldr	r3, [pc, #484]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	4976      	ldr	r1, [pc, #472]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0320 	and.w	r3, r3, #32
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d008      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d02:	4b72      	ldr	r3, [pc, #456]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d06:	f023 0210 	bic.w	r2, r3, #16
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	496f      	ldr	r1, [pc, #444]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d008      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006d20:	4b6a      	ldr	r3, [pc, #424]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2c:	4967      	ldr	r1, [pc, #412]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d008      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d3e:	4b63      	ldr	r3, [pc, #396]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d42:	f023 0220 	bic.w	r2, r3, #32
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	4960      	ldr	r1, [pc, #384]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d008      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d5c:	4b5b      	ldr	r3, [pc, #364]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d60:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d68:	4958      	ldr	r1, [pc, #352]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0308 	and.w	r3, r3, #8
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d008      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006d7a:	4b54      	ldr	r3, [pc, #336]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	4951      	ldr	r1, [pc, #324]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0310 	and.w	r3, r3, #16
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d008      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006d98:	4b4c      	ldr	r3, [pc, #304]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	4949      	ldr	r1, [pc, #292]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d008      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006db6:	4b45      	ldr	r3, [pc, #276]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc2:	4942      	ldr	r1, [pc, #264]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d008      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006dd4:	4b3d      	ldr	r3, [pc, #244]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de0:	493a      	ldr	r1, [pc, #232]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d008      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006df2:	4b36      	ldr	r3, [pc, #216]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfe:	4933      	ldr	r1, [pc, #204]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006e00:	4313      	orrs	r3, r2
 8006e02:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d008      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006e10:	4b2e      	ldr	r3, [pc, #184]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1c:	492b      	ldr	r1, [pc, #172]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d008      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006e2e:	4b27      	ldr	r3, [pc, #156]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e32:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3a:	4924      	ldr	r1, [pc, #144]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d008      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8006e4c:	4b1f      	ldr	r3, [pc, #124]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e50:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e58:	491c      	ldr	r1, [pc, #112]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d008      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8006e6a:	4b18      	ldr	r3, [pc, #96]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e76:	4915      	ldr	r1, [pc, #84]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d008      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006e88:	4b10      	ldr	r3, [pc, #64]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e94:	490d      	ldr	r1, [pc, #52]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d008      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8006ea6:	4b09      	ldr	r3, [pc, #36]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eaa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb2:	4906      	ldr	r1, [pc, #24]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00c      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006ec4:	4b01      	ldr	r3, [pc, #4]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec8:	e002      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8006eca:	bf00      	nop
 8006ecc:	40021000 	.word	0x40021000
 8006ed0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed8:	490b      	ldr	r1, [pc, #44]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d008      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8006eea:	4b07      	ldr	r3, [pc, #28]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eee:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ef6:	4904      	ldr	r1, [pc, #16]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3748      	adds	r7, #72	; 0x48
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	40021000 	.word	0x40021000

08006f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e049      	b.n	8006fb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d106      	bne.n	8006f38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7fb fc1c 	bl	8002770 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3304      	adds	r3, #4
 8006f48:	4619      	mov	r1, r3
 8006f4a:	4610      	mov	r0, r2
 8006f4c:	f000 fd1e 	bl	800798c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
	...

08006fbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d001      	beq.n	8006fd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e047      	b.n	8007064 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a23      	ldr	r2, [pc, #140]	; (8007070 <HAL_TIM_Base_Start+0xb4>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d01d      	beq.n	8007022 <HAL_TIM_Base_Start+0x66>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fee:	d018      	beq.n	8007022 <HAL_TIM_Base_Start+0x66>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a1f      	ldr	r2, [pc, #124]	; (8007074 <HAL_TIM_Base_Start+0xb8>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d013      	beq.n	8007022 <HAL_TIM_Base_Start+0x66>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a1e      	ldr	r2, [pc, #120]	; (8007078 <HAL_TIM_Base_Start+0xbc>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d00e      	beq.n	8007022 <HAL_TIM_Base_Start+0x66>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a1c      	ldr	r2, [pc, #112]	; (800707c <HAL_TIM_Base_Start+0xc0>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d009      	beq.n	8007022 <HAL_TIM_Base_Start+0x66>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a1b      	ldr	r2, [pc, #108]	; (8007080 <HAL_TIM_Base_Start+0xc4>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d004      	beq.n	8007022 <HAL_TIM_Base_Start+0x66>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a19      	ldr	r2, [pc, #100]	; (8007084 <HAL_TIM_Base_Start+0xc8>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d115      	bne.n	800704e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	689a      	ldr	r2, [r3, #8]
 8007028:	4b17      	ldr	r3, [pc, #92]	; (8007088 <HAL_TIM_Base_Start+0xcc>)
 800702a:	4013      	ands	r3, r2
 800702c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b06      	cmp	r3, #6
 8007032:	d015      	beq.n	8007060 <HAL_TIM_Base_Start+0xa4>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800703a:	d011      	beq.n	8007060 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f042 0201 	orr.w	r2, r2, #1
 800704a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800704c:	e008      	b.n	8007060 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f042 0201 	orr.w	r2, r2, #1
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	e000      	b.n	8007062 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007060:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	40012c00 	.word	0x40012c00
 8007074:	40000400 	.word	0x40000400
 8007078:	40000800 	.word	0x40000800
 800707c:	40013400 	.word	0x40013400
 8007080:	40014000 	.word	0x40014000
 8007084:	40015000 	.word	0x40015000
 8007088:	00010007 	.word	0x00010007

0800708c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e049      	b.n	8007132 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d106      	bne.n	80070b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f841 	bl	800713a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2202      	movs	r2, #2
 80070bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	3304      	adds	r3, #4
 80070c8:	4619      	mov	r1, r3
 80070ca:	4610      	mov	r0, r2
 80070cc:	f000 fc5e 	bl	800798c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800713a:	b480      	push	{r7}
 800713c:	b083      	sub	sp, #12
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007142:	bf00      	nop
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
	...

08007150 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d109      	bne.n	8007174 <HAL_TIM_PWM_Start+0x24>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b01      	cmp	r3, #1
 800716a:	bf14      	ite	ne
 800716c:	2301      	movne	r3, #1
 800716e:	2300      	moveq	r3, #0
 8007170:	b2db      	uxtb	r3, r3
 8007172:	e03c      	b.n	80071ee <HAL_TIM_PWM_Start+0x9e>
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2b04      	cmp	r3, #4
 8007178:	d109      	bne.n	800718e <HAL_TIM_PWM_Start+0x3e>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b01      	cmp	r3, #1
 8007184:	bf14      	ite	ne
 8007186:	2301      	movne	r3, #1
 8007188:	2300      	moveq	r3, #0
 800718a:	b2db      	uxtb	r3, r3
 800718c:	e02f      	b.n	80071ee <HAL_TIM_PWM_Start+0x9e>
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b08      	cmp	r3, #8
 8007192:	d109      	bne.n	80071a8 <HAL_TIM_PWM_Start+0x58>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b01      	cmp	r3, #1
 800719e:	bf14      	ite	ne
 80071a0:	2301      	movne	r3, #1
 80071a2:	2300      	moveq	r3, #0
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	e022      	b.n	80071ee <HAL_TIM_PWM_Start+0x9e>
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2b0c      	cmp	r3, #12
 80071ac:	d109      	bne.n	80071c2 <HAL_TIM_PWM_Start+0x72>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	bf14      	ite	ne
 80071ba:	2301      	movne	r3, #1
 80071bc:	2300      	moveq	r3, #0
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	e015      	b.n	80071ee <HAL_TIM_PWM_Start+0x9e>
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b10      	cmp	r3, #16
 80071c6:	d109      	bne.n	80071dc <HAL_TIM_PWM_Start+0x8c>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	bf14      	ite	ne
 80071d4:	2301      	movne	r3, #1
 80071d6:	2300      	moveq	r3, #0
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	e008      	b.n	80071ee <HAL_TIM_PWM_Start+0x9e>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	bf14      	ite	ne
 80071e8:	2301      	movne	r3, #1
 80071ea:	2300      	moveq	r3, #0
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e0a1      	b.n	800733a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d104      	bne.n	8007206 <HAL_TIM_PWM_Start+0xb6>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2202      	movs	r2, #2
 8007200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007204:	e023      	b.n	800724e <HAL_TIM_PWM_Start+0xfe>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b04      	cmp	r3, #4
 800720a:	d104      	bne.n	8007216 <HAL_TIM_PWM_Start+0xc6>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2202      	movs	r2, #2
 8007210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007214:	e01b      	b.n	800724e <HAL_TIM_PWM_Start+0xfe>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b08      	cmp	r3, #8
 800721a:	d104      	bne.n	8007226 <HAL_TIM_PWM_Start+0xd6>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2202      	movs	r2, #2
 8007220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007224:	e013      	b.n	800724e <HAL_TIM_PWM_Start+0xfe>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2b0c      	cmp	r3, #12
 800722a:	d104      	bne.n	8007236 <HAL_TIM_PWM_Start+0xe6>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007234:	e00b      	b.n	800724e <HAL_TIM_PWM_Start+0xfe>
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b10      	cmp	r3, #16
 800723a:	d104      	bne.n	8007246 <HAL_TIM_PWM_Start+0xf6>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2202      	movs	r2, #2
 8007240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007244:	e003      	b.n	800724e <HAL_TIM_PWM_Start+0xfe>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2202      	movs	r2, #2
 800724a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2201      	movs	r2, #1
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	4618      	mov	r0, r3
 8007258:	f000 ffd6 	bl	8008208 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a38      	ldr	r2, [pc, #224]	; (8007344 <HAL_TIM_PWM_Start+0x1f4>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d018      	beq.n	8007298 <HAL_TIM_PWM_Start+0x148>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a37      	ldr	r2, [pc, #220]	; (8007348 <HAL_TIM_PWM_Start+0x1f8>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d013      	beq.n	8007298 <HAL_TIM_PWM_Start+0x148>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a35      	ldr	r2, [pc, #212]	; (800734c <HAL_TIM_PWM_Start+0x1fc>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d00e      	beq.n	8007298 <HAL_TIM_PWM_Start+0x148>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a34      	ldr	r2, [pc, #208]	; (8007350 <HAL_TIM_PWM_Start+0x200>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d009      	beq.n	8007298 <HAL_TIM_PWM_Start+0x148>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a32      	ldr	r2, [pc, #200]	; (8007354 <HAL_TIM_PWM_Start+0x204>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d004      	beq.n	8007298 <HAL_TIM_PWM_Start+0x148>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a31      	ldr	r2, [pc, #196]	; (8007358 <HAL_TIM_PWM_Start+0x208>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d101      	bne.n	800729c <HAL_TIM_PWM_Start+0x14c>
 8007298:	2301      	movs	r3, #1
 800729a:	e000      	b.n	800729e <HAL_TIM_PWM_Start+0x14e>
 800729c:	2300      	movs	r3, #0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d007      	beq.n	80072b2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a23      	ldr	r2, [pc, #140]	; (8007344 <HAL_TIM_PWM_Start+0x1f4>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d01d      	beq.n	80072f8 <HAL_TIM_PWM_Start+0x1a8>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072c4:	d018      	beq.n	80072f8 <HAL_TIM_PWM_Start+0x1a8>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a24      	ldr	r2, [pc, #144]	; (800735c <HAL_TIM_PWM_Start+0x20c>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d013      	beq.n	80072f8 <HAL_TIM_PWM_Start+0x1a8>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a22      	ldr	r2, [pc, #136]	; (8007360 <HAL_TIM_PWM_Start+0x210>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d00e      	beq.n	80072f8 <HAL_TIM_PWM_Start+0x1a8>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a1a      	ldr	r2, [pc, #104]	; (8007348 <HAL_TIM_PWM_Start+0x1f8>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d009      	beq.n	80072f8 <HAL_TIM_PWM_Start+0x1a8>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a18      	ldr	r2, [pc, #96]	; (800734c <HAL_TIM_PWM_Start+0x1fc>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d004      	beq.n	80072f8 <HAL_TIM_PWM_Start+0x1a8>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a19      	ldr	r2, [pc, #100]	; (8007358 <HAL_TIM_PWM_Start+0x208>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d115      	bne.n	8007324 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689a      	ldr	r2, [r3, #8]
 80072fe:	4b19      	ldr	r3, [pc, #100]	; (8007364 <HAL_TIM_PWM_Start+0x214>)
 8007300:	4013      	ands	r3, r2
 8007302:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b06      	cmp	r3, #6
 8007308:	d015      	beq.n	8007336 <HAL_TIM_PWM_Start+0x1e6>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007310:	d011      	beq.n	8007336 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f042 0201 	orr.w	r2, r2, #1
 8007320:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007322:	e008      	b.n	8007336 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f042 0201 	orr.w	r2, r2, #1
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	e000      	b.n	8007338 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007336:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	40012c00 	.word	0x40012c00
 8007348:	40013400 	.word	0x40013400
 800734c:	40014000 	.word	0x40014000
 8007350:	40014400 	.word	0x40014400
 8007354:	40014800 	.word	0x40014800
 8007358:	40015000 	.word	0x40015000
 800735c:	40000400 	.word	0x40000400
 8007360:	40000800 	.word	0x40000800
 8007364:	00010007 	.word	0x00010007

08007368 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	2b02      	cmp	r3, #2
 800737c:	d122      	bne.n	80073c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	f003 0302 	and.w	r3, r3, #2
 8007388:	2b02      	cmp	r3, #2
 800738a:	d11b      	bne.n	80073c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f06f 0202 	mvn.w	r2, #2
 8007394:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2201      	movs	r2, #1
 800739a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	f003 0303 	and.w	r3, r3, #3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 facf 	bl	800794e <HAL_TIM_IC_CaptureCallback>
 80073b0:	e005      	b.n	80073be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fac1 	bl	800793a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fad2 	bl	8007962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	f003 0304 	and.w	r3, r3, #4
 80073ce:	2b04      	cmp	r3, #4
 80073d0:	d122      	bne.n	8007418 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b04      	cmp	r3, #4
 80073de:	d11b      	bne.n	8007418 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f06f 0204 	mvn.w	r2, #4
 80073e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2202      	movs	r2, #2
 80073ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 faa5 	bl	800794e <HAL_TIM_IC_CaptureCallback>
 8007404:	e005      	b.n	8007412 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fa97 	bl	800793a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 faa8 	bl	8007962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	f003 0308 	and.w	r3, r3, #8
 8007422:	2b08      	cmp	r3, #8
 8007424:	d122      	bne.n	800746c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f003 0308 	and.w	r3, r3, #8
 8007430:	2b08      	cmp	r3, #8
 8007432:	d11b      	bne.n	800746c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f06f 0208 	mvn.w	r2, #8
 800743c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2204      	movs	r2, #4
 8007442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	f003 0303 	and.w	r3, r3, #3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d003      	beq.n	800745a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fa7b 	bl	800794e <HAL_TIM_IC_CaptureCallback>
 8007458:	e005      	b.n	8007466 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fa6d 	bl	800793a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fa7e 	bl	8007962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	f003 0310 	and.w	r3, r3, #16
 8007476:	2b10      	cmp	r3, #16
 8007478:	d122      	bne.n	80074c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	f003 0310 	and.w	r3, r3, #16
 8007484:	2b10      	cmp	r3, #16
 8007486:	d11b      	bne.n	80074c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f06f 0210 	mvn.w	r2, #16
 8007490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2208      	movs	r2, #8
 8007496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	69db      	ldr	r3, [r3, #28]
 800749e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d003      	beq.n	80074ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fa51 	bl	800794e <HAL_TIM_IC_CaptureCallback>
 80074ac:	e005      	b.n	80074ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fa43 	bl	800793a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fa54 	bl	8007962 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d10e      	bne.n	80074ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	f003 0301 	and.w	r3, r3, #1
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d107      	bne.n	80074ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f06f 0201 	mvn.w	r2, #1
 80074e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f7fa f948 	bl	800177c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074f6:	2b80      	cmp	r3, #128	; 0x80
 80074f8:	d10e      	bne.n	8007518 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007504:	2b80      	cmp	r3, #128	; 0x80
 8007506:	d107      	bne.n	8007518 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 ff34 	bl	8008380 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007526:	d10e      	bne.n	8007546 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007532:	2b80      	cmp	r3, #128	; 0x80
 8007534:	d107      	bne.n	8007546 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800753e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 ff27 	bl	8008394 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007550:	2b40      	cmp	r3, #64	; 0x40
 8007552:	d10e      	bne.n	8007572 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800755e:	2b40      	cmp	r3, #64	; 0x40
 8007560:	d107      	bne.n	8007572 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800756a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fa02 	bl	8007976 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	f003 0320 	and.w	r3, r3, #32
 800757c:	2b20      	cmp	r3, #32
 800757e:	d10e      	bne.n	800759e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	f003 0320 	and.w	r3, r3, #32
 800758a:	2b20      	cmp	r3, #32
 800758c:	d107      	bne.n	800759e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f06f 0220 	mvn.w	r2, #32
 8007596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fee7 	bl	800836c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800759e:	bf00      	nop
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
	...

080075a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d101      	bne.n	80075c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80075be:	2302      	movs	r3, #2
 80075c0:	e0fd      	b.n	80077be <HAL_TIM_PWM_ConfigChannel+0x216>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b14      	cmp	r3, #20
 80075ce:	f200 80f0 	bhi.w	80077b2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80075d2:	a201      	add	r2, pc, #4	; (adr r2, 80075d8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80075d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d8:	0800762d 	.word	0x0800762d
 80075dc:	080077b3 	.word	0x080077b3
 80075e0:	080077b3 	.word	0x080077b3
 80075e4:	080077b3 	.word	0x080077b3
 80075e8:	0800766d 	.word	0x0800766d
 80075ec:	080077b3 	.word	0x080077b3
 80075f0:	080077b3 	.word	0x080077b3
 80075f4:	080077b3 	.word	0x080077b3
 80075f8:	080076af 	.word	0x080076af
 80075fc:	080077b3 	.word	0x080077b3
 8007600:	080077b3 	.word	0x080077b3
 8007604:	080077b3 	.word	0x080077b3
 8007608:	080076ef 	.word	0x080076ef
 800760c:	080077b3 	.word	0x080077b3
 8007610:	080077b3 	.word	0x080077b3
 8007614:	080077b3 	.word	0x080077b3
 8007618:	08007731 	.word	0x08007731
 800761c:	080077b3 	.word	0x080077b3
 8007620:	080077b3 	.word	0x080077b3
 8007624:	080077b3 	.word	0x080077b3
 8007628:	08007771 	.word	0x08007771
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68b9      	ldr	r1, [r7, #8]
 8007632:	4618      	mov	r0, r3
 8007634:	f000 fa48 	bl	8007ac8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	699a      	ldr	r2, [r3, #24]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f042 0208 	orr.w	r2, r2, #8
 8007646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	699a      	ldr	r2, [r3, #24]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f022 0204 	bic.w	r2, r2, #4
 8007656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6999      	ldr	r1, [r3, #24]
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	691a      	ldr	r2, [r3, #16]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	430a      	orrs	r2, r1
 8007668:	619a      	str	r2, [r3, #24]
      break;
 800766a:	e0a3      	b.n	80077b4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68b9      	ldr	r1, [r7, #8]
 8007672:	4618      	mov	r0, r3
 8007674:	f000 fac2 	bl	8007bfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	699a      	ldr	r2, [r3, #24]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	699a      	ldr	r2, [r3, #24]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6999      	ldr	r1, [r3, #24]
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	021a      	lsls	r2, r3, #8
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	430a      	orrs	r2, r1
 80076aa:	619a      	str	r2, [r3, #24]
      break;
 80076ac:	e082      	b.n	80077b4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68b9      	ldr	r1, [r7, #8]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f000 fb35 	bl	8007d24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	69da      	ldr	r2, [r3, #28]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f042 0208 	orr.w	r2, r2, #8
 80076c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	69da      	ldr	r2, [r3, #28]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f022 0204 	bic.w	r2, r2, #4
 80076d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69d9      	ldr	r1, [r3, #28]
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	691a      	ldr	r2, [r3, #16]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	430a      	orrs	r2, r1
 80076ea:	61da      	str	r2, [r3, #28]
      break;
 80076ec:	e062      	b.n	80077b4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68b9      	ldr	r1, [r7, #8]
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 fba7 	bl	8007e48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69da      	ldr	r2, [r3, #28]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	69da      	ldr	r2, [r3, #28]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	69d9      	ldr	r1, [r3, #28]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	021a      	lsls	r2, r3, #8
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	61da      	str	r2, [r3, #28]
      break;
 800772e:	e041      	b.n	80077b4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68b9      	ldr	r1, [r7, #8]
 8007736:	4618      	mov	r0, r3
 8007738:	f000 fbf6 	bl	8007f28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f042 0208 	orr.w	r2, r2, #8
 800774a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f022 0204 	bic.w	r2, r2, #4
 800775a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	691a      	ldr	r2, [r3, #16]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800776e:	e021      	b.n	80077b4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68b9      	ldr	r1, [r7, #8]
 8007776:	4618      	mov	r0, r3
 8007778:	f000 fc40 	bl	8007ffc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800778a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800779a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	021a      	lsls	r2, r3, #8
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80077b0:	e000      	b.n	80077b4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80077b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop

080077c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d101      	bne.n	80077e0 <HAL_TIM_ConfigClockSource+0x18>
 80077dc:	2302      	movs	r3, #2
 80077de:	e0a8      	b.n	8007932 <HAL_TIM_ConfigClockSource+0x16a>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007802:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800780a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b40      	cmp	r3, #64	; 0x40
 800781a:	d067      	beq.n	80078ec <HAL_TIM_ConfigClockSource+0x124>
 800781c:	2b40      	cmp	r3, #64	; 0x40
 800781e:	d80b      	bhi.n	8007838 <HAL_TIM_ConfigClockSource+0x70>
 8007820:	2b10      	cmp	r3, #16
 8007822:	d073      	beq.n	800790c <HAL_TIM_ConfigClockSource+0x144>
 8007824:	2b10      	cmp	r3, #16
 8007826:	d802      	bhi.n	800782e <HAL_TIM_ConfigClockSource+0x66>
 8007828:	2b00      	cmp	r3, #0
 800782a:	d06f      	beq.n	800790c <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800782c:	e078      	b.n	8007920 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800782e:	2b20      	cmp	r3, #32
 8007830:	d06c      	beq.n	800790c <HAL_TIM_ConfigClockSource+0x144>
 8007832:	2b30      	cmp	r3, #48	; 0x30
 8007834:	d06a      	beq.n	800790c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8007836:	e073      	b.n	8007920 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007838:	2b70      	cmp	r3, #112	; 0x70
 800783a:	d00d      	beq.n	8007858 <HAL_TIM_ConfigClockSource+0x90>
 800783c:	2b70      	cmp	r3, #112	; 0x70
 800783e:	d804      	bhi.n	800784a <HAL_TIM_ConfigClockSource+0x82>
 8007840:	2b50      	cmp	r3, #80	; 0x50
 8007842:	d033      	beq.n	80078ac <HAL_TIM_ConfigClockSource+0xe4>
 8007844:	2b60      	cmp	r3, #96	; 0x60
 8007846:	d041      	beq.n	80078cc <HAL_TIM_ConfigClockSource+0x104>
      break;
 8007848:	e06a      	b.n	8007920 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800784a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800784e:	d066      	beq.n	800791e <HAL_TIM_ConfigClockSource+0x156>
 8007850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007854:	d017      	beq.n	8007886 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8007856:	e063      	b.n	8007920 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6818      	ldr	r0, [r3, #0]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	6899      	ldr	r1, [r3, #8]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	685a      	ldr	r2, [r3, #4]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	f000 fcae 	bl	80081c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800787a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	609a      	str	r2, [r3, #8]
      break;
 8007884:	e04c      	b.n	8007920 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6818      	ldr	r0, [r3, #0]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	6899      	ldr	r1, [r3, #8]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	685a      	ldr	r2, [r3, #4]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	f000 fc97 	bl	80081c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689a      	ldr	r2, [r3, #8]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078a8:	609a      	str	r2, [r3, #8]
      break;
 80078aa:	e039      	b.n	8007920 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6818      	ldr	r0, [r3, #0]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	6859      	ldr	r1, [r3, #4]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	461a      	mov	r2, r3
 80078ba:	f000 fc0b 	bl	80080d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2150      	movs	r1, #80	; 0x50
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 fc64 	bl	8008192 <TIM_ITRx_SetConfig>
      break;
 80078ca:	e029      	b.n	8007920 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6818      	ldr	r0, [r3, #0]
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	6859      	ldr	r1, [r3, #4]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	461a      	mov	r2, r3
 80078da:	f000 fc2a 	bl	8008132 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2160      	movs	r1, #96	; 0x60
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 fc54 	bl	8008192 <TIM_ITRx_SetConfig>
      break;
 80078ea:	e019      	b.n	8007920 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6818      	ldr	r0, [r3, #0]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	6859      	ldr	r1, [r3, #4]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	461a      	mov	r2, r3
 80078fa:	f000 fbeb 	bl	80080d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2140      	movs	r1, #64	; 0x40
 8007904:	4618      	mov	r0, r3
 8007906:	f000 fc44 	bl	8008192 <TIM_ITRx_SetConfig>
      break;
 800790a:	e009      	b.n	8007920 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4619      	mov	r1, r3
 8007916:	4610      	mov	r0, r2
 8007918:	f000 fc3b 	bl	8008192 <TIM_ITRx_SetConfig>
        break;
 800791c:	e000      	b.n	8007920 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800791e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800793a:	b480      	push	{r7}
 800793c:	b083      	sub	sp, #12
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007942:	bf00      	nop
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800794e:	b480      	push	{r7}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007956:	bf00      	nop
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007962:	b480      	push	{r7}
 8007964:	b083      	sub	sp, #12
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800796a:	bf00      	nop
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007976:	b480      	push	{r7}
 8007978:	b083      	sub	sp, #12
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800797e:	bf00      	nop
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
	...

0800798c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a42      	ldr	r2, [pc, #264]	; (8007aa8 <TIM_Base_SetConfig+0x11c>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d013      	beq.n	80079cc <TIM_Base_SetConfig+0x40>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079aa:	d00f      	beq.n	80079cc <TIM_Base_SetConfig+0x40>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a3f      	ldr	r2, [pc, #252]	; (8007aac <TIM_Base_SetConfig+0x120>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d00b      	beq.n	80079cc <TIM_Base_SetConfig+0x40>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a3e      	ldr	r2, [pc, #248]	; (8007ab0 <TIM_Base_SetConfig+0x124>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d007      	beq.n	80079cc <TIM_Base_SetConfig+0x40>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a3d      	ldr	r2, [pc, #244]	; (8007ab4 <TIM_Base_SetConfig+0x128>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d003      	beq.n	80079cc <TIM_Base_SetConfig+0x40>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a3c      	ldr	r2, [pc, #240]	; (8007ab8 <TIM_Base_SetConfig+0x12c>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d108      	bne.n	80079de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	4313      	orrs	r3, r2
 80079dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a31      	ldr	r2, [pc, #196]	; (8007aa8 <TIM_Base_SetConfig+0x11c>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d01f      	beq.n	8007a26 <TIM_Base_SetConfig+0x9a>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ec:	d01b      	beq.n	8007a26 <TIM_Base_SetConfig+0x9a>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a2e      	ldr	r2, [pc, #184]	; (8007aac <TIM_Base_SetConfig+0x120>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d017      	beq.n	8007a26 <TIM_Base_SetConfig+0x9a>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a2d      	ldr	r2, [pc, #180]	; (8007ab0 <TIM_Base_SetConfig+0x124>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d013      	beq.n	8007a26 <TIM_Base_SetConfig+0x9a>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a2c      	ldr	r2, [pc, #176]	; (8007ab4 <TIM_Base_SetConfig+0x128>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d00f      	beq.n	8007a26 <TIM_Base_SetConfig+0x9a>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a2c      	ldr	r2, [pc, #176]	; (8007abc <TIM_Base_SetConfig+0x130>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d00b      	beq.n	8007a26 <TIM_Base_SetConfig+0x9a>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a2b      	ldr	r2, [pc, #172]	; (8007ac0 <TIM_Base_SetConfig+0x134>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d007      	beq.n	8007a26 <TIM_Base_SetConfig+0x9a>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a2a      	ldr	r2, [pc, #168]	; (8007ac4 <TIM_Base_SetConfig+0x138>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d003      	beq.n	8007a26 <TIM_Base_SetConfig+0x9a>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a25      	ldr	r2, [pc, #148]	; (8007ab8 <TIM_Base_SetConfig+0x12c>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d108      	bne.n	8007a38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	689a      	ldr	r2, [r3, #8]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a12      	ldr	r2, [pc, #72]	; (8007aa8 <TIM_Base_SetConfig+0x11c>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d013      	beq.n	8007a8c <TIM_Base_SetConfig+0x100>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a13      	ldr	r2, [pc, #76]	; (8007ab4 <TIM_Base_SetConfig+0x128>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d00f      	beq.n	8007a8c <TIM_Base_SetConfig+0x100>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a13      	ldr	r2, [pc, #76]	; (8007abc <TIM_Base_SetConfig+0x130>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d00b      	beq.n	8007a8c <TIM_Base_SetConfig+0x100>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a12      	ldr	r2, [pc, #72]	; (8007ac0 <TIM_Base_SetConfig+0x134>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d007      	beq.n	8007a8c <TIM_Base_SetConfig+0x100>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a11      	ldr	r2, [pc, #68]	; (8007ac4 <TIM_Base_SetConfig+0x138>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d003      	beq.n	8007a8c <TIM_Base_SetConfig+0x100>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a0c      	ldr	r2, [pc, #48]	; (8007ab8 <TIM_Base_SetConfig+0x12c>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d103      	bne.n	8007a94 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	691a      	ldr	r2, [r3, #16]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	615a      	str	r2, [r3, #20]
}
 8007a9a:	bf00      	nop
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	40012c00 	.word	0x40012c00
 8007aac:	40000400 	.word	0x40000400
 8007ab0:	40000800 	.word	0x40000800
 8007ab4:	40013400 	.word	0x40013400
 8007ab8:	40015000 	.word	0x40015000
 8007abc:	40014000 	.word	0x40014000
 8007ac0:	40014400 	.word	0x40014400
 8007ac4:	40014800 	.word	0x40014800

08007ac8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	f023 0201 	bic.w	r2, r3, #1
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f023 0303 	bic.w	r3, r3, #3
 8007b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f023 0302 	bic.w	r3, r3, #2
 8007b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a30      	ldr	r2, [pc, #192]	; (8007be4 <TIM_OC1_SetConfig+0x11c>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d013      	beq.n	8007b50 <TIM_OC1_SetConfig+0x88>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a2f      	ldr	r2, [pc, #188]	; (8007be8 <TIM_OC1_SetConfig+0x120>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d00f      	beq.n	8007b50 <TIM_OC1_SetConfig+0x88>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a2e      	ldr	r2, [pc, #184]	; (8007bec <TIM_OC1_SetConfig+0x124>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d00b      	beq.n	8007b50 <TIM_OC1_SetConfig+0x88>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a2d      	ldr	r2, [pc, #180]	; (8007bf0 <TIM_OC1_SetConfig+0x128>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d007      	beq.n	8007b50 <TIM_OC1_SetConfig+0x88>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a2c      	ldr	r2, [pc, #176]	; (8007bf4 <TIM_OC1_SetConfig+0x12c>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d003      	beq.n	8007b50 <TIM_OC1_SetConfig+0x88>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a2b      	ldr	r2, [pc, #172]	; (8007bf8 <TIM_OC1_SetConfig+0x130>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d10c      	bne.n	8007b6a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f023 0308 	bic.w	r3, r3, #8
 8007b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	697a      	ldr	r2, [r7, #20]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f023 0304 	bic.w	r3, r3, #4
 8007b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a1d      	ldr	r2, [pc, #116]	; (8007be4 <TIM_OC1_SetConfig+0x11c>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d013      	beq.n	8007b9a <TIM_OC1_SetConfig+0xd2>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a1c      	ldr	r2, [pc, #112]	; (8007be8 <TIM_OC1_SetConfig+0x120>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d00f      	beq.n	8007b9a <TIM_OC1_SetConfig+0xd2>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a1b      	ldr	r2, [pc, #108]	; (8007bec <TIM_OC1_SetConfig+0x124>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d00b      	beq.n	8007b9a <TIM_OC1_SetConfig+0xd2>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a1a      	ldr	r2, [pc, #104]	; (8007bf0 <TIM_OC1_SetConfig+0x128>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d007      	beq.n	8007b9a <TIM_OC1_SetConfig+0xd2>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a19      	ldr	r2, [pc, #100]	; (8007bf4 <TIM_OC1_SetConfig+0x12c>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d003      	beq.n	8007b9a <TIM_OC1_SetConfig+0xd2>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a18      	ldr	r2, [pc, #96]	; (8007bf8 <TIM_OC1_SetConfig+0x130>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d111      	bne.n	8007bbe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	621a      	str	r2, [r3, #32]
}
 8007bd8:	bf00      	nop
 8007bda:	371c      	adds	r7, #28
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr
 8007be4:	40012c00 	.word	0x40012c00
 8007be8:	40013400 	.word	0x40013400
 8007bec:	40014000 	.word	0x40014000
 8007bf0:	40014400 	.word	0x40014400
 8007bf4:	40014800 	.word	0x40014800
 8007bf8:	40015000 	.word	0x40015000

08007bfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	f023 0210 	bic.w	r2, r3, #16
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	021b      	lsls	r3, r3, #8
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	f023 0320 	bic.w	r3, r3, #32
 8007c4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	011b      	lsls	r3, r3, #4
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a2c      	ldr	r2, [pc, #176]	; (8007d0c <TIM_OC2_SetConfig+0x110>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d007      	beq.n	8007c70 <TIM_OC2_SetConfig+0x74>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a2b      	ldr	r2, [pc, #172]	; (8007d10 <TIM_OC2_SetConfig+0x114>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d003      	beq.n	8007c70 <TIM_OC2_SetConfig+0x74>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a2a      	ldr	r2, [pc, #168]	; (8007d14 <TIM_OC2_SetConfig+0x118>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d10d      	bne.n	8007c8c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	011b      	lsls	r3, r3, #4
 8007c7e:	697a      	ldr	r2, [r7, #20]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a1f      	ldr	r2, [pc, #124]	; (8007d0c <TIM_OC2_SetConfig+0x110>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d013      	beq.n	8007cbc <TIM_OC2_SetConfig+0xc0>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a1e      	ldr	r2, [pc, #120]	; (8007d10 <TIM_OC2_SetConfig+0x114>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d00f      	beq.n	8007cbc <TIM_OC2_SetConfig+0xc0>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a1e      	ldr	r2, [pc, #120]	; (8007d18 <TIM_OC2_SetConfig+0x11c>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d00b      	beq.n	8007cbc <TIM_OC2_SetConfig+0xc0>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a1d      	ldr	r2, [pc, #116]	; (8007d1c <TIM_OC2_SetConfig+0x120>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d007      	beq.n	8007cbc <TIM_OC2_SetConfig+0xc0>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a1c      	ldr	r2, [pc, #112]	; (8007d20 <TIM_OC2_SetConfig+0x124>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d003      	beq.n	8007cbc <TIM_OC2_SetConfig+0xc0>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a17      	ldr	r2, [pc, #92]	; (8007d14 <TIM_OC2_SetConfig+0x118>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d113      	bne.n	8007ce4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cc2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cca:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	693a      	ldr	r2, [r7, #16]
 8007ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	621a      	str	r2, [r3, #32]
}
 8007cfe:	bf00      	nop
 8007d00:	371c      	adds	r7, #28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	40012c00 	.word	0x40012c00
 8007d10:	40013400 	.word	0x40013400
 8007d14:	40015000 	.word	0x40015000
 8007d18:	40014000 	.word	0x40014000
 8007d1c:	40014400 	.word	0x40014400
 8007d20:	40014800 	.word	0x40014800

08007d24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b087      	sub	sp, #28
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f023 0303 	bic.w	r3, r3, #3
 8007d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	021b      	lsls	r3, r3, #8
 8007d78:	697a      	ldr	r2, [r7, #20]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a2b      	ldr	r2, [pc, #172]	; (8007e30 <TIM_OC3_SetConfig+0x10c>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d007      	beq.n	8007d96 <TIM_OC3_SetConfig+0x72>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a2a      	ldr	r2, [pc, #168]	; (8007e34 <TIM_OC3_SetConfig+0x110>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d003      	beq.n	8007d96 <TIM_OC3_SetConfig+0x72>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a29      	ldr	r2, [pc, #164]	; (8007e38 <TIM_OC3_SetConfig+0x114>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d10d      	bne.n	8007db2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	021b      	lsls	r3, r3, #8
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007db0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a1e      	ldr	r2, [pc, #120]	; (8007e30 <TIM_OC3_SetConfig+0x10c>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d013      	beq.n	8007de2 <TIM_OC3_SetConfig+0xbe>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a1d      	ldr	r2, [pc, #116]	; (8007e34 <TIM_OC3_SetConfig+0x110>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d00f      	beq.n	8007de2 <TIM_OC3_SetConfig+0xbe>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a1d      	ldr	r2, [pc, #116]	; (8007e3c <TIM_OC3_SetConfig+0x118>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d00b      	beq.n	8007de2 <TIM_OC3_SetConfig+0xbe>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a1c      	ldr	r2, [pc, #112]	; (8007e40 <TIM_OC3_SetConfig+0x11c>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d007      	beq.n	8007de2 <TIM_OC3_SetConfig+0xbe>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a1b      	ldr	r2, [pc, #108]	; (8007e44 <TIM_OC3_SetConfig+0x120>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d003      	beq.n	8007de2 <TIM_OC3_SetConfig+0xbe>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a16      	ldr	r2, [pc, #88]	; (8007e38 <TIM_OC3_SetConfig+0x114>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d113      	bne.n	8007e0a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	011b      	lsls	r3, r3, #4
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	011b      	lsls	r3, r3, #4
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	693a      	ldr	r2, [r7, #16]
 8007e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	685a      	ldr	r2, [r3, #4]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	621a      	str	r2, [r3, #32]
}
 8007e24:	bf00      	nop
 8007e26:	371c      	adds	r7, #28
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	40012c00 	.word	0x40012c00
 8007e34:	40013400 	.word	0x40013400
 8007e38:	40015000 	.word	0x40015000
 8007e3c:	40014000 	.word	0x40014000
 8007e40:	40014400 	.word	0x40014400
 8007e44:	40014800 	.word	0x40014800

08007e48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	69db      	ldr	r3, [r3, #28]
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	021b      	lsls	r3, r3, #8
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	031b      	lsls	r3, r3, #12
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a1a      	ldr	r2, [pc, #104]	; (8007f10 <TIM_OC4_SetConfig+0xc8>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d013      	beq.n	8007ed4 <TIM_OC4_SetConfig+0x8c>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a19      	ldr	r2, [pc, #100]	; (8007f14 <TIM_OC4_SetConfig+0xcc>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d00f      	beq.n	8007ed4 <TIM_OC4_SetConfig+0x8c>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a18      	ldr	r2, [pc, #96]	; (8007f18 <TIM_OC4_SetConfig+0xd0>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d00b      	beq.n	8007ed4 <TIM_OC4_SetConfig+0x8c>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a17      	ldr	r2, [pc, #92]	; (8007f1c <TIM_OC4_SetConfig+0xd4>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d007      	beq.n	8007ed4 <TIM_OC4_SetConfig+0x8c>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a16      	ldr	r2, [pc, #88]	; (8007f20 <TIM_OC4_SetConfig+0xd8>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d003      	beq.n	8007ed4 <TIM_OC4_SetConfig+0x8c>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a15      	ldr	r2, [pc, #84]	; (8007f24 <TIM_OC4_SetConfig+0xdc>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d109      	bne.n	8007ee8 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007eda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	695b      	ldr	r3, [r3, #20]
 8007ee0:	019b      	lsls	r3, r3, #6
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	621a      	str	r2, [r3, #32]
}
 8007f02:	bf00      	nop
 8007f04:	371c      	adds	r7, #28
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	40012c00 	.word	0x40012c00
 8007f14:	40013400 	.word	0x40013400
 8007f18:	40014000 	.word	0x40014000
 8007f1c:	40014400 	.word	0x40014400
 8007f20:	40014800 	.word	0x40014800
 8007f24:	40015000 	.word	0x40015000

08007f28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b087      	sub	sp, #28
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a1b      	ldr	r3, [r3, #32]
 8007f42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007f6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	041b      	lsls	r3, r3, #16
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a19      	ldr	r2, [pc, #100]	; (8007fe4 <TIM_OC5_SetConfig+0xbc>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d013      	beq.n	8007faa <TIM_OC5_SetConfig+0x82>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a18      	ldr	r2, [pc, #96]	; (8007fe8 <TIM_OC5_SetConfig+0xc0>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d00f      	beq.n	8007faa <TIM_OC5_SetConfig+0x82>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a17      	ldr	r2, [pc, #92]	; (8007fec <TIM_OC5_SetConfig+0xc4>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d00b      	beq.n	8007faa <TIM_OC5_SetConfig+0x82>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a16      	ldr	r2, [pc, #88]	; (8007ff0 <TIM_OC5_SetConfig+0xc8>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d007      	beq.n	8007faa <TIM_OC5_SetConfig+0x82>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a15      	ldr	r2, [pc, #84]	; (8007ff4 <TIM_OC5_SetConfig+0xcc>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d003      	beq.n	8007faa <TIM_OC5_SetConfig+0x82>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a14      	ldr	r2, [pc, #80]	; (8007ff8 <TIM_OC5_SetConfig+0xd0>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d109      	bne.n	8007fbe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	021b      	lsls	r3, r3, #8
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	697a      	ldr	r2, [r7, #20]
 8007fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	685a      	ldr	r2, [r3, #4]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	621a      	str	r2, [r3, #32]
}
 8007fd8:	bf00      	nop
 8007fda:	371c      	adds	r7, #28
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr
 8007fe4:	40012c00 	.word	0x40012c00
 8007fe8:	40013400 	.word	0x40013400
 8007fec:	40014000 	.word	0x40014000
 8007ff0:	40014400 	.word	0x40014400
 8007ff4:	40014800 	.word	0x40014800
 8007ff8:	40015000 	.word	0x40015000

08007ffc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a1b      	ldr	r3, [r3, #32]
 800800a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a1b      	ldr	r3, [r3, #32]
 8008016:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800802a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800802e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	021b      	lsls	r3, r3, #8
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	4313      	orrs	r3, r2
 800803a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	051b      	lsls	r3, r3, #20
 800804a:	693a      	ldr	r2, [r7, #16]
 800804c:	4313      	orrs	r3, r2
 800804e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a1a      	ldr	r2, [pc, #104]	; (80080bc <TIM_OC6_SetConfig+0xc0>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d013      	beq.n	8008080 <TIM_OC6_SetConfig+0x84>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a19      	ldr	r2, [pc, #100]	; (80080c0 <TIM_OC6_SetConfig+0xc4>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d00f      	beq.n	8008080 <TIM_OC6_SetConfig+0x84>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a18      	ldr	r2, [pc, #96]	; (80080c4 <TIM_OC6_SetConfig+0xc8>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d00b      	beq.n	8008080 <TIM_OC6_SetConfig+0x84>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a17      	ldr	r2, [pc, #92]	; (80080c8 <TIM_OC6_SetConfig+0xcc>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d007      	beq.n	8008080 <TIM_OC6_SetConfig+0x84>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a16      	ldr	r2, [pc, #88]	; (80080cc <TIM_OC6_SetConfig+0xd0>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d003      	beq.n	8008080 <TIM_OC6_SetConfig+0x84>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a15      	ldr	r2, [pc, #84]	; (80080d0 <TIM_OC6_SetConfig+0xd4>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d109      	bne.n	8008094 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008086:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	695b      	ldr	r3, [r3, #20]
 800808c:	029b      	lsls	r3, r3, #10
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	4313      	orrs	r3, r2
 8008092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	693a      	ldr	r2, [r7, #16]
 80080ac:	621a      	str	r2, [r3, #32]
}
 80080ae:	bf00      	nop
 80080b0:	371c      	adds	r7, #28
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	40012c00 	.word	0x40012c00
 80080c0:	40013400 	.word	0x40013400
 80080c4:	40014000 	.word	0x40014000
 80080c8:	40014400 	.word	0x40014400
 80080cc:	40014800 	.word	0x40014800
 80080d0:	40015000 	.word	0x40015000

080080d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6a1b      	ldr	r3, [r3, #32]
 80080e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	f023 0201 	bic.w	r2, r3, #1
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	699b      	ldr	r3, [r3, #24]
 80080f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	011b      	lsls	r3, r3, #4
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	4313      	orrs	r3, r2
 8008108:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	f023 030a 	bic.w	r3, r3, #10
 8008110:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	4313      	orrs	r3, r2
 8008118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	621a      	str	r2, [r3, #32]
}
 8008126:	bf00      	nop
 8008128:	371c      	adds	r7, #28
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr

08008132 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008132:	b480      	push	{r7}
 8008134:	b087      	sub	sp, #28
 8008136:	af00      	add	r7, sp, #0
 8008138:	60f8      	str	r0, [r7, #12]
 800813a:	60b9      	str	r1, [r7, #8]
 800813c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6a1b      	ldr	r3, [r3, #32]
 8008142:	f023 0210 	bic.w	r2, r3, #16
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	699b      	ldr	r3, [r3, #24]
 800814e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6a1b      	ldr	r3, [r3, #32]
 8008154:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800815c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	031b      	lsls	r3, r3, #12
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	4313      	orrs	r3, r2
 8008166:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800816e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	011b      	lsls	r3, r3, #4
 8008174:	693a      	ldr	r2, [r7, #16]
 8008176:	4313      	orrs	r3, r2
 8008178:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	621a      	str	r2, [r3, #32]
}
 8008186:	bf00      	nop
 8008188:	371c      	adds	r7, #28
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008192:	b480      	push	{r7}
 8008194:	b085      	sub	sp, #20
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
 800819a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	f043 0307 	orr.w	r3, r3, #7
 80081b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	609a      	str	r2, [r3, #8]
}
 80081bc:	bf00      	nop
 80081be:	3714      	adds	r7, #20
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b087      	sub	sp, #28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	021a      	lsls	r2, r3, #8
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	431a      	orrs	r2, r3
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	609a      	str	r2, [r3, #8]
}
 80081fc:	bf00      	nop
 80081fe:	371c      	adds	r7, #28
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008208:	b480      	push	{r7}
 800820a:	b087      	sub	sp, #28
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	f003 031f 	and.w	r3, r3, #31
 800821a:	2201      	movs	r2, #1
 800821c:	fa02 f303 	lsl.w	r3, r2, r3
 8008220:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6a1a      	ldr	r2, [r3, #32]
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	43db      	mvns	r3, r3
 800822a:	401a      	ands	r2, r3
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6a1a      	ldr	r2, [r3, #32]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	f003 031f 	and.w	r3, r3, #31
 800823a:	6879      	ldr	r1, [r7, #4]
 800823c:	fa01 f303 	lsl.w	r3, r1, r3
 8008240:	431a      	orrs	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	621a      	str	r2, [r3, #32]
}
 8008246:	bf00      	nop
 8008248:	371c      	adds	r7, #28
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
	...

08008254 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008264:	2b01      	cmp	r3, #1
 8008266:	d101      	bne.n	800826c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008268:	2302      	movs	r3, #2
 800826a:	e06d      	b.n	8008348 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2202      	movs	r2, #2
 8008278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a30      	ldr	r2, [pc, #192]	; (8008354 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d009      	beq.n	80082aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a2f      	ldr	r2, [pc, #188]	; (8008358 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d004      	beq.n	80082aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a2d      	ldr	r2, [pc, #180]	; (800835c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d108      	bne.n	80082bc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80082b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a1e      	ldr	r2, [pc, #120]	; (8008354 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d01d      	beq.n	800831c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082e8:	d018      	beq.n	800831c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a1c      	ldr	r2, [pc, #112]	; (8008360 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d013      	beq.n	800831c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a1a      	ldr	r2, [pc, #104]	; (8008364 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d00e      	beq.n	800831c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a15      	ldr	r2, [pc, #84]	; (8008358 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d009      	beq.n	800831c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a16      	ldr	r2, [pc, #88]	; (8008368 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d004      	beq.n	800831c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a11      	ldr	r2, [pc, #68]	; (800835c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d10c      	bne.n	8008336 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008322:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	4313      	orrs	r3, r2
 800832c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr
 8008354:	40012c00 	.word	0x40012c00
 8008358:	40013400 	.word	0x40013400
 800835c:	40015000 	.word	0x40015000
 8008360:	40000400 	.word	0x40000400
 8008364:	40000800 	.word	0x40000800
 8008368:	40014000 	.word	0x40014000

0800836c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e040      	b.n	800843c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d106      	bne.n	80083d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f7fa fa5c 	bl	8002888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2224      	movs	r2, #36	; 0x24
 80083d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f022 0201 	bic.w	r2, r2, #1
 80083e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fc82 	bl	8008cf0 <UART_SetConfig>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d101      	bne.n	80083f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e022      	b.n	800843c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d002      	beq.n	8008404 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fe4a 	bl	8009098 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	685a      	ldr	r2, [r3, #4]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008412:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	689a      	ldr	r2, [r3, #8]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008422:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f042 0201 	orr.w	r2, r2, #1
 8008432:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fed1 	bl	80091dc <UART_CheckIdleState>
 800843a:	4603      	mov	r3, r0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b08a      	sub	sp, #40	; 0x28
 8008448:	af02      	add	r7, sp, #8
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	603b      	str	r3, [r7, #0]
 8008450:	4613      	mov	r3, r2
 8008452:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008458:	2b20      	cmp	r3, #32
 800845a:	f040 8082 	bne.w	8008562 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <HAL_UART_Transmit+0x26>
 8008464:	88fb      	ldrh	r3, [r7, #6]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e07a      	b.n	8008564 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008474:	2b01      	cmp	r3, #1
 8008476:	d101      	bne.n	800847c <HAL_UART_Transmit+0x38>
 8008478:	2302      	movs	r3, #2
 800847a:	e073      	b.n	8008564 <HAL_UART_Transmit+0x120>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2221      	movs	r2, #33	; 0x21
 8008490:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008492:	f7fa fb95 	bl	8002bc0 <HAL_GetTick>
 8008496:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	88fa      	ldrh	r2, [r7, #6]
 800849c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	88fa      	ldrh	r2, [r7, #6]
 80084a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b0:	d108      	bne.n	80084c4 <HAL_UART_Transmit+0x80>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d104      	bne.n	80084c4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80084ba:	2300      	movs	r3, #0
 80084bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	61bb      	str	r3, [r7, #24]
 80084c2:	e003      	b.n	80084cc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084c8:	2300      	movs	r3, #0
 80084ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80084d4:	e02d      	b.n	8008532 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	2200      	movs	r2, #0
 80084de:	2180      	movs	r1, #128	; 0x80
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f000 fec4 	bl	800926e <UART_WaitOnFlagUntilTimeout>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	e039      	b.n	8008564 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10b      	bne.n	800850e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	881a      	ldrh	r2, [r3, #0]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008502:	b292      	uxth	r2, r2
 8008504:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	3302      	adds	r3, #2
 800850a:	61bb      	str	r3, [r7, #24]
 800850c:	e008      	b.n	8008520 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	781a      	ldrb	r2, [r3, #0]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	b292      	uxth	r2, r2
 8008518:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	3301      	adds	r3, #1
 800851e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008526:	b29b      	uxth	r3, r3
 8008528:	3b01      	subs	r3, #1
 800852a:	b29a      	uxth	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008538:	b29b      	uxth	r3, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1cb      	bne.n	80084d6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	2200      	movs	r2, #0
 8008546:	2140      	movs	r1, #64	; 0x40
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	f000 fe90 	bl	800926e <UART_WaitOnFlagUntilTimeout>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d001      	beq.n	8008558 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008554:	2303      	movs	r3, #3
 8008556:	e005      	b.n	8008564 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2220      	movs	r2, #32
 800855c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	e000      	b.n	8008564 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008562:	2302      	movs	r3, #2
  }
}
 8008564:	4618      	mov	r0, r3
 8008566:	3720      	adds	r7, #32
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b08a      	sub	sp, #40	; 0x28
 8008570:	af02      	add	r7, sp, #8
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	603b      	str	r3, [r7, #0]
 8008578:	4613      	mov	r3, r2
 800857a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008580:	2b20      	cmp	r3, #32
 8008582:	f040 80bf 	bne.w	8008704 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d002      	beq.n	8008592 <HAL_UART_Receive+0x26>
 800858c:	88fb      	ldrh	r3, [r7, #6]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e0b7      	b.n	8008706 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800859c:	2b01      	cmp	r3, #1
 800859e:	d101      	bne.n	80085a4 <HAL_UART_Receive+0x38>
 80085a0:	2302      	movs	r3, #2
 80085a2:	e0b0      	b.n	8008706 <HAL_UART_Receive+0x19a>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2222      	movs	r2, #34	; 0x22
 80085b8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085c0:	f7fa fafe 	bl	8002bc0 <HAL_GetTick>
 80085c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	88fa      	ldrh	r2, [r7, #6]
 80085ca:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	88fa      	ldrh	r2, [r7, #6]
 80085d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085de:	d10e      	bne.n	80085fe <HAL_UART_Receive+0x92>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d105      	bne.n	80085f4 <HAL_UART_Receive+0x88>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 80085ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085f2:	e02d      	b.n	8008650 <HAL_UART_Receive+0xe4>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	22ff      	movs	r2, #255	; 0xff
 80085f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085fc:	e028      	b.n	8008650 <HAL_UART_Receive+0xe4>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10d      	bne.n	8008622 <HAL_UART_Receive+0xb6>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d104      	bne.n	8008618 <HAL_UART_Receive+0xac>
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	22ff      	movs	r2, #255	; 0xff
 8008612:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008616:	e01b      	b.n	8008650 <HAL_UART_Receive+0xe4>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	227f      	movs	r2, #127	; 0x7f
 800861c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008620:	e016      	b.n	8008650 <HAL_UART_Receive+0xe4>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800862a:	d10d      	bne.n	8008648 <HAL_UART_Receive+0xdc>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d104      	bne.n	800863e <HAL_UART_Receive+0xd2>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	227f      	movs	r2, #127	; 0x7f
 8008638:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800863c:	e008      	b.n	8008650 <HAL_UART_Receive+0xe4>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	223f      	movs	r2, #63	; 0x3f
 8008642:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008646:	e003      	b.n	8008650 <HAL_UART_Receive+0xe4>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008656:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008660:	d108      	bne.n	8008674 <HAL_UART_Receive+0x108>
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d104      	bne.n	8008674 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800866a:	2300      	movs	r3, #0
 800866c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	61bb      	str	r3, [r7, #24]
 8008672:	e003      	b.n	800867c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008678:	2300      	movs	r3, #0
 800867a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008684:	e033      	b.n	80086ee <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	2200      	movs	r2, #0
 800868e:	2120      	movs	r1, #32
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f000 fdec 	bl	800926e <UART_WaitOnFlagUntilTimeout>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d001      	beq.n	80086a0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e032      	b.n	8008706 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d10c      	bne.n	80086c0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	8a7b      	ldrh	r3, [r7, #18]
 80086b0:	4013      	ands	r3, r2
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	3302      	adds	r3, #2
 80086bc:	61bb      	str	r3, [r7, #24]
 80086be:	e00d      	b.n	80086dc <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	b2da      	uxtb	r2, r3
 80086ca:	8a7b      	ldrh	r3, [r7, #18]
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	4013      	ands	r3, r2
 80086d0:	b2da      	uxtb	r2, r3
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	3301      	adds	r3, #1
 80086da:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	3b01      	subs	r3, #1
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1c5      	bne.n	8008686 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2220      	movs	r2, #32
 80086fe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	e000      	b.n	8008706 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8008704:	2302      	movs	r3, #2
  }
}
 8008706:	4618      	mov	r0, r3
 8008708:	3720      	adds	r7, #32
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	60f8      	str	r0, [r7, #12]
 8008716:	60b9      	str	r1, [r7, #8]
 8008718:	4613      	mov	r3, r2
 800871a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008720:	2b20      	cmp	r3, #32
 8008722:	d12c      	bne.n	800877e <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d002      	beq.n	8008730 <HAL_UART_Receive_IT+0x22>
 800872a:	88fb      	ldrh	r3, [r7, #6]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d101      	bne.n	8008734 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	e025      	b.n	8008780 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800873a:	2b01      	cmp	r3, #1
 800873c:	d101      	bne.n	8008742 <HAL_UART_Receive_IT+0x34>
 800873e:	2302      	movs	r3, #2
 8008740:	e01e      	b.n	8008780 <HAL_UART_Receive_IT+0x72>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2201      	movs	r2, #1
 8008746:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800875a:	2b00      	cmp	r3, #0
 800875c:	d007      	beq.n	800876e <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800876c:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800876e:	88fb      	ldrh	r3, [r7, #6]
 8008770:	461a      	mov	r2, r3
 8008772:	68b9      	ldr	r1, [r7, #8]
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 fdf7 	bl	8009368 <UART_Start_Receive_IT>
 800877a:	4603      	mov	r3, r0
 800877c:	e000      	b.n	8008780 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 800877e:	2302      	movs	r3, #2
  }
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800879e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	689a      	ldr	r2, [r3, #8]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f022 0201 	bic.w	r2, r2, #1
 80087ae:	609a      	str	r2, [r3, #8]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d107      	bne.n	80087c8 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f022 0210 	bic.w	r2, r2, #16
 80087c6:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d2:	2b40      	cmp	r3, #64	; 0x40
 80087d4:	d13c      	bne.n	8008850 <HAL_UART_AbortReceive_IT+0xc8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	689a      	ldr	r2, [r3, #8]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087e4:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d013      	beq.n	8008816 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f2:	4a24      	ldr	r2, [pc, #144]	; (8008884 <HAL_UART_AbortReceive_IT+0xfc>)
 80087f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fc fd2e 	bl	800525c <HAL_DMA_Abort_IT>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d038      	beq.n	8008878 <HAL_UART_AbortReceive_IT+0xf0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800880a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008810:	4610      	mov	r0, r2
 8008812:	4798      	blx	r3
 8008814:	e030      	b.n	8008878 <HAL_UART_AbortReceive_IT+0xf0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	220f      	movs	r2, #15
 800882a:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	699a      	ldr	r2, [r3, #24]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f042 0208 	orr.w	r2, r2, #8
 800883a:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2220      	movs	r2, #32
 8008840:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fa3b 	bl	8008cc4 <HAL_UART_AbortReceiveCpltCallback>
 800884e:	e013      	b.n	8008878 <HAL_UART_AbortReceive_IT+0xf0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	220f      	movs	r2, #15
 8008864:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2220      	movs	r2, #32
 800886a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fa26 	bl	8008cc4 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	08009503 	.word	0x08009503

08008888 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b088      	sub	sp, #32
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	69db      	ldr	r3, [r3, #28]
 8008896:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80088a8:	69fa      	ldr	r2, [r7, #28]
 80088aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80088ae:	4013      	ands	r3, r2
 80088b0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d113      	bne.n	80088e0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	f003 0320 	and.w	r3, r3, #32
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00e      	beq.n	80088e0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	f003 0320 	and.w	r3, r3, #32
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d009      	beq.n	80088e0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f000 81cd 	beq.w	8008c70 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	4798      	blx	r3
      }
      return;
 80088de:	e1c7      	b.n	8008c70 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f000 80e3 	beq.w	8008aae <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	f003 0301 	and.w	r3, r3, #1
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d105      	bne.n	80088fe <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80088f2:	69ba      	ldr	r2, [r7, #24]
 80088f4:	4ba5      	ldr	r3, [pc, #660]	; (8008b8c <HAL_UART_IRQHandler+0x304>)
 80088f6:	4013      	ands	r3, r2
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 80d8 	beq.w	8008aae <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	f003 0301 	and.w	r3, r3, #1
 8008904:	2b00      	cmp	r3, #0
 8008906:	d010      	beq.n	800892a <HAL_UART_IRQHandler+0xa2>
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00b      	beq.n	800892a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2201      	movs	r2, #1
 8008918:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008920:	f043 0201 	orr.w	r2, r3, #1
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	f003 0302 	and.w	r3, r3, #2
 8008930:	2b00      	cmp	r3, #0
 8008932:	d010      	beq.n	8008956 <HAL_UART_IRQHandler+0xce>
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	f003 0301 	and.w	r3, r3, #1
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00b      	beq.n	8008956 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2202      	movs	r2, #2
 8008944:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800894c:	f043 0204 	orr.w	r2, r3, #4
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	f003 0304 	and.w	r3, r3, #4
 800895c:	2b00      	cmp	r3, #0
 800895e:	d010      	beq.n	8008982 <HAL_UART_IRQHandler+0xfa>
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00b      	beq.n	8008982 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2204      	movs	r2, #4
 8008970:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008978:	f043 0202 	orr.w	r2, r3, #2
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	f003 0308 	and.w	r3, r3, #8
 8008988:	2b00      	cmp	r3, #0
 800898a:	d015      	beq.n	80089b8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	f003 0320 	and.w	r3, r3, #32
 8008992:	2b00      	cmp	r3, #0
 8008994:	d104      	bne.n	80089a0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00b      	beq.n	80089b8 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2208      	movs	r2, #8
 80089a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089ae:	f043 0208 	orr.w	r2, r3, #8
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d011      	beq.n	80089e6 <HAL_UART_IRQHandler+0x15e>
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00c      	beq.n	80089e6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089dc:	f043 0220 	orr.w	r2, r3, #32
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 8141 	beq.w	8008c74 <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	f003 0320 	and.w	r3, r3, #32
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00c      	beq.n	8008a16 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	f003 0320 	and.w	r3, r3, #32
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d007      	beq.n	8008a16 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d003      	beq.n	8008a16 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a1c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a28:	2b40      	cmp	r3, #64	; 0x40
 8008a2a:	d004      	beq.n	8008a36 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d031      	beq.n	8008a9a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fd1e 	bl	8009478 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a46:	2b40      	cmp	r3, #64	; 0x40
 8008a48:	d123      	bne.n	8008a92 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	689a      	ldr	r2, [r3, #8]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a58:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d013      	beq.n	8008a8a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a66:	4a4a      	ldr	r2, [pc, #296]	; (8008b90 <HAL_UART_IRQHandler+0x308>)
 8008a68:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fc fbf4 	bl	800525c <HAL_DMA_Abort_IT>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d017      	beq.n	8008aaa <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008a84:	4610      	mov	r0, r2
 8008a86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a88:	e00f      	b.n	8008aaa <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f910 	bl	8008cb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a90:	e00b      	b.n	8008aaa <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f90c 	bl	8008cb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a98:	e007      	b.n	8008aaa <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f908 	bl	8008cb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008aa8:	e0e4      	b.n	8008c74 <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aaa:	bf00      	nop
    return;
 8008aac:	e0e2      	b.n	8008c74 <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	f040 80a7 	bne.w	8008c06 <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	f003 0310 	and.w	r3, r3, #16
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	f000 80a1 	beq.w	8008c06 <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	f003 0310 	and.w	r3, r3, #16
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f000 809b 	beq.w	8008c06 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2210      	movs	r2, #16
 8008ad6:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae2:	2b40      	cmp	r3, #64	; 0x40
 8008ae4:	d156      	bne.n	8008b94 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8008af0:	893b      	ldrh	r3, [r7, #8]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f000 80c0 	beq.w	8008c78 <HAL_UART_IRQHandler+0x3f0>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008afe:	893a      	ldrh	r2, [r7, #8]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	f080 80b9 	bcs.w	8008c78 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	893a      	ldrh	r2, [r7, #8]
 8008b0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b12:	699b      	ldr	r3, [r3, #24]
 8008b14:	2b20      	cmp	r3, #32
 8008b16:	d02a      	beq.n	8008b6e <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b26:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	689a      	ldr	r2, [r3, #8]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f022 0201 	bic.w	r2, r2, #1
 8008b36:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	689a      	ldr	r2, [r3, #8]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b46:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2220      	movs	r2, #32
 8008b4c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f022 0210 	bic.w	r2, r2, #16
 8008b62:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7fc fb3e 	bl	80051ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	1ad3      	subs	r3, r2, r3
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	4619      	mov	r1, r3
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f8a8 	bl	8008cd8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008b88:	e076      	b.n	8008c78 <HAL_UART_IRQHandler+0x3f0>
 8008b8a:	bf00      	nop
 8008b8c:	04000120 	.word	0x04000120
 8008b90:	080094d7 	.word	0x080094d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d064      	beq.n	8008c7c <HAL_UART_IRQHandler+0x3f4>
          &&(nb_rx_data > 0U) )
 8008bb2:	897b      	ldrh	r3, [r7, #10]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d061      	beq.n	8008c7c <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008bc6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	689a      	ldr	r2, [r3, #8]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f022 0201 	bic.w	r2, r2, #1
 8008bd6:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2220      	movs	r2, #32
 8008bdc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f022 0210 	bic.w	r2, r2, #16
 8008bf8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008bfa:	897b      	ldrh	r3, [r7, #10]
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f86a 	bl	8008cd8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008c04:	e03a      	b.n	8008c7c <HAL_UART_IRQHandler+0x3f4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00d      	beq.n	8008c2c <HAL_UART_IRQHandler+0x3a4>
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d008      	beq.n	8008c2c <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008c22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 fd7d 	bl	8009724 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c2a:	e02a      	b.n	8008c82 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00d      	beq.n	8008c52 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d008      	beq.n	8008c52 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d01b      	beq.n	8008c80 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	4798      	blx	r3
    }
    return;
 8008c50:	e016      	b.n	8008c80 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d012      	beq.n	8008c82 <HAL_UART_IRQHandler+0x3fa>
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00d      	beq.n	8008c82 <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fc6f 	bl	800954a <UART_EndTransmit_IT>
    return;
 8008c6c:	bf00      	nop
 8008c6e:	e008      	b.n	8008c82 <HAL_UART_IRQHandler+0x3fa>
      return;
 8008c70:	bf00      	nop
 8008c72:	e006      	b.n	8008c82 <HAL_UART_IRQHandler+0x3fa>
    return;
 8008c74:	bf00      	nop
 8008c76:	e004      	b.n	8008c82 <HAL_UART_IRQHandler+0x3fa>
      return;
 8008c78:	bf00      	nop
 8008c7a:	e002      	b.n	8008c82 <HAL_UART_IRQHandler+0x3fa>
      return;
 8008c7c:	bf00      	nop
 8008c7e:	e000      	b.n	8008c82 <HAL_UART_IRQHandler+0x3fa>
    return;
 8008c80:	bf00      	nop
  }

}
 8008c82:	3720      	adds	r7, #32
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008ca4:	bf00      	nop
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b088      	sub	sp, #32
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	689a      	ldr	r2, [r3, #8]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	431a      	orrs	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	695b      	ldr	r3, [r3, #20]
 8008d0a:	431a      	orrs	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	69db      	ldr	r3, [r3, #28]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	4baa      	ldr	r3, [pc, #680]	; (8008fc4 <UART_SetConfig+0x2d4>)
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	6812      	ldr	r2, [r2, #0]
 8008d22:	6979      	ldr	r1, [r7, #20]
 8008d24:	430b      	orrs	r3, r1
 8008d26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	68da      	ldr	r2, [r3, #12]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	430a      	orrs	r2, r1
 8008d3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a1b      	ldr	r3, [r3, #32]
 8008d48:	697a      	ldr	r2, [r7, #20]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a98      	ldr	r2, [pc, #608]	; (8008fc8 <UART_SetConfig+0x2d8>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d121      	bne.n	8008db0 <UART_SetConfig+0xc0>
 8008d6c:	4b97      	ldr	r3, [pc, #604]	; (8008fcc <UART_SetConfig+0x2dc>)
 8008d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d70:	f003 0303 	and.w	r3, r3, #3
 8008d74:	2b03      	cmp	r3, #3
 8008d76:	d817      	bhi.n	8008da8 <UART_SetConfig+0xb8>
 8008d78:	a201      	add	r2, pc, #4	; (adr r2, 8008d80 <UART_SetConfig+0x90>)
 8008d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7e:	bf00      	nop
 8008d80:	08008d91 	.word	0x08008d91
 8008d84:	08008d9d 	.word	0x08008d9d
 8008d88:	08008da3 	.word	0x08008da3
 8008d8c:	08008d97 	.word	0x08008d97
 8008d90:	2301      	movs	r3, #1
 8008d92:	77fb      	strb	r3, [r7, #31]
 8008d94:	e0b2      	b.n	8008efc <UART_SetConfig+0x20c>
 8008d96:	2302      	movs	r3, #2
 8008d98:	77fb      	strb	r3, [r7, #31]
 8008d9a:	e0af      	b.n	8008efc <UART_SetConfig+0x20c>
 8008d9c:	2304      	movs	r3, #4
 8008d9e:	77fb      	strb	r3, [r7, #31]
 8008da0:	e0ac      	b.n	8008efc <UART_SetConfig+0x20c>
 8008da2:	2308      	movs	r3, #8
 8008da4:	77fb      	strb	r3, [r7, #31]
 8008da6:	e0a9      	b.n	8008efc <UART_SetConfig+0x20c>
 8008da8:	2310      	movs	r3, #16
 8008daa:	77fb      	strb	r3, [r7, #31]
 8008dac:	bf00      	nop
 8008dae:	e0a5      	b.n	8008efc <UART_SetConfig+0x20c>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a86      	ldr	r2, [pc, #536]	; (8008fd0 <UART_SetConfig+0x2e0>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d123      	bne.n	8008e02 <UART_SetConfig+0x112>
 8008dba:	4b84      	ldr	r3, [pc, #528]	; (8008fcc <UART_SetConfig+0x2dc>)
 8008dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dc6:	d012      	beq.n	8008dee <UART_SetConfig+0xfe>
 8008dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dcc:	d802      	bhi.n	8008dd4 <UART_SetConfig+0xe4>
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d007      	beq.n	8008de2 <UART_SetConfig+0xf2>
 8008dd2:	e012      	b.n	8008dfa <UART_SetConfig+0x10a>
 8008dd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dd8:	d00c      	beq.n	8008df4 <UART_SetConfig+0x104>
 8008dda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008dde:	d003      	beq.n	8008de8 <UART_SetConfig+0xf8>
 8008de0:	e00b      	b.n	8008dfa <UART_SetConfig+0x10a>
 8008de2:	2300      	movs	r3, #0
 8008de4:	77fb      	strb	r3, [r7, #31]
 8008de6:	e089      	b.n	8008efc <UART_SetConfig+0x20c>
 8008de8:	2302      	movs	r3, #2
 8008dea:	77fb      	strb	r3, [r7, #31]
 8008dec:	e086      	b.n	8008efc <UART_SetConfig+0x20c>
 8008dee:	2304      	movs	r3, #4
 8008df0:	77fb      	strb	r3, [r7, #31]
 8008df2:	e083      	b.n	8008efc <UART_SetConfig+0x20c>
 8008df4:	2308      	movs	r3, #8
 8008df6:	77fb      	strb	r3, [r7, #31]
 8008df8:	e080      	b.n	8008efc <UART_SetConfig+0x20c>
 8008dfa:	2310      	movs	r3, #16
 8008dfc:	77fb      	strb	r3, [r7, #31]
 8008dfe:	bf00      	nop
 8008e00:	e07c      	b.n	8008efc <UART_SetConfig+0x20c>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a73      	ldr	r2, [pc, #460]	; (8008fd4 <UART_SetConfig+0x2e4>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d123      	bne.n	8008e54 <UART_SetConfig+0x164>
 8008e0c:	4b6f      	ldr	r3, [pc, #444]	; (8008fcc <UART_SetConfig+0x2dc>)
 8008e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e10:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008e14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e18:	d012      	beq.n	8008e40 <UART_SetConfig+0x150>
 8008e1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e1e:	d802      	bhi.n	8008e26 <UART_SetConfig+0x136>
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d007      	beq.n	8008e34 <UART_SetConfig+0x144>
 8008e24:	e012      	b.n	8008e4c <UART_SetConfig+0x15c>
 8008e26:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008e2a:	d00c      	beq.n	8008e46 <UART_SetConfig+0x156>
 8008e2c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008e30:	d003      	beq.n	8008e3a <UART_SetConfig+0x14a>
 8008e32:	e00b      	b.n	8008e4c <UART_SetConfig+0x15c>
 8008e34:	2300      	movs	r3, #0
 8008e36:	77fb      	strb	r3, [r7, #31]
 8008e38:	e060      	b.n	8008efc <UART_SetConfig+0x20c>
 8008e3a:	2302      	movs	r3, #2
 8008e3c:	77fb      	strb	r3, [r7, #31]
 8008e3e:	e05d      	b.n	8008efc <UART_SetConfig+0x20c>
 8008e40:	2304      	movs	r3, #4
 8008e42:	77fb      	strb	r3, [r7, #31]
 8008e44:	e05a      	b.n	8008efc <UART_SetConfig+0x20c>
 8008e46:	2308      	movs	r3, #8
 8008e48:	77fb      	strb	r3, [r7, #31]
 8008e4a:	e057      	b.n	8008efc <UART_SetConfig+0x20c>
 8008e4c:	2310      	movs	r3, #16
 8008e4e:	77fb      	strb	r3, [r7, #31]
 8008e50:	bf00      	nop
 8008e52:	e053      	b.n	8008efc <UART_SetConfig+0x20c>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a5f      	ldr	r2, [pc, #380]	; (8008fd8 <UART_SetConfig+0x2e8>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d123      	bne.n	8008ea6 <UART_SetConfig+0x1b6>
 8008e5e:	4b5b      	ldr	r3, [pc, #364]	; (8008fcc <UART_SetConfig+0x2dc>)
 8008e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e62:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e6a:	d012      	beq.n	8008e92 <UART_SetConfig+0x1a2>
 8008e6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e70:	d802      	bhi.n	8008e78 <UART_SetConfig+0x188>
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d007      	beq.n	8008e86 <UART_SetConfig+0x196>
 8008e76:	e012      	b.n	8008e9e <UART_SetConfig+0x1ae>
 8008e78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e7c:	d00c      	beq.n	8008e98 <UART_SetConfig+0x1a8>
 8008e7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e82:	d003      	beq.n	8008e8c <UART_SetConfig+0x19c>
 8008e84:	e00b      	b.n	8008e9e <UART_SetConfig+0x1ae>
 8008e86:	2300      	movs	r3, #0
 8008e88:	77fb      	strb	r3, [r7, #31]
 8008e8a:	e037      	b.n	8008efc <UART_SetConfig+0x20c>
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	77fb      	strb	r3, [r7, #31]
 8008e90:	e034      	b.n	8008efc <UART_SetConfig+0x20c>
 8008e92:	2304      	movs	r3, #4
 8008e94:	77fb      	strb	r3, [r7, #31]
 8008e96:	e031      	b.n	8008efc <UART_SetConfig+0x20c>
 8008e98:	2308      	movs	r3, #8
 8008e9a:	77fb      	strb	r3, [r7, #31]
 8008e9c:	e02e      	b.n	8008efc <UART_SetConfig+0x20c>
 8008e9e:	2310      	movs	r3, #16
 8008ea0:	77fb      	strb	r3, [r7, #31]
 8008ea2:	bf00      	nop
 8008ea4:	e02a      	b.n	8008efc <UART_SetConfig+0x20c>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a4c      	ldr	r2, [pc, #304]	; (8008fdc <UART_SetConfig+0x2ec>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d123      	bne.n	8008ef8 <UART_SetConfig+0x208>
 8008eb0:	4b46      	ldr	r3, [pc, #280]	; (8008fcc <UART_SetConfig+0x2dc>)
 8008eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008eb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ebc:	d012      	beq.n	8008ee4 <UART_SetConfig+0x1f4>
 8008ebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ec2:	d802      	bhi.n	8008eca <UART_SetConfig+0x1da>
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d007      	beq.n	8008ed8 <UART_SetConfig+0x1e8>
 8008ec8:	e012      	b.n	8008ef0 <UART_SetConfig+0x200>
 8008eca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ece:	d00c      	beq.n	8008eea <UART_SetConfig+0x1fa>
 8008ed0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008ed4:	d003      	beq.n	8008ede <UART_SetConfig+0x1ee>
 8008ed6:	e00b      	b.n	8008ef0 <UART_SetConfig+0x200>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	77fb      	strb	r3, [r7, #31]
 8008edc:	e00e      	b.n	8008efc <UART_SetConfig+0x20c>
 8008ede:	2302      	movs	r3, #2
 8008ee0:	77fb      	strb	r3, [r7, #31]
 8008ee2:	e00b      	b.n	8008efc <UART_SetConfig+0x20c>
 8008ee4:	2304      	movs	r3, #4
 8008ee6:	77fb      	strb	r3, [r7, #31]
 8008ee8:	e008      	b.n	8008efc <UART_SetConfig+0x20c>
 8008eea:	2308      	movs	r3, #8
 8008eec:	77fb      	strb	r3, [r7, #31]
 8008eee:	e005      	b.n	8008efc <UART_SetConfig+0x20c>
 8008ef0:	2310      	movs	r3, #16
 8008ef2:	77fb      	strb	r3, [r7, #31]
 8008ef4:	bf00      	nop
 8008ef6:	e001      	b.n	8008efc <UART_SetConfig+0x20c>
 8008ef8:	2310      	movs	r3, #16
 8008efa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	69db      	ldr	r3, [r3, #28]
 8008f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f04:	d16e      	bne.n	8008fe4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8008f06:	7ffb      	ldrb	r3, [r7, #31]
 8008f08:	2b08      	cmp	r3, #8
 8008f0a:	d828      	bhi.n	8008f5e <UART_SetConfig+0x26e>
 8008f0c:	a201      	add	r2, pc, #4	; (adr r2, 8008f14 <UART_SetConfig+0x224>)
 8008f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f12:	bf00      	nop
 8008f14:	08008f39 	.word	0x08008f39
 8008f18:	08008f41 	.word	0x08008f41
 8008f1c:	08008f49 	.word	0x08008f49
 8008f20:	08008f5f 	.word	0x08008f5f
 8008f24:	08008f4f 	.word	0x08008f4f
 8008f28:	08008f5f 	.word	0x08008f5f
 8008f2c:	08008f5f 	.word	0x08008f5f
 8008f30:	08008f5f 	.word	0x08008f5f
 8008f34:	08008f57 	.word	0x08008f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f38:	f7fd fd86 	bl	8006a48 <HAL_RCC_GetPCLK1Freq>
 8008f3c:	61b8      	str	r0, [r7, #24]
        break;
 8008f3e:	e013      	b.n	8008f68 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f40:	f7fd fda4 	bl	8006a8c <HAL_RCC_GetPCLK2Freq>
 8008f44:	61b8      	str	r0, [r7, #24]
        break;
 8008f46:	e00f      	b.n	8008f68 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f48:	4b25      	ldr	r3, [pc, #148]	; (8008fe0 <UART_SetConfig+0x2f0>)
 8008f4a:	61bb      	str	r3, [r7, #24]
        break;
 8008f4c:	e00c      	b.n	8008f68 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f4e:	f7fd fd05 	bl	800695c <HAL_RCC_GetSysClockFreq>
 8008f52:	61b8      	str	r0, [r7, #24]
        break;
 8008f54:	e008      	b.n	8008f68 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f5a:	61bb      	str	r3, [r7, #24]
        break;
 8008f5c:	e004      	b.n	8008f68 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	77bb      	strb	r3, [r7, #30]
        break;
 8008f66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 8086 	beq.w	800907c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	005a      	lsls	r2, r3, #1
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	085b      	lsrs	r3, r3, #1
 8008f7a:	441a      	add	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	2b0f      	cmp	r3, #15
 8008f8c:	d916      	bls.n	8008fbc <UART_SetConfig+0x2cc>
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f94:	d212      	bcs.n	8008fbc <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	f023 030f 	bic.w	r3, r3, #15
 8008f9e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	085b      	lsrs	r3, r3, #1
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	f003 0307 	and.w	r3, r3, #7
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	89fb      	ldrh	r3, [r7, #14]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	89fa      	ldrh	r2, [r7, #14]
 8008fb8:	60da      	str	r2, [r3, #12]
 8008fba:	e05f      	b.n	800907c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	77bb      	strb	r3, [r7, #30]
 8008fc0:	e05c      	b.n	800907c <UART_SetConfig+0x38c>
 8008fc2:	bf00      	nop
 8008fc4:	efff69f3 	.word	0xefff69f3
 8008fc8:	40013800 	.word	0x40013800
 8008fcc:	40021000 	.word	0x40021000
 8008fd0:	40004400 	.word	0x40004400
 8008fd4:	40004800 	.word	0x40004800
 8008fd8:	40004c00 	.word	0x40004c00
 8008fdc:	40005000 	.word	0x40005000
 8008fe0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8008fe4:	7ffb      	ldrb	r3, [r7, #31]
 8008fe6:	2b08      	cmp	r3, #8
 8008fe8:	d827      	bhi.n	800903a <UART_SetConfig+0x34a>
 8008fea:	a201      	add	r2, pc, #4	; (adr r2, 8008ff0 <UART_SetConfig+0x300>)
 8008fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff0:	08009015 	.word	0x08009015
 8008ff4:	0800901d 	.word	0x0800901d
 8008ff8:	08009025 	.word	0x08009025
 8008ffc:	0800903b 	.word	0x0800903b
 8009000:	0800902b 	.word	0x0800902b
 8009004:	0800903b 	.word	0x0800903b
 8009008:	0800903b 	.word	0x0800903b
 800900c:	0800903b 	.word	0x0800903b
 8009010:	08009033 	.word	0x08009033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009014:	f7fd fd18 	bl	8006a48 <HAL_RCC_GetPCLK1Freq>
 8009018:	61b8      	str	r0, [r7, #24]
        break;
 800901a:	e013      	b.n	8009044 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800901c:	f7fd fd36 	bl	8006a8c <HAL_RCC_GetPCLK2Freq>
 8009020:	61b8      	str	r0, [r7, #24]
        break;
 8009022:	e00f      	b.n	8009044 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009024:	4b1b      	ldr	r3, [pc, #108]	; (8009094 <UART_SetConfig+0x3a4>)
 8009026:	61bb      	str	r3, [r7, #24]
        break;
 8009028:	e00c      	b.n	8009044 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800902a:	f7fd fc97 	bl	800695c <HAL_RCC_GetSysClockFreq>
 800902e:	61b8      	str	r0, [r7, #24]
        break;
 8009030:	e008      	b.n	8009044 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009036:	61bb      	str	r3, [r7, #24]
        break;
 8009038:	e004      	b.n	8009044 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800903a:	2300      	movs	r3, #0
 800903c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	77bb      	strb	r3, [r7, #30]
        break;
 8009042:	bf00      	nop
    }

    if (pclk != 0U)
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d018      	beq.n	800907c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	085a      	lsrs	r2, r3, #1
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	441a      	add	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	fbb2 f3f3 	udiv	r3, r2, r3
 800905c:	b29b      	uxth	r3, r3
 800905e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	2b0f      	cmp	r3, #15
 8009064:	d908      	bls.n	8009078 <UART_SetConfig+0x388>
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800906c:	d204      	bcs.n	8009078 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	693a      	ldr	r2, [r7, #16]
 8009074:	60da      	str	r2, [r3, #12]
 8009076:	e001      	b.n	800907c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009088:	7fbb      	ldrb	r3, [r7, #30]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3720      	adds	r7, #32
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	007a1200 	.word	0x007a1200

08009098 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a4:	f003 0301 	and.w	r3, r3, #1
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00a      	beq.n	80090c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	430a      	orrs	r2, r1
 80090c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c6:	f003 0302 	and.w	r3, r3, #2
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00a      	beq.n	80090e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	430a      	orrs	r2, r1
 80090e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e8:	f003 0304 	and.w	r3, r3, #4
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00a      	beq.n	8009106 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	430a      	orrs	r2, r1
 8009104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910a:	f003 0308 	and.w	r3, r3, #8
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00a      	beq.n	8009128 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	430a      	orrs	r2, r1
 8009126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912c:	f003 0310 	and.w	r3, r3, #16
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00a      	beq.n	800914a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	430a      	orrs	r2, r1
 8009148:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914e:	f003 0320 	and.w	r3, r3, #32
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00a      	beq.n	800916c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	430a      	orrs	r2, r1
 800916a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009174:	2b00      	cmp	r3, #0
 8009176:	d01a      	beq.n	80091ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	430a      	orrs	r2, r1
 800918c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009196:	d10a      	bne.n	80091ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	430a      	orrs	r2, r1
 80091ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00a      	beq.n	80091d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	430a      	orrs	r2, r1
 80091ce:	605a      	str	r2, [r3, #4]
  }
}
 80091d0:	bf00      	nop
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af02      	add	r7, sp, #8
 80091e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80091ec:	f7f9 fce8 	bl	8002bc0 <HAL_GetTick>
 80091f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f003 0308 	and.w	r3, r3, #8
 80091fc:	2b08      	cmp	r3, #8
 80091fe:	d10e      	bne.n	800921e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009200:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2200      	movs	r2, #0
 800920a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f82d 	bl	800926e <UART_WaitOnFlagUntilTimeout>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d001      	beq.n	800921e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e023      	b.n	8009266 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0304 	and.w	r3, r3, #4
 8009228:	2b04      	cmp	r3, #4
 800922a:	d10e      	bne.n	800924a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800922c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f817 	bl	800926e <UART_WaitOnFlagUntilTimeout>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d001      	beq.n	800924a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	e00d      	b.n	8009266 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2220      	movs	r2, #32
 800924e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2220      	movs	r2, #32
 8009254:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b084      	sub	sp, #16
 8009272:	af00      	add	r7, sp, #0
 8009274:	60f8      	str	r0, [r7, #12]
 8009276:	60b9      	str	r1, [r7, #8]
 8009278:	603b      	str	r3, [r7, #0]
 800927a:	4613      	mov	r3, r2
 800927c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800927e:	e05e      	b.n	800933e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009286:	d05a      	beq.n	800933e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009288:	f7f9 fc9a 	bl	8002bc0 <HAL_GetTick>
 800928c:	4602      	mov	r2, r0
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	69ba      	ldr	r2, [r7, #24]
 8009294:	429a      	cmp	r2, r3
 8009296:	d302      	bcc.n	800929e <UART_WaitOnFlagUntilTimeout+0x30>
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d11b      	bne.n	80092d6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80092ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	689a      	ldr	r2, [r3, #8]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f022 0201 	bic.w	r2, r2, #1
 80092bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2220      	movs	r2, #32
 80092c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2220      	movs	r2, #32
 80092c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80092d2:	2303      	movs	r3, #3
 80092d4:	e043      	b.n	800935e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f003 0304 	and.w	r3, r3, #4
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d02c      	beq.n	800933e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	69db      	ldr	r3, [r3, #28]
 80092ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092f2:	d124      	bne.n	800933e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80092fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800930c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	689a      	ldr	r2, [r3, #8]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f022 0201 	bic.w	r2, r2, #1
 800931c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2220      	movs	r2, #32
 8009322:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2220      	movs	r2, #32
 8009328:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2220      	movs	r2, #32
 800932e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2200      	movs	r2, #0
 8009336:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800933a:	2303      	movs	r3, #3
 800933c:	e00f      	b.n	800935e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	69da      	ldr	r2, [r3, #28]
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	4013      	ands	r3, r2
 8009348:	68ba      	ldr	r2, [r7, #8]
 800934a:	429a      	cmp	r2, r3
 800934c:	bf0c      	ite	eq
 800934e:	2301      	moveq	r3, #1
 8009350:	2300      	movne	r3, #0
 8009352:	b2db      	uxtb	r3, r3
 8009354:	461a      	mov	r2, r3
 8009356:	79fb      	ldrb	r3, [r7, #7]
 8009358:	429a      	cmp	r2, r3
 800935a:	d091      	beq.n	8009280 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
	...

08009368 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	4613      	mov	r3, r2
 8009374:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	68ba      	ldr	r2, [r7, #8]
 800937a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	88fa      	ldrh	r2, [r7, #6]
 8009380:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	88fa      	ldrh	r2, [r7, #6]
 8009388:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2200      	movs	r2, #0
 8009390:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800939a:	d10e      	bne.n	80093ba <UART_Start_Receive_IT+0x52>
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d105      	bne.n	80093b0 <UART_Start_Receive_IT+0x48>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80093aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80093ae:	e02d      	b.n	800940c <UART_Start_Receive_IT+0xa4>
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	22ff      	movs	r2, #255	; 0xff
 80093b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80093b8:	e028      	b.n	800940c <UART_Start_Receive_IT+0xa4>
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d10d      	bne.n	80093de <UART_Start_Receive_IT+0x76>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d104      	bne.n	80093d4 <UART_Start_Receive_IT+0x6c>
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	22ff      	movs	r2, #255	; 0xff
 80093ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80093d2:	e01b      	b.n	800940c <UART_Start_Receive_IT+0xa4>
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	227f      	movs	r2, #127	; 0x7f
 80093d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80093dc:	e016      	b.n	800940c <UART_Start_Receive_IT+0xa4>
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093e6:	d10d      	bne.n	8009404 <UART_Start_Receive_IT+0x9c>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d104      	bne.n	80093fa <UART_Start_Receive_IT+0x92>
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	227f      	movs	r2, #127	; 0x7f
 80093f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80093f8:	e008      	b.n	800940c <UART_Start_Receive_IT+0xa4>
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	223f      	movs	r2, #63	; 0x3f
 80093fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009402:	e003      	b.n	800940c <UART_Start_Receive_IT+0xa4>
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2200      	movs	r2, #0
 8009410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2222      	movs	r2, #34	; 0x22
 8009418:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	689a      	ldr	r2, [r3, #8]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f042 0201 	orr.w	r2, r2, #1
 8009428:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009432:	d107      	bne.n	8009444 <UART_Start_Receive_IT+0xdc>
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d103      	bne.n	8009444 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	4a0c      	ldr	r2, [pc, #48]	; (8009470 <UART_Start_Receive_IT+0x108>)
 8009440:	665a      	str	r2, [r3, #100]	; 0x64
 8009442:	e002      	b.n	800944a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	4a0b      	ldr	r2, [pc, #44]	; (8009474 <UART_Start_Receive_IT+0x10c>)
 8009448:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2200      	movs	r2, #0
 800944e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8009460:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3714      	adds	r7, #20
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	08009651 	.word	0x08009651
 8009474:	0800957d 	.word	0x0800957d

08009478 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800948e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	689a      	ldr	r2, [r3, #8]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f022 0201 	bic.w	r2, r2, #1
 800949e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d107      	bne.n	80094b8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f022 0210 	bic.w	r2, r2, #16
 80094b6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2220      	movs	r2, #32
 80094bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80094ca:	bf00      	nop
 80094cc:	370c      	adds	r7, #12
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr

080094d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b084      	sub	sp, #16
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f7ff fbdb 	bl	8008cb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094fa:	bf00      	nop
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b084      	sub	sp, #16
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950e:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2200      	movs	r2, #0
 8009514:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	220f      	movs	r2, #15
 800951e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	699a      	ldr	r2, [r3, #24]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f042 0208 	orr.w	r2, r2, #8
 800952e:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2220      	movs	r2, #32
 8009534:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f7ff fbc1 	bl	8008cc4 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009542:	bf00      	nop
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b082      	sub	sp, #8
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009560:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2220      	movs	r2, #32
 8009566:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f7ff fb8a 	bl	8008c88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009574:	bf00      	nop
 8009576:	3708      	adds	r7, #8
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800958a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009590:	2b22      	cmp	r3, #34	; 0x22
 8009592:	d151      	bne.n	8009638 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800959a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800959c:	89bb      	ldrh	r3, [r7, #12]
 800959e:	b2d9      	uxtb	r1, r3
 80095a0:	89fb      	ldrh	r3, [r7, #14]
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095a8:	400a      	ands	r2, r1
 80095aa:	b2d2      	uxtb	r2, r2
 80095ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095b2:	1c5a      	adds	r2, r3, #1
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095be:	b29b      	uxth	r3, r3
 80095c0:	3b01      	subs	r3, #1
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d138      	bne.n	8009648 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80095e4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	689a      	ldr	r2, [r3, #8]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f022 0201 	bic.w	r2, r2, #1
 80095f4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2220      	movs	r2, #32
 80095fa:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009606:	2b01      	cmp	r3, #1
 8009608:	d10f      	bne.n	800962a <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f022 0210 	bic.w	r2, r2, #16
 8009618:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009620:	4619      	mov	r1, r3
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f7ff fb58 	bl	8008cd8 <HAL_UARTEx_RxEventCallback>
 8009628:	e002      	b.n	8009630 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f7ff fb36 	bl	8008c9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009636:	e007      	b.n	8009648 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	699a      	ldr	r2, [r3, #24]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f042 0208 	orr.w	r2, r2, #8
 8009646:	619a      	str	r2, [r3, #24]
}
 8009648:	bf00      	nop
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800965e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009664:	2b22      	cmp	r3, #34	; 0x22
 8009666:	d151      	bne.n	800970c <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800966e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009674:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8009676:	89ba      	ldrh	r2, [r7, #12]
 8009678:	89fb      	ldrh	r3, [r7, #14]
 800967a:	4013      	ands	r3, r2
 800967c:	b29a      	uxth	r2, r3
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009686:	1c9a      	adds	r2, r3, #2
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009692:	b29b      	uxth	r3, r3
 8009694:	3b01      	subs	r3, #1
 8009696:	b29a      	uxth	r2, r3
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d138      	bne.n	800971c <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80096b8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	689a      	ldr	r2, [r3, #8]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f022 0201 	bic.w	r2, r2, #1
 80096c8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2220      	movs	r2, #32
 80096ce:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d10f      	bne.n	80096fe <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f022 0210 	bic.w	r2, r2, #16
 80096ec:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80096f4:	4619      	mov	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f7ff faee 	bl	8008cd8 <HAL_UARTEx_RxEventCallback>
 80096fc:	e002      	b.n	8009704 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7ff facc 	bl	8008c9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800970a:	e007      	b.n	800971c <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	699a      	ldr	r2, [r3, #24]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f042 0208 	orr.w	r2, r2, #8
 800971a:	619a      	str	r2, [r3, #24]
}
 800971c:	bf00      	nop
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800972c:	bf00      	nop
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <__errno>:
 8009738:	4b01      	ldr	r3, [pc, #4]	; (8009740 <__errno+0x8>)
 800973a:	6818      	ldr	r0, [r3, #0]
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	20000a28 	.word	0x20000a28

08009744 <__libc_init_array>:
 8009744:	b570      	push	{r4, r5, r6, lr}
 8009746:	4e0d      	ldr	r6, [pc, #52]	; (800977c <__libc_init_array+0x38>)
 8009748:	4c0d      	ldr	r4, [pc, #52]	; (8009780 <__libc_init_array+0x3c>)
 800974a:	1ba4      	subs	r4, r4, r6
 800974c:	10a4      	asrs	r4, r4, #2
 800974e:	2500      	movs	r5, #0
 8009750:	42a5      	cmp	r5, r4
 8009752:	d109      	bne.n	8009768 <__libc_init_array+0x24>
 8009754:	4e0b      	ldr	r6, [pc, #44]	; (8009784 <__libc_init_array+0x40>)
 8009756:	4c0c      	ldr	r4, [pc, #48]	; (8009788 <__libc_init_array+0x44>)
 8009758:	f001 ff20 	bl	800b59c <_init>
 800975c:	1ba4      	subs	r4, r4, r6
 800975e:	10a4      	asrs	r4, r4, #2
 8009760:	2500      	movs	r5, #0
 8009762:	42a5      	cmp	r5, r4
 8009764:	d105      	bne.n	8009772 <__libc_init_array+0x2e>
 8009766:	bd70      	pop	{r4, r5, r6, pc}
 8009768:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800976c:	4798      	blx	r3
 800976e:	3501      	adds	r5, #1
 8009770:	e7ee      	b.n	8009750 <__libc_init_array+0xc>
 8009772:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009776:	4798      	blx	r3
 8009778:	3501      	adds	r5, #1
 800977a:	e7f2      	b.n	8009762 <__libc_init_array+0x1e>
 800977c:	0800bbc8 	.word	0x0800bbc8
 8009780:	0800bbc8 	.word	0x0800bbc8
 8009784:	0800bbc8 	.word	0x0800bbc8
 8009788:	0800bbcc 	.word	0x0800bbcc

0800978c <__itoa>:
 800978c:	1e93      	subs	r3, r2, #2
 800978e:	2b22      	cmp	r3, #34	; 0x22
 8009790:	b510      	push	{r4, lr}
 8009792:	460c      	mov	r4, r1
 8009794:	d904      	bls.n	80097a0 <__itoa+0x14>
 8009796:	2300      	movs	r3, #0
 8009798:	700b      	strb	r3, [r1, #0]
 800979a:	461c      	mov	r4, r3
 800979c:	4620      	mov	r0, r4
 800979e:	bd10      	pop	{r4, pc}
 80097a0:	2a0a      	cmp	r2, #10
 80097a2:	d109      	bne.n	80097b8 <__itoa+0x2c>
 80097a4:	2800      	cmp	r0, #0
 80097a6:	da07      	bge.n	80097b8 <__itoa+0x2c>
 80097a8:	232d      	movs	r3, #45	; 0x2d
 80097aa:	700b      	strb	r3, [r1, #0]
 80097ac:	4240      	negs	r0, r0
 80097ae:	2101      	movs	r1, #1
 80097b0:	4421      	add	r1, r4
 80097b2:	f000 fecb 	bl	800a54c <__utoa>
 80097b6:	e7f1      	b.n	800979c <__itoa+0x10>
 80097b8:	2100      	movs	r1, #0
 80097ba:	e7f9      	b.n	80097b0 <__itoa+0x24>

080097bc <itoa>:
 80097bc:	f7ff bfe6 	b.w	800978c <__itoa>

080097c0 <memset>:
 80097c0:	4402      	add	r2, r0
 80097c2:	4603      	mov	r3, r0
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d100      	bne.n	80097ca <memset+0xa>
 80097c8:	4770      	bx	lr
 80097ca:	f803 1b01 	strb.w	r1, [r3], #1
 80097ce:	e7f9      	b.n	80097c4 <memset+0x4>

080097d0 <strcpy>:
 80097d0:	4603      	mov	r3, r0
 80097d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097d6:	f803 2b01 	strb.w	r2, [r3], #1
 80097da:	2a00      	cmp	r2, #0
 80097dc:	d1f9      	bne.n	80097d2 <strcpy+0x2>
 80097de:	4770      	bx	lr

080097e0 <sulp>:
 80097e0:	b570      	push	{r4, r5, r6, lr}
 80097e2:	4604      	mov	r4, r0
 80097e4:	460d      	mov	r5, r1
 80097e6:	ec45 4b10 	vmov	d0, r4, r5
 80097ea:	4616      	mov	r6, r2
 80097ec:	f001 fd00 	bl	800b1f0 <__ulp>
 80097f0:	ec51 0b10 	vmov	r0, r1, d0
 80097f4:	b17e      	cbz	r6, 8009816 <sulp+0x36>
 80097f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80097fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80097fe:	2b00      	cmp	r3, #0
 8009800:	dd09      	ble.n	8009816 <sulp+0x36>
 8009802:	051b      	lsls	r3, r3, #20
 8009804:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009808:	2400      	movs	r4, #0
 800980a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800980e:	4622      	mov	r2, r4
 8009810:	462b      	mov	r3, r5
 8009812:	f7f6 feaf 	bl	8000574 <__aeabi_dmul>
 8009816:	bd70      	pop	{r4, r5, r6, pc}

08009818 <_strtod_l>:
 8009818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800981c:	461f      	mov	r7, r3
 800981e:	b0a1      	sub	sp, #132	; 0x84
 8009820:	2300      	movs	r3, #0
 8009822:	4681      	mov	r9, r0
 8009824:	4638      	mov	r0, r7
 8009826:	460e      	mov	r6, r1
 8009828:	9217      	str	r2, [sp, #92]	; 0x5c
 800982a:	931c      	str	r3, [sp, #112]	; 0x70
 800982c:	f001 f9f5 	bl	800ac1a <__localeconv_l>
 8009830:	4680      	mov	r8, r0
 8009832:	6800      	ldr	r0, [r0, #0]
 8009834:	f7f6 fcda 	bl	80001ec <strlen>
 8009838:	f04f 0a00 	mov.w	sl, #0
 800983c:	4604      	mov	r4, r0
 800983e:	f04f 0b00 	mov.w	fp, #0
 8009842:	961b      	str	r6, [sp, #108]	; 0x6c
 8009844:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009846:	781a      	ldrb	r2, [r3, #0]
 8009848:	2a0d      	cmp	r2, #13
 800984a:	d832      	bhi.n	80098b2 <_strtod_l+0x9a>
 800984c:	2a09      	cmp	r2, #9
 800984e:	d236      	bcs.n	80098be <_strtod_l+0xa6>
 8009850:	2a00      	cmp	r2, #0
 8009852:	d03e      	beq.n	80098d2 <_strtod_l+0xba>
 8009854:	2300      	movs	r3, #0
 8009856:	930d      	str	r3, [sp, #52]	; 0x34
 8009858:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800985a:	782b      	ldrb	r3, [r5, #0]
 800985c:	2b30      	cmp	r3, #48	; 0x30
 800985e:	f040 80ac 	bne.w	80099ba <_strtod_l+0x1a2>
 8009862:	786b      	ldrb	r3, [r5, #1]
 8009864:	2b58      	cmp	r3, #88	; 0x58
 8009866:	d001      	beq.n	800986c <_strtod_l+0x54>
 8009868:	2b78      	cmp	r3, #120	; 0x78
 800986a:	d167      	bne.n	800993c <_strtod_l+0x124>
 800986c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800986e:	9301      	str	r3, [sp, #4]
 8009870:	ab1c      	add	r3, sp, #112	; 0x70
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	9702      	str	r7, [sp, #8]
 8009876:	ab1d      	add	r3, sp, #116	; 0x74
 8009878:	4a88      	ldr	r2, [pc, #544]	; (8009a9c <_strtod_l+0x284>)
 800987a:	a91b      	add	r1, sp, #108	; 0x6c
 800987c:	4648      	mov	r0, r9
 800987e:	f000 fef2 	bl	800a666 <__gethex>
 8009882:	f010 0407 	ands.w	r4, r0, #7
 8009886:	4606      	mov	r6, r0
 8009888:	d005      	beq.n	8009896 <_strtod_l+0x7e>
 800988a:	2c06      	cmp	r4, #6
 800988c:	d12b      	bne.n	80098e6 <_strtod_l+0xce>
 800988e:	3501      	adds	r5, #1
 8009890:	2300      	movs	r3, #0
 8009892:	951b      	str	r5, [sp, #108]	; 0x6c
 8009894:	930d      	str	r3, [sp, #52]	; 0x34
 8009896:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009898:	2b00      	cmp	r3, #0
 800989a:	f040 859a 	bne.w	800a3d2 <_strtod_l+0xbba>
 800989e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098a0:	b1e3      	cbz	r3, 80098dc <_strtod_l+0xc4>
 80098a2:	4652      	mov	r2, sl
 80098a4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80098a8:	ec43 2b10 	vmov	d0, r2, r3
 80098ac:	b021      	add	sp, #132	; 0x84
 80098ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b2:	2a2b      	cmp	r2, #43	; 0x2b
 80098b4:	d015      	beq.n	80098e2 <_strtod_l+0xca>
 80098b6:	2a2d      	cmp	r2, #45	; 0x2d
 80098b8:	d004      	beq.n	80098c4 <_strtod_l+0xac>
 80098ba:	2a20      	cmp	r2, #32
 80098bc:	d1ca      	bne.n	8009854 <_strtod_l+0x3c>
 80098be:	3301      	adds	r3, #1
 80098c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80098c2:	e7bf      	b.n	8009844 <_strtod_l+0x2c>
 80098c4:	2201      	movs	r2, #1
 80098c6:	920d      	str	r2, [sp, #52]	; 0x34
 80098c8:	1c5a      	adds	r2, r3, #1
 80098ca:	921b      	str	r2, [sp, #108]	; 0x6c
 80098cc:	785b      	ldrb	r3, [r3, #1]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d1c2      	bne.n	8009858 <_strtod_l+0x40>
 80098d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098d4:	961b      	str	r6, [sp, #108]	; 0x6c
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f040 8579 	bne.w	800a3ce <_strtod_l+0xbb6>
 80098dc:	4652      	mov	r2, sl
 80098de:	465b      	mov	r3, fp
 80098e0:	e7e2      	b.n	80098a8 <_strtod_l+0x90>
 80098e2:	2200      	movs	r2, #0
 80098e4:	e7ef      	b.n	80098c6 <_strtod_l+0xae>
 80098e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80098e8:	b13a      	cbz	r2, 80098fa <_strtod_l+0xe2>
 80098ea:	2135      	movs	r1, #53	; 0x35
 80098ec:	a81e      	add	r0, sp, #120	; 0x78
 80098ee:	f001 fd77 	bl	800b3e0 <__copybits>
 80098f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80098f4:	4648      	mov	r0, r9
 80098f6:	f001 f9e3 	bl	800acc0 <_Bfree>
 80098fa:	3c01      	subs	r4, #1
 80098fc:	2c04      	cmp	r4, #4
 80098fe:	d806      	bhi.n	800990e <_strtod_l+0xf6>
 8009900:	e8df f004 	tbb	[pc, r4]
 8009904:	1714030a 	.word	0x1714030a
 8009908:	0a          	.byte	0x0a
 8009909:	00          	.byte	0x00
 800990a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800990e:	0730      	lsls	r0, r6, #28
 8009910:	d5c1      	bpl.n	8009896 <_strtod_l+0x7e>
 8009912:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009916:	e7be      	b.n	8009896 <_strtod_l+0x7e>
 8009918:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800991c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800991e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009922:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009926:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800992a:	e7f0      	b.n	800990e <_strtod_l+0xf6>
 800992c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8009aa0 <_strtod_l+0x288>
 8009930:	e7ed      	b.n	800990e <_strtod_l+0xf6>
 8009932:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009936:	f04f 3aff 	mov.w	sl, #4294967295
 800993a:	e7e8      	b.n	800990e <_strtod_l+0xf6>
 800993c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800993e:	1c5a      	adds	r2, r3, #1
 8009940:	921b      	str	r2, [sp, #108]	; 0x6c
 8009942:	785b      	ldrb	r3, [r3, #1]
 8009944:	2b30      	cmp	r3, #48	; 0x30
 8009946:	d0f9      	beq.n	800993c <_strtod_l+0x124>
 8009948:	2b00      	cmp	r3, #0
 800994a:	d0a4      	beq.n	8009896 <_strtod_l+0x7e>
 800994c:	2301      	movs	r3, #1
 800994e:	2500      	movs	r5, #0
 8009950:	9306      	str	r3, [sp, #24]
 8009952:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009954:	9308      	str	r3, [sp, #32]
 8009956:	9507      	str	r5, [sp, #28]
 8009958:	9505      	str	r5, [sp, #20]
 800995a:	220a      	movs	r2, #10
 800995c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800995e:	7807      	ldrb	r7, [r0, #0]
 8009960:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8009964:	b2d9      	uxtb	r1, r3
 8009966:	2909      	cmp	r1, #9
 8009968:	d929      	bls.n	80099be <_strtod_l+0x1a6>
 800996a:	4622      	mov	r2, r4
 800996c:	f8d8 1000 	ldr.w	r1, [r8]
 8009970:	f001 fdea 	bl	800b548 <strncmp>
 8009974:	2800      	cmp	r0, #0
 8009976:	d031      	beq.n	80099dc <_strtod_l+0x1c4>
 8009978:	2000      	movs	r0, #0
 800997a:	9c05      	ldr	r4, [sp, #20]
 800997c:	9004      	str	r0, [sp, #16]
 800997e:	463b      	mov	r3, r7
 8009980:	4602      	mov	r2, r0
 8009982:	2b65      	cmp	r3, #101	; 0x65
 8009984:	d001      	beq.n	800998a <_strtod_l+0x172>
 8009986:	2b45      	cmp	r3, #69	; 0x45
 8009988:	d114      	bne.n	80099b4 <_strtod_l+0x19c>
 800998a:	b924      	cbnz	r4, 8009996 <_strtod_l+0x17e>
 800998c:	b910      	cbnz	r0, 8009994 <_strtod_l+0x17c>
 800998e:	9b06      	ldr	r3, [sp, #24]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d09e      	beq.n	80098d2 <_strtod_l+0xba>
 8009994:	2400      	movs	r4, #0
 8009996:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009998:	1c73      	adds	r3, r6, #1
 800999a:	931b      	str	r3, [sp, #108]	; 0x6c
 800999c:	7873      	ldrb	r3, [r6, #1]
 800999e:	2b2b      	cmp	r3, #43	; 0x2b
 80099a0:	d078      	beq.n	8009a94 <_strtod_l+0x27c>
 80099a2:	2b2d      	cmp	r3, #45	; 0x2d
 80099a4:	d070      	beq.n	8009a88 <_strtod_l+0x270>
 80099a6:	f04f 0c00 	mov.w	ip, #0
 80099aa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80099ae:	2f09      	cmp	r7, #9
 80099b0:	d97c      	bls.n	8009aac <_strtod_l+0x294>
 80099b2:	961b      	str	r6, [sp, #108]	; 0x6c
 80099b4:	f04f 0e00 	mov.w	lr, #0
 80099b8:	e09a      	b.n	8009af0 <_strtod_l+0x2d8>
 80099ba:	2300      	movs	r3, #0
 80099bc:	e7c7      	b.n	800994e <_strtod_l+0x136>
 80099be:	9905      	ldr	r1, [sp, #20]
 80099c0:	2908      	cmp	r1, #8
 80099c2:	bfdd      	ittte	le
 80099c4:	9907      	ldrle	r1, [sp, #28]
 80099c6:	fb02 3301 	mlale	r3, r2, r1, r3
 80099ca:	9307      	strle	r3, [sp, #28]
 80099cc:	fb02 3505 	mlagt	r5, r2, r5, r3
 80099d0:	9b05      	ldr	r3, [sp, #20]
 80099d2:	3001      	adds	r0, #1
 80099d4:	3301      	adds	r3, #1
 80099d6:	9305      	str	r3, [sp, #20]
 80099d8:	901b      	str	r0, [sp, #108]	; 0x6c
 80099da:	e7bf      	b.n	800995c <_strtod_l+0x144>
 80099dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099de:	191a      	adds	r2, r3, r4
 80099e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80099e2:	9a05      	ldr	r2, [sp, #20]
 80099e4:	5d1b      	ldrb	r3, [r3, r4]
 80099e6:	2a00      	cmp	r2, #0
 80099e8:	d037      	beq.n	8009a5a <_strtod_l+0x242>
 80099ea:	9c05      	ldr	r4, [sp, #20]
 80099ec:	4602      	mov	r2, r0
 80099ee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80099f2:	2909      	cmp	r1, #9
 80099f4:	d913      	bls.n	8009a1e <_strtod_l+0x206>
 80099f6:	2101      	movs	r1, #1
 80099f8:	9104      	str	r1, [sp, #16]
 80099fa:	e7c2      	b.n	8009982 <_strtod_l+0x16a>
 80099fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099fe:	1c5a      	adds	r2, r3, #1
 8009a00:	921b      	str	r2, [sp, #108]	; 0x6c
 8009a02:	785b      	ldrb	r3, [r3, #1]
 8009a04:	3001      	adds	r0, #1
 8009a06:	2b30      	cmp	r3, #48	; 0x30
 8009a08:	d0f8      	beq.n	80099fc <_strtod_l+0x1e4>
 8009a0a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009a0e:	2a08      	cmp	r2, #8
 8009a10:	f200 84e4 	bhi.w	800a3dc <_strtod_l+0xbc4>
 8009a14:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009a16:	9208      	str	r2, [sp, #32]
 8009a18:	4602      	mov	r2, r0
 8009a1a:	2000      	movs	r0, #0
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8009a22:	f100 0101 	add.w	r1, r0, #1
 8009a26:	d012      	beq.n	8009a4e <_strtod_l+0x236>
 8009a28:	440a      	add	r2, r1
 8009a2a:	eb00 0c04 	add.w	ip, r0, r4
 8009a2e:	4621      	mov	r1, r4
 8009a30:	270a      	movs	r7, #10
 8009a32:	458c      	cmp	ip, r1
 8009a34:	d113      	bne.n	8009a5e <_strtod_l+0x246>
 8009a36:	1821      	adds	r1, r4, r0
 8009a38:	2908      	cmp	r1, #8
 8009a3a:	f104 0401 	add.w	r4, r4, #1
 8009a3e:	4404      	add	r4, r0
 8009a40:	dc19      	bgt.n	8009a76 <_strtod_l+0x25e>
 8009a42:	9b07      	ldr	r3, [sp, #28]
 8009a44:	210a      	movs	r1, #10
 8009a46:	fb01 e303 	mla	r3, r1, r3, lr
 8009a4a:	9307      	str	r3, [sp, #28]
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a50:	1c58      	adds	r0, r3, #1
 8009a52:	901b      	str	r0, [sp, #108]	; 0x6c
 8009a54:	785b      	ldrb	r3, [r3, #1]
 8009a56:	4608      	mov	r0, r1
 8009a58:	e7c9      	b.n	80099ee <_strtod_l+0x1d6>
 8009a5a:	9805      	ldr	r0, [sp, #20]
 8009a5c:	e7d3      	b.n	8009a06 <_strtod_l+0x1ee>
 8009a5e:	2908      	cmp	r1, #8
 8009a60:	f101 0101 	add.w	r1, r1, #1
 8009a64:	dc03      	bgt.n	8009a6e <_strtod_l+0x256>
 8009a66:	9b07      	ldr	r3, [sp, #28]
 8009a68:	437b      	muls	r3, r7
 8009a6a:	9307      	str	r3, [sp, #28]
 8009a6c:	e7e1      	b.n	8009a32 <_strtod_l+0x21a>
 8009a6e:	2910      	cmp	r1, #16
 8009a70:	bfd8      	it	le
 8009a72:	437d      	mulle	r5, r7
 8009a74:	e7dd      	b.n	8009a32 <_strtod_l+0x21a>
 8009a76:	2c10      	cmp	r4, #16
 8009a78:	bfdc      	itt	le
 8009a7a:	210a      	movle	r1, #10
 8009a7c:	fb01 e505 	mlale	r5, r1, r5, lr
 8009a80:	e7e4      	b.n	8009a4c <_strtod_l+0x234>
 8009a82:	2301      	movs	r3, #1
 8009a84:	9304      	str	r3, [sp, #16]
 8009a86:	e781      	b.n	800998c <_strtod_l+0x174>
 8009a88:	f04f 0c01 	mov.w	ip, #1
 8009a8c:	1cb3      	adds	r3, r6, #2
 8009a8e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009a90:	78b3      	ldrb	r3, [r6, #2]
 8009a92:	e78a      	b.n	80099aa <_strtod_l+0x192>
 8009a94:	f04f 0c00 	mov.w	ip, #0
 8009a98:	e7f8      	b.n	8009a8c <_strtod_l+0x274>
 8009a9a:	bf00      	nop
 8009a9c:	0800b944 	.word	0x0800b944
 8009aa0:	7ff00000 	.word	0x7ff00000
 8009aa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009aa6:	1c5f      	adds	r7, r3, #1
 8009aa8:	971b      	str	r7, [sp, #108]	; 0x6c
 8009aaa:	785b      	ldrb	r3, [r3, #1]
 8009aac:	2b30      	cmp	r3, #48	; 0x30
 8009aae:	d0f9      	beq.n	8009aa4 <_strtod_l+0x28c>
 8009ab0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8009ab4:	2f08      	cmp	r7, #8
 8009ab6:	f63f af7d 	bhi.w	80099b4 <_strtod_l+0x19c>
 8009aba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009abe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ac0:	930a      	str	r3, [sp, #40]	; 0x28
 8009ac2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ac4:	1c5f      	adds	r7, r3, #1
 8009ac6:	971b      	str	r7, [sp, #108]	; 0x6c
 8009ac8:	785b      	ldrb	r3, [r3, #1]
 8009aca:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8009ace:	f1b8 0f09 	cmp.w	r8, #9
 8009ad2:	d937      	bls.n	8009b44 <_strtod_l+0x32c>
 8009ad4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009ad6:	1a7f      	subs	r7, r7, r1
 8009ad8:	2f08      	cmp	r7, #8
 8009ada:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009ade:	dc37      	bgt.n	8009b50 <_strtod_l+0x338>
 8009ae0:	45be      	cmp	lr, r7
 8009ae2:	bfa8      	it	ge
 8009ae4:	46be      	movge	lr, r7
 8009ae6:	f1bc 0f00 	cmp.w	ip, #0
 8009aea:	d001      	beq.n	8009af0 <_strtod_l+0x2d8>
 8009aec:	f1ce 0e00 	rsb	lr, lr, #0
 8009af0:	2c00      	cmp	r4, #0
 8009af2:	d151      	bne.n	8009b98 <_strtod_l+0x380>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	f47f aece 	bne.w	8009896 <_strtod_l+0x7e>
 8009afa:	9a06      	ldr	r2, [sp, #24]
 8009afc:	2a00      	cmp	r2, #0
 8009afe:	f47f aeca 	bne.w	8009896 <_strtod_l+0x7e>
 8009b02:	9a04      	ldr	r2, [sp, #16]
 8009b04:	2a00      	cmp	r2, #0
 8009b06:	f47f aee4 	bne.w	80098d2 <_strtod_l+0xba>
 8009b0a:	2b4e      	cmp	r3, #78	; 0x4e
 8009b0c:	d027      	beq.n	8009b5e <_strtod_l+0x346>
 8009b0e:	dc21      	bgt.n	8009b54 <_strtod_l+0x33c>
 8009b10:	2b49      	cmp	r3, #73	; 0x49
 8009b12:	f47f aede 	bne.w	80098d2 <_strtod_l+0xba>
 8009b16:	49a0      	ldr	r1, [pc, #640]	; (8009d98 <_strtod_l+0x580>)
 8009b18:	a81b      	add	r0, sp, #108	; 0x6c
 8009b1a:	f000 ffd7 	bl	800aacc <__match>
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	f43f aed7 	beq.w	80098d2 <_strtod_l+0xba>
 8009b24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009b26:	499d      	ldr	r1, [pc, #628]	; (8009d9c <_strtod_l+0x584>)
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	a81b      	add	r0, sp, #108	; 0x6c
 8009b2c:	931b      	str	r3, [sp, #108]	; 0x6c
 8009b2e:	f000 ffcd 	bl	800aacc <__match>
 8009b32:	b910      	cbnz	r0, 8009b3a <_strtod_l+0x322>
 8009b34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009b36:	3301      	adds	r3, #1
 8009b38:	931b      	str	r3, [sp, #108]	; 0x6c
 8009b3a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8009db0 <_strtod_l+0x598>
 8009b3e:	f04f 0a00 	mov.w	sl, #0
 8009b42:	e6a8      	b.n	8009896 <_strtod_l+0x7e>
 8009b44:	210a      	movs	r1, #10
 8009b46:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009b4a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009b4e:	e7b8      	b.n	8009ac2 <_strtod_l+0x2aa>
 8009b50:	46be      	mov	lr, r7
 8009b52:	e7c8      	b.n	8009ae6 <_strtod_l+0x2ce>
 8009b54:	2b69      	cmp	r3, #105	; 0x69
 8009b56:	d0de      	beq.n	8009b16 <_strtod_l+0x2fe>
 8009b58:	2b6e      	cmp	r3, #110	; 0x6e
 8009b5a:	f47f aeba 	bne.w	80098d2 <_strtod_l+0xba>
 8009b5e:	4990      	ldr	r1, [pc, #576]	; (8009da0 <_strtod_l+0x588>)
 8009b60:	a81b      	add	r0, sp, #108	; 0x6c
 8009b62:	f000 ffb3 	bl	800aacc <__match>
 8009b66:	2800      	cmp	r0, #0
 8009b68:	f43f aeb3 	beq.w	80098d2 <_strtod_l+0xba>
 8009b6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	2b28      	cmp	r3, #40	; 0x28
 8009b72:	d10e      	bne.n	8009b92 <_strtod_l+0x37a>
 8009b74:	aa1e      	add	r2, sp, #120	; 0x78
 8009b76:	498b      	ldr	r1, [pc, #556]	; (8009da4 <_strtod_l+0x58c>)
 8009b78:	a81b      	add	r0, sp, #108	; 0x6c
 8009b7a:	f000 ffbb 	bl	800aaf4 <__hexnan>
 8009b7e:	2805      	cmp	r0, #5
 8009b80:	d107      	bne.n	8009b92 <_strtod_l+0x37a>
 8009b82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009b84:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8009b88:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009b8c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009b90:	e681      	b.n	8009896 <_strtod_l+0x7e>
 8009b92:	f8df b224 	ldr.w	fp, [pc, #548]	; 8009db8 <_strtod_l+0x5a0>
 8009b96:	e7d2      	b.n	8009b3e <_strtod_l+0x326>
 8009b98:	ebae 0302 	sub.w	r3, lr, r2
 8009b9c:	9306      	str	r3, [sp, #24]
 8009b9e:	9b05      	ldr	r3, [sp, #20]
 8009ba0:	9807      	ldr	r0, [sp, #28]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	bf08      	it	eq
 8009ba6:	4623      	moveq	r3, r4
 8009ba8:	2c10      	cmp	r4, #16
 8009baa:	9305      	str	r3, [sp, #20]
 8009bac:	46a0      	mov	r8, r4
 8009bae:	bfa8      	it	ge
 8009bb0:	f04f 0810 	movge.w	r8, #16
 8009bb4:	f7f6 fc64 	bl	8000480 <__aeabi_ui2d>
 8009bb8:	2c09      	cmp	r4, #9
 8009bba:	4682      	mov	sl, r0
 8009bbc:	468b      	mov	fp, r1
 8009bbe:	dc13      	bgt.n	8009be8 <_strtod_l+0x3d0>
 8009bc0:	9b06      	ldr	r3, [sp, #24]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f43f ae67 	beq.w	8009896 <_strtod_l+0x7e>
 8009bc8:	9b06      	ldr	r3, [sp, #24]
 8009bca:	dd7a      	ble.n	8009cc2 <_strtod_l+0x4aa>
 8009bcc:	2b16      	cmp	r3, #22
 8009bce:	dc61      	bgt.n	8009c94 <_strtod_l+0x47c>
 8009bd0:	4a75      	ldr	r2, [pc, #468]	; (8009da8 <_strtod_l+0x590>)
 8009bd2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8009bd6:	e9de 0100 	ldrd	r0, r1, [lr]
 8009bda:	4652      	mov	r2, sl
 8009bdc:	465b      	mov	r3, fp
 8009bde:	f7f6 fcc9 	bl	8000574 <__aeabi_dmul>
 8009be2:	4682      	mov	sl, r0
 8009be4:	468b      	mov	fp, r1
 8009be6:	e656      	b.n	8009896 <_strtod_l+0x7e>
 8009be8:	4b6f      	ldr	r3, [pc, #444]	; (8009da8 <_strtod_l+0x590>)
 8009bea:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009bee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009bf2:	f7f6 fcbf 	bl	8000574 <__aeabi_dmul>
 8009bf6:	4606      	mov	r6, r0
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	460f      	mov	r7, r1
 8009bfc:	f7f6 fc40 	bl	8000480 <__aeabi_ui2d>
 8009c00:	4602      	mov	r2, r0
 8009c02:	460b      	mov	r3, r1
 8009c04:	4630      	mov	r0, r6
 8009c06:	4639      	mov	r1, r7
 8009c08:	f7f6 fafe 	bl	8000208 <__adddf3>
 8009c0c:	2c0f      	cmp	r4, #15
 8009c0e:	4682      	mov	sl, r0
 8009c10:	468b      	mov	fp, r1
 8009c12:	ddd5      	ble.n	8009bc0 <_strtod_l+0x3a8>
 8009c14:	9b06      	ldr	r3, [sp, #24]
 8009c16:	eba4 0808 	sub.w	r8, r4, r8
 8009c1a:	4498      	add	r8, r3
 8009c1c:	f1b8 0f00 	cmp.w	r8, #0
 8009c20:	f340 8096 	ble.w	8009d50 <_strtod_l+0x538>
 8009c24:	f018 030f 	ands.w	r3, r8, #15
 8009c28:	d00a      	beq.n	8009c40 <_strtod_l+0x428>
 8009c2a:	495f      	ldr	r1, [pc, #380]	; (8009da8 <_strtod_l+0x590>)
 8009c2c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c30:	4652      	mov	r2, sl
 8009c32:	465b      	mov	r3, fp
 8009c34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c38:	f7f6 fc9c 	bl	8000574 <__aeabi_dmul>
 8009c3c:	4682      	mov	sl, r0
 8009c3e:	468b      	mov	fp, r1
 8009c40:	f038 080f 	bics.w	r8, r8, #15
 8009c44:	d073      	beq.n	8009d2e <_strtod_l+0x516>
 8009c46:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009c4a:	dd47      	ble.n	8009cdc <_strtod_l+0x4c4>
 8009c4c:	2400      	movs	r4, #0
 8009c4e:	46a0      	mov	r8, r4
 8009c50:	9407      	str	r4, [sp, #28]
 8009c52:	9405      	str	r4, [sp, #20]
 8009c54:	2322      	movs	r3, #34	; 0x22
 8009c56:	f8df b158 	ldr.w	fp, [pc, #344]	; 8009db0 <_strtod_l+0x598>
 8009c5a:	f8c9 3000 	str.w	r3, [r9]
 8009c5e:	f04f 0a00 	mov.w	sl, #0
 8009c62:	9b07      	ldr	r3, [sp, #28]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	f43f ae16 	beq.w	8009896 <_strtod_l+0x7e>
 8009c6a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009c6c:	4648      	mov	r0, r9
 8009c6e:	f001 f827 	bl	800acc0 <_Bfree>
 8009c72:	9905      	ldr	r1, [sp, #20]
 8009c74:	4648      	mov	r0, r9
 8009c76:	f001 f823 	bl	800acc0 <_Bfree>
 8009c7a:	4641      	mov	r1, r8
 8009c7c:	4648      	mov	r0, r9
 8009c7e:	f001 f81f 	bl	800acc0 <_Bfree>
 8009c82:	9907      	ldr	r1, [sp, #28]
 8009c84:	4648      	mov	r0, r9
 8009c86:	f001 f81b 	bl	800acc0 <_Bfree>
 8009c8a:	4621      	mov	r1, r4
 8009c8c:	4648      	mov	r0, r9
 8009c8e:	f001 f817 	bl	800acc0 <_Bfree>
 8009c92:	e600      	b.n	8009896 <_strtod_l+0x7e>
 8009c94:	9a06      	ldr	r2, [sp, #24]
 8009c96:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	dbba      	blt.n	8009c14 <_strtod_l+0x3fc>
 8009c9e:	4d42      	ldr	r5, [pc, #264]	; (8009da8 <_strtod_l+0x590>)
 8009ca0:	f1c4 040f 	rsb	r4, r4, #15
 8009ca4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009ca8:	4652      	mov	r2, sl
 8009caa:	465b      	mov	r3, fp
 8009cac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cb0:	f7f6 fc60 	bl	8000574 <__aeabi_dmul>
 8009cb4:	9b06      	ldr	r3, [sp, #24]
 8009cb6:	1b1c      	subs	r4, r3, r4
 8009cb8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009cbc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009cc0:	e78d      	b.n	8009bde <_strtod_l+0x3c6>
 8009cc2:	f113 0f16 	cmn.w	r3, #22
 8009cc6:	dba5      	blt.n	8009c14 <_strtod_l+0x3fc>
 8009cc8:	4a37      	ldr	r2, [pc, #220]	; (8009da8 <_strtod_l+0x590>)
 8009cca:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8009cce:	e9d2 2300 	ldrd	r2, r3, [r2]
 8009cd2:	4650      	mov	r0, sl
 8009cd4:	4659      	mov	r1, fp
 8009cd6:	f7f6 fd77 	bl	80007c8 <__aeabi_ddiv>
 8009cda:	e782      	b.n	8009be2 <_strtod_l+0x3ca>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	4e33      	ldr	r6, [pc, #204]	; (8009dac <_strtod_l+0x594>)
 8009ce0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009ce4:	4650      	mov	r0, sl
 8009ce6:	4659      	mov	r1, fp
 8009ce8:	461d      	mov	r5, r3
 8009cea:	f1b8 0f01 	cmp.w	r8, #1
 8009cee:	dc21      	bgt.n	8009d34 <_strtod_l+0x51c>
 8009cf0:	b10b      	cbz	r3, 8009cf6 <_strtod_l+0x4de>
 8009cf2:	4682      	mov	sl, r0
 8009cf4:	468b      	mov	fp, r1
 8009cf6:	4b2d      	ldr	r3, [pc, #180]	; (8009dac <_strtod_l+0x594>)
 8009cf8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009cfc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009d00:	4652      	mov	r2, sl
 8009d02:	465b      	mov	r3, fp
 8009d04:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009d08:	f7f6 fc34 	bl	8000574 <__aeabi_dmul>
 8009d0c:	4b28      	ldr	r3, [pc, #160]	; (8009db0 <_strtod_l+0x598>)
 8009d0e:	460a      	mov	r2, r1
 8009d10:	400b      	ands	r3, r1
 8009d12:	4928      	ldr	r1, [pc, #160]	; (8009db4 <_strtod_l+0x59c>)
 8009d14:	428b      	cmp	r3, r1
 8009d16:	4682      	mov	sl, r0
 8009d18:	d898      	bhi.n	8009c4c <_strtod_l+0x434>
 8009d1a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009d1e:	428b      	cmp	r3, r1
 8009d20:	bf86      	itte	hi
 8009d22:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009dbc <_strtod_l+0x5a4>
 8009d26:	f04f 3aff 	movhi.w	sl, #4294967295
 8009d2a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009d2e:	2300      	movs	r3, #0
 8009d30:	9304      	str	r3, [sp, #16]
 8009d32:	e077      	b.n	8009e24 <_strtod_l+0x60c>
 8009d34:	f018 0f01 	tst.w	r8, #1
 8009d38:	d006      	beq.n	8009d48 <_strtod_l+0x530>
 8009d3a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8009d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d42:	f7f6 fc17 	bl	8000574 <__aeabi_dmul>
 8009d46:	2301      	movs	r3, #1
 8009d48:	3501      	adds	r5, #1
 8009d4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009d4e:	e7cc      	b.n	8009cea <_strtod_l+0x4d2>
 8009d50:	d0ed      	beq.n	8009d2e <_strtod_l+0x516>
 8009d52:	f1c8 0800 	rsb	r8, r8, #0
 8009d56:	f018 020f 	ands.w	r2, r8, #15
 8009d5a:	d00a      	beq.n	8009d72 <_strtod_l+0x55a>
 8009d5c:	4b12      	ldr	r3, [pc, #72]	; (8009da8 <_strtod_l+0x590>)
 8009d5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d62:	4650      	mov	r0, sl
 8009d64:	4659      	mov	r1, fp
 8009d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6a:	f7f6 fd2d 	bl	80007c8 <__aeabi_ddiv>
 8009d6e:	4682      	mov	sl, r0
 8009d70:	468b      	mov	fp, r1
 8009d72:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009d76:	d0da      	beq.n	8009d2e <_strtod_l+0x516>
 8009d78:	f1b8 0f1f 	cmp.w	r8, #31
 8009d7c:	dd20      	ble.n	8009dc0 <_strtod_l+0x5a8>
 8009d7e:	2400      	movs	r4, #0
 8009d80:	46a0      	mov	r8, r4
 8009d82:	9407      	str	r4, [sp, #28]
 8009d84:	9405      	str	r4, [sp, #20]
 8009d86:	2322      	movs	r3, #34	; 0x22
 8009d88:	f04f 0a00 	mov.w	sl, #0
 8009d8c:	f04f 0b00 	mov.w	fp, #0
 8009d90:	f8c9 3000 	str.w	r3, [r9]
 8009d94:	e765      	b.n	8009c62 <_strtod_l+0x44a>
 8009d96:	bf00      	nop
 8009d98:	0800b938 	.word	0x0800b938
 8009d9c:	0800b93b 	.word	0x0800b93b
 8009da0:	0800b941 	.word	0x0800b941
 8009da4:	0800b958 	.word	0x0800b958
 8009da8:	0800b9f0 	.word	0x0800b9f0
 8009dac:	0800b9c8 	.word	0x0800b9c8
 8009db0:	7ff00000 	.word	0x7ff00000
 8009db4:	7ca00000 	.word	0x7ca00000
 8009db8:	fff80000 	.word	0xfff80000
 8009dbc:	7fefffff 	.word	0x7fefffff
 8009dc0:	f018 0310 	ands.w	r3, r8, #16
 8009dc4:	bf18      	it	ne
 8009dc6:	236a      	movne	r3, #106	; 0x6a
 8009dc8:	4da0      	ldr	r5, [pc, #640]	; (800a04c <_strtod_l+0x834>)
 8009dca:	9304      	str	r3, [sp, #16]
 8009dcc:	4650      	mov	r0, sl
 8009dce:	4659      	mov	r1, fp
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	f1b8 0f00 	cmp.w	r8, #0
 8009dd6:	f300 810a 	bgt.w	8009fee <_strtod_l+0x7d6>
 8009dda:	b10b      	cbz	r3, 8009de0 <_strtod_l+0x5c8>
 8009ddc:	4682      	mov	sl, r0
 8009dde:	468b      	mov	fp, r1
 8009de0:	9b04      	ldr	r3, [sp, #16]
 8009de2:	b1bb      	cbz	r3, 8009e14 <_strtod_l+0x5fc>
 8009de4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009de8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	4659      	mov	r1, fp
 8009df0:	dd10      	ble.n	8009e14 <_strtod_l+0x5fc>
 8009df2:	2b1f      	cmp	r3, #31
 8009df4:	f340 8107 	ble.w	800a006 <_strtod_l+0x7ee>
 8009df8:	2b34      	cmp	r3, #52	; 0x34
 8009dfa:	bfde      	ittt	le
 8009dfc:	3b20      	suble	r3, #32
 8009dfe:	f04f 32ff 	movle.w	r2, #4294967295
 8009e02:	fa02 f303 	lslle.w	r3, r2, r3
 8009e06:	f04f 0a00 	mov.w	sl, #0
 8009e0a:	bfcc      	ite	gt
 8009e0c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009e10:	ea03 0b01 	andle.w	fp, r3, r1
 8009e14:	2200      	movs	r2, #0
 8009e16:	2300      	movs	r3, #0
 8009e18:	4650      	mov	r0, sl
 8009e1a:	4659      	mov	r1, fp
 8009e1c:	f7f6 fe12 	bl	8000a44 <__aeabi_dcmpeq>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	d1ac      	bne.n	8009d7e <_strtod_l+0x566>
 8009e24:	9b07      	ldr	r3, [sp, #28]
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	9a05      	ldr	r2, [sp, #20]
 8009e2a:	9908      	ldr	r1, [sp, #32]
 8009e2c:	4623      	mov	r3, r4
 8009e2e:	4648      	mov	r0, r9
 8009e30:	f000 ff98 	bl	800ad64 <__s2b>
 8009e34:	9007      	str	r0, [sp, #28]
 8009e36:	2800      	cmp	r0, #0
 8009e38:	f43f af08 	beq.w	8009c4c <_strtod_l+0x434>
 8009e3c:	9a06      	ldr	r2, [sp, #24]
 8009e3e:	9b06      	ldr	r3, [sp, #24]
 8009e40:	2a00      	cmp	r2, #0
 8009e42:	f1c3 0300 	rsb	r3, r3, #0
 8009e46:	bfa8      	it	ge
 8009e48:	2300      	movge	r3, #0
 8009e4a:	930e      	str	r3, [sp, #56]	; 0x38
 8009e4c:	2400      	movs	r4, #0
 8009e4e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009e52:	9316      	str	r3, [sp, #88]	; 0x58
 8009e54:	46a0      	mov	r8, r4
 8009e56:	9b07      	ldr	r3, [sp, #28]
 8009e58:	4648      	mov	r0, r9
 8009e5a:	6859      	ldr	r1, [r3, #4]
 8009e5c:	f000 fefc 	bl	800ac58 <_Balloc>
 8009e60:	9005      	str	r0, [sp, #20]
 8009e62:	2800      	cmp	r0, #0
 8009e64:	f43f aef6 	beq.w	8009c54 <_strtod_l+0x43c>
 8009e68:	9b07      	ldr	r3, [sp, #28]
 8009e6a:	691a      	ldr	r2, [r3, #16]
 8009e6c:	3202      	adds	r2, #2
 8009e6e:	f103 010c 	add.w	r1, r3, #12
 8009e72:	0092      	lsls	r2, r2, #2
 8009e74:	300c      	adds	r0, #12
 8009e76:	f000 fee4 	bl	800ac42 <memcpy>
 8009e7a:	aa1e      	add	r2, sp, #120	; 0x78
 8009e7c:	a91d      	add	r1, sp, #116	; 0x74
 8009e7e:	ec4b ab10 	vmov	d0, sl, fp
 8009e82:	4648      	mov	r0, r9
 8009e84:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009e88:	f001 fa28 	bl	800b2dc <__d2b>
 8009e8c:	901c      	str	r0, [sp, #112]	; 0x70
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	f43f aee0 	beq.w	8009c54 <_strtod_l+0x43c>
 8009e94:	2101      	movs	r1, #1
 8009e96:	4648      	mov	r0, r9
 8009e98:	f000 fff0 	bl	800ae7c <__i2b>
 8009e9c:	4680      	mov	r8, r0
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	f43f aed8 	beq.w	8009c54 <_strtod_l+0x43c>
 8009ea4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009ea6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009ea8:	2e00      	cmp	r6, #0
 8009eaa:	bfab      	itete	ge
 8009eac:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009eae:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009eb0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009eb2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8009eb4:	bfac      	ite	ge
 8009eb6:	18f7      	addge	r7, r6, r3
 8009eb8:	1b9d      	sublt	r5, r3, r6
 8009eba:	9b04      	ldr	r3, [sp, #16]
 8009ebc:	1af6      	subs	r6, r6, r3
 8009ebe:	4416      	add	r6, r2
 8009ec0:	4b63      	ldr	r3, [pc, #396]	; (800a050 <_strtod_l+0x838>)
 8009ec2:	3e01      	subs	r6, #1
 8009ec4:	429e      	cmp	r6, r3
 8009ec6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009eca:	f280 80af 	bge.w	800a02c <_strtod_l+0x814>
 8009ece:	1b9b      	subs	r3, r3, r6
 8009ed0:	2b1f      	cmp	r3, #31
 8009ed2:	eba2 0203 	sub.w	r2, r2, r3
 8009ed6:	f04f 0101 	mov.w	r1, #1
 8009eda:	f300 809b 	bgt.w	800a014 <_strtod_l+0x7fc>
 8009ede:	fa01 f303 	lsl.w	r3, r1, r3
 8009ee2:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ee8:	18be      	adds	r6, r7, r2
 8009eea:	9b04      	ldr	r3, [sp, #16]
 8009eec:	42b7      	cmp	r7, r6
 8009eee:	4415      	add	r5, r2
 8009ef0:	441d      	add	r5, r3
 8009ef2:	463b      	mov	r3, r7
 8009ef4:	bfa8      	it	ge
 8009ef6:	4633      	movge	r3, r6
 8009ef8:	42ab      	cmp	r3, r5
 8009efa:	bfa8      	it	ge
 8009efc:	462b      	movge	r3, r5
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	bfc2      	ittt	gt
 8009f02:	1af6      	subgt	r6, r6, r3
 8009f04:	1aed      	subgt	r5, r5, r3
 8009f06:	1aff      	subgt	r7, r7, r3
 8009f08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f0a:	b1bb      	cbz	r3, 8009f3c <_strtod_l+0x724>
 8009f0c:	4641      	mov	r1, r8
 8009f0e:	461a      	mov	r2, r3
 8009f10:	4648      	mov	r0, r9
 8009f12:	f001 f853 	bl	800afbc <__pow5mult>
 8009f16:	4680      	mov	r8, r0
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	f43f ae9b 	beq.w	8009c54 <_strtod_l+0x43c>
 8009f1e:	4601      	mov	r1, r0
 8009f20:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009f22:	4648      	mov	r0, r9
 8009f24:	f000 ffb3 	bl	800ae8e <__multiply>
 8009f28:	900c      	str	r0, [sp, #48]	; 0x30
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	f43f ae92 	beq.w	8009c54 <_strtod_l+0x43c>
 8009f30:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009f32:	4648      	mov	r0, r9
 8009f34:	f000 fec4 	bl	800acc0 <_Bfree>
 8009f38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f3a:	931c      	str	r3, [sp, #112]	; 0x70
 8009f3c:	2e00      	cmp	r6, #0
 8009f3e:	dc7a      	bgt.n	800a036 <_strtod_l+0x81e>
 8009f40:	9b06      	ldr	r3, [sp, #24]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	dd08      	ble.n	8009f58 <_strtod_l+0x740>
 8009f46:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009f48:	9905      	ldr	r1, [sp, #20]
 8009f4a:	4648      	mov	r0, r9
 8009f4c:	f001 f836 	bl	800afbc <__pow5mult>
 8009f50:	9005      	str	r0, [sp, #20]
 8009f52:	2800      	cmp	r0, #0
 8009f54:	f43f ae7e 	beq.w	8009c54 <_strtod_l+0x43c>
 8009f58:	2d00      	cmp	r5, #0
 8009f5a:	dd08      	ble.n	8009f6e <_strtod_l+0x756>
 8009f5c:	462a      	mov	r2, r5
 8009f5e:	9905      	ldr	r1, [sp, #20]
 8009f60:	4648      	mov	r0, r9
 8009f62:	f001 f879 	bl	800b058 <__lshift>
 8009f66:	9005      	str	r0, [sp, #20]
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	f43f ae73 	beq.w	8009c54 <_strtod_l+0x43c>
 8009f6e:	2f00      	cmp	r7, #0
 8009f70:	dd08      	ble.n	8009f84 <_strtod_l+0x76c>
 8009f72:	4641      	mov	r1, r8
 8009f74:	463a      	mov	r2, r7
 8009f76:	4648      	mov	r0, r9
 8009f78:	f001 f86e 	bl	800b058 <__lshift>
 8009f7c:	4680      	mov	r8, r0
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	f43f ae68 	beq.w	8009c54 <_strtod_l+0x43c>
 8009f84:	9a05      	ldr	r2, [sp, #20]
 8009f86:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009f88:	4648      	mov	r0, r9
 8009f8a:	f001 f8d3 	bl	800b134 <__mdiff>
 8009f8e:	4604      	mov	r4, r0
 8009f90:	2800      	cmp	r0, #0
 8009f92:	f43f ae5f 	beq.w	8009c54 <_strtod_l+0x43c>
 8009f96:	68c3      	ldr	r3, [r0, #12]
 8009f98:	930c      	str	r3, [sp, #48]	; 0x30
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	60c3      	str	r3, [r0, #12]
 8009f9e:	4641      	mov	r1, r8
 8009fa0:	f001 f8ae 	bl	800b100 <__mcmp>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	da55      	bge.n	800a054 <_strtod_l+0x83c>
 8009fa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009faa:	b9e3      	cbnz	r3, 8009fe6 <_strtod_l+0x7ce>
 8009fac:	f1ba 0f00 	cmp.w	sl, #0
 8009fb0:	d119      	bne.n	8009fe6 <_strtod_l+0x7ce>
 8009fb2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fb6:	b9b3      	cbnz	r3, 8009fe6 <_strtod_l+0x7ce>
 8009fb8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009fbc:	0d1b      	lsrs	r3, r3, #20
 8009fbe:	051b      	lsls	r3, r3, #20
 8009fc0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009fc4:	d90f      	bls.n	8009fe6 <_strtod_l+0x7ce>
 8009fc6:	6963      	ldr	r3, [r4, #20]
 8009fc8:	b913      	cbnz	r3, 8009fd0 <_strtod_l+0x7b8>
 8009fca:	6923      	ldr	r3, [r4, #16]
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	dd0a      	ble.n	8009fe6 <_strtod_l+0x7ce>
 8009fd0:	4621      	mov	r1, r4
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	4648      	mov	r0, r9
 8009fd6:	f001 f83f 	bl	800b058 <__lshift>
 8009fda:	4641      	mov	r1, r8
 8009fdc:	4604      	mov	r4, r0
 8009fde:	f001 f88f 	bl	800b100 <__mcmp>
 8009fe2:	2800      	cmp	r0, #0
 8009fe4:	dc67      	bgt.n	800a0b6 <_strtod_l+0x89e>
 8009fe6:	9b04      	ldr	r3, [sp, #16]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d171      	bne.n	800a0d0 <_strtod_l+0x8b8>
 8009fec:	e63d      	b.n	8009c6a <_strtod_l+0x452>
 8009fee:	f018 0f01 	tst.w	r8, #1
 8009ff2:	d004      	beq.n	8009ffe <_strtod_l+0x7e6>
 8009ff4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009ff8:	f7f6 fabc 	bl	8000574 <__aeabi_dmul>
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a002:	3508      	adds	r5, #8
 800a004:	e6e5      	b.n	8009dd2 <_strtod_l+0x5ba>
 800a006:	f04f 32ff 	mov.w	r2, #4294967295
 800a00a:	fa02 f303 	lsl.w	r3, r2, r3
 800a00e:	ea03 0a0a 	and.w	sl, r3, sl
 800a012:	e6ff      	b.n	8009e14 <_strtod_l+0x5fc>
 800a014:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a018:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a01c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a020:	36e2      	adds	r6, #226	; 0xe2
 800a022:	fa01 f306 	lsl.w	r3, r1, r6
 800a026:	930a      	str	r3, [sp, #40]	; 0x28
 800a028:	910f      	str	r1, [sp, #60]	; 0x3c
 800a02a:	e75d      	b.n	8009ee8 <_strtod_l+0x6d0>
 800a02c:	2300      	movs	r3, #0
 800a02e:	930a      	str	r3, [sp, #40]	; 0x28
 800a030:	2301      	movs	r3, #1
 800a032:	930f      	str	r3, [sp, #60]	; 0x3c
 800a034:	e758      	b.n	8009ee8 <_strtod_l+0x6d0>
 800a036:	4632      	mov	r2, r6
 800a038:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a03a:	4648      	mov	r0, r9
 800a03c:	f001 f80c 	bl	800b058 <__lshift>
 800a040:	901c      	str	r0, [sp, #112]	; 0x70
 800a042:	2800      	cmp	r0, #0
 800a044:	f47f af7c 	bne.w	8009f40 <_strtod_l+0x728>
 800a048:	e604      	b.n	8009c54 <_strtod_l+0x43c>
 800a04a:	bf00      	nop
 800a04c:	0800b970 	.word	0x0800b970
 800a050:	fffffc02 	.word	0xfffffc02
 800a054:	465d      	mov	r5, fp
 800a056:	f040 8086 	bne.w	800a166 <_strtod_l+0x94e>
 800a05a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a05c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a060:	b32a      	cbz	r2, 800a0ae <_strtod_l+0x896>
 800a062:	4aaf      	ldr	r2, [pc, #700]	; (800a320 <_strtod_l+0xb08>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d153      	bne.n	800a110 <_strtod_l+0x8f8>
 800a068:	9b04      	ldr	r3, [sp, #16]
 800a06a:	4650      	mov	r0, sl
 800a06c:	b1d3      	cbz	r3, 800a0a4 <_strtod_l+0x88c>
 800a06e:	4aad      	ldr	r2, [pc, #692]	; (800a324 <_strtod_l+0xb0c>)
 800a070:	402a      	ands	r2, r5
 800a072:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a076:	f04f 31ff 	mov.w	r1, #4294967295
 800a07a:	d816      	bhi.n	800a0aa <_strtod_l+0x892>
 800a07c:	0d12      	lsrs	r2, r2, #20
 800a07e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a082:	fa01 f303 	lsl.w	r3, r1, r3
 800a086:	4298      	cmp	r0, r3
 800a088:	d142      	bne.n	800a110 <_strtod_l+0x8f8>
 800a08a:	4ba7      	ldr	r3, [pc, #668]	; (800a328 <_strtod_l+0xb10>)
 800a08c:	429d      	cmp	r5, r3
 800a08e:	d102      	bne.n	800a096 <_strtod_l+0x87e>
 800a090:	3001      	adds	r0, #1
 800a092:	f43f addf 	beq.w	8009c54 <_strtod_l+0x43c>
 800a096:	4ba3      	ldr	r3, [pc, #652]	; (800a324 <_strtod_l+0xb0c>)
 800a098:	402b      	ands	r3, r5
 800a09a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a09e:	f04f 0a00 	mov.w	sl, #0
 800a0a2:	e7a0      	b.n	8009fe6 <_strtod_l+0x7ce>
 800a0a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0a8:	e7ed      	b.n	800a086 <_strtod_l+0x86e>
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	e7eb      	b.n	800a086 <_strtod_l+0x86e>
 800a0ae:	bb7b      	cbnz	r3, 800a110 <_strtod_l+0x8f8>
 800a0b0:	f1ba 0f00 	cmp.w	sl, #0
 800a0b4:	d12c      	bne.n	800a110 <_strtod_l+0x8f8>
 800a0b6:	9904      	ldr	r1, [sp, #16]
 800a0b8:	4a9a      	ldr	r2, [pc, #616]	; (800a324 <_strtod_l+0xb0c>)
 800a0ba:	465b      	mov	r3, fp
 800a0bc:	b1f1      	cbz	r1, 800a0fc <_strtod_l+0x8e4>
 800a0be:	ea02 010b 	and.w	r1, r2, fp
 800a0c2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a0c6:	dc19      	bgt.n	800a0fc <_strtod_l+0x8e4>
 800a0c8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a0cc:	f77f ae5b 	ble.w	8009d86 <_strtod_l+0x56e>
 800a0d0:	4a96      	ldr	r2, [pc, #600]	; (800a32c <_strtod_l+0xb14>)
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800a0d8:	4650      	mov	r0, sl
 800a0da:	4659      	mov	r1, fp
 800a0dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a0e0:	f7f6 fa48 	bl	8000574 <__aeabi_dmul>
 800a0e4:	4682      	mov	sl, r0
 800a0e6:	468b      	mov	fp, r1
 800a0e8:	2900      	cmp	r1, #0
 800a0ea:	f47f adbe 	bne.w	8009c6a <_strtod_l+0x452>
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	f47f adbb 	bne.w	8009c6a <_strtod_l+0x452>
 800a0f4:	2322      	movs	r3, #34	; 0x22
 800a0f6:	f8c9 3000 	str.w	r3, [r9]
 800a0fa:	e5b6      	b.n	8009c6a <_strtod_l+0x452>
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a102:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a106:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a10a:	f04f 3aff 	mov.w	sl, #4294967295
 800a10e:	e76a      	b.n	8009fe6 <_strtod_l+0x7ce>
 800a110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a112:	b193      	cbz	r3, 800a13a <_strtod_l+0x922>
 800a114:	422b      	tst	r3, r5
 800a116:	f43f af66 	beq.w	8009fe6 <_strtod_l+0x7ce>
 800a11a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a11c:	9a04      	ldr	r2, [sp, #16]
 800a11e:	4650      	mov	r0, sl
 800a120:	4659      	mov	r1, fp
 800a122:	b173      	cbz	r3, 800a142 <_strtod_l+0x92a>
 800a124:	f7ff fb5c 	bl	80097e0 <sulp>
 800a128:	4602      	mov	r2, r0
 800a12a:	460b      	mov	r3, r1
 800a12c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a130:	f7f6 f86a 	bl	8000208 <__adddf3>
 800a134:	4682      	mov	sl, r0
 800a136:	468b      	mov	fp, r1
 800a138:	e755      	b.n	8009fe6 <_strtod_l+0x7ce>
 800a13a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a13c:	ea13 0f0a 	tst.w	r3, sl
 800a140:	e7e9      	b.n	800a116 <_strtod_l+0x8fe>
 800a142:	f7ff fb4d 	bl	80097e0 <sulp>
 800a146:	4602      	mov	r2, r0
 800a148:	460b      	mov	r3, r1
 800a14a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a14e:	f7f6 f859 	bl	8000204 <__aeabi_dsub>
 800a152:	2200      	movs	r2, #0
 800a154:	2300      	movs	r3, #0
 800a156:	4682      	mov	sl, r0
 800a158:	468b      	mov	fp, r1
 800a15a:	f7f6 fc73 	bl	8000a44 <__aeabi_dcmpeq>
 800a15e:	2800      	cmp	r0, #0
 800a160:	f47f ae11 	bne.w	8009d86 <_strtod_l+0x56e>
 800a164:	e73f      	b.n	8009fe6 <_strtod_l+0x7ce>
 800a166:	4641      	mov	r1, r8
 800a168:	4620      	mov	r0, r4
 800a16a:	f001 f906 	bl	800b37a <__ratio>
 800a16e:	ec57 6b10 	vmov	r6, r7, d0
 800a172:	2200      	movs	r2, #0
 800a174:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a178:	ee10 0a10 	vmov	r0, s0
 800a17c:	4639      	mov	r1, r7
 800a17e:	f7f6 fc75 	bl	8000a6c <__aeabi_dcmple>
 800a182:	2800      	cmp	r0, #0
 800a184:	d077      	beq.n	800a276 <_strtod_l+0xa5e>
 800a186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d04a      	beq.n	800a222 <_strtod_l+0xa0a>
 800a18c:	4b68      	ldr	r3, [pc, #416]	; (800a330 <_strtod_l+0xb18>)
 800a18e:	2200      	movs	r2, #0
 800a190:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a194:	4f66      	ldr	r7, [pc, #408]	; (800a330 <_strtod_l+0xb18>)
 800a196:	2600      	movs	r6, #0
 800a198:	4b62      	ldr	r3, [pc, #392]	; (800a324 <_strtod_l+0xb0c>)
 800a19a:	402b      	ands	r3, r5
 800a19c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a19e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a1a0:	4b64      	ldr	r3, [pc, #400]	; (800a334 <_strtod_l+0xb1c>)
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	f040 80ce 	bne.w	800a344 <_strtod_l+0xb2c>
 800a1a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a1ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a1b0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800a1b4:	ec4b ab10 	vmov	d0, sl, fp
 800a1b8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a1bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a1c0:	f001 f816 	bl	800b1f0 <__ulp>
 800a1c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a1c8:	ec53 2b10 	vmov	r2, r3, d0
 800a1cc:	f7f6 f9d2 	bl	8000574 <__aeabi_dmul>
 800a1d0:	4652      	mov	r2, sl
 800a1d2:	465b      	mov	r3, fp
 800a1d4:	f7f6 f818 	bl	8000208 <__adddf3>
 800a1d8:	460b      	mov	r3, r1
 800a1da:	4952      	ldr	r1, [pc, #328]	; (800a324 <_strtod_l+0xb0c>)
 800a1dc:	4a56      	ldr	r2, [pc, #344]	; (800a338 <_strtod_l+0xb20>)
 800a1de:	4019      	ands	r1, r3
 800a1e0:	4291      	cmp	r1, r2
 800a1e2:	4682      	mov	sl, r0
 800a1e4:	d95b      	bls.n	800a29e <_strtod_l+0xa86>
 800a1e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1e8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d103      	bne.n	800a1f8 <_strtod_l+0x9e0>
 800a1f0:	9b08      	ldr	r3, [sp, #32]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	f43f ad2e 	beq.w	8009c54 <_strtod_l+0x43c>
 800a1f8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800a328 <_strtod_l+0xb10>
 800a1fc:	f04f 3aff 	mov.w	sl, #4294967295
 800a200:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a202:	4648      	mov	r0, r9
 800a204:	f000 fd5c 	bl	800acc0 <_Bfree>
 800a208:	9905      	ldr	r1, [sp, #20]
 800a20a:	4648      	mov	r0, r9
 800a20c:	f000 fd58 	bl	800acc0 <_Bfree>
 800a210:	4641      	mov	r1, r8
 800a212:	4648      	mov	r0, r9
 800a214:	f000 fd54 	bl	800acc0 <_Bfree>
 800a218:	4621      	mov	r1, r4
 800a21a:	4648      	mov	r0, r9
 800a21c:	f000 fd50 	bl	800acc0 <_Bfree>
 800a220:	e619      	b.n	8009e56 <_strtod_l+0x63e>
 800a222:	f1ba 0f00 	cmp.w	sl, #0
 800a226:	d11a      	bne.n	800a25e <_strtod_l+0xa46>
 800a228:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a22c:	b9eb      	cbnz	r3, 800a26a <_strtod_l+0xa52>
 800a22e:	2200      	movs	r2, #0
 800a230:	4b3f      	ldr	r3, [pc, #252]	; (800a330 <_strtod_l+0xb18>)
 800a232:	4630      	mov	r0, r6
 800a234:	4639      	mov	r1, r7
 800a236:	f7f6 fc0f 	bl	8000a58 <__aeabi_dcmplt>
 800a23a:	b9c8      	cbnz	r0, 800a270 <_strtod_l+0xa58>
 800a23c:	4630      	mov	r0, r6
 800a23e:	4639      	mov	r1, r7
 800a240:	2200      	movs	r2, #0
 800a242:	4b3e      	ldr	r3, [pc, #248]	; (800a33c <_strtod_l+0xb24>)
 800a244:	f7f6 f996 	bl	8000574 <__aeabi_dmul>
 800a248:	4606      	mov	r6, r0
 800a24a:	460f      	mov	r7, r1
 800a24c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a250:	9618      	str	r6, [sp, #96]	; 0x60
 800a252:	9319      	str	r3, [sp, #100]	; 0x64
 800a254:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a258:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a25c:	e79c      	b.n	800a198 <_strtod_l+0x980>
 800a25e:	f1ba 0f01 	cmp.w	sl, #1
 800a262:	d102      	bne.n	800a26a <_strtod_l+0xa52>
 800a264:	2d00      	cmp	r5, #0
 800a266:	f43f ad8e 	beq.w	8009d86 <_strtod_l+0x56e>
 800a26a:	2200      	movs	r2, #0
 800a26c:	4b34      	ldr	r3, [pc, #208]	; (800a340 <_strtod_l+0xb28>)
 800a26e:	e78f      	b.n	800a190 <_strtod_l+0x978>
 800a270:	2600      	movs	r6, #0
 800a272:	4f32      	ldr	r7, [pc, #200]	; (800a33c <_strtod_l+0xb24>)
 800a274:	e7ea      	b.n	800a24c <_strtod_l+0xa34>
 800a276:	4b31      	ldr	r3, [pc, #196]	; (800a33c <_strtod_l+0xb24>)
 800a278:	4630      	mov	r0, r6
 800a27a:	4639      	mov	r1, r7
 800a27c:	2200      	movs	r2, #0
 800a27e:	f7f6 f979 	bl	8000574 <__aeabi_dmul>
 800a282:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a284:	4606      	mov	r6, r0
 800a286:	460f      	mov	r7, r1
 800a288:	b933      	cbnz	r3, 800a298 <_strtod_l+0xa80>
 800a28a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a28e:	9010      	str	r0, [sp, #64]	; 0x40
 800a290:	9311      	str	r3, [sp, #68]	; 0x44
 800a292:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a296:	e7df      	b.n	800a258 <_strtod_l+0xa40>
 800a298:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a29c:	e7f9      	b.n	800a292 <_strtod_l+0xa7a>
 800a29e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a2a2:	9b04      	ldr	r3, [sp, #16]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d1ab      	bne.n	800a200 <_strtod_l+0x9e8>
 800a2a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a2ac:	0d1b      	lsrs	r3, r3, #20
 800a2ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a2b0:	051b      	lsls	r3, r3, #20
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	465d      	mov	r5, fp
 800a2b6:	d1a3      	bne.n	800a200 <_strtod_l+0x9e8>
 800a2b8:	4639      	mov	r1, r7
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	f7f6 fbf4 	bl	8000aa8 <__aeabi_d2iz>
 800a2c0:	f7f6 f8ee 	bl	80004a0 <__aeabi_i2d>
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	4639      	mov	r1, r7
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	f7f5 ff9a 	bl	8000204 <__aeabi_dsub>
 800a2d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2d2:	4606      	mov	r6, r0
 800a2d4:	460f      	mov	r7, r1
 800a2d6:	b933      	cbnz	r3, 800a2e6 <_strtod_l+0xace>
 800a2d8:	f1ba 0f00 	cmp.w	sl, #0
 800a2dc:	d103      	bne.n	800a2e6 <_strtod_l+0xace>
 800a2de:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800a2e2:	2d00      	cmp	r5, #0
 800a2e4:	d06d      	beq.n	800a3c2 <_strtod_l+0xbaa>
 800a2e6:	a30a      	add	r3, pc, #40	; (adr r3, 800a310 <_strtod_l+0xaf8>)
 800a2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ec:	4630      	mov	r0, r6
 800a2ee:	4639      	mov	r1, r7
 800a2f0:	f7f6 fbb2 	bl	8000a58 <__aeabi_dcmplt>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	f47f acb8 	bne.w	8009c6a <_strtod_l+0x452>
 800a2fa:	a307      	add	r3, pc, #28	; (adr r3, 800a318 <_strtod_l+0xb00>)
 800a2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a300:	4630      	mov	r0, r6
 800a302:	4639      	mov	r1, r7
 800a304:	f7f6 fbc6 	bl	8000a94 <__aeabi_dcmpgt>
 800a308:	2800      	cmp	r0, #0
 800a30a:	f43f af79 	beq.w	800a200 <_strtod_l+0x9e8>
 800a30e:	e4ac      	b.n	8009c6a <_strtod_l+0x452>
 800a310:	94a03595 	.word	0x94a03595
 800a314:	3fdfffff 	.word	0x3fdfffff
 800a318:	35afe535 	.word	0x35afe535
 800a31c:	3fe00000 	.word	0x3fe00000
 800a320:	000fffff 	.word	0x000fffff
 800a324:	7ff00000 	.word	0x7ff00000
 800a328:	7fefffff 	.word	0x7fefffff
 800a32c:	39500000 	.word	0x39500000
 800a330:	3ff00000 	.word	0x3ff00000
 800a334:	7fe00000 	.word	0x7fe00000
 800a338:	7c9fffff 	.word	0x7c9fffff
 800a33c:	3fe00000 	.word	0x3fe00000
 800a340:	bff00000 	.word	0xbff00000
 800a344:	9b04      	ldr	r3, [sp, #16]
 800a346:	b333      	cbz	r3, 800a396 <_strtod_l+0xb7e>
 800a348:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a34a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a34e:	d822      	bhi.n	800a396 <_strtod_l+0xb7e>
 800a350:	a327      	add	r3, pc, #156	; (adr r3, 800a3f0 <_strtod_l+0xbd8>)
 800a352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a356:	4630      	mov	r0, r6
 800a358:	4639      	mov	r1, r7
 800a35a:	f7f6 fb87 	bl	8000a6c <__aeabi_dcmple>
 800a35e:	b1a0      	cbz	r0, 800a38a <_strtod_l+0xb72>
 800a360:	4639      	mov	r1, r7
 800a362:	4630      	mov	r0, r6
 800a364:	f7f6 fbc8 	bl	8000af8 <__aeabi_d2uiz>
 800a368:	2800      	cmp	r0, #0
 800a36a:	bf08      	it	eq
 800a36c:	2001      	moveq	r0, #1
 800a36e:	f7f6 f887 	bl	8000480 <__aeabi_ui2d>
 800a372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a374:	4606      	mov	r6, r0
 800a376:	460f      	mov	r7, r1
 800a378:	bb03      	cbnz	r3, 800a3bc <_strtod_l+0xba4>
 800a37a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a37e:	9012      	str	r0, [sp, #72]	; 0x48
 800a380:	9313      	str	r3, [sp, #76]	; 0x4c
 800a382:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a386:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a38a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a38c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a38e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a392:	1a9b      	subs	r3, r3, r2
 800a394:	930b      	str	r3, [sp, #44]	; 0x2c
 800a396:	ed9d 0b08 	vldr	d0, [sp, #32]
 800a39a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800a39e:	f000 ff27 	bl	800b1f0 <__ulp>
 800a3a2:	4650      	mov	r0, sl
 800a3a4:	ec53 2b10 	vmov	r2, r3, d0
 800a3a8:	4659      	mov	r1, fp
 800a3aa:	f7f6 f8e3 	bl	8000574 <__aeabi_dmul>
 800a3ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a3b2:	f7f5 ff29 	bl	8000208 <__adddf3>
 800a3b6:	4682      	mov	sl, r0
 800a3b8:	468b      	mov	fp, r1
 800a3ba:	e772      	b.n	800a2a2 <_strtod_l+0xa8a>
 800a3bc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800a3c0:	e7df      	b.n	800a382 <_strtod_l+0xb6a>
 800a3c2:	a30d      	add	r3, pc, #52	; (adr r3, 800a3f8 <_strtod_l+0xbe0>)
 800a3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c8:	f7f6 fb46 	bl	8000a58 <__aeabi_dcmplt>
 800a3cc:	e79c      	b.n	800a308 <_strtod_l+0xaf0>
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	930d      	str	r3, [sp, #52]	; 0x34
 800a3d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a3d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a3d6:	6013      	str	r3, [r2, #0]
 800a3d8:	f7ff ba61 	b.w	800989e <_strtod_l+0x86>
 800a3dc:	2b65      	cmp	r3, #101	; 0x65
 800a3de:	f04f 0200 	mov.w	r2, #0
 800a3e2:	f43f ab4e 	beq.w	8009a82 <_strtod_l+0x26a>
 800a3e6:	2101      	movs	r1, #1
 800a3e8:	4614      	mov	r4, r2
 800a3ea:	9104      	str	r1, [sp, #16]
 800a3ec:	f7ff bacb 	b.w	8009986 <_strtod_l+0x16e>
 800a3f0:	ffc00000 	.word	0xffc00000
 800a3f4:	41dfffff 	.word	0x41dfffff
 800a3f8:	94a03595 	.word	0x94a03595
 800a3fc:	3fcfffff 	.word	0x3fcfffff

0800a400 <strtod>:
 800a400:	4b07      	ldr	r3, [pc, #28]	; (800a420 <strtod+0x20>)
 800a402:	4a08      	ldr	r2, [pc, #32]	; (800a424 <strtod+0x24>)
 800a404:	b410      	push	{r4}
 800a406:	681c      	ldr	r4, [r3, #0]
 800a408:	6a23      	ldr	r3, [r4, #32]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	bf08      	it	eq
 800a40e:	4613      	moveq	r3, r2
 800a410:	460a      	mov	r2, r1
 800a412:	4601      	mov	r1, r0
 800a414:	4620      	mov	r0, r4
 800a416:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a41a:	f7ff b9fd 	b.w	8009818 <_strtod_l>
 800a41e:	bf00      	nop
 800a420:	20000a28 	.word	0x20000a28
 800a424:	20000a8c 	.word	0x20000a8c

0800a428 <_strtol_l.isra.0>:
 800a428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a42c:	4680      	mov	r8, r0
 800a42e:	4689      	mov	r9, r1
 800a430:	4692      	mov	sl, r2
 800a432:	461e      	mov	r6, r3
 800a434:	460f      	mov	r7, r1
 800a436:	463d      	mov	r5, r7
 800a438:	9808      	ldr	r0, [sp, #32]
 800a43a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a43e:	f000 fbe9 	bl	800ac14 <__locale_ctype_ptr_l>
 800a442:	4420      	add	r0, r4
 800a444:	7843      	ldrb	r3, [r0, #1]
 800a446:	f013 0308 	ands.w	r3, r3, #8
 800a44a:	d132      	bne.n	800a4b2 <_strtol_l.isra.0+0x8a>
 800a44c:	2c2d      	cmp	r4, #45	; 0x2d
 800a44e:	d132      	bne.n	800a4b6 <_strtol_l.isra.0+0x8e>
 800a450:	787c      	ldrb	r4, [r7, #1]
 800a452:	1cbd      	adds	r5, r7, #2
 800a454:	2201      	movs	r2, #1
 800a456:	2e00      	cmp	r6, #0
 800a458:	d05d      	beq.n	800a516 <_strtol_l.isra.0+0xee>
 800a45a:	2e10      	cmp	r6, #16
 800a45c:	d109      	bne.n	800a472 <_strtol_l.isra.0+0x4a>
 800a45e:	2c30      	cmp	r4, #48	; 0x30
 800a460:	d107      	bne.n	800a472 <_strtol_l.isra.0+0x4a>
 800a462:	782b      	ldrb	r3, [r5, #0]
 800a464:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a468:	2b58      	cmp	r3, #88	; 0x58
 800a46a:	d14f      	bne.n	800a50c <_strtol_l.isra.0+0xe4>
 800a46c:	786c      	ldrb	r4, [r5, #1]
 800a46e:	2610      	movs	r6, #16
 800a470:	3502      	adds	r5, #2
 800a472:	2a00      	cmp	r2, #0
 800a474:	bf14      	ite	ne
 800a476:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a47a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a47e:	2700      	movs	r7, #0
 800a480:	fbb1 fcf6 	udiv	ip, r1, r6
 800a484:	4638      	mov	r0, r7
 800a486:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a48a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a48e:	2b09      	cmp	r3, #9
 800a490:	d817      	bhi.n	800a4c2 <_strtol_l.isra.0+0x9a>
 800a492:	461c      	mov	r4, r3
 800a494:	42a6      	cmp	r6, r4
 800a496:	dd23      	ble.n	800a4e0 <_strtol_l.isra.0+0xb8>
 800a498:	1c7b      	adds	r3, r7, #1
 800a49a:	d007      	beq.n	800a4ac <_strtol_l.isra.0+0x84>
 800a49c:	4584      	cmp	ip, r0
 800a49e:	d31c      	bcc.n	800a4da <_strtol_l.isra.0+0xb2>
 800a4a0:	d101      	bne.n	800a4a6 <_strtol_l.isra.0+0x7e>
 800a4a2:	45a6      	cmp	lr, r4
 800a4a4:	db19      	blt.n	800a4da <_strtol_l.isra.0+0xb2>
 800a4a6:	fb00 4006 	mla	r0, r0, r6, r4
 800a4aa:	2701      	movs	r7, #1
 800a4ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4b0:	e7eb      	b.n	800a48a <_strtol_l.isra.0+0x62>
 800a4b2:	462f      	mov	r7, r5
 800a4b4:	e7bf      	b.n	800a436 <_strtol_l.isra.0+0xe>
 800a4b6:	2c2b      	cmp	r4, #43	; 0x2b
 800a4b8:	bf04      	itt	eq
 800a4ba:	1cbd      	addeq	r5, r7, #2
 800a4bc:	787c      	ldrbeq	r4, [r7, #1]
 800a4be:	461a      	mov	r2, r3
 800a4c0:	e7c9      	b.n	800a456 <_strtol_l.isra.0+0x2e>
 800a4c2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a4c6:	2b19      	cmp	r3, #25
 800a4c8:	d801      	bhi.n	800a4ce <_strtol_l.isra.0+0xa6>
 800a4ca:	3c37      	subs	r4, #55	; 0x37
 800a4cc:	e7e2      	b.n	800a494 <_strtol_l.isra.0+0x6c>
 800a4ce:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a4d2:	2b19      	cmp	r3, #25
 800a4d4:	d804      	bhi.n	800a4e0 <_strtol_l.isra.0+0xb8>
 800a4d6:	3c57      	subs	r4, #87	; 0x57
 800a4d8:	e7dc      	b.n	800a494 <_strtol_l.isra.0+0x6c>
 800a4da:	f04f 37ff 	mov.w	r7, #4294967295
 800a4de:	e7e5      	b.n	800a4ac <_strtol_l.isra.0+0x84>
 800a4e0:	1c7b      	adds	r3, r7, #1
 800a4e2:	d108      	bne.n	800a4f6 <_strtol_l.isra.0+0xce>
 800a4e4:	2322      	movs	r3, #34	; 0x22
 800a4e6:	f8c8 3000 	str.w	r3, [r8]
 800a4ea:	4608      	mov	r0, r1
 800a4ec:	f1ba 0f00 	cmp.w	sl, #0
 800a4f0:	d107      	bne.n	800a502 <_strtol_l.isra.0+0xda>
 800a4f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4f6:	b102      	cbz	r2, 800a4fa <_strtol_l.isra.0+0xd2>
 800a4f8:	4240      	negs	r0, r0
 800a4fa:	f1ba 0f00 	cmp.w	sl, #0
 800a4fe:	d0f8      	beq.n	800a4f2 <_strtol_l.isra.0+0xca>
 800a500:	b10f      	cbz	r7, 800a506 <_strtol_l.isra.0+0xde>
 800a502:	f105 39ff 	add.w	r9, r5, #4294967295
 800a506:	f8ca 9000 	str.w	r9, [sl]
 800a50a:	e7f2      	b.n	800a4f2 <_strtol_l.isra.0+0xca>
 800a50c:	2430      	movs	r4, #48	; 0x30
 800a50e:	2e00      	cmp	r6, #0
 800a510:	d1af      	bne.n	800a472 <_strtol_l.isra.0+0x4a>
 800a512:	2608      	movs	r6, #8
 800a514:	e7ad      	b.n	800a472 <_strtol_l.isra.0+0x4a>
 800a516:	2c30      	cmp	r4, #48	; 0x30
 800a518:	d0a3      	beq.n	800a462 <_strtol_l.isra.0+0x3a>
 800a51a:	260a      	movs	r6, #10
 800a51c:	e7a9      	b.n	800a472 <_strtol_l.isra.0+0x4a>
	...

0800a520 <strtol>:
 800a520:	4b08      	ldr	r3, [pc, #32]	; (800a544 <strtol+0x24>)
 800a522:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a524:	681c      	ldr	r4, [r3, #0]
 800a526:	4d08      	ldr	r5, [pc, #32]	; (800a548 <strtol+0x28>)
 800a528:	6a23      	ldr	r3, [r4, #32]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	bf08      	it	eq
 800a52e:	462b      	moveq	r3, r5
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	4613      	mov	r3, r2
 800a534:	460a      	mov	r2, r1
 800a536:	4601      	mov	r1, r0
 800a538:	4620      	mov	r0, r4
 800a53a:	f7ff ff75 	bl	800a428 <_strtol_l.isra.0>
 800a53e:	b003      	add	sp, #12
 800a540:	bd30      	pop	{r4, r5, pc}
 800a542:	bf00      	nop
 800a544:	20000a28 	.word	0x20000a28
 800a548:	20000a8c 	.word	0x20000a8c

0800a54c <__utoa>:
 800a54c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a54e:	4b1d      	ldr	r3, [pc, #116]	; (800a5c4 <__utoa+0x78>)
 800a550:	b08b      	sub	sp, #44	; 0x2c
 800a552:	4605      	mov	r5, r0
 800a554:	460c      	mov	r4, r1
 800a556:	466e      	mov	r6, sp
 800a558:	f103 0c20 	add.w	ip, r3, #32
 800a55c:	6818      	ldr	r0, [r3, #0]
 800a55e:	6859      	ldr	r1, [r3, #4]
 800a560:	4637      	mov	r7, r6
 800a562:	c703      	stmia	r7!, {r0, r1}
 800a564:	3308      	adds	r3, #8
 800a566:	4563      	cmp	r3, ip
 800a568:	463e      	mov	r6, r7
 800a56a:	d1f7      	bne.n	800a55c <__utoa+0x10>
 800a56c:	6818      	ldr	r0, [r3, #0]
 800a56e:	791b      	ldrb	r3, [r3, #4]
 800a570:	713b      	strb	r3, [r7, #4]
 800a572:	1e93      	subs	r3, r2, #2
 800a574:	2b22      	cmp	r3, #34	; 0x22
 800a576:	6038      	str	r0, [r7, #0]
 800a578:	f04f 0300 	mov.w	r3, #0
 800a57c:	d904      	bls.n	800a588 <__utoa+0x3c>
 800a57e:	7023      	strb	r3, [r4, #0]
 800a580:	461c      	mov	r4, r3
 800a582:	4620      	mov	r0, r4
 800a584:	b00b      	add	sp, #44	; 0x2c
 800a586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a588:	1e66      	subs	r6, r4, #1
 800a58a:	fbb5 f0f2 	udiv	r0, r5, r2
 800a58e:	af0a      	add	r7, sp, #40	; 0x28
 800a590:	fb02 5510 	mls	r5, r2, r0, r5
 800a594:	443d      	add	r5, r7
 800a596:	1c59      	adds	r1, r3, #1
 800a598:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800a59c:	f806 5f01 	strb.w	r5, [r6, #1]!
 800a5a0:	4605      	mov	r5, r0
 800a5a2:	b968      	cbnz	r0, 800a5c0 <__utoa+0x74>
 800a5a4:	5460      	strb	r0, [r4, r1]
 800a5a6:	4423      	add	r3, r4
 800a5a8:	4622      	mov	r2, r4
 800a5aa:	1b19      	subs	r1, r3, r4
 800a5ac:	1b10      	subs	r0, r2, r4
 800a5ae:	4281      	cmp	r1, r0
 800a5b0:	dde7      	ble.n	800a582 <__utoa+0x36>
 800a5b2:	7811      	ldrb	r1, [r2, #0]
 800a5b4:	7818      	ldrb	r0, [r3, #0]
 800a5b6:	f802 0b01 	strb.w	r0, [r2], #1
 800a5ba:	f803 1901 	strb.w	r1, [r3], #-1
 800a5be:	e7f4      	b.n	800a5aa <__utoa+0x5e>
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	e7e2      	b.n	800a58a <__utoa+0x3e>
 800a5c4:	0800b998 	.word	0x0800b998

0800a5c8 <rshift>:
 800a5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5ca:	6906      	ldr	r6, [r0, #16]
 800a5cc:	114b      	asrs	r3, r1, #5
 800a5ce:	429e      	cmp	r6, r3
 800a5d0:	f100 0414 	add.w	r4, r0, #20
 800a5d4:	dd30      	ble.n	800a638 <rshift+0x70>
 800a5d6:	f011 011f 	ands.w	r1, r1, #31
 800a5da:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a5de:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a5e2:	d108      	bne.n	800a5f6 <rshift+0x2e>
 800a5e4:	4621      	mov	r1, r4
 800a5e6:	42b2      	cmp	r2, r6
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	d211      	bcs.n	800a610 <rshift+0x48>
 800a5ec:	f852 3b04 	ldr.w	r3, [r2], #4
 800a5f0:	f841 3b04 	str.w	r3, [r1], #4
 800a5f4:	e7f7      	b.n	800a5e6 <rshift+0x1e>
 800a5f6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a5fa:	f1c1 0c20 	rsb	ip, r1, #32
 800a5fe:	40cd      	lsrs	r5, r1
 800a600:	3204      	adds	r2, #4
 800a602:	4623      	mov	r3, r4
 800a604:	42b2      	cmp	r2, r6
 800a606:	4617      	mov	r7, r2
 800a608:	d30c      	bcc.n	800a624 <rshift+0x5c>
 800a60a:	601d      	str	r5, [r3, #0]
 800a60c:	b105      	cbz	r5, 800a610 <rshift+0x48>
 800a60e:	3304      	adds	r3, #4
 800a610:	1b1a      	subs	r2, r3, r4
 800a612:	42a3      	cmp	r3, r4
 800a614:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a618:	bf08      	it	eq
 800a61a:	2300      	moveq	r3, #0
 800a61c:	6102      	str	r2, [r0, #16]
 800a61e:	bf08      	it	eq
 800a620:	6143      	streq	r3, [r0, #20]
 800a622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a624:	683f      	ldr	r7, [r7, #0]
 800a626:	fa07 f70c 	lsl.w	r7, r7, ip
 800a62a:	433d      	orrs	r5, r7
 800a62c:	f843 5b04 	str.w	r5, [r3], #4
 800a630:	f852 5b04 	ldr.w	r5, [r2], #4
 800a634:	40cd      	lsrs	r5, r1
 800a636:	e7e5      	b.n	800a604 <rshift+0x3c>
 800a638:	4623      	mov	r3, r4
 800a63a:	e7e9      	b.n	800a610 <rshift+0x48>

0800a63c <__hexdig_fun>:
 800a63c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a640:	2b09      	cmp	r3, #9
 800a642:	d802      	bhi.n	800a64a <__hexdig_fun+0xe>
 800a644:	3820      	subs	r0, #32
 800a646:	b2c0      	uxtb	r0, r0
 800a648:	4770      	bx	lr
 800a64a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a64e:	2b05      	cmp	r3, #5
 800a650:	d801      	bhi.n	800a656 <__hexdig_fun+0x1a>
 800a652:	3847      	subs	r0, #71	; 0x47
 800a654:	e7f7      	b.n	800a646 <__hexdig_fun+0xa>
 800a656:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a65a:	2b05      	cmp	r3, #5
 800a65c:	d801      	bhi.n	800a662 <__hexdig_fun+0x26>
 800a65e:	3827      	subs	r0, #39	; 0x27
 800a660:	e7f1      	b.n	800a646 <__hexdig_fun+0xa>
 800a662:	2000      	movs	r0, #0
 800a664:	4770      	bx	lr

0800a666 <__gethex>:
 800a666:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66a:	b08b      	sub	sp, #44	; 0x2c
 800a66c:	468a      	mov	sl, r1
 800a66e:	9002      	str	r0, [sp, #8]
 800a670:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a672:	9306      	str	r3, [sp, #24]
 800a674:	4690      	mov	r8, r2
 800a676:	f000 fad0 	bl	800ac1a <__localeconv_l>
 800a67a:	6803      	ldr	r3, [r0, #0]
 800a67c:	9303      	str	r3, [sp, #12]
 800a67e:	4618      	mov	r0, r3
 800a680:	f7f5 fdb4 	bl	80001ec <strlen>
 800a684:	9b03      	ldr	r3, [sp, #12]
 800a686:	9001      	str	r0, [sp, #4]
 800a688:	4403      	add	r3, r0
 800a68a:	f04f 0b00 	mov.w	fp, #0
 800a68e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a692:	9307      	str	r3, [sp, #28]
 800a694:	f8da 3000 	ldr.w	r3, [sl]
 800a698:	3302      	adds	r3, #2
 800a69a:	461f      	mov	r7, r3
 800a69c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a6a0:	2830      	cmp	r0, #48	; 0x30
 800a6a2:	d06c      	beq.n	800a77e <__gethex+0x118>
 800a6a4:	f7ff ffca 	bl	800a63c <__hexdig_fun>
 800a6a8:	4604      	mov	r4, r0
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	d16a      	bne.n	800a784 <__gethex+0x11e>
 800a6ae:	9a01      	ldr	r2, [sp, #4]
 800a6b0:	9903      	ldr	r1, [sp, #12]
 800a6b2:	4638      	mov	r0, r7
 800a6b4:	f000 ff48 	bl	800b548 <strncmp>
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	d166      	bne.n	800a78a <__gethex+0x124>
 800a6bc:	9b01      	ldr	r3, [sp, #4]
 800a6be:	5cf8      	ldrb	r0, [r7, r3]
 800a6c0:	18fe      	adds	r6, r7, r3
 800a6c2:	f7ff ffbb 	bl	800a63c <__hexdig_fun>
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	d062      	beq.n	800a790 <__gethex+0x12a>
 800a6ca:	4633      	mov	r3, r6
 800a6cc:	7818      	ldrb	r0, [r3, #0]
 800a6ce:	2830      	cmp	r0, #48	; 0x30
 800a6d0:	461f      	mov	r7, r3
 800a6d2:	f103 0301 	add.w	r3, r3, #1
 800a6d6:	d0f9      	beq.n	800a6cc <__gethex+0x66>
 800a6d8:	f7ff ffb0 	bl	800a63c <__hexdig_fun>
 800a6dc:	fab0 f580 	clz	r5, r0
 800a6e0:	096d      	lsrs	r5, r5, #5
 800a6e2:	4634      	mov	r4, r6
 800a6e4:	f04f 0b01 	mov.w	fp, #1
 800a6e8:	463a      	mov	r2, r7
 800a6ea:	4616      	mov	r6, r2
 800a6ec:	3201      	adds	r2, #1
 800a6ee:	7830      	ldrb	r0, [r6, #0]
 800a6f0:	f7ff ffa4 	bl	800a63c <__hexdig_fun>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d1f8      	bne.n	800a6ea <__gethex+0x84>
 800a6f8:	9a01      	ldr	r2, [sp, #4]
 800a6fa:	9903      	ldr	r1, [sp, #12]
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	f000 ff23 	bl	800b548 <strncmp>
 800a702:	b950      	cbnz	r0, 800a71a <__gethex+0xb4>
 800a704:	b954      	cbnz	r4, 800a71c <__gethex+0xb6>
 800a706:	9b01      	ldr	r3, [sp, #4]
 800a708:	18f4      	adds	r4, r6, r3
 800a70a:	4622      	mov	r2, r4
 800a70c:	4616      	mov	r6, r2
 800a70e:	3201      	adds	r2, #1
 800a710:	7830      	ldrb	r0, [r6, #0]
 800a712:	f7ff ff93 	bl	800a63c <__hexdig_fun>
 800a716:	2800      	cmp	r0, #0
 800a718:	d1f8      	bne.n	800a70c <__gethex+0xa6>
 800a71a:	b10c      	cbz	r4, 800a720 <__gethex+0xba>
 800a71c:	1ba4      	subs	r4, r4, r6
 800a71e:	00a4      	lsls	r4, r4, #2
 800a720:	7833      	ldrb	r3, [r6, #0]
 800a722:	2b50      	cmp	r3, #80	; 0x50
 800a724:	d001      	beq.n	800a72a <__gethex+0xc4>
 800a726:	2b70      	cmp	r3, #112	; 0x70
 800a728:	d140      	bne.n	800a7ac <__gethex+0x146>
 800a72a:	7873      	ldrb	r3, [r6, #1]
 800a72c:	2b2b      	cmp	r3, #43	; 0x2b
 800a72e:	d031      	beq.n	800a794 <__gethex+0x12e>
 800a730:	2b2d      	cmp	r3, #45	; 0x2d
 800a732:	d033      	beq.n	800a79c <__gethex+0x136>
 800a734:	1c71      	adds	r1, r6, #1
 800a736:	f04f 0900 	mov.w	r9, #0
 800a73a:	7808      	ldrb	r0, [r1, #0]
 800a73c:	f7ff ff7e 	bl	800a63c <__hexdig_fun>
 800a740:	1e43      	subs	r3, r0, #1
 800a742:	b2db      	uxtb	r3, r3
 800a744:	2b18      	cmp	r3, #24
 800a746:	d831      	bhi.n	800a7ac <__gethex+0x146>
 800a748:	f1a0 0210 	sub.w	r2, r0, #16
 800a74c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a750:	f7ff ff74 	bl	800a63c <__hexdig_fun>
 800a754:	1e43      	subs	r3, r0, #1
 800a756:	b2db      	uxtb	r3, r3
 800a758:	2b18      	cmp	r3, #24
 800a75a:	d922      	bls.n	800a7a2 <__gethex+0x13c>
 800a75c:	f1b9 0f00 	cmp.w	r9, #0
 800a760:	d000      	beq.n	800a764 <__gethex+0xfe>
 800a762:	4252      	negs	r2, r2
 800a764:	4414      	add	r4, r2
 800a766:	f8ca 1000 	str.w	r1, [sl]
 800a76a:	b30d      	cbz	r5, 800a7b0 <__gethex+0x14a>
 800a76c:	f1bb 0f00 	cmp.w	fp, #0
 800a770:	bf0c      	ite	eq
 800a772:	2706      	moveq	r7, #6
 800a774:	2700      	movne	r7, #0
 800a776:	4638      	mov	r0, r7
 800a778:	b00b      	add	sp, #44	; 0x2c
 800a77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a77e:	f10b 0b01 	add.w	fp, fp, #1
 800a782:	e78a      	b.n	800a69a <__gethex+0x34>
 800a784:	2500      	movs	r5, #0
 800a786:	462c      	mov	r4, r5
 800a788:	e7ae      	b.n	800a6e8 <__gethex+0x82>
 800a78a:	463e      	mov	r6, r7
 800a78c:	2501      	movs	r5, #1
 800a78e:	e7c7      	b.n	800a720 <__gethex+0xba>
 800a790:	4604      	mov	r4, r0
 800a792:	e7fb      	b.n	800a78c <__gethex+0x126>
 800a794:	f04f 0900 	mov.w	r9, #0
 800a798:	1cb1      	adds	r1, r6, #2
 800a79a:	e7ce      	b.n	800a73a <__gethex+0xd4>
 800a79c:	f04f 0901 	mov.w	r9, #1
 800a7a0:	e7fa      	b.n	800a798 <__gethex+0x132>
 800a7a2:	230a      	movs	r3, #10
 800a7a4:	fb03 0202 	mla	r2, r3, r2, r0
 800a7a8:	3a10      	subs	r2, #16
 800a7aa:	e7cf      	b.n	800a74c <__gethex+0xe6>
 800a7ac:	4631      	mov	r1, r6
 800a7ae:	e7da      	b.n	800a766 <__gethex+0x100>
 800a7b0:	1bf3      	subs	r3, r6, r7
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	4629      	mov	r1, r5
 800a7b6:	2b07      	cmp	r3, #7
 800a7b8:	dc49      	bgt.n	800a84e <__gethex+0x1e8>
 800a7ba:	9802      	ldr	r0, [sp, #8]
 800a7bc:	f000 fa4c 	bl	800ac58 <_Balloc>
 800a7c0:	9b01      	ldr	r3, [sp, #4]
 800a7c2:	f100 0914 	add.w	r9, r0, #20
 800a7c6:	f04f 0b00 	mov.w	fp, #0
 800a7ca:	f1c3 0301 	rsb	r3, r3, #1
 800a7ce:	4605      	mov	r5, r0
 800a7d0:	f8cd 9010 	str.w	r9, [sp, #16]
 800a7d4:	46da      	mov	sl, fp
 800a7d6:	9308      	str	r3, [sp, #32]
 800a7d8:	42b7      	cmp	r7, r6
 800a7da:	d33b      	bcc.n	800a854 <__gethex+0x1ee>
 800a7dc:	9804      	ldr	r0, [sp, #16]
 800a7de:	f840 ab04 	str.w	sl, [r0], #4
 800a7e2:	eba0 0009 	sub.w	r0, r0, r9
 800a7e6:	1080      	asrs	r0, r0, #2
 800a7e8:	6128      	str	r0, [r5, #16]
 800a7ea:	0147      	lsls	r7, r0, #5
 800a7ec:	4650      	mov	r0, sl
 800a7ee:	f000 faf7 	bl	800ade0 <__hi0bits>
 800a7f2:	f8d8 6000 	ldr.w	r6, [r8]
 800a7f6:	1a3f      	subs	r7, r7, r0
 800a7f8:	42b7      	cmp	r7, r6
 800a7fa:	dd64      	ble.n	800a8c6 <__gethex+0x260>
 800a7fc:	1bbf      	subs	r7, r7, r6
 800a7fe:	4639      	mov	r1, r7
 800a800:	4628      	mov	r0, r5
 800a802:	f000 fe07 	bl	800b414 <__any_on>
 800a806:	4682      	mov	sl, r0
 800a808:	b178      	cbz	r0, 800a82a <__gethex+0x1c4>
 800a80a:	1e7b      	subs	r3, r7, #1
 800a80c:	1159      	asrs	r1, r3, #5
 800a80e:	f003 021f 	and.w	r2, r3, #31
 800a812:	f04f 0a01 	mov.w	sl, #1
 800a816:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a81a:	fa0a f202 	lsl.w	r2, sl, r2
 800a81e:	420a      	tst	r2, r1
 800a820:	d003      	beq.n	800a82a <__gethex+0x1c4>
 800a822:	4553      	cmp	r3, sl
 800a824:	dc46      	bgt.n	800a8b4 <__gethex+0x24e>
 800a826:	f04f 0a02 	mov.w	sl, #2
 800a82a:	4639      	mov	r1, r7
 800a82c:	4628      	mov	r0, r5
 800a82e:	f7ff fecb 	bl	800a5c8 <rshift>
 800a832:	443c      	add	r4, r7
 800a834:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a838:	42a3      	cmp	r3, r4
 800a83a:	da52      	bge.n	800a8e2 <__gethex+0x27c>
 800a83c:	4629      	mov	r1, r5
 800a83e:	9802      	ldr	r0, [sp, #8]
 800a840:	f000 fa3e 	bl	800acc0 <_Bfree>
 800a844:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a846:	2300      	movs	r3, #0
 800a848:	6013      	str	r3, [r2, #0]
 800a84a:	27a3      	movs	r7, #163	; 0xa3
 800a84c:	e793      	b.n	800a776 <__gethex+0x110>
 800a84e:	3101      	adds	r1, #1
 800a850:	105b      	asrs	r3, r3, #1
 800a852:	e7b0      	b.n	800a7b6 <__gethex+0x150>
 800a854:	1e73      	subs	r3, r6, #1
 800a856:	9305      	str	r3, [sp, #20]
 800a858:	9a07      	ldr	r2, [sp, #28]
 800a85a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a85e:	4293      	cmp	r3, r2
 800a860:	d018      	beq.n	800a894 <__gethex+0x22e>
 800a862:	f1bb 0f20 	cmp.w	fp, #32
 800a866:	d107      	bne.n	800a878 <__gethex+0x212>
 800a868:	9b04      	ldr	r3, [sp, #16]
 800a86a:	f8c3 a000 	str.w	sl, [r3]
 800a86e:	3304      	adds	r3, #4
 800a870:	f04f 0a00 	mov.w	sl, #0
 800a874:	9304      	str	r3, [sp, #16]
 800a876:	46d3      	mov	fp, sl
 800a878:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a87c:	f7ff fede 	bl	800a63c <__hexdig_fun>
 800a880:	f000 000f 	and.w	r0, r0, #15
 800a884:	fa00 f00b 	lsl.w	r0, r0, fp
 800a888:	ea4a 0a00 	orr.w	sl, sl, r0
 800a88c:	f10b 0b04 	add.w	fp, fp, #4
 800a890:	9b05      	ldr	r3, [sp, #20]
 800a892:	e00d      	b.n	800a8b0 <__gethex+0x24a>
 800a894:	9b05      	ldr	r3, [sp, #20]
 800a896:	9a08      	ldr	r2, [sp, #32]
 800a898:	4413      	add	r3, r2
 800a89a:	42bb      	cmp	r3, r7
 800a89c:	d3e1      	bcc.n	800a862 <__gethex+0x1fc>
 800a89e:	4618      	mov	r0, r3
 800a8a0:	9a01      	ldr	r2, [sp, #4]
 800a8a2:	9903      	ldr	r1, [sp, #12]
 800a8a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a8a6:	f000 fe4f 	bl	800b548 <strncmp>
 800a8aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	d1d8      	bne.n	800a862 <__gethex+0x1fc>
 800a8b0:	461e      	mov	r6, r3
 800a8b2:	e791      	b.n	800a7d8 <__gethex+0x172>
 800a8b4:	1eb9      	subs	r1, r7, #2
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	f000 fdac 	bl	800b414 <__any_on>
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	d0b2      	beq.n	800a826 <__gethex+0x1c0>
 800a8c0:	f04f 0a03 	mov.w	sl, #3
 800a8c4:	e7b1      	b.n	800a82a <__gethex+0x1c4>
 800a8c6:	da09      	bge.n	800a8dc <__gethex+0x276>
 800a8c8:	1bf7      	subs	r7, r6, r7
 800a8ca:	4629      	mov	r1, r5
 800a8cc:	463a      	mov	r2, r7
 800a8ce:	9802      	ldr	r0, [sp, #8]
 800a8d0:	f000 fbc2 	bl	800b058 <__lshift>
 800a8d4:	1be4      	subs	r4, r4, r7
 800a8d6:	4605      	mov	r5, r0
 800a8d8:	f100 0914 	add.w	r9, r0, #20
 800a8dc:	f04f 0a00 	mov.w	sl, #0
 800a8e0:	e7a8      	b.n	800a834 <__gethex+0x1ce>
 800a8e2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a8e6:	42a0      	cmp	r0, r4
 800a8e8:	dd6a      	ble.n	800a9c0 <__gethex+0x35a>
 800a8ea:	1b04      	subs	r4, r0, r4
 800a8ec:	42a6      	cmp	r6, r4
 800a8ee:	dc2e      	bgt.n	800a94e <__gethex+0x2e8>
 800a8f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d022      	beq.n	800a93e <__gethex+0x2d8>
 800a8f8:	2b03      	cmp	r3, #3
 800a8fa:	d024      	beq.n	800a946 <__gethex+0x2e0>
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d115      	bne.n	800a92c <__gethex+0x2c6>
 800a900:	42a6      	cmp	r6, r4
 800a902:	d113      	bne.n	800a92c <__gethex+0x2c6>
 800a904:	2e01      	cmp	r6, #1
 800a906:	dc0b      	bgt.n	800a920 <__gethex+0x2ba>
 800a908:	9a06      	ldr	r2, [sp, #24]
 800a90a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a90e:	6013      	str	r3, [r2, #0]
 800a910:	2301      	movs	r3, #1
 800a912:	612b      	str	r3, [r5, #16]
 800a914:	f8c9 3000 	str.w	r3, [r9]
 800a918:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a91a:	2762      	movs	r7, #98	; 0x62
 800a91c:	601d      	str	r5, [r3, #0]
 800a91e:	e72a      	b.n	800a776 <__gethex+0x110>
 800a920:	1e71      	subs	r1, r6, #1
 800a922:	4628      	mov	r0, r5
 800a924:	f000 fd76 	bl	800b414 <__any_on>
 800a928:	2800      	cmp	r0, #0
 800a92a:	d1ed      	bne.n	800a908 <__gethex+0x2a2>
 800a92c:	4629      	mov	r1, r5
 800a92e:	9802      	ldr	r0, [sp, #8]
 800a930:	f000 f9c6 	bl	800acc0 <_Bfree>
 800a934:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a936:	2300      	movs	r3, #0
 800a938:	6013      	str	r3, [r2, #0]
 800a93a:	2750      	movs	r7, #80	; 0x50
 800a93c:	e71b      	b.n	800a776 <__gethex+0x110>
 800a93e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a940:	2b00      	cmp	r3, #0
 800a942:	d0e1      	beq.n	800a908 <__gethex+0x2a2>
 800a944:	e7f2      	b.n	800a92c <__gethex+0x2c6>
 800a946:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d1dd      	bne.n	800a908 <__gethex+0x2a2>
 800a94c:	e7ee      	b.n	800a92c <__gethex+0x2c6>
 800a94e:	1e67      	subs	r7, r4, #1
 800a950:	f1ba 0f00 	cmp.w	sl, #0
 800a954:	d131      	bne.n	800a9ba <__gethex+0x354>
 800a956:	b127      	cbz	r7, 800a962 <__gethex+0x2fc>
 800a958:	4639      	mov	r1, r7
 800a95a:	4628      	mov	r0, r5
 800a95c:	f000 fd5a 	bl	800b414 <__any_on>
 800a960:	4682      	mov	sl, r0
 800a962:	117a      	asrs	r2, r7, #5
 800a964:	2301      	movs	r3, #1
 800a966:	f007 071f 	and.w	r7, r7, #31
 800a96a:	fa03 f707 	lsl.w	r7, r3, r7
 800a96e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800a972:	4621      	mov	r1, r4
 800a974:	421f      	tst	r7, r3
 800a976:	4628      	mov	r0, r5
 800a978:	bf18      	it	ne
 800a97a:	f04a 0a02 	orrne.w	sl, sl, #2
 800a97e:	1b36      	subs	r6, r6, r4
 800a980:	f7ff fe22 	bl	800a5c8 <rshift>
 800a984:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a988:	2702      	movs	r7, #2
 800a98a:	f1ba 0f00 	cmp.w	sl, #0
 800a98e:	d048      	beq.n	800aa22 <__gethex+0x3bc>
 800a990:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a994:	2b02      	cmp	r3, #2
 800a996:	d015      	beq.n	800a9c4 <__gethex+0x35e>
 800a998:	2b03      	cmp	r3, #3
 800a99a:	d017      	beq.n	800a9cc <__gethex+0x366>
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d109      	bne.n	800a9b4 <__gethex+0x34e>
 800a9a0:	f01a 0f02 	tst.w	sl, #2
 800a9a4:	d006      	beq.n	800a9b4 <__gethex+0x34e>
 800a9a6:	f8d9 3000 	ldr.w	r3, [r9]
 800a9aa:	ea4a 0a03 	orr.w	sl, sl, r3
 800a9ae:	f01a 0f01 	tst.w	sl, #1
 800a9b2:	d10e      	bne.n	800a9d2 <__gethex+0x36c>
 800a9b4:	f047 0710 	orr.w	r7, r7, #16
 800a9b8:	e033      	b.n	800aa22 <__gethex+0x3bc>
 800a9ba:	f04f 0a01 	mov.w	sl, #1
 800a9be:	e7d0      	b.n	800a962 <__gethex+0x2fc>
 800a9c0:	2701      	movs	r7, #1
 800a9c2:	e7e2      	b.n	800a98a <__gethex+0x324>
 800a9c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9c6:	f1c3 0301 	rsb	r3, r3, #1
 800a9ca:	9315      	str	r3, [sp, #84]	; 0x54
 800a9cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d0f0      	beq.n	800a9b4 <__gethex+0x34e>
 800a9d2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a9d6:	f105 0314 	add.w	r3, r5, #20
 800a9da:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a9de:	eb03 010a 	add.w	r1, r3, sl
 800a9e2:	f04f 0c00 	mov.w	ip, #0
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a9f0:	d01c      	beq.n	800aa2c <__gethex+0x3c6>
 800a9f2:	3201      	adds	r2, #1
 800a9f4:	6002      	str	r2, [r0, #0]
 800a9f6:	2f02      	cmp	r7, #2
 800a9f8:	f105 0314 	add.w	r3, r5, #20
 800a9fc:	d138      	bne.n	800aa70 <__gethex+0x40a>
 800a9fe:	f8d8 2000 	ldr.w	r2, [r8]
 800aa02:	3a01      	subs	r2, #1
 800aa04:	42b2      	cmp	r2, r6
 800aa06:	d10a      	bne.n	800aa1e <__gethex+0x3b8>
 800aa08:	1171      	asrs	r1, r6, #5
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f006 061f 	and.w	r6, r6, #31
 800aa10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aa14:	fa02 f606 	lsl.w	r6, r2, r6
 800aa18:	421e      	tst	r6, r3
 800aa1a:	bf18      	it	ne
 800aa1c:	4617      	movne	r7, r2
 800aa1e:	f047 0720 	orr.w	r7, r7, #32
 800aa22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa24:	601d      	str	r5, [r3, #0]
 800aa26:	9b06      	ldr	r3, [sp, #24]
 800aa28:	601c      	str	r4, [r3, #0]
 800aa2a:	e6a4      	b.n	800a776 <__gethex+0x110>
 800aa2c:	4299      	cmp	r1, r3
 800aa2e:	f843 cc04 	str.w	ip, [r3, #-4]
 800aa32:	d8d8      	bhi.n	800a9e6 <__gethex+0x380>
 800aa34:	68ab      	ldr	r3, [r5, #8]
 800aa36:	4599      	cmp	r9, r3
 800aa38:	db12      	blt.n	800aa60 <__gethex+0x3fa>
 800aa3a:	6869      	ldr	r1, [r5, #4]
 800aa3c:	9802      	ldr	r0, [sp, #8]
 800aa3e:	3101      	adds	r1, #1
 800aa40:	f000 f90a 	bl	800ac58 <_Balloc>
 800aa44:	692a      	ldr	r2, [r5, #16]
 800aa46:	3202      	adds	r2, #2
 800aa48:	f105 010c 	add.w	r1, r5, #12
 800aa4c:	4683      	mov	fp, r0
 800aa4e:	0092      	lsls	r2, r2, #2
 800aa50:	300c      	adds	r0, #12
 800aa52:	f000 f8f6 	bl	800ac42 <memcpy>
 800aa56:	4629      	mov	r1, r5
 800aa58:	9802      	ldr	r0, [sp, #8]
 800aa5a:	f000 f931 	bl	800acc0 <_Bfree>
 800aa5e:	465d      	mov	r5, fp
 800aa60:	692b      	ldr	r3, [r5, #16]
 800aa62:	1c5a      	adds	r2, r3, #1
 800aa64:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800aa68:	612a      	str	r2, [r5, #16]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	615a      	str	r2, [r3, #20]
 800aa6e:	e7c2      	b.n	800a9f6 <__gethex+0x390>
 800aa70:	692a      	ldr	r2, [r5, #16]
 800aa72:	454a      	cmp	r2, r9
 800aa74:	dd0b      	ble.n	800aa8e <__gethex+0x428>
 800aa76:	2101      	movs	r1, #1
 800aa78:	4628      	mov	r0, r5
 800aa7a:	f7ff fda5 	bl	800a5c8 <rshift>
 800aa7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa82:	3401      	adds	r4, #1
 800aa84:	42a3      	cmp	r3, r4
 800aa86:	f6ff aed9 	blt.w	800a83c <__gethex+0x1d6>
 800aa8a:	2701      	movs	r7, #1
 800aa8c:	e7c7      	b.n	800aa1e <__gethex+0x3b8>
 800aa8e:	f016 061f 	ands.w	r6, r6, #31
 800aa92:	d0fa      	beq.n	800aa8a <__gethex+0x424>
 800aa94:	449a      	add	sl, r3
 800aa96:	f1c6 0620 	rsb	r6, r6, #32
 800aa9a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800aa9e:	f000 f99f 	bl	800ade0 <__hi0bits>
 800aaa2:	42b0      	cmp	r0, r6
 800aaa4:	dbe7      	blt.n	800aa76 <__gethex+0x410>
 800aaa6:	e7f0      	b.n	800aa8a <__gethex+0x424>

0800aaa8 <L_shift>:
 800aaa8:	f1c2 0208 	rsb	r2, r2, #8
 800aaac:	0092      	lsls	r2, r2, #2
 800aaae:	b570      	push	{r4, r5, r6, lr}
 800aab0:	f1c2 0620 	rsb	r6, r2, #32
 800aab4:	6843      	ldr	r3, [r0, #4]
 800aab6:	6804      	ldr	r4, [r0, #0]
 800aab8:	fa03 f506 	lsl.w	r5, r3, r6
 800aabc:	432c      	orrs	r4, r5
 800aabe:	40d3      	lsrs	r3, r2
 800aac0:	6004      	str	r4, [r0, #0]
 800aac2:	f840 3f04 	str.w	r3, [r0, #4]!
 800aac6:	4288      	cmp	r0, r1
 800aac8:	d3f4      	bcc.n	800aab4 <L_shift+0xc>
 800aaca:	bd70      	pop	{r4, r5, r6, pc}

0800aacc <__match>:
 800aacc:	b530      	push	{r4, r5, lr}
 800aace:	6803      	ldr	r3, [r0, #0]
 800aad0:	3301      	adds	r3, #1
 800aad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aad6:	b914      	cbnz	r4, 800aade <__match+0x12>
 800aad8:	6003      	str	r3, [r0, #0]
 800aada:	2001      	movs	r0, #1
 800aadc:	bd30      	pop	{r4, r5, pc}
 800aade:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aae2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aae6:	2d19      	cmp	r5, #25
 800aae8:	bf98      	it	ls
 800aaea:	3220      	addls	r2, #32
 800aaec:	42a2      	cmp	r2, r4
 800aaee:	d0f0      	beq.n	800aad2 <__match+0x6>
 800aaf0:	2000      	movs	r0, #0
 800aaf2:	e7f3      	b.n	800aadc <__match+0x10>

0800aaf4 <__hexnan>:
 800aaf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf8:	680b      	ldr	r3, [r1, #0]
 800aafa:	6801      	ldr	r1, [r0, #0]
 800aafc:	115f      	asrs	r7, r3, #5
 800aafe:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800ab02:	f013 031f 	ands.w	r3, r3, #31
 800ab06:	b087      	sub	sp, #28
 800ab08:	bf18      	it	ne
 800ab0a:	3704      	addne	r7, #4
 800ab0c:	2500      	movs	r5, #0
 800ab0e:	1f3e      	subs	r6, r7, #4
 800ab10:	4682      	mov	sl, r0
 800ab12:	4690      	mov	r8, r2
 800ab14:	9301      	str	r3, [sp, #4]
 800ab16:	f847 5c04 	str.w	r5, [r7, #-4]
 800ab1a:	46b1      	mov	r9, r6
 800ab1c:	4634      	mov	r4, r6
 800ab1e:	9502      	str	r5, [sp, #8]
 800ab20:	46ab      	mov	fp, r5
 800ab22:	784a      	ldrb	r2, [r1, #1]
 800ab24:	1c4b      	adds	r3, r1, #1
 800ab26:	9303      	str	r3, [sp, #12]
 800ab28:	b342      	cbz	r2, 800ab7c <__hexnan+0x88>
 800ab2a:	4610      	mov	r0, r2
 800ab2c:	9105      	str	r1, [sp, #20]
 800ab2e:	9204      	str	r2, [sp, #16]
 800ab30:	f7ff fd84 	bl	800a63c <__hexdig_fun>
 800ab34:	2800      	cmp	r0, #0
 800ab36:	d143      	bne.n	800abc0 <__hexnan+0xcc>
 800ab38:	9a04      	ldr	r2, [sp, #16]
 800ab3a:	9905      	ldr	r1, [sp, #20]
 800ab3c:	2a20      	cmp	r2, #32
 800ab3e:	d818      	bhi.n	800ab72 <__hexnan+0x7e>
 800ab40:	9b02      	ldr	r3, [sp, #8]
 800ab42:	459b      	cmp	fp, r3
 800ab44:	dd13      	ble.n	800ab6e <__hexnan+0x7a>
 800ab46:	454c      	cmp	r4, r9
 800ab48:	d206      	bcs.n	800ab58 <__hexnan+0x64>
 800ab4a:	2d07      	cmp	r5, #7
 800ab4c:	dc04      	bgt.n	800ab58 <__hexnan+0x64>
 800ab4e:	462a      	mov	r2, r5
 800ab50:	4649      	mov	r1, r9
 800ab52:	4620      	mov	r0, r4
 800ab54:	f7ff ffa8 	bl	800aaa8 <L_shift>
 800ab58:	4544      	cmp	r4, r8
 800ab5a:	d944      	bls.n	800abe6 <__hexnan+0xf2>
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	f1a4 0904 	sub.w	r9, r4, #4
 800ab62:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab66:	f8cd b008 	str.w	fp, [sp, #8]
 800ab6a:	464c      	mov	r4, r9
 800ab6c:	461d      	mov	r5, r3
 800ab6e:	9903      	ldr	r1, [sp, #12]
 800ab70:	e7d7      	b.n	800ab22 <__hexnan+0x2e>
 800ab72:	2a29      	cmp	r2, #41	; 0x29
 800ab74:	d14a      	bne.n	800ac0c <__hexnan+0x118>
 800ab76:	3102      	adds	r1, #2
 800ab78:	f8ca 1000 	str.w	r1, [sl]
 800ab7c:	f1bb 0f00 	cmp.w	fp, #0
 800ab80:	d044      	beq.n	800ac0c <__hexnan+0x118>
 800ab82:	454c      	cmp	r4, r9
 800ab84:	d206      	bcs.n	800ab94 <__hexnan+0xa0>
 800ab86:	2d07      	cmp	r5, #7
 800ab88:	dc04      	bgt.n	800ab94 <__hexnan+0xa0>
 800ab8a:	462a      	mov	r2, r5
 800ab8c:	4649      	mov	r1, r9
 800ab8e:	4620      	mov	r0, r4
 800ab90:	f7ff ff8a 	bl	800aaa8 <L_shift>
 800ab94:	4544      	cmp	r4, r8
 800ab96:	d928      	bls.n	800abea <__hexnan+0xf6>
 800ab98:	4643      	mov	r3, r8
 800ab9a:	f854 2b04 	ldr.w	r2, [r4], #4
 800ab9e:	f843 2b04 	str.w	r2, [r3], #4
 800aba2:	42a6      	cmp	r6, r4
 800aba4:	d2f9      	bcs.n	800ab9a <__hexnan+0xa6>
 800aba6:	2200      	movs	r2, #0
 800aba8:	f843 2b04 	str.w	r2, [r3], #4
 800abac:	429e      	cmp	r6, r3
 800abae:	d2fb      	bcs.n	800aba8 <__hexnan+0xb4>
 800abb0:	6833      	ldr	r3, [r6, #0]
 800abb2:	b91b      	cbnz	r3, 800abbc <__hexnan+0xc8>
 800abb4:	4546      	cmp	r6, r8
 800abb6:	d127      	bne.n	800ac08 <__hexnan+0x114>
 800abb8:	2301      	movs	r3, #1
 800abba:	6033      	str	r3, [r6, #0]
 800abbc:	2005      	movs	r0, #5
 800abbe:	e026      	b.n	800ac0e <__hexnan+0x11a>
 800abc0:	3501      	adds	r5, #1
 800abc2:	2d08      	cmp	r5, #8
 800abc4:	f10b 0b01 	add.w	fp, fp, #1
 800abc8:	dd06      	ble.n	800abd8 <__hexnan+0xe4>
 800abca:	4544      	cmp	r4, r8
 800abcc:	d9cf      	bls.n	800ab6e <__hexnan+0x7a>
 800abce:	2300      	movs	r3, #0
 800abd0:	f844 3c04 	str.w	r3, [r4, #-4]
 800abd4:	2501      	movs	r5, #1
 800abd6:	3c04      	subs	r4, #4
 800abd8:	6822      	ldr	r2, [r4, #0]
 800abda:	f000 000f 	and.w	r0, r0, #15
 800abde:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800abe2:	6020      	str	r0, [r4, #0]
 800abe4:	e7c3      	b.n	800ab6e <__hexnan+0x7a>
 800abe6:	2508      	movs	r5, #8
 800abe8:	e7c1      	b.n	800ab6e <__hexnan+0x7a>
 800abea:	9b01      	ldr	r3, [sp, #4]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d0df      	beq.n	800abb0 <__hexnan+0xbc>
 800abf0:	f04f 32ff 	mov.w	r2, #4294967295
 800abf4:	f1c3 0320 	rsb	r3, r3, #32
 800abf8:	fa22 f303 	lsr.w	r3, r2, r3
 800abfc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800ac00:	401a      	ands	r2, r3
 800ac02:	f847 2c04 	str.w	r2, [r7, #-4]
 800ac06:	e7d3      	b.n	800abb0 <__hexnan+0xbc>
 800ac08:	3e04      	subs	r6, #4
 800ac0a:	e7d1      	b.n	800abb0 <__hexnan+0xbc>
 800ac0c:	2004      	movs	r0, #4
 800ac0e:	b007      	add	sp, #28
 800ac10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ac14 <__locale_ctype_ptr_l>:
 800ac14:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800ac18:	4770      	bx	lr

0800ac1a <__localeconv_l>:
 800ac1a:	30f0      	adds	r0, #240	; 0xf0
 800ac1c:	4770      	bx	lr

0800ac1e <__ascii_mbtowc>:
 800ac1e:	b082      	sub	sp, #8
 800ac20:	b901      	cbnz	r1, 800ac24 <__ascii_mbtowc+0x6>
 800ac22:	a901      	add	r1, sp, #4
 800ac24:	b142      	cbz	r2, 800ac38 <__ascii_mbtowc+0x1a>
 800ac26:	b14b      	cbz	r3, 800ac3c <__ascii_mbtowc+0x1e>
 800ac28:	7813      	ldrb	r3, [r2, #0]
 800ac2a:	600b      	str	r3, [r1, #0]
 800ac2c:	7812      	ldrb	r2, [r2, #0]
 800ac2e:	1c10      	adds	r0, r2, #0
 800ac30:	bf18      	it	ne
 800ac32:	2001      	movne	r0, #1
 800ac34:	b002      	add	sp, #8
 800ac36:	4770      	bx	lr
 800ac38:	4610      	mov	r0, r2
 800ac3a:	e7fb      	b.n	800ac34 <__ascii_mbtowc+0x16>
 800ac3c:	f06f 0001 	mvn.w	r0, #1
 800ac40:	e7f8      	b.n	800ac34 <__ascii_mbtowc+0x16>

0800ac42 <memcpy>:
 800ac42:	b510      	push	{r4, lr}
 800ac44:	1e43      	subs	r3, r0, #1
 800ac46:	440a      	add	r2, r1
 800ac48:	4291      	cmp	r1, r2
 800ac4a:	d100      	bne.n	800ac4e <memcpy+0xc>
 800ac4c:	bd10      	pop	{r4, pc}
 800ac4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac56:	e7f7      	b.n	800ac48 <memcpy+0x6>

0800ac58 <_Balloc>:
 800ac58:	b570      	push	{r4, r5, r6, lr}
 800ac5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	460e      	mov	r6, r1
 800ac60:	b93d      	cbnz	r5, 800ac72 <_Balloc+0x1a>
 800ac62:	2010      	movs	r0, #16
 800ac64:	f000 fc90 	bl	800b588 <malloc>
 800ac68:	6260      	str	r0, [r4, #36]	; 0x24
 800ac6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ac6e:	6005      	str	r5, [r0, #0]
 800ac70:	60c5      	str	r5, [r0, #12]
 800ac72:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ac74:	68eb      	ldr	r3, [r5, #12]
 800ac76:	b183      	cbz	r3, 800ac9a <_Balloc+0x42>
 800ac78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ac80:	b9b8      	cbnz	r0, 800acb2 <_Balloc+0x5a>
 800ac82:	2101      	movs	r1, #1
 800ac84:	fa01 f506 	lsl.w	r5, r1, r6
 800ac88:	1d6a      	adds	r2, r5, #5
 800ac8a:	0092      	lsls	r2, r2, #2
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f000 fbe2 	bl	800b456 <_calloc_r>
 800ac92:	b160      	cbz	r0, 800acae <_Balloc+0x56>
 800ac94:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ac98:	e00e      	b.n	800acb8 <_Balloc+0x60>
 800ac9a:	2221      	movs	r2, #33	; 0x21
 800ac9c:	2104      	movs	r1, #4
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f000 fbd9 	bl	800b456 <_calloc_r>
 800aca4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aca6:	60e8      	str	r0, [r5, #12]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d1e4      	bne.n	800ac78 <_Balloc+0x20>
 800acae:	2000      	movs	r0, #0
 800acb0:	bd70      	pop	{r4, r5, r6, pc}
 800acb2:	6802      	ldr	r2, [r0, #0]
 800acb4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800acb8:	2300      	movs	r3, #0
 800acba:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800acbe:	e7f7      	b.n	800acb0 <_Balloc+0x58>

0800acc0 <_Bfree>:
 800acc0:	b570      	push	{r4, r5, r6, lr}
 800acc2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800acc4:	4606      	mov	r6, r0
 800acc6:	460d      	mov	r5, r1
 800acc8:	b93c      	cbnz	r4, 800acda <_Bfree+0x1a>
 800acca:	2010      	movs	r0, #16
 800accc:	f000 fc5c 	bl	800b588 <malloc>
 800acd0:	6270      	str	r0, [r6, #36]	; 0x24
 800acd2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800acd6:	6004      	str	r4, [r0, #0]
 800acd8:	60c4      	str	r4, [r0, #12]
 800acda:	b13d      	cbz	r5, 800acec <_Bfree+0x2c>
 800acdc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800acde:	686a      	ldr	r2, [r5, #4]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ace6:	6029      	str	r1, [r5, #0]
 800ace8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800acec:	bd70      	pop	{r4, r5, r6, pc}

0800acee <__multadd>:
 800acee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acf2:	690d      	ldr	r5, [r1, #16]
 800acf4:	461f      	mov	r7, r3
 800acf6:	4606      	mov	r6, r0
 800acf8:	460c      	mov	r4, r1
 800acfa:	f101 0c14 	add.w	ip, r1, #20
 800acfe:	2300      	movs	r3, #0
 800ad00:	f8dc 0000 	ldr.w	r0, [ip]
 800ad04:	b281      	uxth	r1, r0
 800ad06:	fb02 7101 	mla	r1, r2, r1, r7
 800ad0a:	0c0f      	lsrs	r7, r1, #16
 800ad0c:	0c00      	lsrs	r0, r0, #16
 800ad0e:	fb02 7000 	mla	r0, r2, r0, r7
 800ad12:	b289      	uxth	r1, r1
 800ad14:	3301      	adds	r3, #1
 800ad16:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ad1a:	429d      	cmp	r5, r3
 800ad1c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ad20:	f84c 1b04 	str.w	r1, [ip], #4
 800ad24:	dcec      	bgt.n	800ad00 <__multadd+0x12>
 800ad26:	b1d7      	cbz	r7, 800ad5e <__multadd+0x70>
 800ad28:	68a3      	ldr	r3, [r4, #8]
 800ad2a:	42ab      	cmp	r3, r5
 800ad2c:	dc12      	bgt.n	800ad54 <__multadd+0x66>
 800ad2e:	6861      	ldr	r1, [r4, #4]
 800ad30:	4630      	mov	r0, r6
 800ad32:	3101      	adds	r1, #1
 800ad34:	f7ff ff90 	bl	800ac58 <_Balloc>
 800ad38:	6922      	ldr	r2, [r4, #16]
 800ad3a:	3202      	adds	r2, #2
 800ad3c:	f104 010c 	add.w	r1, r4, #12
 800ad40:	4680      	mov	r8, r0
 800ad42:	0092      	lsls	r2, r2, #2
 800ad44:	300c      	adds	r0, #12
 800ad46:	f7ff ff7c 	bl	800ac42 <memcpy>
 800ad4a:	4621      	mov	r1, r4
 800ad4c:	4630      	mov	r0, r6
 800ad4e:	f7ff ffb7 	bl	800acc0 <_Bfree>
 800ad52:	4644      	mov	r4, r8
 800ad54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad58:	3501      	adds	r5, #1
 800ad5a:	615f      	str	r7, [r3, #20]
 800ad5c:	6125      	str	r5, [r4, #16]
 800ad5e:	4620      	mov	r0, r4
 800ad60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ad64 <__s2b>:
 800ad64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad68:	460c      	mov	r4, r1
 800ad6a:	4615      	mov	r5, r2
 800ad6c:	461f      	mov	r7, r3
 800ad6e:	2209      	movs	r2, #9
 800ad70:	3308      	adds	r3, #8
 800ad72:	4606      	mov	r6, r0
 800ad74:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad78:	2100      	movs	r1, #0
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	db20      	blt.n	800adc2 <__s2b+0x5e>
 800ad80:	4630      	mov	r0, r6
 800ad82:	f7ff ff69 	bl	800ac58 <_Balloc>
 800ad86:	9b08      	ldr	r3, [sp, #32]
 800ad88:	6143      	str	r3, [r0, #20]
 800ad8a:	2d09      	cmp	r5, #9
 800ad8c:	f04f 0301 	mov.w	r3, #1
 800ad90:	6103      	str	r3, [r0, #16]
 800ad92:	dd19      	ble.n	800adc8 <__s2b+0x64>
 800ad94:	f104 0809 	add.w	r8, r4, #9
 800ad98:	46c1      	mov	r9, r8
 800ad9a:	442c      	add	r4, r5
 800ad9c:	f819 3b01 	ldrb.w	r3, [r9], #1
 800ada0:	4601      	mov	r1, r0
 800ada2:	3b30      	subs	r3, #48	; 0x30
 800ada4:	220a      	movs	r2, #10
 800ada6:	4630      	mov	r0, r6
 800ada8:	f7ff ffa1 	bl	800acee <__multadd>
 800adac:	45a1      	cmp	r9, r4
 800adae:	d1f5      	bne.n	800ad9c <__s2b+0x38>
 800adb0:	eb08 0405 	add.w	r4, r8, r5
 800adb4:	3c08      	subs	r4, #8
 800adb6:	1b2d      	subs	r5, r5, r4
 800adb8:	1963      	adds	r3, r4, r5
 800adba:	42bb      	cmp	r3, r7
 800adbc:	db07      	blt.n	800adce <__s2b+0x6a>
 800adbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adc2:	0052      	lsls	r2, r2, #1
 800adc4:	3101      	adds	r1, #1
 800adc6:	e7d9      	b.n	800ad7c <__s2b+0x18>
 800adc8:	340a      	adds	r4, #10
 800adca:	2509      	movs	r5, #9
 800adcc:	e7f3      	b.n	800adb6 <__s2b+0x52>
 800adce:	f814 3b01 	ldrb.w	r3, [r4], #1
 800add2:	4601      	mov	r1, r0
 800add4:	3b30      	subs	r3, #48	; 0x30
 800add6:	220a      	movs	r2, #10
 800add8:	4630      	mov	r0, r6
 800adda:	f7ff ff88 	bl	800acee <__multadd>
 800adde:	e7eb      	b.n	800adb8 <__s2b+0x54>

0800ade0 <__hi0bits>:
 800ade0:	0c02      	lsrs	r2, r0, #16
 800ade2:	0412      	lsls	r2, r2, #16
 800ade4:	4603      	mov	r3, r0
 800ade6:	b9b2      	cbnz	r2, 800ae16 <__hi0bits+0x36>
 800ade8:	0403      	lsls	r3, r0, #16
 800adea:	2010      	movs	r0, #16
 800adec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800adf0:	bf04      	itt	eq
 800adf2:	021b      	lsleq	r3, r3, #8
 800adf4:	3008      	addeq	r0, #8
 800adf6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800adfa:	bf04      	itt	eq
 800adfc:	011b      	lsleq	r3, r3, #4
 800adfe:	3004      	addeq	r0, #4
 800ae00:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ae04:	bf04      	itt	eq
 800ae06:	009b      	lsleq	r3, r3, #2
 800ae08:	3002      	addeq	r0, #2
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	db06      	blt.n	800ae1c <__hi0bits+0x3c>
 800ae0e:	005b      	lsls	r3, r3, #1
 800ae10:	d503      	bpl.n	800ae1a <__hi0bits+0x3a>
 800ae12:	3001      	adds	r0, #1
 800ae14:	4770      	bx	lr
 800ae16:	2000      	movs	r0, #0
 800ae18:	e7e8      	b.n	800adec <__hi0bits+0xc>
 800ae1a:	2020      	movs	r0, #32
 800ae1c:	4770      	bx	lr

0800ae1e <__lo0bits>:
 800ae1e:	6803      	ldr	r3, [r0, #0]
 800ae20:	f013 0207 	ands.w	r2, r3, #7
 800ae24:	4601      	mov	r1, r0
 800ae26:	d00b      	beq.n	800ae40 <__lo0bits+0x22>
 800ae28:	07da      	lsls	r2, r3, #31
 800ae2a:	d423      	bmi.n	800ae74 <__lo0bits+0x56>
 800ae2c:	0798      	lsls	r0, r3, #30
 800ae2e:	bf49      	itett	mi
 800ae30:	085b      	lsrmi	r3, r3, #1
 800ae32:	089b      	lsrpl	r3, r3, #2
 800ae34:	2001      	movmi	r0, #1
 800ae36:	600b      	strmi	r3, [r1, #0]
 800ae38:	bf5c      	itt	pl
 800ae3a:	600b      	strpl	r3, [r1, #0]
 800ae3c:	2002      	movpl	r0, #2
 800ae3e:	4770      	bx	lr
 800ae40:	b298      	uxth	r0, r3
 800ae42:	b9a8      	cbnz	r0, 800ae70 <__lo0bits+0x52>
 800ae44:	0c1b      	lsrs	r3, r3, #16
 800ae46:	2010      	movs	r0, #16
 800ae48:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ae4c:	bf04      	itt	eq
 800ae4e:	0a1b      	lsreq	r3, r3, #8
 800ae50:	3008      	addeq	r0, #8
 800ae52:	071a      	lsls	r2, r3, #28
 800ae54:	bf04      	itt	eq
 800ae56:	091b      	lsreq	r3, r3, #4
 800ae58:	3004      	addeq	r0, #4
 800ae5a:	079a      	lsls	r2, r3, #30
 800ae5c:	bf04      	itt	eq
 800ae5e:	089b      	lsreq	r3, r3, #2
 800ae60:	3002      	addeq	r0, #2
 800ae62:	07da      	lsls	r2, r3, #31
 800ae64:	d402      	bmi.n	800ae6c <__lo0bits+0x4e>
 800ae66:	085b      	lsrs	r3, r3, #1
 800ae68:	d006      	beq.n	800ae78 <__lo0bits+0x5a>
 800ae6a:	3001      	adds	r0, #1
 800ae6c:	600b      	str	r3, [r1, #0]
 800ae6e:	4770      	bx	lr
 800ae70:	4610      	mov	r0, r2
 800ae72:	e7e9      	b.n	800ae48 <__lo0bits+0x2a>
 800ae74:	2000      	movs	r0, #0
 800ae76:	4770      	bx	lr
 800ae78:	2020      	movs	r0, #32
 800ae7a:	4770      	bx	lr

0800ae7c <__i2b>:
 800ae7c:	b510      	push	{r4, lr}
 800ae7e:	460c      	mov	r4, r1
 800ae80:	2101      	movs	r1, #1
 800ae82:	f7ff fee9 	bl	800ac58 <_Balloc>
 800ae86:	2201      	movs	r2, #1
 800ae88:	6144      	str	r4, [r0, #20]
 800ae8a:	6102      	str	r2, [r0, #16]
 800ae8c:	bd10      	pop	{r4, pc}

0800ae8e <__multiply>:
 800ae8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae92:	4614      	mov	r4, r2
 800ae94:	690a      	ldr	r2, [r1, #16]
 800ae96:	6923      	ldr	r3, [r4, #16]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	bfb8      	it	lt
 800ae9c:	460b      	movlt	r3, r1
 800ae9e:	4688      	mov	r8, r1
 800aea0:	bfbc      	itt	lt
 800aea2:	46a0      	movlt	r8, r4
 800aea4:	461c      	movlt	r4, r3
 800aea6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aeaa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800aeae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aeb2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aeb6:	eb07 0609 	add.w	r6, r7, r9
 800aeba:	42b3      	cmp	r3, r6
 800aebc:	bfb8      	it	lt
 800aebe:	3101      	addlt	r1, #1
 800aec0:	f7ff feca 	bl	800ac58 <_Balloc>
 800aec4:	f100 0514 	add.w	r5, r0, #20
 800aec8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800aecc:	462b      	mov	r3, r5
 800aece:	2200      	movs	r2, #0
 800aed0:	4573      	cmp	r3, lr
 800aed2:	d316      	bcc.n	800af02 <__multiply+0x74>
 800aed4:	f104 0214 	add.w	r2, r4, #20
 800aed8:	f108 0114 	add.w	r1, r8, #20
 800aedc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800aee0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800aee4:	9300      	str	r3, [sp, #0]
 800aee6:	9b00      	ldr	r3, [sp, #0]
 800aee8:	9201      	str	r2, [sp, #4]
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d80c      	bhi.n	800af08 <__multiply+0x7a>
 800aeee:	2e00      	cmp	r6, #0
 800aef0:	dd03      	ble.n	800aefa <__multiply+0x6c>
 800aef2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d05d      	beq.n	800afb6 <__multiply+0x128>
 800aefa:	6106      	str	r6, [r0, #16]
 800aefc:	b003      	add	sp, #12
 800aefe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af02:	f843 2b04 	str.w	r2, [r3], #4
 800af06:	e7e3      	b.n	800aed0 <__multiply+0x42>
 800af08:	f8b2 b000 	ldrh.w	fp, [r2]
 800af0c:	f1bb 0f00 	cmp.w	fp, #0
 800af10:	d023      	beq.n	800af5a <__multiply+0xcc>
 800af12:	4689      	mov	r9, r1
 800af14:	46ac      	mov	ip, r5
 800af16:	f04f 0800 	mov.w	r8, #0
 800af1a:	f859 4b04 	ldr.w	r4, [r9], #4
 800af1e:	f8dc a000 	ldr.w	sl, [ip]
 800af22:	b2a3      	uxth	r3, r4
 800af24:	fa1f fa8a 	uxth.w	sl, sl
 800af28:	fb0b a303 	mla	r3, fp, r3, sl
 800af2c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800af30:	f8dc 4000 	ldr.w	r4, [ip]
 800af34:	4443      	add	r3, r8
 800af36:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800af3a:	fb0b 840a 	mla	r4, fp, sl, r8
 800af3e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800af42:	46e2      	mov	sl, ip
 800af44:	b29b      	uxth	r3, r3
 800af46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800af4a:	454f      	cmp	r7, r9
 800af4c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800af50:	f84a 3b04 	str.w	r3, [sl], #4
 800af54:	d82b      	bhi.n	800afae <__multiply+0x120>
 800af56:	f8cc 8004 	str.w	r8, [ip, #4]
 800af5a:	9b01      	ldr	r3, [sp, #4]
 800af5c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800af60:	3204      	adds	r2, #4
 800af62:	f1ba 0f00 	cmp.w	sl, #0
 800af66:	d020      	beq.n	800afaa <__multiply+0x11c>
 800af68:	682b      	ldr	r3, [r5, #0]
 800af6a:	4689      	mov	r9, r1
 800af6c:	46a8      	mov	r8, r5
 800af6e:	f04f 0b00 	mov.w	fp, #0
 800af72:	f8b9 c000 	ldrh.w	ip, [r9]
 800af76:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800af7a:	fb0a 440c 	mla	r4, sl, ip, r4
 800af7e:	445c      	add	r4, fp
 800af80:	46c4      	mov	ip, r8
 800af82:	b29b      	uxth	r3, r3
 800af84:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800af88:	f84c 3b04 	str.w	r3, [ip], #4
 800af8c:	f859 3b04 	ldr.w	r3, [r9], #4
 800af90:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800af94:	0c1b      	lsrs	r3, r3, #16
 800af96:	fb0a b303 	mla	r3, sl, r3, fp
 800af9a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800af9e:	454f      	cmp	r7, r9
 800afa0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800afa4:	d805      	bhi.n	800afb2 <__multiply+0x124>
 800afa6:	f8c8 3004 	str.w	r3, [r8, #4]
 800afaa:	3504      	adds	r5, #4
 800afac:	e79b      	b.n	800aee6 <__multiply+0x58>
 800afae:	46d4      	mov	ip, sl
 800afb0:	e7b3      	b.n	800af1a <__multiply+0x8c>
 800afb2:	46e0      	mov	r8, ip
 800afb4:	e7dd      	b.n	800af72 <__multiply+0xe4>
 800afb6:	3e01      	subs	r6, #1
 800afb8:	e799      	b.n	800aeee <__multiply+0x60>
	...

0800afbc <__pow5mult>:
 800afbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afc0:	4615      	mov	r5, r2
 800afc2:	f012 0203 	ands.w	r2, r2, #3
 800afc6:	4606      	mov	r6, r0
 800afc8:	460f      	mov	r7, r1
 800afca:	d007      	beq.n	800afdc <__pow5mult+0x20>
 800afcc:	3a01      	subs	r2, #1
 800afce:	4c21      	ldr	r4, [pc, #132]	; (800b054 <__pow5mult+0x98>)
 800afd0:	2300      	movs	r3, #0
 800afd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800afd6:	f7ff fe8a 	bl	800acee <__multadd>
 800afda:	4607      	mov	r7, r0
 800afdc:	10ad      	asrs	r5, r5, #2
 800afde:	d035      	beq.n	800b04c <__pow5mult+0x90>
 800afe0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800afe2:	b93c      	cbnz	r4, 800aff4 <__pow5mult+0x38>
 800afe4:	2010      	movs	r0, #16
 800afe6:	f000 facf 	bl	800b588 <malloc>
 800afea:	6270      	str	r0, [r6, #36]	; 0x24
 800afec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aff0:	6004      	str	r4, [r0, #0]
 800aff2:	60c4      	str	r4, [r0, #12]
 800aff4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aff8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800affc:	b94c      	cbnz	r4, 800b012 <__pow5mult+0x56>
 800affe:	f240 2171 	movw	r1, #625	; 0x271
 800b002:	4630      	mov	r0, r6
 800b004:	f7ff ff3a 	bl	800ae7c <__i2b>
 800b008:	2300      	movs	r3, #0
 800b00a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b00e:	4604      	mov	r4, r0
 800b010:	6003      	str	r3, [r0, #0]
 800b012:	f04f 0800 	mov.w	r8, #0
 800b016:	07eb      	lsls	r3, r5, #31
 800b018:	d50a      	bpl.n	800b030 <__pow5mult+0x74>
 800b01a:	4639      	mov	r1, r7
 800b01c:	4622      	mov	r2, r4
 800b01e:	4630      	mov	r0, r6
 800b020:	f7ff ff35 	bl	800ae8e <__multiply>
 800b024:	4639      	mov	r1, r7
 800b026:	4681      	mov	r9, r0
 800b028:	4630      	mov	r0, r6
 800b02a:	f7ff fe49 	bl	800acc0 <_Bfree>
 800b02e:	464f      	mov	r7, r9
 800b030:	106d      	asrs	r5, r5, #1
 800b032:	d00b      	beq.n	800b04c <__pow5mult+0x90>
 800b034:	6820      	ldr	r0, [r4, #0]
 800b036:	b938      	cbnz	r0, 800b048 <__pow5mult+0x8c>
 800b038:	4622      	mov	r2, r4
 800b03a:	4621      	mov	r1, r4
 800b03c:	4630      	mov	r0, r6
 800b03e:	f7ff ff26 	bl	800ae8e <__multiply>
 800b042:	6020      	str	r0, [r4, #0]
 800b044:	f8c0 8000 	str.w	r8, [r0]
 800b048:	4604      	mov	r4, r0
 800b04a:	e7e4      	b.n	800b016 <__pow5mult+0x5a>
 800b04c:	4638      	mov	r0, r7
 800b04e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b052:	bf00      	nop
 800b054:	0800bab8 	.word	0x0800bab8

0800b058 <__lshift>:
 800b058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b05c:	460c      	mov	r4, r1
 800b05e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b062:	6923      	ldr	r3, [r4, #16]
 800b064:	6849      	ldr	r1, [r1, #4]
 800b066:	eb0a 0903 	add.w	r9, sl, r3
 800b06a:	68a3      	ldr	r3, [r4, #8]
 800b06c:	4607      	mov	r7, r0
 800b06e:	4616      	mov	r6, r2
 800b070:	f109 0501 	add.w	r5, r9, #1
 800b074:	42ab      	cmp	r3, r5
 800b076:	db32      	blt.n	800b0de <__lshift+0x86>
 800b078:	4638      	mov	r0, r7
 800b07a:	f7ff fded 	bl	800ac58 <_Balloc>
 800b07e:	2300      	movs	r3, #0
 800b080:	4680      	mov	r8, r0
 800b082:	f100 0114 	add.w	r1, r0, #20
 800b086:	461a      	mov	r2, r3
 800b088:	4553      	cmp	r3, sl
 800b08a:	db2b      	blt.n	800b0e4 <__lshift+0x8c>
 800b08c:	6920      	ldr	r0, [r4, #16]
 800b08e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b092:	f104 0314 	add.w	r3, r4, #20
 800b096:	f016 021f 	ands.w	r2, r6, #31
 800b09a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b09e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b0a2:	d025      	beq.n	800b0f0 <__lshift+0x98>
 800b0a4:	f1c2 0e20 	rsb	lr, r2, #32
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	681e      	ldr	r6, [r3, #0]
 800b0ac:	468a      	mov	sl, r1
 800b0ae:	4096      	lsls	r6, r2
 800b0b0:	4330      	orrs	r0, r6
 800b0b2:	f84a 0b04 	str.w	r0, [sl], #4
 800b0b6:	f853 0b04 	ldr.w	r0, [r3], #4
 800b0ba:	459c      	cmp	ip, r3
 800b0bc:	fa20 f00e 	lsr.w	r0, r0, lr
 800b0c0:	d814      	bhi.n	800b0ec <__lshift+0x94>
 800b0c2:	6048      	str	r0, [r1, #4]
 800b0c4:	b108      	cbz	r0, 800b0ca <__lshift+0x72>
 800b0c6:	f109 0502 	add.w	r5, r9, #2
 800b0ca:	3d01      	subs	r5, #1
 800b0cc:	4638      	mov	r0, r7
 800b0ce:	f8c8 5010 	str.w	r5, [r8, #16]
 800b0d2:	4621      	mov	r1, r4
 800b0d4:	f7ff fdf4 	bl	800acc0 <_Bfree>
 800b0d8:	4640      	mov	r0, r8
 800b0da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0de:	3101      	adds	r1, #1
 800b0e0:	005b      	lsls	r3, r3, #1
 800b0e2:	e7c7      	b.n	800b074 <__lshift+0x1c>
 800b0e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	e7cd      	b.n	800b088 <__lshift+0x30>
 800b0ec:	4651      	mov	r1, sl
 800b0ee:	e7dc      	b.n	800b0aa <__lshift+0x52>
 800b0f0:	3904      	subs	r1, #4
 800b0f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0f6:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0fa:	459c      	cmp	ip, r3
 800b0fc:	d8f9      	bhi.n	800b0f2 <__lshift+0x9a>
 800b0fe:	e7e4      	b.n	800b0ca <__lshift+0x72>

0800b100 <__mcmp>:
 800b100:	6903      	ldr	r3, [r0, #16]
 800b102:	690a      	ldr	r2, [r1, #16]
 800b104:	1a9b      	subs	r3, r3, r2
 800b106:	b530      	push	{r4, r5, lr}
 800b108:	d10c      	bne.n	800b124 <__mcmp+0x24>
 800b10a:	0092      	lsls	r2, r2, #2
 800b10c:	3014      	adds	r0, #20
 800b10e:	3114      	adds	r1, #20
 800b110:	1884      	adds	r4, r0, r2
 800b112:	4411      	add	r1, r2
 800b114:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b118:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b11c:	4295      	cmp	r5, r2
 800b11e:	d003      	beq.n	800b128 <__mcmp+0x28>
 800b120:	d305      	bcc.n	800b12e <__mcmp+0x2e>
 800b122:	2301      	movs	r3, #1
 800b124:	4618      	mov	r0, r3
 800b126:	bd30      	pop	{r4, r5, pc}
 800b128:	42a0      	cmp	r0, r4
 800b12a:	d3f3      	bcc.n	800b114 <__mcmp+0x14>
 800b12c:	e7fa      	b.n	800b124 <__mcmp+0x24>
 800b12e:	f04f 33ff 	mov.w	r3, #4294967295
 800b132:	e7f7      	b.n	800b124 <__mcmp+0x24>

0800b134 <__mdiff>:
 800b134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b138:	460d      	mov	r5, r1
 800b13a:	4607      	mov	r7, r0
 800b13c:	4611      	mov	r1, r2
 800b13e:	4628      	mov	r0, r5
 800b140:	4614      	mov	r4, r2
 800b142:	f7ff ffdd 	bl	800b100 <__mcmp>
 800b146:	1e06      	subs	r6, r0, #0
 800b148:	d108      	bne.n	800b15c <__mdiff+0x28>
 800b14a:	4631      	mov	r1, r6
 800b14c:	4638      	mov	r0, r7
 800b14e:	f7ff fd83 	bl	800ac58 <_Balloc>
 800b152:	2301      	movs	r3, #1
 800b154:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b15c:	bfa4      	itt	ge
 800b15e:	4623      	movge	r3, r4
 800b160:	462c      	movge	r4, r5
 800b162:	4638      	mov	r0, r7
 800b164:	6861      	ldr	r1, [r4, #4]
 800b166:	bfa6      	itte	ge
 800b168:	461d      	movge	r5, r3
 800b16a:	2600      	movge	r6, #0
 800b16c:	2601      	movlt	r6, #1
 800b16e:	f7ff fd73 	bl	800ac58 <_Balloc>
 800b172:	692b      	ldr	r3, [r5, #16]
 800b174:	60c6      	str	r6, [r0, #12]
 800b176:	6926      	ldr	r6, [r4, #16]
 800b178:	f105 0914 	add.w	r9, r5, #20
 800b17c:	f104 0214 	add.w	r2, r4, #20
 800b180:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b184:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b188:	f100 0514 	add.w	r5, r0, #20
 800b18c:	f04f 0e00 	mov.w	lr, #0
 800b190:	f852 ab04 	ldr.w	sl, [r2], #4
 800b194:	f859 4b04 	ldr.w	r4, [r9], #4
 800b198:	fa1e f18a 	uxtah	r1, lr, sl
 800b19c:	b2a3      	uxth	r3, r4
 800b19e:	1ac9      	subs	r1, r1, r3
 800b1a0:	0c23      	lsrs	r3, r4, #16
 800b1a2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b1a6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b1aa:	b289      	uxth	r1, r1
 800b1ac:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b1b0:	45c8      	cmp	r8, r9
 800b1b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b1b6:	4694      	mov	ip, r2
 800b1b8:	f845 3b04 	str.w	r3, [r5], #4
 800b1bc:	d8e8      	bhi.n	800b190 <__mdiff+0x5c>
 800b1be:	45bc      	cmp	ip, r7
 800b1c0:	d304      	bcc.n	800b1cc <__mdiff+0x98>
 800b1c2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b1c6:	b183      	cbz	r3, 800b1ea <__mdiff+0xb6>
 800b1c8:	6106      	str	r6, [r0, #16]
 800b1ca:	e7c5      	b.n	800b158 <__mdiff+0x24>
 800b1cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b1d0:	fa1e f381 	uxtah	r3, lr, r1
 800b1d4:	141a      	asrs	r2, r3, #16
 800b1d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1e0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b1e4:	f845 3b04 	str.w	r3, [r5], #4
 800b1e8:	e7e9      	b.n	800b1be <__mdiff+0x8a>
 800b1ea:	3e01      	subs	r6, #1
 800b1ec:	e7e9      	b.n	800b1c2 <__mdiff+0x8e>
	...

0800b1f0 <__ulp>:
 800b1f0:	4b12      	ldr	r3, [pc, #72]	; (800b23c <__ulp+0x4c>)
 800b1f2:	ee10 2a90 	vmov	r2, s1
 800b1f6:	401a      	ands	r2, r3
 800b1f8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	dd04      	ble.n	800b20a <__ulp+0x1a>
 800b200:	2000      	movs	r0, #0
 800b202:	4619      	mov	r1, r3
 800b204:	ec41 0b10 	vmov	d0, r0, r1
 800b208:	4770      	bx	lr
 800b20a:	425b      	negs	r3, r3
 800b20c:	151b      	asrs	r3, r3, #20
 800b20e:	2b13      	cmp	r3, #19
 800b210:	f04f 0000 	mov.w	r0, #0
 800b214:	f04f 0100 	mov.w	r1, #0
 800b218:	dc04      	bgt.n	800b224 <__ulp+0x34>
 800b21a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b21e:	fa42 f103 	asr.w	r1, r2, r3
 800b222:	e7ef      	b.n	800b204 <__ulp+0x14>
 800b224:	3b14      	subs	r3, #20
 800b226:	2b1e      	cmp	r3, #30
 800b228:	f04f 0201 	mov.w	r2, #1
 800b22c:	bfda      	itte	le
 800b22e:	f1c3 031f 	rsble	r3, r3, #31
 800b232:	fa02 f303 	lslle.w	r3, r2, r3
 800b236:	4613      	movgt	r3, r2
 800b238:	4618      	mov	r0, r3
 800b23a:	e7e3      	b.n	800b204 <__ulp+0x14>
 800b23c:	7ff00000 	.word	0x7ff00000

0800b240 <__b2d>:
 800b240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b242:	6905      	ldr	r5, [r0, #16]
 800b244:	f100 0714 	add.w	r7, r0, #20
 800b248:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b24c:	1f2e      	subs	r6, r5, #4
 800b24e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b252:	4620      	mov	r0, r4
 800b254:	f7ff fdc4 	bl	800ade0 <__hi0bits>
 800b258:	f1c0 0320 	rsb	r3, r0, #32
 800b25c:	280a      	cmp	r0, #10
 800b25e:	600b      	str	r3, [r1, #0]
 800b260:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b2d8 <__b2d+0x98>
 800b264:	dc14      	bgt.n	800b290 <__b2d+0x50>
 800b266:	f1c0 0e0b 	rsb	lr, r0, #11
 800b26a:	fa24 f10e 	lsr.w	r1, r4, lr
 800b26e:	42b7      	cmp	r7, r6
 800b270:	ea41 030c 	orr.w	r3, r1, ip
 800b274:	bf34      	ite	cc
 800b276:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b27a:	2100      	movcs	r1, #0
 800b27c:	3015      	adds	r0, #21
 800b27e:	fa04 f000 	lsl.w	r0, r4, r0
 800b282:	fa21 f10e 	lsr.w	r1, r1, lr
 800b286:	ea40 0201 	orr.w	r2, r0, r1
 800b28a:	ec43 2b10 	vmov	d0, r2, r3
 800b28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b290:	42b7      	cmp	r7, r6
 800b292:	bf3a      	itte	cc
 800b294:	f1a5 0608 	subcc.w	r6, r5, #8
 800b298:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b29c:	2100      	movcs	r1, #0
 800b29e:	380b      	subs	r0, #11
 800b2a0:	d015      	beq.n	800b2ce <__b2d+0x8e>
 800b2a2:	4084      	lsls	r4, r0
 800b2a4:	f1c0 0520 	rsb	r5, r0, #32
 800b2a8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800b2ac:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800b2b0:	42be      	cmp	r6, r7
 800b2b2:	fa21 fc05 	lsr.w	ip, r1, r5
 800b2b6:	ea44 030c 	orr.w	r3, r4, ip
 800b2ba:	bf8c      	ite	hi
 800b2bc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b2c0:	2400      	movls	r4, #0
 800b2c2:	fa01 f000 	lsl.w	r0, r1, r0
 800b2c6:	40ec      	lsrs	r4, r5
 800b2c8:	ea40 0204 	orr.w	r2, r0, r4
 800b2cc:	e7dd      	b.n	800b28a <__b2d+0x4a>
 800b2ce:	ea44 030c 	orr.w	r3, r4, ip
 800b2d2:	460a      	mov	r2, r1
 800b2d4:	e7d9      	b.n	800b28a <__b2d+0x4a>
 800b2d6:	bf00      	nop
 800b2d8:	3ff00000 	.word	0x3ff00000

0800b2dc <__d2b>:
 800b2dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2e0:	460e      	mov	r6, r1
 800b2e2:	2101      	movs	r1, #1
 800b2e4:	ec59 8b10 	vmov	r8, r9, d0
 800b2e8:	4615      	mov	r5, r2
 800b2ea:	f7ff fcb5 	bl	800ac58 <_Balloc>
 800b2ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b2f2:	4607      	mov	r7, r0
 800b2f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2f8:	bb34      	cbnz	r4, 800b348 <__d2b+0x6c>
 800b2fa:	9301      	str	r3, [sp, #4]
 800b2fc:	f1b8 0300 	subs.w	r3, r8, #0
 800b300:	d027      	beq.n	800b352 <__d2b+0x76>
 800b302:	a802      	add	r0, sp, #8
 800b304:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b308:	f7ff fd89 	bl	800ae1e <__lo0bits>
 800b30c:	9900      	ldr	r1, [sp, #0]
 800b30e:	b1f0      	cbz	r0, 800b34e <__d2b+0x72>
 800b310:	9a01      	ldr	r2, [sp, #4]
 800b312:	f1c0 0320 	rsb	r3, r0, #32
 800b316:	fa02 f303 	lsl.w	r3, r2, r3
 800b31a:	430b      	orrs	r3, r1
 800b31c:	40c2      	lsrs	r2, r0
 800b31e:	617b      	str	r3, [r7, #20]
 800b320:	9201      	str	r2, [sp, #4]
 800b322:	9b01      	ldr	r3, [sp, #4]
 800b324:	61bb      	str	r3, [r7, #24]
 800b326:	2b00      	cmp	r3, #0
 800b328:	bf14      	ite	ne
 800b32a:	2102      	movne	r1, #2
 800b32c:	2101      	moveq	r1, #1
 800b32e:	6139      	str	r1, [r7, #16]
 800b330:	b1c4      	cbz	r4, 800b364 <__d2b+0x88>
 800b332:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b336:	4404      	add	r4, r0
 800b338:	6034      	str	r4, [r6, #0]
 800b33a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b33e:	6028      	str	r0, [r5, #0]
 800b340:	4638      	mov	r0, r7
 800b342:	b003      	add	sp, #12
 800b344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b348:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b34c:	e7d5      	b.n	800b2fa <__d2b+0x1e>
 800b34e:	6179      	str	r1, [r7, #20]
 800b350:	e7e7      	b.n	800b322 <__d2b+0x46>
 800b352:	a801      	add	r0, sp, #4
 800b354:	f7ff fd63 	bl	800ae1e <__lo0bits>
 800b358:	9b01      	ldr	r3, [sp, #4]
 800b35a:	617b      	str	r3, [r7, #20]
 800b35c:	2101      	movs	r1, #1
 800b35e:	6139      	str	r1, [r7, #16]
 800b360:	3020      	adds	r0, #32
 800b362:	e7e5      	b.n	800b330 <__d2b+0x54>
 800b364:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b368:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b36c:	6030      	str	r0, [r6, #0]
 800b36e:	6918      	ldr	r0, [r3, #16]
 800b370:	f7ff fd36 	bl	800ade0 <__hi0bits>
 800b374:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b378:	e7e1      	b.n	800b33e <__d2b+0x62>

0800b37a <__ratio>:
 800b37a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b37e:	4688      	mov	r8, r1
 800b380:	4669      	mov	r1, sp
 800b382:	4681      	mov	r9, r0
 800b384:	f7ff ff5c 	bl	800b240 <__b2d>
 800b388:	a901      	add	r1, sp, #4
 800b38a:	4640      	mov	r0, r8
 800b38c:	ec57 6b10 	vmov	r6, r7, d0
 800b390:	f7ff ff56 	bl	800b240 <__b2d>
 800b394:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b398:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b39c:	eba3 0c02 	sub.w	ip, r3, r2
 800b3a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b3a4:	1a9b      	subs	r3, r3, r2
 800b3a6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b3aa:	ec5b ab10 	vmov	sl, fp, d0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	bfce      	itee	gt
 800b3b2:	463a      	movgt	r2, r7
 800b3b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b3b8:	465a      	movle	r2, fp
 800b3ba:	4659      	mov	r1, fp
 800b3bc:	463d      	mov	r5, r7
 800b3be:	bfd4      	ite	le
 800b3c0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b3c4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	ee10 2a10 	vmov	r2, s0
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	4629      	mov	r1, r5
 800b3d2:	f7f5 f9f9 	bl	80007c8 <__aeabi_ddiv>
 800b3d6:	ec41 0b10 	vmov	d0, r0, r1
 800b3da:	b003      	add	sp, #12
 800b3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b3e0 <__copybits>:
 800b3e0:	3901      	subs	r1, #1
 800b3e2:	b510      	push	{r4, lr}
 800b3e4:	1149      	asrs	r1, r1, #5
 800b3e6:	6914      	ldr	r4, [r2, #16]
 800b3e8:	3101      	adds	r1, #1
 800b3ea:	f102 0314 	add.w	r3, r2, #20
 800b3ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b3f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b3f6:	42a3      	cmp	r3, r4
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	d303      	bcc.n	800b404 <__copybits+0x24>
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	428a      	cmp	r2, r1
 800b400:	d305      	bcc.n	800b40e <__copybits+0x2e>
 800b402:	bd10      	pop	{r4, pc}
 800b404:	f853 2b04 	ldr.w	r2, [r3], #4
 800b408:	f840 2b04 	str.w	r2, [r0], #4
 800b40c:	e7f3      	b.n	800b3f6 <__copybits+0x16>
 800b40e:	f842 3b04 	str.w	r3, [r2], #4
 800b412:	e7f4      	b.n	800b3fe <__copybits+0x1e>

0800b414 <__any_on>:
 800b414:	f100 0214 	add.w	r2, r0, #20
 800b418:	6900      	ldr	r0, [r0, #16]
 800b41a:	114b      	asrs	r3, r1, #5
 800b41c:	4298      	cmp	r0, r3
 800b41e:	b510      	push	{r4, lr}
 800b420:	db11      	blt.n	800b446 <__any_on+0x32>
 800b422:	dd0a      	ble.n	800b43a <__any_on+0x26>
 800b424:	f011 011f 	ands.w	r1, r1, #31
 800b428:	d007      	beq.n	800b43a <__any_on+0x26>
 800b42a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b42e:	fa24 f001 	lsr.w	r0, r4, r1
 800b432:	fa00 f101 	lsl.w	r1, r0, r1
 800b436:	428c      	cmp	r4, r1
 800b438:	d10b      	bne.n	800b452 <__any_on+0x3e>
 800b43a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b43e:	4293      	cmp	r3, r2
 800b440:	d803      	bhi.n	800b44a <__any_on+0x36>
 800b442:	2000      	movs	r0, #0
 800b444:	bd10      	pop	{r4, pc}
 800b446:	4603      	mov	r3, r0
 800b448:	e7f7      	b.n	800b43a <__any_on+0x26>
 800b44a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b44e:	2900      	cmp	r1, #0
 800b450:	d0f5      	beq.n	800b43e <__any_on+0x2a>
 800b452:	2001      	movs	r0, #1
 800b454:	e7f6      	b.n	800b444 <__any_on+0x30>

0800b456 <_calloc_r>:
 800b456:	b538      	push	{r3, r4, r5, lr}
 800b458:	fb02 f401 	mul.w	r4, r2, r1
 800b45c:	4621      	mov	r1, r4
 800b45e:	f000 f809 	bl	800b474 <_malloc_r>
 800b462:	4605      	mov	r5, r0
 800b464:	b118      	cbz	r0, 800b46e <_calloc_r+0x18>
 800b466:	4622      	mov	r2, r4
 800b468:	2100      	movs	r1, #0
 800b46a:	f7fe f9a9 	bl	80097c0 <memset>
 800b46e:	4628      	mov	r0, r5
 800b470:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b474 <_malloc_r>:
 800b474:	b570      	push	{r4, r5, r6, lr}
 800b476:	1ccd      	adds	r5, r1, #3
 800b478:	f025 0503 	bic.w	r5, r5, #3
 800b47c:	3508      	adds	r5, #8
 800b47e:	2d0c      	cmp	r5, #12
 800b480:	bf38      	it	cc
 800b482:	250c      	movcc	r5, #12
 800b484:	2d00      	cmp	r5, #0
 800b486:	4606      	mov	r6, r0
 800b488:	db01      	blt.n	800b48e <_malloc_r+0x1a>
 800b48a:	42a9      	cmp	r1, r5
 800b48c:	d903      	bls.n	800b496 <_malloc_r+0x22>
 800b48e:	230c      	movs	r3, #12
 800b490:	6033      	str	r3, [r6, #0]
 800b492:	2000      	movs	r0, #0
 800b494:	bd70      	pop	{r4, r5, r6, pc}
 800b496:	f000 f87f 	bl	800b598 <__malloc_lock>
 800b49a:	4a21      	ldr	r2, [pc, #132]	; (800b520 <_malloc_r+0xac>)
 800b49c:	6814      	ldr	r4, [r2, #0]
 800b49e:	4621      	mov	r1, r4
 800b4a0:	b991      	cbnz	r1, 800b4c8 <_malloc_r+0x54>
 800b4a2:	4c20      	ldr	r4, [pc, #128]	; (800b524 <_malloc_r+0xb0>)
 800b4a4:	6823      	ldr	r3, [r4, #0]
 800b4a6:	b91b      	cbnz	r3, 800b4b0 <_malloc_r+0x3c>
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	f000 f83d 	bl	800b528 <_sbrk_r>
 800b4ae:	6020      	str	r0, [r4, #0]
 800b4b0:	4629      	mov	r1, r5
 800b4b2:	4630      	mov	r0, r6
 800b4b4:	f000 f838 	bl	800b528 <_sbrk_r>
 800b4b8:	1c43      	adds	r3, r0, #1
 800b4ba:	d124      	bne.n	800b506 <_malloc_r+0x92>
 800b4bc:	230c      	movs	r3, #12
 800b4be:	6033      	str	r3, [r6, #0]
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	f000 f86a 	bl	800b59a <__malloc_unlock>
 800b4c6:	e7e4      	b.n	800b492 <_malloc_r+0x1e>
 800b4c8:	680b      	ldr	r3, [r1, #0]
 800b4ca:	1b5b      	subs	r3, r3, r5
 800b4cc:	d418      	bmi.n	800b500 <_malloc_r+0x8c>
 800b4ce:	2b0b      	cmp	r3, #11
 800b4d0:	d90f      	bls.n	800b4f2 <_malloc_r+0x7e>
 800b4d2:	600b      	str	r3, [r1, #0]
 800b4d4:	50cd      	str	r5, [r1, r3]
 800b4d6:	18cc      	adds	r4, r1, r3
 800b4d8:	4630      	mov	r0, r6
 800b4da:	f000 f85e 	bl	800b59a <__malloc_unlock>
 800b4de:	f104 000b 	add.w	r0, r4, #11
 800b4e2:	1d23      	adds	r3, r4, #4
 800b4e4:	f020 0007 	bic.w	r0, r0, #7
 800b4e8:	1ac3      	subs	r3, r0, r3
 800b4ea:	d0d3      	beq.n	800b494 <_malloc_r+0x20>
 800b4ec:	425a      	negs	r2, r3
 800b4ee:	50e2      	str	r2, [r4, r3]
 800b4f0:	e7d0      	b.n	800b494 <_malloc_r+0x20>
 800b4f2:	428c      	cmp	r4, r1
 800b4f4:	684b      	ldr	r3, [r1, #4]
 800b4f6:	bf16      	itet	ne
 800b4f8:	6063      	strne	r3, [r4, #4]
 800b4fa:	6013      	streq	r3, [r2, #0]
 800b4fc:	460c      	movne	r4, r1
 800b4fe:	e7eb      	b.n	800b4d8 <_malloc_r+0x64>
 800b500:	460c      	mov	r4, r1
 800b502:	6849      	ldr	r1, [r1, #4]
 800b504:	e7cc      	b.n	800b4a0 <_malloc_r+0x2c>
 800b506:	1cc4      	adds	r4, r0, #3
 800b508:	f024 0403 	bic.w	r4, r4, #3
 800b50c:	42a0      	cmp	r0, r4
 800b50e:	d005      	beq.n	800b51c <_malloc_r+0xa8>
 800b510:	1a21      	subs	r1, r4, r0
 800b512:	4630      	mov	r0, r6
 800b514:	f000 f808 	bl	800b528 <_sbrk_r>
 800b518:	3001      	adds	r0, #1
 800b51a:	d0cf      	beq.n	800b4bc <_malloc_r+0x48>
 800b51c:	6025      	str	r5, [r4, #0]
 800b51e:	e7db      	b.n	800b4d8 <_malloc_r+0x64>
 800b520:	20000c30 	.word	0x20000c30
 800b524:	20000c34 	.word	0x20000c34

0800b528 <_sbrk_r>:
 800b528:	b538      	push	{r3, r4, r5, lr}
 800b52a:	4c06      	ldr	r4, [pc, #24]	; (800b544 <_sbrk_r+0x1c>)
 800b52c:	2300      	movs	r3, #0
 800b52e:	4605      	mov	r5, r0
 800b530:	4608      	mov	r0, r1
 800b532:	6023      	str	r3, [r4, #0]
 800b534:	f7f7 fa78 	bl	8002a28 <_sbrk>
 800b538:	1c43      	adds	r3, r0, #1
 800b53a:	d102      	bne.n	800b542 <_sbrk_r+0x1a>
 800b53c:	6823      	ldr	r3, [r4, #0]
 800b53e:	b103      	cbz	r3, 800b542 <_sbrk_r+0x1a>
 800b540:	602b      	str	r3, [r5, #0]
 800b542:	bd38      	pop	{r3, r4, r5, pc}
 800b544:	2000d274 	.word	0x2000d274

0800b548 <strncmp>:
 800b548:	b510      	push	{r4, lr}
 800b54a:	b16a      	cbz	r2, 800b568 <strncmp+0x20>
 800b54c:	3901      	subs	r1, #1
 800b54e:	1884      	adds	r4, r0, r2
 800b550:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b554:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b558:	4293      	cmp	r3, r2
 800b55a:	d103      	bne.n	800b564 <strncmp+0x1c>
 800b55c:	42a0      	cmp	r0, r4
 800b55e:	d001      	beq.n	800b564 <strncmp+0x1c>
 800b560:	2b00      	cmp	r3, #0
 800b562:	d1f5      	bne.n	800b550 <strncmp+0x8>
 800b564:	1a98      	subs	r0, r3, r2
 800b566:	bd10      	pop	{r4, pc}
 800b568:	4610      	mov	r0, r2
 800b56a:	e7fc      	b.n	800b566 <strncmp+0x1e>

0800b56c <__ascii_wctomb>:
 800b56c:	b149      	cbz	r1, 800b582 <__ascii_wctomb+0x16>
 800b56e:	2aff      	cmp	r2, #255	; 0xff
 800b570:	bf85      	ittet	hi
 800b572:	238a      	movhi	r3, #138	; 0x8a
 800b574:	6003      	strhi	r3, [r0, #0]
 800b576:	700a      	strbls	r2, [r1, #0]
 800b578:	f04f 30ff 	movhi.w	r0, #4294967295
 800b57c:	bf98      	it	ls
 800b57e:	2001      	movls	r0, #1
 800b580:	4770      	bx	lr
 800b582:	4608      	mov	r0, r1
 800b584:	4770      	bx	lr
	...

0800b588 <malloc>:
 800b588:	4b02      	ldr	r3, [pc, #8]	; (800b594 <malloc+0xc>)
 800b58a:	4601      	mov	r1, r0
 800b58c:	6818      	ldr	r0, [r3, #0]
 800b58e:	f7ff bf71 	b.w	800b474 <_malloc_r>
 800b592:	bf00      	nop
 800b594:	20000a28 	.word	0x20000a28

0800b598 <__malloc_lock>:
 800b598:	4770      	bx	lr

0800b59a <__malloc_unlock>:
 800b59a:	4770      	bx	lr

0800b59c <_init>:
 800b59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b59e:	bf00      	nop
 800b5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5a2:	bc08      	pop	{r3}
 800b5a4:	469e      	mov	lr, r3
 800b5a6:	4770      	bx	lr

0800b5a8 <_fini>:
 800b5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5aa:	bf00      	nop
 800b5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5ae:	bc08      	pop	{r3}
 800b5b0:	469e      	mov	lr, r3
 800b5b2:	4770      	bx	lr
