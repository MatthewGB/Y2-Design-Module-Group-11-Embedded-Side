
First_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a554  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  0800a6f0  0800a6f0  0001a6f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acc0  0800acc0  00020bf4  2**0
                  CONTENTS
  4 .ARM          00000000  0800acc0  0800acc0  00020bf4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800acc0  0800acc0  00020bf4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acc0  0800acc0  0001acc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acc4  0800acc4  0001acc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000bf4  20000000  0800acc8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c634  20000bf4  0800b8bc  00020bf4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d228  0800b8bc  0002d228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020bf4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e59  00000000  00000000  00020c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024f8  00000000  00000000  00033a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001128  00000000  00000000  00035f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001030  00000000  00000000  000370a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000228db  00000000  00000000  000380d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010f64  00000000  00000000  0005a9ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d60f2  00000000  00000000  0006b90f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00141a01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005348  00000000  00000000  00141a7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000bf4 	.word	0x20000bf4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a6d4 	.word	0x0800a6d4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000bf8 	.word	0x20000bf8
 80001d4:	0800a6d4 	.word	0x0800a6d4

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	; 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033a:	f1a4 0401 	sub.w	r4, r4, #1
 800033e:	d1e9      	bne.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_dmul>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000582:	bf1d      	ittte	ne
 8000584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000588:	ea94 0f0c 	teqne	r4, ip
 800058c:	ea95 0f0c 	teqne	r5, ip
 8000590:	f000 f8de 	bleq	8000750 <__aeabi_dmul+0x1dc>
 8000594:	442c      	add	r4, r5
 8000596:	ea81 0603 	eor.w	r6, r1, r3
 800059a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a6:	bf18      	it	ne
 80005a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b4:	d038      	beq.n	8000628 <__aeabi_dmul+0xb4>
 80005b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ca:	f04f 0600 	mov.w	r6, #0
 80005ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d2:	f09c 0f00 	teq	ip, #0
 80005d6:	bf18      	it	ne
 80005d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e8:	d204      	bcs.n	80005f4 <__aeabi_dmul+0x80>
 80005ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ee:	416d      	adcs	r5, r5
 80005f0:	eb46 0606 	adc.w	r6, r6, r6
 80005f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000608:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800060c:	bf88      	it	hi
 800060e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000612:	d81e      	bhi.n	8000652 <__aeabi_dmul+0xde>
 8000614:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800062c:	ea46 0101 	orr.w	r1, r6, r1
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	ea81 0103 	eor.w	r1, r1, r3
 8000638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800063c:	bfc2      	ittt	gt
 800063e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000646:	bd70      	popgt	{r4, r5, r6, pc}
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f04f 0e00 	mov.w	lr, #0
 8000650:	3c01      	subs	r4, #1
 8000652:	f300 80ab 	bgt.w	80007ac <__aeabi_dmul+0x238>
 8000656:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065a:	bfde      	ittt	le
 800065c:	2000      	movle	r0, #0
 800065e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000662:	bd70      	pople	{r4, r5, r6, pc}
 8000664:	f1c4 0400 	rsb	r4, r4, #0
 8000668:	3c20      	subs	r4, #32
 800066a:	da35      	bge.n	80006d8 <__aeabi_dmul+0x164>
 800066c:	340c      	adds	r4, #12
 800066e:	dc1b      	bgt.n	80006a8 <__aeabi_dmul+0x134>
 8000670:	f104 0414 	add.w	r4, r4, #20
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f305 	lsl.w	r3, r0, r5
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	fa21 f604 	lsr.w	r6, r1, r4
 8000698:	eb42 0106 	adc.w	r1, r2, r6
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 040c 	rsb	r4, r4, #12
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f304 	lsl.w	r3, r0, r4
 80006b4:	fa20 f005 	lsr.w	r0, r0, r5
 80006b8:	fa01 f204 	lsl.w	r2, r1, r4
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	f141 0100 	adc.w	r1, r1, #0
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f205 	lsl.w	r2, r0, r5
 80006e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e4:	fa20 f304 	lsr.w	r3, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea43 0302 	orr.w	r3, r3, r2
 80006f0:	fa21 f004 	lsr.w	r0, r1, r4
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	fa21 f204 	lsr.w	r2, r1, r4
 80006fc:	ea20 0002 	bic.w	r0, r0, r2
 8000700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f094 0f00 	teq	r4, #0
 8000714:	d10f      	bne.n	8000736 <__aeabi_dmul+0x1c2>
 8000716:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071a:	0040      	lsls	r0, r0, #1
 800071c:	eb41 0101 	adc.w	r1, r1, r1
 8000720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3c01      	subeq	r4, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1a6>
 800072a:	ea41 0106 	orr.w	r1, r1, r6
 800072e:	f095 0f00 	teq	r5, #0
 8000732:	bf18      	it	ne
 8000734:	4770      	bxne	lr
 8000736:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	eb43 0303 	adc.w	r3, r3, r3
 8000740:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000744:	bf08      	it	eq
 8000746:	3d01      	subeq	r5, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1c6>
 800074a:	ea43 0306 	orr.w	r3, r3, r6
 800074e:	4770      	bx	lr
 8000750:	ea94 0f0c 	teq	r4, ip
 8000754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000758:	bf18      	it	ne
 800075a:	ea95 0f0c 	teqne	r5, ip
 800075e:	d00c      	beq.n	800077a <__aeabi_dmul+0x206>
 8000760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076a:	d1d1      	bne.n	8000710 <__aeabi_dmul+0x19c>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077e:	bf06      	itte	eq
 8000780:	4610      	moveq	r0, r2
 8000782:	4619      	moveq	r1, r3
 8000784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000788:	d019      	beq.n	80007be <__aeabi_dmul+0x24a>
 800078a:	ea94 0f0c 	teq	r4, ip
 800078e:	d102      	bne.n	8000796 <__aeabi_dmul+0x222>
 8000790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000794:	d113      	bne.n	80007be <__aeabi_dmul+0x24a>
 8000796:	ea95 0f0c 	teq	r5, ip
 800079a:	d105      	bne.n	80007a8 <__aeabi_dmul+0x234>
 800079c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a0:	bf1c      	itt	ne
 80007a2:	4610      	movne	r0, r2
 80007a4:	4619      	movne	r1, r3
 80007a6:	d10a      	bne.n	80007be <__aeabi_dmul+0x24a>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__aeabi_ddiv>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d6:	bf1d      	ittte	ne
 80007d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007dc:	ea94 0f0c 	teqne	r4, ip
 80007e0:	ea95 0f0c 	teqne	r5, ip
 80007e4:	f000 f8a7 	bleq	8000936 <__aeabi_ddiv+0x16e>
 80007e8:	eba4 0405 	sub.w	r4, r4, r5
 80007ec:	ea81 0e03 	eor.w	lr, r1, r3
 80007f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f8:	f000 8088 	beq.w	800090c <__aeabi_ddiv+0x144>
 80007fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000800:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800080c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000818:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800081c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000820:	429d      	cmp	r5, r3
 8000822:	bf08      	it	eq
 8000824:	4296      	cmpeq	r6, r2
 8000826:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082e:	d202      	bcs.n	8000836 <__aeabi_ddiv+0x6e>
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	1ab6      	subs	r6, r6, r2
 8000838:	eb65 0503 	sbc.w	r5, r5, r3
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000846:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 000c 	orrcs.w	r0, r0, ip
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a8:	d018      	beq.n	80008dc <__aeabi_ddiv+0x114>
 80008aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c6:	d1c0      	bne.n	800084a <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	d10b      	bne.n	80008e6 <__aeabi_ddiv+0x11e>
 80008ce:	ea41 0100 	orr.w	r1, r1, r0
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008da:	e7b6      	b.n	800084a <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	bf04      	itt	eq
 80008e2:	4301      	orreq	r1, r0
 80008e4:	2000      	moveq	r0, #0
 80008e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ea:	bf88      	it	hi
 80008ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f0:	f63f aeaf 	bhi.w	8000652 <__aeabi_dmul+0xde>
 80008f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f8:	bf04      	itt	eq
 80008fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000918:	bfc2      	ittt	gt
 800091a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000922:	bd70      	popgt	{r4, r5, r6, pc}
 8000924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000928:	f04f 0e00 	mov.w	lr, #0
 800092c:	3c01      	subs	r4, #1
 800092e:	e690      	b.n	8000652 <__aeabi_dmul+0xde>
 8000930:	ea45 0e06 	orr.w	lr, r5, r6
 8000934:	e68d      	b.n	8000652 <__aeabi_dmul+0xde>
 8000936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093a:	ea94 0f0c 	teq	r4, ip
 800093e:	bf08      	it	eq
 8000940:	ea95 0f0c 	teqeq	r5, ip
 8000944:	f43f af3b 	beq.w	80007be <__aeabi_dmul+0x24a>
 8000948:	ea94 0f0c 	teq	r4, ip
 800094c:	d10a      	bne.n	8000964 <__aeabi_ddiv+0x19c>
 800094e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000952:	f47f af34 	bne.w	80007be <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	f47f af25 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e72c      	b.n	80007be <__aeabi_dmul+0x24a>
 8000964:	ea95 0f0c 	teq	r5, ip
 8000968:	d106      	bne.n	8000978 <__aeabi_ddiv+0x1b0>
 800096a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096e:	f43f aefd 	beq.w	800076c <__aeabi_dmul+0x1f8>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e722      	b.n	80007be <__aeabi_dmul+0x24a>
 8000978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000982:	f47f aec5 	bne.w	8000710 <__aeabi_dmul+0x19c>
 8000986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098a:	f47f af0d 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800098e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000992:	f47f aeeb 	bne.w	800076c <__aeabi_dmul+0x1f8>
 8000996:	e712      	b.n	80007be <__aeabi_dmul+0x24a>

08000998 <__gedf2>:
 8000998:	f04f 3cff 	mov.w	ip, #4294967295
 800099c:	e006      	b.n	80009ac <__cmpdf2+0x4>
 800099e:	bf00      	nop

080009a0 <__ledf2>:
 80009a0:	f04f 0c01 	mov.w	ip, #1
 80009a4:	e002      	b.n	80009ac <__cmpdf2+0x4>
 80009a6:	bf00      	nop

080009a8 <__cmpdf2>:
 80009a8:	f04f 0c01 	mov.w	ip, #1
 80009ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009bc:	bf18      	it	ne
 80009be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c2:	d01b      	beq.n	80009fc <__cmpdf2+0x54>
 80009c4:	b001      	add	sp, #4
 80009c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ca:	bf0c      	ite	eq
 80009cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d0:	ea91 0f03 	teqne	r1, r3
 80009d4:	bf02      	ittt	eq
 80009d6:	ea90 0f02 	teqeq	r0, r2
 80009da:	2000      	moveq	r0, #0
 80009dc:	4770      	bxeq	lr
 80009de:	f110 0f00 	cmn.w	r0, #0
 80009e2:	ea91 0f03 	teq	r1, r3
 80009e6:	bf58      	it	pl
 80009e8:	4299      	cmppl	r1, r3
 80009ea:	bf08      	it	eq
 80009ec:	4290      	cmpeq	r0, r2
 80009ee:	bf2c      	ite	cs
 80009f0:	17d8      	asrcs	r0, r3, #31
 80009f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009f6:	f040 0001 	orr.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__cmpdf2+0x64>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d107      	bne.n	8000a1c <__cmpdf2+0x74>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d1d6      	bne.n	80009c4 <__cmpdf2+0x1c>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d0d3      	beq.n	80009c4 <__cmpdf2+0x1c>
 8000a1c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdrcmple>:
 8000a24:	4684      	mov	ip, r0
 8000a26:	4610      	mov	r0, r2
 8000a28:	4662      	mov	r2, ip
 8000a2a:	468c      	mov	ip, r1
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4663      	mov	r3, ip
 8000a30:	e000      	b.n	8000a34 <__aeabi_cdcmpeq>
 8000a32:	bf00      	nop

08000a34 <__aeabi_cdcmpeq>:
 8000a34:	b501      	push	{r0, lr}
 8000a36:	f7ff ffb7 	bl	80009a8 <__cmpdf2>
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	bf48      	it	mi
 8000a3e:	f110 0f00 	cmnmi.w	r0, #0
 8000a42:	bd01      	pop	{r0, pc}

08000a44 <__aeabi_dcmpeq>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff fff4 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a4c:	bf0c      	ite	eq
 8000a4e:	2001      	moveq	r0, #1
 8000a50:	2000      	movne	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmplt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffea 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmple>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffe0 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpge>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffce 	bl	8000a24 <__aeabi_cdrcmple>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpgt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffc4 	bl	8000a24 <__aeabi_cdrcmple>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2uiz>:
 8000af8:	004a      	lsls	r2, r1, #1
 8000afa:	d211      	bcs.n	8000b20 <__aeabi_d2uiz+0x28>
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d211      	bcs.n	8000b26 <__aeabi_d2uiz+0x2e>
 8000b02:	d50d      	bpl.n	8000b20 <__aeabi_d2uiz+0x28>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d40e      	bmi.n	8000b2c <__aeabi_d2uiz+0x34>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d102      	bne.n	8000b32 <__aeabi_d2uiz+0x3a>
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	4770      	bx	lr
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	4770      	bx	lr

08000b38 <serialOut>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void serialOut(UART_HandleTypeDef *huart, char _out[], uint32_t len){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(huart, (uint8_t *) _out, len, 100);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	2364      	movs	r3, #100	; 0x64
 8000b4a:	68b9      	ldr	r1, [r7, #8]
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	f007 f9ed 	bl	8007f2c <HAL_UART_Transmit>
}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <printStr>:

void printStr(char str[])
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	serialOut(&huart2, str, strlen(str));
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff fb41 	bl	80001ec <strlen>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	4803      	ldr	r0, [pc, #12]	; (8000b80 <printStr+0x24>)
 8000b72:	f7ff ffe1 	bl	8000b38 <serialOut>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000d158 	.word	0x2000d158

08000b84 <printChar>:

void printChar(char chr)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	char str1[2] = {chr , '\0'};
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	753b      	strb	r3, [r7, #20]
 8000b92:	2300      	movs	r3, #0
 8000b94:	757b      	strb	r3, [r7, #21]
	char str2[5] = "";
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	743b      	strb	r3, [r7, #16]
	strcpy(str2,str1);
 8000b9e:	f107 0214 	add.w	r2, r7, #20
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f007 fead 	bl	8008908 <strcpy>
	serialOut(&huart2, str2, strlen(str2));
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fb1a 	bl	80001ec <strlen>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <printChar+0x4c>)
 8000bc2:	f7ff ffb9 	bl	8000b38 <serialOut>
}
 8000bc6:	bf00      	nop
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000d158 	.word	0x2000d158

08000bd4 <printInt>:

void printInt(int i)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	char str[5];
	itoa(i, str, 10);
 8000bdc:	f107 0308 	add.w	r3, r7, #8
 8000be0:	220a      	movs	r2, #10
 8000be2:	4619      	mov	r1, r3
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f007 fe85 	bl	80088f4 <itoa>
	serialOut(&huart2, str, strlen(str));
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fafc 	bl	80001ec <strlen>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4803      	ldr	r0, [pc, #12]	; (8000c0c <printInt+0x38>)
 8000bfe:	f7ff ff9b 	bl	8000b38 <serialOut>
}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	2000d158 	.word	0x2000d158

08000c10 <printStrLn>:

/**
 * Print string and go to next line (currently broken)
 */
void printStrLn(char str[])
{
 8000c10:	b5b0      	push	{r4, r5, r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	466b      	mov	r3, sp
 8000c1a:	461d      	mov	r5, r3
	char newstr[strlen(str)+5];
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff fae5 	bl	80001ec <strlen>
 8000c22:	4603      	mov	r3, r0
 8000c24:	1d58      	adds	r0, r3, #5
 8000c26:	4603      	mov	r3, r0
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	4601      	mov	r1, r0
 8000c2e:	f04f 0200 	mov.w	r2, #0
 8000c32:	f04f 0300 	mov.w	r3, #0
 8000c36:	f04f 0400 	mov.w	r4, #0
 8000c3a:	00d4      	lsls	r4, r2, #3
 8000c3c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000c40:	00cb      	lsls	r3, r1, #3
 8000c42:	4601      	mov	r1, r0
 8000c44:	f04f 0200 	mov.w	r2, #0
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	f04f 0400 	mov.w	r4, #0
 8000c50:	00d4      	lsls	r4, r2, #3
 8000c52:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000c56:	00cb      	lsls	r3, r1, #3
 8000c58:	1dc3      	adds	r3, r0, #7
 8000c5a:	08db      	lsrs	r3, r3, #3
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	ebad 0d03 	sub.w	sp, sp, r3
 8000c62:	466b      	mov	r3, sp
 8000c64:	3300      	adds	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
	strcpy(newstr, str);
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f007 fe4b 	bl	8008908 <strcpy>
	strcat(newstr, "\r\n");
 8000c72:	68bc      	ldr	r4, [r7, #8]
 8000c74:	4620      	mov	r0, r4
 8000c76:	f7ff fab9 	bl	80001ec <strlen>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4423      	add	r3, r4
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <printStrLn+0x98>)
 8000c80:	8811      	ldrh	r1, [r2, #0]
 8000c82:	7892      	ldrb	r2, [r2, #2]
 8000c84:	8019      	strh	r1, [r3, #0]
 8000c86:	709a      	strb	r2, [r3, #2]
	serialOut(&huart2, str, strlen(newstr));
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff faae 	bl	80001ec <strlen>
 8000c90:	4603      	mov	r3, r0
 8000c92:	461a      	mov	r2, r3
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <printStrLn+0x9c>)
 8000c98:	f7ff ff4e 	bl	8000b38 <serialOut>
 8000c9c:	46ad      	mov	sp, r5
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	0800a6f0 	.word	0x0800a6f0
 8000cac:	2000d158 	.word	0x2000d158

08000cb0 <printWaveform>:

void printWaveform(short data[], int size)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
	for(int i = 0; i<size; i++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	e00e      	b.n	8000cde <printWaveform+0x2e>
	{
		printStr("|");
 8000cc0:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <printWaveform+0x40>)
 8000cc2:	f7ff ff4b 	bl	8000b5c <printStr>
		printInt(data[i]);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff7e 	bl	8000bd4 <printInt>
	for(int i = 0; i<size; i++)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	dbec      	blt.n	8000cc0 <printWaveform+0x10>
	}
}
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	0800a6f4 	.word	0x0800a6f4

08000cf4 <readSerial>:
 * Read "readsize" number of characters from serial port, and outputs to outputString
 * Returns 1 if timed out, else 0
 * printchar echoes the typed character back to the PC
 */
int readSerial(char* outputString, int readsize, int timeout, int printchar)
{
 8000cf4:	b5b0      	push	{r4, r5, r7, lr}
 8000cf6:	b08c      	sub	sp, #48	; 0x30
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	466b      	mov	r3, sp
 8000d04:	461d      	mov	r5, r3
	int starttime = HAL_GetTick();
 8000d06:	f001 fd0d 	bl	8002724 <HAL_GetTick>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	61fb      	str	r3, [r7, #28]
	char rxedString[readsize+1];
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	1c58      	adds	r0, r3, #1
 8000d12:	1e43      	subs	r3, r0, #1
 8000d14:	61bb      	str	r3, [r7, #24]
 8000d16:	4603      	mov	r3, r0
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f04f 0200 	mov.w	r2, #0
 8000d1e:	f04f 0300 	mov.w	r3, #0
 8000d22:	f04f 0400 	mov.w	r4, #0
 8000d26:	00d4      	lsls	r4, r2, #3
 8000d28:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000d2c:	00cb      	lsls	r3, r1, #3
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4619      	mov	r1, r3
 8000d32:	f04f 0200 	mov.w	r2, #0
 8000d36:	f04f 0300 	mov.w	r3, #0
 8000d3a:	f04f 0400 	mov.w	r4, #0
 8000d3e:	00d4      	lsls	r4, r2, #3
 8000d40:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000d44:	00cb      	lsls	r3, r1, #3
 8000d46:	4603      	mov	r3, r0
 8000d48:	3307      	adds	r3, #7
 8000d4a:	08db      	lsrs	r3, r3, #3
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	ebad 0d03 	sub.w	sp, sp, r3
 8000d52:	466b      	mov	r3, sp
 8000d54:	3300      	adds	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
	for(int i = 0; i<readsize; i++)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d5c:	e007      	b.n	8000d6e <readSerial+0x7a>
	{
		rxedString[i] = '#';
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	4413      	add	r3, r2
 8000d64:	2223      	movs	r2, #35	; 0x23
 8000d66:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<readsize; i++)
 8000d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	dbf3      	blt.n	8000d5e <readSerial+0x6a>
	}
	char rxedChar[1] = "#";
 8000d76:	2323      	movs	r3, #35	; 0x23
 8000d78:	743b      	strb	r3, [r7, #16]
	int charnum = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
	while (1)
	{
		  HAL_UART_Receive(&huart2, (uint8_t *)rxedChar, 1, 100);
 8000d7e:	f107 0110 	add.w	r1, r7, #16
 8000d82:	2364      	movs	r3, #100	; 0x64
 8000d84:	2201      	movs	r2, #1
 8000d86:	482b      	ldr	r0, [pc, #172]	; (8000e34 <readSerial+0x140>)
 8000d88:	f007 f964 	bl	8008054 <HAL_UART_Receive>

		  if (rxedChar[0] == '\n' || rxedChar[0] == '\r' || rxedChar[0] == ' ') {
 8000d8c:	7c3b      	ldrb	r3, [r7, #16]
 8000d8e:	2b0a      	cmp	r3, #10
 8000d90:	d02b      	beq.n	8000dea <readSerial+0xf6>
 8000d92:	7c3b      	ldrb	r3, [r7, #16]
 8000d94:	2b0d      	cmp	r3, #13
 8000d96:	d028      	beq.n	8000dea <readSerial+0xf6>
 8000d98:	7c3b      	ldrb	r3, [r7, #16]
 8000d9a:	2b20      	cmp	r3, #32
 8000d9c:	d025      	beq.n	8000dea <readSerial+0xf6>
			  break;
		  }

		  if(rxedChar[0] != '#')
 8000d9e:	7c3b      	ldrb	r3, [r7, #16]
 8000da0:	2b23      	cmp	r3, #35	; 0x23
 8000da2:	d011      	beq.n	8000dc8 <readSerial+0xd4>
		  {
			  rxedString[charnum] = rxedChar[0];
 8000da4:	7c39      	ldrb	r1, [r7, #16]
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000daa:	4413      	add	r3, r2
 8000dac:	460a      	mov	r2, r1
 8000dae:	701a      	strb	r2, [r3, #0]
			  charnum += 1;
 8000db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db2:	3301      	adds	r3, #1
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
			  if(printchar == 1)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d103      	bne.n	8000dc4 <readSerial+0xd0>
			  {
				  printChar(rxedChar[0]);
 8000dbc:	7c3b      	ldrb	r3, [r7, #16]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fee0 	bl	8000b84 <printChar>
			  }
			  rxedChar[0] = '#';
 8000dc4:	2323      	movs	r3, #35	; 0x23
 8000dc6:	743b      	strb	r3, [r7, #16]
		  }

		  if(rxedString[readsize-1] != '#')
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	697a      	ldr	r2, [r7, #20]
 8000dce:	5cd3      	ldrb	r3, [r2, r3]
 8000dd0:	2b23      	cmp	r3, #35	; 0x23
 8000dd2:	d109      	bne.n	8000de8 <readSerial+0xf4>
		  {
			  break; //String is full
		  }

		  if(HAL_GetTick()-starttime > timeout)
 8000dd4:	f001 fca6 	bl	8002724 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	1ad2      	subs	r2, r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d9cc      	bls.n	8000d7e <readSerial+0x8a>
		  {
			  return 1;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e020      	b.n	8000e2a <readSerial+0x136>
			  break; //String is full
 8000de8:	bf00      	nop
		  }
	}

	int truesize = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i<readsize; i++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
 8000df2:	e00b      	b.n	8000e0c <readSerial+0x118>
	{
		if(rxedString[i] != '#')
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	6a3b      	ldr	r3, [r7, #32]
 8000df8:	4413      	add	r3, r2
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b23      	cmp	r3, #35	; 0x23
 8000dfe:	d002      	beq.n	8000e06 <readSerial+0x112>
		{
			truesize += 1;
 8000e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e02:	3301      	adds	r3, #1
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i<readsize; i++)
 8000e06:	6a3b      	ldr	r3, [r7, #32]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	623b      	str	r3, [r7, #32]
 8000e0c:	6a3a      	ldr	r2, [r7, #32]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	dbef      	blt.n	8000df4 <readSerial+0x100>
		}
	}
	rxedString[truesize] = 0; //Terminates string correctly
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e18:	4413      	add	r3, r2
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]

	strcpy(outputString, rxedString);
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	4619      	mov	r1, r3
 8000e22:	68f8      	ldr	r0, [r7, #12]
 8000e24:	f007 fd70 	bl	8008908 <strcpy>
	return 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	46ad      	mov	sp, r5
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3730      	adds	r7, #48	; 0x30
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bdb0      	pop	{r4, r5, r7, pc}
 8000e34:	2000d158 	.word	0x2000d158

08000e38 <compressWaveform>:

/**
 * Either extrapolates between samples to fit resolution_x or uses multiple samples per pixel
 */
void compressWaveform(short* data, short *newdata, int samples_taken, int resolution_x, int output_offset)
{
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
 8000e44:	603b      	str	r3, [r7, #0]
	if(debug)
 8000e46:	4b25      	ldr	r3, [pc, #148]	; (8000edc <compressWaveform+0xa4>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d002      	beq.n	8000e54 <compressWaveform+0x1c>
	{
		printStrLn("Compressing waveform...");
 8000e4e:	4824      	ldr	r0, [pc, #144]	; (8000ee0 <compressWaveform+0xa8>)
 8000e50:	f7ff fede 	bl	8000c10 <printStrLn>
	}
	for(int current_pixel = 0; current_pixel<resolution_x; current_pixel++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	e030      	b.n	8000ebc <compressWaveform+0x84>
	{
		newdata[current_pixel+output_offset] = data[(int)(((double)current_pixel/resolution_x)*samples_taken)];
 8000e5a:	6978      	ldr	r0, [r7, #20]
 8000e5c:	f7ff fb20 	bl	80004a0 <__aeabi_i2d>
 8000e60:	4604      	mov	r4, r0
 8000e62:	460d      	mov	r5, r1
 8000e64:	6838      	ldr	r0, [r7, #0]
 8000e66:	f7ff fb1b 	bl	80004a0 <__aeabi_i2d>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	4620      	mov	r0, r4
 8000e70:	4629      	mov	r1, r5
 8000e72:	f7ff fca9 	bl	80007c8 <__aeabi_ddiv>
 8000e76:	4603      	mov	r3, r0
 8000e78:	460c      	mov	r4, r1
 8000e7a:	4625      	mov	r5, r4
 8000e7c:	461c      	mov	r4, r3
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff fb0e 	bl	80004a0 <__aeabi_i2d>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4620      	mov	r0, r4
 8000e8a:	4629      	mov	r1, r5
 8000e8c:	f7ff fb72 	bl	8000574 <__aeabi_dmul>
 8000e90:	4603      	mov	r3, r0
 8000e92:	460c      	mov	r4, r1
 8000e94:	4618      	mov	r0, r3
 8000e96:	4621      	mov	r1, r4
 8000e98:	f7ff fe06 	bl	8000aa8 <__aeabi_d2iz>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	441a      	add	r2, r3
 8000ea4:	6979      	ldr	r1, [r7, #20]
 8000ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea8:	440b      	add	r3, r1
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	440b      	add	r3, r1
 8000eb0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000eb4:	801a      	strh	r2, [r3, #0]
	for(int current_pixel = 0; current_pixel<resolution_x; current_pixel++)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	dbca      	blt.n	8000e5a <compressWaveform+0x22>
	}
	if(debug)
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <compressWaveform+0xa4>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d002      	beq.n	8000ed2 <compressWaveform+0x9a>
	{
		printStrLn("Compression complete \n\r");
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <compressWaveform+0xac>)
 8000ece:	f7ff fe9f 	bl	8000c10 <printStrLn>
			current_pixel++;
		}
		newdata[current_pixel] += data[current_sample];
		current_sample++;
	}*/
}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000c10 	.word	0x20000c10
 8000ee0:	0800a6f8 	.word	0x0800a6f8
 8000ee4:	0800a710 	.word	0x0800a710

08000ee8 <getDataAndWait>:

void getDataAndWait(short* data, int samples)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
	sample_completed = 0;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <getDataAndWait+0x38>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)data, samples);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	4809      	ldr	r0, [pc, #36]	; (8000f24 <getDataAndWait+0x3c>)
 8000f00:	f002 f87a 	bl	8002ff8 <HAL_ADC_Start_DMA>
	while(sample_completed == 0)
 8000f04:	e001      	b.n	8000f0a <getDataAndWait+0x22>
	{
		int a = 1;
 8000f06:	2301      	movs	r3, #1
 8000f08:	60fb      	str	r3, [r7, #12]
	while(sample_completed == 0)
 8000f0a:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <getDataAndWait+0x38>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d0f9      	beq.n	8000f06 <getDataAndWait+0x1e>
	}
	HAL_ADC_Stop_DMA(&hadc1);
 8000f12:	4804      	ldr	r0, [pc, #16]	; (8000f24 <getDataAndWait+0x3c>)
 8000f14:	f002 f98c 	bl	8003230 <HAL_ADC_Stop_DMA>
}
 8000f18:	bf00      	nop
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000c20 	.word	0x20000c20
 8000f24:	20000d28 	.word	0x20000d28

08000f28 <getTriggeredWaveform>:

void getTriggeredWaveform(short* data_out, int resolution_x, double sample_time)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	ed87 0b00 	vstr	d0, [r7]

	HAL_ADC_Start(&hadc1);
 8000f36:	4816      	ldr	r0, [pc, #88]	; (8000f90 <getTriggeredWaveform+0x68>)
 8000f38:	f001 fe18 	bl	8002b6c <HAL_ADC_Start>
	while(1)
	{
		HAL_ADC_PollForConversion(&hadc1, 10);
 8000f3c:	210a      	movs	r1, #10
 8000f3e:	4814      	ldr	r0, [pc, #80]	; (8000f90 <getTriggeredWaveform+0x68>)
 8000f40:	f001 ff60 	bl	8002e04 <HAL_ADC_PollForConversion>
		uint32_t value = HAL_ADC_GetValue(&hadc1);
 8000f44:	4812      	ldr	r0, [pc, #72]	; (8000f90 <getTriggeredWaveform+0x68>)
 8000f46:	f002 f9d5 	bl	80032f4 <HAL_ADC_GetValue>
 8000f4a:	6178      	str	r0, [r7, #20]
		if(trigger_rising == 1)
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <getTriggeredWaveform+0x6c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d109      	bne.n	8000f68 <getTriggeredWaveform+0x40>
		{
			if(value > trigger_level)
 8000f54:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <getTriggeredWaveform+0x70>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d9ed      	bls.n	8000f3c <getTriggeredWaveform+0x14>
			{
				HAL_ADC_Stop(&hadc1);
 8000f60:	480b      	ldr	r0, [pc, #44]	; (8000f90 <getTriggeredWaveform+0x68>)
 8000f62:	f001 ff19 	bl	8002d98 <HAL_ADC_Stop>
				break;
 8000f66:	e008      	b.n	8000f7a <getTriggeredWaveform+0x52>
			}
		}
		else
		{
			if(value < trigger_level)
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <getTriggeredWaveform+0x70>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d2e3      	bcs.n	8000f3c <getTriggeredWaveform+0x14>
			{
				HAL_ADC_Stop(&hadc1);
 8000f74:	4806      	ldr	r0, [pc, #24]	; (8000f90 <getTriggeredWaveform+0x68>)
 8000f76:	f001 ff0f 	bl	8002d98 <HAL_ADC_Stop>
				break;
			}
		}
	}
	getWaveform(data_out, resolution_x, sample_time);
 8000f7a:	ed97 0b00 	vldr	d0, [r7]
 8000f7e:	68b9      	ldr	r1, [r7, #8]
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f000 f80d 	bl	8000fa0 <getWaveform>
}
 8000f86:	bf00      	nop
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000d28 	.word	0x20000d28
 8000f94:	20000a14 	.word	0x20000a14
 8000f98:	20000a10 	.word	0x20000a10
 8000f9c:	00000000 	.word	0x00000000

08000fa0 <getWaveform>:

/**
 * Get the set amount of samples in the timeframe, and store in data
 */
void getWaveform(short* data_out, int resolution_x, double sample_time)
{
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	b090      	sub	sp, #64	; 0x40
 8000fa4:	af02      	add	r7, sp, #8
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	ed87 0b00 	vstr	d0, [r7]

	//samples_needed = 220000*timeframe*0.001;
	//printInt(samples_needed);
	//int samples_needed = (double)samples_per_ms*timeframe;

	int samples_needed = (sample_time/7.96)*MAX_SAMPLES; //At 19.5 cycles per reading, 25000 samples are taken in 25.1ms
 8000fae:	a396      	add	r3, pc, #600	; (adr r3, 8001208 <getWaveform+0x268>)
 8000fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fb8:	f7ff fc06 	bl	80007c8 <__aeabi_ddiv>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	460c      	mov	r4, r1
 8000fc0:	4625      	mov	r5, r4
 8000fc2:	461c      	mov	r4, r3
 8000fc4:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fa69 	bl	80004a0 <__aeabi_i2d>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	4629      	mov	r1, r5
 8000fd6:	f7ff facd 	bl	8000574 <__aeabi_dmul>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	460c      	mov	r4, r1
 8000fde:	4618      	mov	r0, r3
 8000fe0:	4621      	mov	r1, r4
 8000fe2:	f7ff fd61 	bl	8000aa8 <__aeabi_d2iz>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
	if(samples_needed < MAX_SAMPLES)
 8000fea:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	da3b      	bge.n	800106c <getWaveform+0xcc>
	{
		if(debug)
 8000ff4:	4b7a      	ldr	r3, [pc, #488]	; (80011e0 <getWaveform+0x240>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d008      	beq.n	800100e <getWaveform+0x6e>
		{
			printStr("High sample rate mode\n\r");
 8000ffc:	4879      	ldr	r0, [pc, #484]	; (80011e4 <getWaveform+0x244>)
 8000ffe:	f7ff fdad 	bl	8000b5c <printStr>
			printInt(samples_needed);
 8001002:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001004:	f7ff fde6 	bl	8000bd4 <printInt>
			printStr(" samples needed\n\r");
 8001008:	4877      	ldr	r0, [pc, #476]	; (80011e8 <getWaveform+0x248>)
 800100a:	f7ff fda7 	bl	8000b5c <printStr>
		}
		sample_completed = 0;
 800100e:	4b77      	ldr	r3, [pc, #476]	; (80011ec <getWaveform+0x24c>)
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)data, samples_needed);
 8001014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001016:	461a      	mov	r2, r3
 8001018:	4975      	ldr	r1, [pc, #468]	; (80011f0 <getWaveform+0x250>)
 800101a:	4876      	ldr	r0, [pc, #472]	; (80011f4 <getWaveform+0x254>)
 800101c:	f001 ffec 	bl	8002ff8 <HAL_ADC_Start_DMA>
		unsigned long t1 = DWT->CYCCNT; //32400
 8001020:	4b75      	ldr	r3, [pc, #468]	; (80011f8 <getWaveform+0x258>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	61fb      	str	r3, [r7, #28]
		while(sample_completed == 0)
 8001026:	e001      	b.n	800102c <getWaveform+0x8c>
		{
			int a = 1;
 8001028:	2301      	movs	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
		while(sample_completed == 0)
 800102c:	4b6f      	ldr	r3, [pc, #444]	; (80011ec <getWaveform+0x24c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0f9      	beq.n	8001028 <getWaveform+0x88>
		}
		unsigned long time2 = (DWT->CYCCNT);
 8001034:	4b70      	ldr	r3, [pc, #448]	; (80011f8 <getWaveform+0x258>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	61bb      	str	r3, [r7, #24]
		HAL_ADC_Stop_DMA(&hadc1);
 800103a:	486e      	ldr	r0, [pc, #440]	; (80011f4 <getWaveform+0x254>)
 800103c:	f002 f8f8 	bl	8003230 <HAL_ADC_Stop_DMA>
		//printStr("Time:");
		//printInt(time2);
		/*
		printStr("Time2:");
		printInt(t1);*/
		if(debug)
 8001040:	4b67      	ldr	r3, [pc, #412]	; (80011e0 <getWaveform+0x240>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d008      	beq.n	800105a <getWaveform+0xba>
		{
			printStr("time delta:");
 8001048:	486c      	ldr	r0, [pc, #432]	; (80011fc <getWaveform+0x25c>)
 800104a:	f7ff fd87 	bl	8000b5c <printStr>
			printInt(time2-t1);
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fdbd 	bl	8000bd4 <printInt>

		//HAL_ADC_Start_IT(&hadc1);
		//printStr("Data:");
		//printInt(data[0]);

		compressWaveform(data, data_out, samples_needed, resolution_x, 0);
 800105a:	2300      	movs	r3, #0
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001062:	68f9      	ldr	r1, [r7, #12]
 8001064:	4862      	ldr	r0, [pc, #392]	; (80011f0 <getWaveform+0x250>)
 8001066:	f7ff fee7 	bl	8000e38 <compressWaveform>
			printInt(datasets_done);
			printStr(" out of ");
			printInt(datasets_needed);*/
		}
	}
}
 800106a:	e0b4      	b.n	80011d6 <getWaveform+0x236>
		if(debug)
 800106c:	4b5c      	ldr	r3, [pc, #368]	; (80011e0 <getWaveform+0x240>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d008      	beq.n	8001086 <getWaveform+0xe6>
			printStr("mode 2\n\r");
 8001074:	4862      	ldr	r0, [pc, #392]	; (8001200 <getWaveform+0x260>)
 8001076:	f7ff fd71 	bl	8000b5c <printStr>
			printInt(samples_needed);
 800107a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800107c:	f7ff fdaa 	bl	8000bd4 <printInt>
			printStr(" samples needed\n\r");
 8001080:	4859      	ldr	r0, [pc, #356]	; (80011e8 <getWaveform+0x248>)
 8001082:	f7ff fd6b 	bl	8000b5c <printStr>
		double datasets_needed = (double)samples_needed/MAX_SAMPLES;
 8001086:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001088:	f7ff fa0a 	bl	80004a0 <__aeabi_i2d>
 800108c:	4604      	mov	r4, r0
 800108e:	460d      	mov	r5, r1
 8001090:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fa03 	bl	80004a0 <__aeabi_i2d>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4620      	mov	r0, r4
 80010a0:	4629      	mov	r1, r5
 80010a2:	f7ff fb91 	bl	80007c8 <__aeabi_ddiv>
 80010a6:	4603      	mov	r3, r0
 80010a8:	460c      	mov	r4, r1
 80010aa:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		int datasets_done = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	637b      	str	r3, [r7, #52]	; 0x34
		int samples_per_dataset = ((double)MAX_SAMPLES/samples_needed)*resolution_x;
 80010b2:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff f9f2 	bl	80004a0 <__aeabi_i2d>
 80010bc:	4604      	mov	r4, r0
 80010be:	460d      	mov	r5, r1
 80010c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010c2:	f7ff f9ed 	bl	80004a0 <__aeabi_i2d>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4620      	mov	r0, r4
 80010cc:	4629      	mov	r1, r5
 80010ce:	f7ff fb7b 	bl	80007c8 <__aeabi_ddiv>
 80010d2:	4603      	mov	r3, r0
 80010d4:	460c      	mov	r4, r1
 80010d6:	4625      	mov	r5, r4
 80010d8:	461c      	mov	r4, r3
 80010da:	68b8      	ldr	r0, [r7, #8]
 80010dc:	f7ff f9e0 	bl	80004a0 <__aeabi_i2d>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4620      	mov	r0, r4
 80010e6:	4629      	mov	r1, r5
 80010e8:	f7ff fa44 	bl	8000574 <__aeabi_dmul>
 80010ec:	4603      	mov	r3, r0
 80010ee:	460c      	mov	r4, r1
 80010f0:	4618      	mov	r0, r3
 80010f2:	4621      	mov	r1, r4
 80010f4:	f7ff fcd8 	bl	8000aa8 <__aeabi_d2iz>
 80010f8:	4603      	mov	r3, r0
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
		while(datasets_done < datasets_needed)
 80010fc:	e05d      	b.n	80011ba <getWaveform+0x21a>
			sample_completed = 0;
 80010fe:	4b3b      	ldr	r3, [pc, #236]	; (80011ec <getWaveform+0x24c>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
			if(datasets_needed - datasets_done > 1)
 8001104:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001106:	f7ff f9cb 	bl	80004a0 <__aeabi_i2d>
 800110a:	4603      	mov	r3, r0
 800110c:	460c      	mov	r4, r1
 800110e:	461a      	mov	r2, r3
 8001110:	4623      	mov	r3, r4
 8001112:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001116:	f7ff f875 	bl	8000204 <__aeabi_dsub>
 800111a:	4603      	mov	r3, r0
 800111c:	460c      	mov	r4, r1
 800111e:	4618      	mov	r0, r3
 8001120:	4621      	mov	r1, r4
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	4b37      	ldr	r3, [pc, #220]	; (8001204 <getWaveform+0x264>)
 8001128:	f7ff fcb4 	bl	8000a94 <__aeabi_dcmpgt>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d013      	beq.n	800115a <getWaveform+0x1ba>
				getDataAndWait(data, MAX_SAMPLES);
 8001132:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8001136:	4619      	mov	r1, r3
 8001138:	482d      	ldr	r0, [pc, #180]	; (80011f0 <getWaveform+0x250>)
 800113a:	f7ff fed5 	bl	8000ee8 <getDataAndWait>
				compressWaveform(data, data_out, MAX_SAMPLES, samples_per_dataset, datasets_done * samples_per_dataset);
 800113e:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8001142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001146:	fb02 f303 	mul.w	r3, r2, r3
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	460a      	mov	r2, r1
 8001150:	68f9      	ldr	r1, [r7, #12]
 8001152:	4827      	ldr	r0, [pc, #156]	; (80011f0 <getWaveform+0x250>)
 8001154:	f7ff fe70 	bl	8000e38 <compressWaveform>
 8001158:	e02c      	b.n	80011b4 <getWaveform+0x214>
				int samples_current_dataset = MAX_SAMPLES*(datasets_needed - datasets_done);
 800115a:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f99e 	bl	80004a0 <__aeabi_i2d>
 8001164:	4604      	mov	r4, r0
 8001166:	460d      	mov	r5, r1
 8001168:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800116a:	f7ff f999 	bl	80004a0 <__aeabi_i2d>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001176:	f7ff f845 	bl	8000204 <__aeabi_dsub>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4620      	mov	r0, r4
 8001180:	4629      	mov	r1, r5
 8001182:	f7ff f9f7 	bl	8000574 <__aeabi_dmul>
 8001186:	4603      	mov	r3, r0
 8001188:	460c      	mov	r4, r1
 800118a:	4618      	mov	r0, r3
 800118c:	4621      	mov	r1, r4
 800118e:	f7ff fc8b 	bl	8000aa8 <__aeabi_d2iz>
 8001192:	4603      	mov	r3, r0
 8001194:	623b      	str	r3, [r7, #32]
				getDataAndWait(data, samples_current_dataset);
 8001196:	6a39      	ldr	r1, [r7, #32]
 8001198:	4815      	ldr	r0, [pc, #84]	; (80011f0 <getWaveform+0x250>)
 800119a:	f7ff fea5 	bl	8000ee8 <getDataAndWait>
				compressWaveform(data, data_out, samples_current_dataset, samples_per_dataset, datasets_done * samples_per_dataset);
 800119e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011a2:	fb02 f303 	mul.w	r3, r2, r3
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011aa:	6a3a      	ldr	r2, [r7, #32]
 80011ac:	68f9      	ldr	r1, [r7, #12]
 80011ae:	4810      	ldr	r0, [pc, #64]	; (80011f0 <getWaveform+0x250>)
 80011b0:	f7ff fe42 	bl	8000e38 <compressWaveform>
			datasets_done++;
 80011b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011b6:	3301      	adds	r3, #1
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
		while(datasets_done < datasets_needed)
 80011ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80011bc:	f7ff f970 	bl	80004a0 <__aeabi_i2d>
 80011c0:	4603      	mov	r3, r0
 80011c2:	460c      	mov	r4, r1
 80011c4:	461a      	mov	r2, r3
 80011c6:	4623      	mov	r3, r4
 80011c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80011cc:	f7ff fc62 	bl	8000a94 <__aeabi_dcmpgt>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d193      	bne.n	80010fe <getWaveform+0x15e>
}
 80011d6:	bf00      	nop
 80011d8:	3738      	adds	r7, #56	; 0x38
 80011da:	46bd      	mov	sp, r7
 80011dc:	bdb0      	pop	{r4, r5, r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000c10 	.word	0x20000c10
 80011e4:	0800a728 	.word	0x0800a728
 80011e8:	0800a740 	.word	0x0800a740
 80011ec:	20000c20 	.word	0x20000c20
 80011f0:	20000dbc 	.word	0x20000dbc
 80011f4:	20000d28 	.word	0x20000d28
 80011f8:	e0001000 	.word	0xe0001000
 80011fc:	0800a754 	.word	0x0800a754
 8001200:	0800a760 	.word	0x0800a760
 8001204:	3ff00000 	.word	0x3ff00000
 8001208:	3d70a3d7 	.word	0x3d70a3d7
 800120c:	401fd70a 	.word	0x401fd70a

08001210 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	sample_completed = 1;
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <HAL_ADC_ConvCpltCallback+0x1c>)
 800121a:	2201      	movs	r2, #1
 800121c:	601a      	str	r2, [r3, #0]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000c20 	.word	0x20000c20

08001230 <afgAmplitudeAdjustment>:
{
    HAL_ADC_IRQHandler(&hadc1);
}

void afgAmplitudeAdjustment(int new_amplitude)
{
 8001230:	b480      	push	{r7}
 8001232:	b087      	sub	sp, #28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	AFG_Amplitude = new_amplitude;
 8001238:	4a2a      	ldr	r2, [pc, #168]	; (80012e4 <afgAmplitudeAdjustment+0xb4>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
	float ratio = AFG_Amplitude/3300.0f;
 800123e:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <afgAmplitudeAdjustment+0xb4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	ee07 3a90 	vmov	s15, r3
 8001246:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800124a:	eddf 6a27 	vldr	s13, [pc, #156]	; 80012e8 <afgAmplitudeAdjustment+0xb8>
 800124e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001252:	edc7 7a04 	vstr	s15, [r7, #16]
	for(int i = 0; i<128; i++)
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	e03a      	b.n	80012d2 <afgAmplitudeAdjustment+0xa2>
	{
		int previous_amplitude = LUT_CurrentWave[i];
 800125c:	4a23      	ldr	r2, [pc, #140]	; (80012ec <afgAmplitudeAdjustment+0xbc>)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001264:	60fb      	str	r3, [r7, #12]
		if(previous_amplitude > 2048)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800126c:	dd17      	ble.n	800129e <afgAmplitudeAdjustment+0x6e>
		{
			LUT_CurrentWave[i] = 2048+((previous_amplitude-2048)*ratio);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001274:	ee07 3a90 	vmov	s15, r3
 8001278:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800127c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001284:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80012f0 <afgAmplitudeAdjustment+0xc0>
 8001288:	ee77 7a87 	vadd.f32	s15, s15, s14
 800128c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001290:	ee17 1a90 	vmov	r1, s15
 8001294:	4a15      	ldr	r2, [pc, #84]	; (80012ec <afgAmplitudeAdjustment+0xbc>)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800129c:	e016      	b.n	80012cc <afgAmplitudeAdjustment+0x9c>
		}
		else
		{
			LUT_CurrentWave[i] = 2048-((2048-previous_amplitude)*ratio);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80012a4:	ee07 3a90 	vmov	s15, r3
 80012a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80012f0 <afgAmplitudeAdjustment+0xc0>
 80012b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012c0:	ee17 1a90 	vmov	r1, s15
 80012c4:	4a09      	ldr	r2, [pc, #36]	; (80012ec <afgAmplitudeAdjustment+0xbc>)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<128; i++)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	3301      	adds	r3, #1
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	2b7f      	cmp	r3, #127	; 0x7f
 80012d6:	ddc1      	ble.n	800125c <afgAmplitudeAdjustment+0x2c>
		}
	}
}
 80012d8:	bf00      	nop
 80012da:	371c      	adds	r7, #28
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	20000c18 	.word	0x20000c18
 80012e8:	454e4000 	.word	0x454e4000
 80012ec:	20000800 	.word	0x20000800
 80012f0:	45000000 	.word	0x45000000

080012f4 <changeAFGWaveform>:

void changeAFGWaveform(char* name)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	if(strcmp(name, "square") == 0)
 80012fc:	4935      	ldr	r1, [pc, #212]	; (80013d4 <changeAFGWaveform+0xe0>)
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7fe ff6a 	bl	80001d8 <strcmp>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d111      	bne.n	800132e <changeAFGWaveform+0x3a>
	{
		for(int i = 0; i<128; i++)
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	e00a      	b.n	8001326 <changeAFGWaveform+0x32>
		{
			LUT_CurrentWave[i] = LUT_SquareWave[i];
 8001310:	4a31      	ldr	r2, [pc, #196]	; (80013d8 <changeAFGWaveform+0xe4>)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001318:	4930      	ldr	r1, [pc, #192]	; (80013dc <changeAFGWaveform+0xe8>)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i<128; i++)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	3301      	adds	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	2b7f      	cmp	r3, #127	; 0x7f
 800132a:	ddf1      	ble.n	8001310 <changeAFGWaveform+0x1c>
	}
	else
	{
		printStr("Invalid waveform name");
	}
}
 800132c:	e04d      	b.n	80013ca <changeAFGWaveform+0xd6>
	else if(strcmp(name, "sine") == 0)
 800132e:	492c      	ldr	r1, [pc, #176]	; (80013e0 <changeAFGWaveform+0xec>)
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7fe ff51 	bl	80001d8 <strcmp>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d111      	bne.n	8001360 <changeAFGWaveform+0x6c>
		for(int i = 0; i<128; i++)
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	e00a      	b.n	8001358 <changeAFGWaveform+0x64>
			LUT_CurrentWave[i] = LUT_SineWave[i];
 8001342:	4a28      	ldr	r2, [pc, #160]	; (80013e4 <changeAFGWaveform+0xf0>)
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800134a:	4924      	ldr	r1, [pc, #144]	; (80013dc <changeAFGWaveform+0xe8>)
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i<128; i++)
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	3301      	adds	r3, #1
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	2b7f      	cmp	r3, #127	; 0x7f
 800135c:	ddf1      	ble.n	8001342 <changeAFGWaveform+0x4e>
}
 800135e:	e034      	b.n	80013ca <changeAFGWaveform+0xd6>
	else if(strcmp(name, "sawtooth") == 0)
 8001360:	4921      	ldr	r1, [pc, #132]	; (80013e8 <changeAFGWaveform+0xf4>)
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7fe ff38 	bl	80001d8 <strcmp>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d111      	bne.n	8001392 <changeAFGWaveform+0x9e>
		for(int i = 0; i<128; i++)
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	e00a      	b.n	800138a <changeAFGWaveform+0x96>
			LUT_CurrentWave[i] = LUT_SawtoothWave[i];
 8001374:	4a1d      	ldr	r2, [pc, #116]	; (80013ec <changeAFGWaveform+0xf8>)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800137c:	4917      	ldr	r1, [pc, #92]	; (80013dc <changeAFGWaveform+0xe8>)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i<128; i++)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	3301      	adds	r3, #1
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2b7f      	cmp	r3, #127	; 0x7f
 800138e:	ddf1      	ble.n	8001374 <changeAFGWaveform+0x80>
}
 8001390:	e01b      	b.n	80013ca <changeAFGWaveform+0xd6>
	else if(strcmp(name, "noise") == 0)
 8001392:	4917      	ldr	r1, [pc, #92]	; (80013f0 <changeAFGWaveform+0xfc>)
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7fe ff1f 	bl	80001d8 <strcmp>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d111      	bne.n	80013c4 <changeAFGWaveform+0xd0>
		for(int i = 0; i<128; i++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	e00a      	b.n	80013bc <changeAFGWaveform+0xc8>
			LUT_CurrentWave[i] = LUT_Noise[i];
 80013a6:	4a13      	ldr	r2, [pc, #76]	; (80013f4 <changeAFGWaveform+0x100>)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013ae:	490b      	ldr	r1, [pc, #44]	; (80013dc <changeAFGWaveform+0xe8>)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i<128; i++)
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	3301      	adds	r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	2b7f      	cmp	r3, #127	; 0x7f
 80013c0:	ddf1      	ble.n	80013a6 <changeAFGWaveform+0xb2>
}
 80013c2:	e002      	b.n	80013ca <changeAFGWaveform+0xd6>
		printStr("Invalid waveform name");
 80013c4:	480c      	ldr	r0, [pc, #48]	; (80013f8 <changeAFGWaveform+0x104>)
 80013c6:	f7ff fbc9 	bl	8000b5c <printStr>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	0800a76c 	.word	0x0800a76c
 80013d8:	20000200 	.word	0x20000200
 80013dc:	20000800 	.word	0x20000800
 80013e0:	0800a774 	.word	0x0800a774
 80013e4:	20000000 	.word	0x20000000
 80013e8:	0800a77c 	.word	0x0800a77c
 80013ec:	20000400 	.word	0x20000400
 80013f0:	0800a788 	.word	0x0800a788
 80013f4:	20000600 	.word	0x20000600
 80013f8:	0800a790 	.word	0x0800a790

080013fc <startAFG>:

void startAFG()
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af02      	add	r7, sp, #8
    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)LUT_CurrentWave, 128, DAC_ALIGN_12B_R);
 8001402:	2300      	movs	r3, #0
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	4a05      	ldr	r2, [pc, #20]	; (8001420 <startAFG+0x24>)
 800140a:	2100      	movs	r1, #0
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <startAFG+0x28>)
 800140e:	f003 fa0f 	bl	8004830 <HAL_DAC_Start_DMA>
    HAL_TIM_Base_Start(&htim2);
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <startAFG+0x2c>)
 8001414:	f005 fb46 	bl	8006aa4 <HAL_TIM_Base_Start>
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000800 	.word	0x20000800
 8001424:	20000c34 	.word	0x20000c34
 8001428:	2000d10c 	.word	0x2000d10c

0800142c <stopAFG>:

void stopAFG()
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001430:	2100      	movs	r1, #0
 8001432:	4802      	ldr	r0, [pc, #8]	; (800143c <stopAFG+0x10>)
 8001434:	f003 f983 	bl	800473e <HAL_DAC_Stop_DMA>
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000c34 	.word	0x20000c34

08001440 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  }
	  GPIO_time++;
  }*/
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001454:	b5b0      	push	{r4, r5, r7, lr}
 8001456:	b0a6      	sub	sp, #152	; 0x98
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145a:	f001 f909 	bl	8002670 <HAL_Init>

  /* USER CODE BEGIN Init */

  //Enable clock cycle counter
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800145e:	4bc2      	ldr	r3, [pc, #776]	; (8001768 <main+0x314>)
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	4ac1      	ldr	r2, [pc, #772]	; (8001768 <main+0x314>)
 8001464:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001468:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 800146a:	4bc0      	ldr	r3, [pc, #768]	; (800176c <main+0x318>)
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001470:	4bbe      	ldr	r3, [pc, #760]	; (800176c <main+0x318>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4abd      	ldr	r2, [pc, #756]	; (800176c <main+0x318>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6013      	str	r3, [r2, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147c:	f000 fad8 	bl	8001a30 <SystemClock_Config>
  // RCC->APB1ENR |= RCC_APB1ENR_DAC1EN;

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001480:	f000 fd64 	bl	8001f4c <MX_GPIO_Init>
  MX_DMA_Init();
 8001484:	f000 fd28 	bl	8001ed8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001488:	f000 fcf6 	bl	8001e78 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800148c:	f000 fb38 	bl	8001b00 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001490:	f000 fc04 	bl	8001c9c <MX_DAC1_Init>
  MX_TIM2_Init();
 8001494:	f000 fc2c 	bl	8001cf0 <MX_TIM2_Init>
  MX_ADC2_Init();
 8001498:	f000 fba2 	bl	8001be0 <MX_ADC2_Init>
  MX_TIM3_Init();
 800149c:	f000 fc76 	bl	8001d8c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80014a0:	2108      	movs	r1, #8
 80014a2:	48b3      	ldr	r0, [pc, #716]	; (8001770 <main+0x31c>)
 80014a4:	f005 fbc8 	bl	8006c38 <HAL_TIM_PWM_Start>

  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, 32);
 80014a8:	4bb1      	ldr	r3, [pc, #708]	; (8001770 <main+0x31c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2220      	movs	r2, #32
 80014ae:	63da      	str	r2, [r3, #60]	; 0x3c

  //HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, DAC_Offset, 2, DAC_ALIGN_12B_R);

  //HAL_TIM_Base_Start(&htim2);

  if(debug) { printStr("Ready\n\r"); }
 80014b0:	4bb0      	ldr	r3, [pc, #704]	; (8001774 <main+0x320>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d002      	beq.n	80014be <main+0x6a>
 80014b8:	48af      	ldr	r0, [pc, #700]	; (8001778 <main+0x324>)
 80014ba:	f7ff fb4f 	bl	8000b5c <printStr>

  while(1)
  {

	  printStr(">");
 80014be:	48af      	ldr	r0, [pc, #700]	; (800177c <main+0x328>)
 80014c0:	f7ff fb4c 	bl	8000b5c <printStr>
	  char input[2];
	  while(readSerial(input, 1, 100000, debug) == 1)
 80014c4:	e002      	b.n	80014cc <main+0x78>
	  {
		  printStr(">");
 80014c6:	48ad      	ldr	r0, [pc, #692]	; (800177c <main+0x328>)
 80014c8:	f7ff fb48 	bl	8000b5c <printStr>
	  while(readSerial(input, 1, 100000, debug) == 1)
 80014cc:	4ba9      	ldr	r3, [pc, #676]	; (8001774 <main+0x320>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80014d4:	4aaa      	ldr	r2, [pc, #680]	; (8001780 <main+0x32c>)
 80014d6:	2101      	movs	r1, #1
 80014d8:	f7ff fc0c 	bl	8000cf4 <readSerial>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d0f1      	beq.n	80014c6 <main+0x72>
	  }

	  if(input[0] == 'A') //Acquire data
 80014e2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80014e6:	2b41      	cmp	r3, #65	; 0x41
 80014e8:	d155      	bne.n	8001596 <main+0x142>
	  {
 80014ea:	466b      	mov	r3, sp
 80014ec:	461d      	mov	r5, r3
		  short newdata[resolution_x];
 80014ee:	4ba5      	ldr	r3, [pc, #660]	; (8001784 <main+0x330>)
 80014f0:	6818      	ldr	r0, [r3, #0]
 80014f2:	1e43      	subs	r3, r0, #1
 80014f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80014f6:	4603      	mov	r3, r0
 80014f8:	4619      	mov	r1, r3
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	f04f 0300 	mov.w	r3, #0
 8001502:	f04f 0400 	mov.w	r4, #0
 8001506:	0114      	lsls	r4, r2, #4
 8001508:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 800150c:	010b      	lsls	r3, r1, #4
 800150e:	4603      	mov	r3, r0
 8001510:	4619      	mov	r1, r3
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	f04f 0400 	mov.w	r4, #0
 800151e:	0114      	lsls	r4, r2, #4
 8001520:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8001524:	010b      	lsls	r3, r1, #4
 8001526:	4603      	mov	r3, r0
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	3301      	adds	r3, #1
 800152c:	3307      	adds	r3, #7
 800152e:	08db      	lsrs	r3, r3, #3
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	ebad 0d03 	sub.w	sp, sp, r3
 8001536:	466b      	mov	r3, sp
 8001538:	3301      	adds	r3, #1
 800153a:	085b      	lsrs	r3, r3, #1
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	65bb      	str	r3, [r7, #88]	; 0x58
		  for(int i = 0; i<resolution_x; i++)
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001546:	e00a      	b.n	800155e <main+0x10a>
		  {
			  newdata[i] = 0;
 8001548:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800154a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800154e:	2100      	movs	r1, #0
 8001550:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  for(int i = 0; i<resolution_x; i++)
 8001554:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001558:	3301      	adds	r3, #1
 800155a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800155e:	4b89      	ldr	r3, [pc, #548]	; (8001784 <main+0x330>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001566:	429a      	cmp	r2, r3
 8001568:	dbee      	blt.n	8001548 <main+0xf4>
		  }
		  getWaveform(newdata, resolution_x, sample_time);
 800156a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800156c:	4b85      	ldr	r3, [pc, #532]	; (8001784 <main+0x330>)
 800156e:	6819      	ldr	r1, [r3, #0]
 8001570:	4b85      	ldr	r3, [pc, #532]	; (8001788 <main+0x334>)
 8001572:	ed93 7b00 	vldr	d7, [r3]
 8001576:	eeb0 0a47 	vmov.f32	s0, s14
 800157a:	eef0 0a67 	vmov.f32	s1, s15
 800157e:	4610      	mov	r0, r2
 8001580:	f7ff fd0e 	bl	8000fa0 <getWaveform>
		  printWaveform(newdata, resolution_x);
 8001584:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001586:	4b7f      	ldr	r3, [pc, #508]	; (8001784 <main+0x330>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4619      	mov	r1, r3
 800158c:	4610      	mov	r0, r2
 800158e:	f7ff fb8f 	bl	8000cb0 <printWaveform>
 8001592:	46ad      	mov	sp, r5
 8001594:	e793      	b.n	80014be <main+0x6a>
		  //printInt(measureFrequency(newdata, 1920, sample_time, 3000));
	  }
	  else if(input[0] == 'T') //Acquire data on trigger
 8001596:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800159a:	2b54      	cmp	r3, #84	; 0x54
 800159c:	d15f      	bne.n	800165e <main+0x20a>
	  {
 800159e:	466b      	mov	r3, sp
 80015a0:	461d      	mov	r5, r3
		  printStr(" ");
 80015a2:	487a      	ldr	r0, [pc, #488]	; (800178c <main+0x338>)
 80015a4:	f7ff fada 	bl	8000b5c <printStr>
		  if(debug)
 80015a8:	4b72      	ldr	r3, [pc, #456]	; (8001774 <main+0x320>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d002      	beq.n	80015b6 <main+0x162>
		  {
			  printStr("Waiting for trigger... ");
 80015b0:	4877      	ldr	r0, [pc, #476]	; (8001790 <main+0x33c>)
 80015b2:	f7ff fad3 	bl	8000b5c <printStr>
		  }
		  short newdata[resolution_x];
 80015b6:	4b73      	ldr	r3, [pc, #460]	; (8001784 <main+0x330>)
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	1e43      	subs	r3, r0, #1
 80015bc:	667b      	str	r3, [r7, #100]	; 0x64
 80015be:	4603      	mov	r3, r0
 80015c0:	4619      	mov	r1, r3
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	f04f 0400 	mov.w	r4, #0
 80015ce:	0114      	lsls	r4, r2, #4
 80015d0:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80015d4:	010b      	lsls	r3, r1, #4
 80015d6:	4603      	mov	r3, r0
 80015d8:	4619      	mov	r1, r3
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	f04f 0300 	mov.w	r3, #0
 80015e2:	f04f 0400 	mov.w	r4, #0
 80015e6:	0114      	lsls	r4, r2, #4
 80015e8:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80015ec:	010b      	lsls	r3, r1, #4
 80015ee:	4603      	mov	r3, r0
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	3301      	adds	r3, #1
 80015f4:	3307      	adds	r3, #7
 80015f6:	08db      	lsrs	r3, r3, #3
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	ebad 0d03 	sub.w	sp, sp, r3
 80015fe:	466b      	mov	r3, sp
 8001600:	3301      	adds	r3, #1
 8001602:	085b      	lsrs	r3, r3, #1
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	663b      	str	r3, [r7, #96]	; 0x60
		  for(int i = 0; i<resolution_x; i++)
 8001608:	2300      	movs	r3, #0
 800160a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800160e:	e00a      	b.n	8001626 <main+0x1d2>
		  {
			  newdata[i] = 0;
 8001610:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001612:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001616:	2100      	movs	r1, #0
 8001618:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  for(int i = 0; i<resolution_x; i++)
 800161c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001620:	3301      	adds	r3, #1
 8001622:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001626:	4b57      	ldr	r3, [pc, #348]	; (8001784 <main+0x330>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800162e:	429a      	cmp	r2, r3
 8001630:	dbee      	blt.n	8001610 <main+0x1bc>
		  }
		  getTriggeredWaveform(newdata, resolution_x, sample_time);
 8001632:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001634:	4b53      	ldr	r3, [pc, #332]	; (8001784 <main+0x330>)
 8001636:	6819      	ldr	r1, [r3, #0]
 8001638:	4b53      	ldr	r3, [pc, #332]	; (8001788 <main+0x334>)
 800163a:	ed93 7b00 	vldr	d7, [r3]
 800163e:	eeb0 0a47 	vmov.f32	s0, s14
 8001642:	eef0 0a67 	vmov.f32	s1, s15
 8001646:	4610      	mov	r0, r2
 8001648:	f7ff fc6e 	bl	8000f28 <getTriggeredWaveform>
		  printWaveform(newdata, resolution_x);
 800164c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800164e:	4b4d      	ldr	r3, [pc, #308]	; (8001784 <main+0x330>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4619      	mov	r1, r3
 8001654:	4610      	mov	r0, r2
 8001656:	f7ff fb2b 	bl	8000cb0 <printWaveform>
 800165a:	46ad      	mov	sp, r5
 800165c:	e72f      	b.n	80014be <main+0x6a>
		  //printInt(measureFrequency(newdata, 1920, sample_time, 3000));
	  }
	  else if(input[0] == 'S') //Set variable
 800165e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001662:	2b53      	cmp	r3, #83	; 0x53
 8001664:	f040 81ab 	bne.w	80019be <main+0x56a>
	  {
		  if(debug) { printStr("SetVar"); }
 8001668:	4b42      	ldr	r3, [pc, #264]	; (8001774 <main+0x320>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <main+0x222>
 8001670:	4848      	ldr	r0, [pc, #288]	; (8001794 <main+0x340>)
 8001672:	f7ff fa73 	bl	8000b5c <printStr>

		  char variable_name[21];
		  readSerial(variable_name, 20, 20000, 1);
 8001676:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800167a:	2301      	movs	r3, #1
 800167c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001680:	2114      	movs	r1, #20
 8001682:	f7ff fb37 	bl	8000cf4 <readSerial>
		  variable_name[20] = '\0';
 8001686:	2300      	movs	r3, #0
 8001688:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

		  char variable_value[21];
		  readSerial(variable_value, 20, 20000, 1);
 800168c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001690:	2301      	movs	r3, #1
 8001692:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001696:	2114      	movs	r1, #20
 8001698:	f7ff fb2c 	bl	8000cf4 <readSerial>
		  variable_value[20] = '\0';
 800169c:	2300      	movs	r3, #0
 800169e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

		  if(strcmp(variable_name, "resolution_x") == 0)
 80016a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016a6:	493c      	ldr	r1, [pc, #240]	; (8001798 <main+0x344>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe fd95 	bl	80001d8 <strcmp>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d113      	bne.n	80016dc <main+0x288>
		  {
			  char *end;
			  int newval = strtol(variable_value, &end, 10);
 80016b4:	f107 0120 	add.w	r1, r7, #32
 80016b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016bc:	220a      	movs	r2, #10
 80016be:	4618      	mov	r0, r3
 80016c0:	f007 ffca 	bl	8009658 <strtol>
 80016c4:	66b8      	str	r0, [r7, #104]	; 0x68
			  if(newval == 0)
 80016c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d103      	bne.n	80016d4 <main+0x280>
			  {
				  printStr("Invalid number");
 80016cc:	4833      	ldr	r0, [pc, #204]	; (800179c <main+0x348>)
 80016ce:	f7ff fa45 	bl	8000b5c <printStr>
 80016d2:	e6f4      	b.n	80014be <main+0x6a>
			  }
			  else
			  {
				  resolution_x = newval;
 80016d4:	4a2b      	ldr	r2, [pc, #172]	; (8001784 <main+0x330>)
 80016d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e6f0      	b.n	80014be <main+0x6a>
			  }
		  }
		  else if(strcmp(variable_name, "resolution_y") == 0)
 80016dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016e0:	492f      	ldr	r1, [pc, #188]	; (80017a0 <main+0x34c>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe fd78 	bl	80001d8 <strcmp>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d113      	bne.n	8001716 <main+0x2c2>
		  {
			  char *end;
			  int newval = strtol(variable_value, &end, 10);
 80016ee:	f107 011c 	add.w	r1, r7, #28
 80016f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f6:	220a      	movs	r2, #10
 80016f8:	4618      	mov	r0, r3
 80016fa:	f007 ffad 	bl	8009658 <strtol>
 80016fe:	66f8      	str	r0, [r7, #108]	; 0x6c
			  if(newval == 0)
 8001700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001702:	2b00      	cmp	r3, #0
 8001704:	d103      	bne.n	800170e <main+0x2ba>
			  {
				  printStr("Invalid number");
 8001706:	4825      	ldr	r0, [pc, #148]	; (800179c <main+0x348>)
 8001708:	f7ff fa28 	bl	8000b5c <printStr>
 800170c:	e6d7      	b.n	80014be <main+0x6a>
			  }
			  else
			  {
				  resolution_y = newval;
 800170e:	4a25      	ldr	r2, [pc, #148]	; (80017a4 <main+0x350>)
 8001710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	e6d3      	b.n	80014be <main+0x6a>
			  }
		  }
		  else if(strcmp(variable_name, "sample_time") == 0)
 8001716:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800171a:	4923      	ldr	r1, [pc, #140]	; (80017a8 <main+0x354>)
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe fd5b 	bl	80001d8 <strcmp>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d141      	bne.n	80017ac <main+0x358>
		  {
			  char *end;
			  double newval = strtod(variable_value, &end);
 8001728:	f107 0218 	add.w	r2, r7, #24
 800172c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001730:	4611      	mov	r1, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f007 ff00 	bl	8009538 <strtod>
 8001738:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70
			  if(newval == 0)
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001748:	f7ff f97c 	bl	8000a44 <__aeabi_dcmpeq>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <main+0x306>
			  {
				  printStr("Invalid number");
 8001752:	4812      	ldr	r0, [pc, #72]	; (800179c <main+0x348>)
 8001754:	f7ff fa02 	bl	8000b5c <printStr>
 8001758:	e6b1      	b.n	80014be <main+0x6a>
			  }
			  else
			  {
				  sample_time = newval;
 800175a:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <main+0x334>)
 800175c:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8001760:	e9c2 3400 	strd	r3, r4, [r2]
 8001764:	e6ab      	b.n	80014be <main+0x6a>
 8001766:	bf00      	nop
 8001768:	e000edf0 	.word	0xe000edf0
 800176c:	e0001000 	.word	0xe0001000
 8001770:	20000cdc 	.word	0x20000cdc
 8001774:	20000c10 	.word	0x20000c10
 8001778:	0800a7a8 	.word	0x0800a7a8
 800177c:	0800a7b0 	.word	0x0800a7b0
 8001780:	000186a0 	.word	0x000186a0
 8001784:	20000a00 	.word	0x20000a00
 8001788:	20000a08 	.word	0x20000a08
 800178c:	0800a7b4 	.word	0x0800a7b4
 8001790:	0800a7b8 	.word	0x0800a7b8
 8001794:	0800a7d0 	.word	0x0800a7d0
 8001798:	0800a7d8 	.word	0x0800a7d8
 800179c:	0800a7e8 	.word	0x0800a7e8
 80017a0:	0800a7f8 	.word	0x0800a7f8
 80017a4:	20000a04 	.word	0x20000a04
 80017a8:	0800a808 	.word	0x0800a808
			  }
		  }
		  else if(strcmp(variable_name, "trigger_level") == 0)
 80017ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017b0:	498a      	ldr	r1, [pc, #552]	; (80019dc <main+0x588>)
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fd10 	bl	80001d8 <strcmp>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d11a      	bne.n	80017f4 <main+0x3a0>
		  {
			  char *endptr;
			  int newval = strtol(variable_value, &endptr, 10);
 80017be:	f107 0114 	add.w	r1, r7, #20
 80017c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c6:	220a      	movs	r2, #10
 80017c8:	4618      	mov	r0, r3
 80017ca:	f007 ff45 	bl	8009658 <strtol>
 80017ce:	67b8      	str	r0, [r7, #120]	; 0x78
			  if(endptr == variable_value || newval > 4097)
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d004      	beq.n	80017e4 <main+0x390>
 80017da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017dc:	f241 0201 	movw	r2, #4097	; 0x1001
 80017e0:	4293      	cmp	r3, r2
 80017e2:	dd03      	ble.n	80017ec <main+0x398>
			  {
				  printStr("Invalid number, must be <= 4096");
 80017e4:	487e      	ldr	r0, [pc, #504]	; (80019e0 <main+0x58c>)
 80017e6:	f7ff f9b9 	bl	8000b5c <printStr>
 80017ea:	e0f6      	b.n	80019da <main+0x586>
			  }
			  else
			  {
				  trigger_level = newval;
 80017ec:	4a7d      	ldr	r2, [pc, #500]	; (80019e4 <main+0x590>)
 80017ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e664      	b.n	80014be <main+0x6a>
			  }
		  }
		  else if(strcmp(variable_name, "trigger_rising") == 0)
 80017f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017f8:	497b      	ldr	r1, [pc, #492]	; (80019e8 <main+0x594>)
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fcec 	bl	80001d8 <strcmp>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d118      	bne.n	8001838 <main+0x3e4>
		  {
			  char *endptr;
			  int newval = strtol(variable_value, &endptr, 10);
 8001806:	f107 0110 	add.w	r1, r7, #16
 800180a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180e:	220a      	movs	r2, #10
 8001810:	4618      	mov	r0, r3
 8001812:	f007 ff21 	bl	8009658 <strtol>
 8001816:	67f8      	str	r0, [r7, #124]	; 0x7c
			  if(endptr == variable_value || newval > 1)
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181e:	429a      	cmp	r2, r3
 8001820:	d002      	beq.n	8001828 <main+0x3d4>
 8001822:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001824:	2b01      	cmp	r3, #1
 8001826:	dd03      	ble.n	8001830 <main+0x3dc>
			  {
				  printStr("Invalid number, must be 1 for rising or 0 for falling edge");
 8001828:	4870      	ldr	r0, [pc, #448]	; (80019ec <main+0x598>)
 800182a:	f7ff f997 	bl	8000b5c <printStr>
 800182e:	e0d4      	b.n	80019da <main+0x586>
			  }
			  else
			  {
				  trigger_rising = newval;
 8001830:	4a6f      	ldr	r2, [pc, #444]	; (80019f0 <main+0x59c>)
 8001832:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e642      	b.n	80014be <main+0x6a>
			  }
		  }
		  else if(strcmp(variable_name, "amplifier_x10") == 0)
 8001838:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800183c:	496d      	ldr	r1, [pc, #436]	; (80019f4 <main+0x5a0>)
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fcca 	bl	80001d8 <strcmp>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d12a      	bne.n	80018a0 <main+0x44c>
		  {
			  char *endptr;
			  int newval = strtol(variable_value, &endptr, 10);
 800184a:	f107 010c 	add.w	r1, r7, #12
 800184e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001852:	220a      	movs	r2, #10
 8001854:	4618      	mov	r0, r3
 8001856:	f007 feff 	bl	8009658 <strtol>
 800185a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
			  if(endptr == variable_value || newval > 1)
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001864:	429a      	cmp	r2, r3
 8001866:	d003      	beq.n	8001870 <main+0x41c>
 8001868:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800186c:	2b01      	cmp	r3, #1
 800186e:	dd03      	ble.n	8001878 <main+0x424>
			  {
				  printStr("Invalid number, must be 1 for x10, 0 for x1");
 8001870:	4861      	ldr	r0, [pc, #388]	; (80019f8 <main+0x5a4>)
 8001872:	f7ff f973 	bl	8000b5c <printStr>
 8001876:	e0b0      	b.n	80019da <main+0x586>
			  }
			  else
			  {
				  if(newval == 1)
 8001878:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800187c:	2b01      	cmp	r3, #1
 800187e:	d107      	bne.n	8001890 <main+0x43c>
				  {
					  amplifier_x10 = 1;
 8001880:	4b5e      	ldr	r3, [pc, #376]	; (80019fc <main+0x5a8>)
 8001882:	2201      	movs	r2, #1
 8001884:	601a      	str	r2, [r3, #0]
					  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, 5);
 8001886:	4b5e      	ldr	r3, [pc, #376]	; (8001a00 <main+0x5ac>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2205      	movs	r2, #5
 800188c:	63da      	str	r2, [r3, #60]	; 0x3c
 800188e:	e616      	b.n	80014be <main+0x6a>
				  }
				  else
				  {
					  amplifier_x10 = 0;
 8001890:	4b5a      	ldr	r3, [pc, #360]	; (80019fc <main+0x5a8>)
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
					  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, 32);
 8001896:	4b5a      	ldr	r3, [pc, #360]	; (8001a00 <main+0x5ac>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2220      	movs	r2, #32
 800189c:	63da      	str	r2, [r3, #60]	; 0x3c
 800189e:	e60e      	b.n	80014be <main+0x6a>
				  }
			  }
		  }
		  else if(strcmp(variable_name, "afg_freq") == 0)
 80018a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018a4:	4957      	ldr	r1, [pc, #348]	; (8001a04 <main+0x5b0>)
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fc96 	bl	80001d8 <strcmp>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d132      	bne.n	8001918 <main+0x4c4>
		  {
			  char *endptr;
			  int newval = strtol(variable_value, &endptr, 10);
 80018b2:	f107 0108 	add.w	r1, r7, #8
 80018b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ba:	220a      	movs	r2, #10
 80018bc:	4618      	mov	r0, r3
 80018be:	f007 fecb 	bl	8009658 <strtol>
 80018c2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
			  if(endptr == variable_value)
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d103      	bne.n	80018d8 <main+0x484>
			  {
				  printStr("Invalid number");
 80018d0:	484d      	ldr	r0, [pc, #308]	; (8001a08 <main+0x5b4>)
 80018d2:	f7ff f943 	bl	8000b5c <printStr>
 80018d6:	e5f2      	b.n	80014be <main+0x6a>
			  }
			  else
			  {
				  if(newval>0)
 80018d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018dc:	2b00      	cmp	r3, #0
 80018de:	dd18      	ble.n	8001912 <main+0x4be>
				  {
					  TIM2->ARR = round(TIMER_FREQ_TIMES_ARR/newval);
 80018e0:	4a4a      	ldr	r2, [pc, #296]	; (8001a0c <main+0x5b8>)
 80018e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fdd8 	bl	80004a0 <__aeabi_i2d>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7ff f8fc 	bl	8000af8 <__aeabi_d2uiz>
 8001900:	4603      	mov	r3, r0
 8001902:	62e3      	str	r3, [r4, #44]	; 0x2c
					  AFG_Freq = newval;
 8001904:	4a42      	ldr	r2, [pc, #264]	; (8001a10 <main+0x5bc>)
 8001906:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800190a:	6013      	str	r3, [r2, #0]
					  startAFG();
 800190c:	f7ff fd76 	bl	80013fc <startAFG>
 8001910:	e5d5      	b.n	80014be <main+0x6a>
				  }
				  else
				  {
					  stopAFG();
 8001912:	f7ff fd8b 	bl	800142c <stopAFG>
 8001916:	e5d2      	b.n	80014be <main+0x6a>
				  }
			  }
		  }
		  else if(strcmp(variable_name, "afg_amplitude") == 0)
 8001918:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800191c:	493d      	ldr	r1, [pc, #244]	; (8001a14 <main+0x5c0>)
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fc5a 	bl	80001d8 <strcmp>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d116      	bne.n	8001958 <main+0x504>
		  {
			  char *endptr;
			  int newval = strtol(variable_value, &endptr, 10);
 800192a:	1d39      	adds	r1, r7, #4
 800192c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001930:	220a      	movs	r2, #10
 8001932:	4618      	mov	r0, r3
 8001934:	f007 fe90 	bl	8009658 <strtol>
 8001938:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
			  if(endptr == variable_value)
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001942:	429a      	cmp	r2, r3
 8001944:	d103      	bne.n	800194e <main+0x4fa>
			  {
				  printStr("Invalid number");
 8001946:	4830      	ldr	r0, [pc, #192]	; (8001a08 <main+0x5b4>)
 8001948:	f7ff f908 	bl	8000b5c <printStr>
 800194c:	e5b7      	b.n	80014be <main+0x6a>
			  }
			  else
			  {
				  afgAmplitudeAdjustment(newval);
 800194e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001952:	f7ff fc6d 	bl	8001230 <afgAmplitudeAdjustment>
 8001956:	e5b2      	b.n	80014be <main+0x6a>
			  }
		  }
		  else if(strcmp(variable_name, "afg_waveform") == 0)
 8001958:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800195c:	492e      	ldr	r1, [pc, #184]	; (8001a18 <main+0x5c4>)
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fc3a 	bl	80001d8 <strcmp>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d105      	bne.n	8001976 <main+0x522>
		  {
			  changeAFGWaveform(variable_value);
 800196a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fcc0 	bl	80012f4 <changeAFGWaveform>
 8001974:	e5a3      	b.n	80014be <main+0x6a>
		  }
		  else if(strcmp(variable_name, "DEBUG") == 0)
 8001976:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800197a:	4928      	ldr	r1, [pc, #160]	; (8001a1c <main+0x5c8>)
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fc2b 	bl	80001d8 <strcmp>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d116      	bne.n	80019b6 <main+0x562>
		  {
			  char *endptr;
			  int newval = strtol(variable_value, &endptr, 10);
 8001988:	4639      	mov	r1, r7
 800198a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198e:	220a      	movs	r2, #10
 8001990:	4618      	mov	r0, r3
 8001992:	f007 fe61 	bl	8009658 <strtol>
 8001996:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			  if(endptr == variable_value)
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d103      	bne.n	80019ac <main+0x558>
			  {
				  printStr("Invalid number");
 80019a4:	4818      	ldr	r0, [pc, #96]	; (8001a08 <main+0x5b4>)
 80019a6:	f7ff f8d9 	bl	8000b5c <printStr>
 80019aa:	e588      	b.n	80014be <main+0x6a>
			  }
			  else
			  {
				  debug = newval;
 80019ac:	4a1c      	ldr	r2, [pc, #112]	; (8001a20 <main+0x5cc>)
 80019ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	e583      	b.n	80014be <main+0x6a>
			  }
		  }
		  else
		  {
			  printStr("Variable not found. Valid variables are resolution_x, sample_time, afg_freq, afg_waveform, afg_amplitude and DEBUG");
 80019b6:	481b      	ldr	r0, [pc, #108]	; (8001a24 <main+0x5d0>)
 80019b8:	f7ff f8d0 	bl	8000b5c <printStr>
 80019bc:	e57f      	b.n	80014be <main+0x6a>
		  }
	  }
	  else
	  {
		  printStr("'");
 80019be:	481a      	ldr	r0, [pc, #104]	; (8001a28 <main+0x5d4>)
 80019c0:	f7ff f8cc 	bl	8000b5c <printStr>
		  printStr(input[0]);
 80019c4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff f8c7 	bl	8000b5c <printStr>
		  printStr("'");
 80019ce:	4816      	ldr	r0, [pc, #88]	; (8001a28 <main+0x5d4>)
 80019d0:	f7ff f8c4 	bl	8000b5c <printStr>
		  printStr("is an invalid command. Use A to acquire data or S to set a variable");
 80019d4:	4815      	ldr	r0, [pc, #84]	; (8001a2c <main+0x5d8>)
 80019d6:	f7ff f8c1 	bl	8000b5c <printStr>
  {
 80019da:	e570      	b.n	80014be <main+0x6a>
 80019dc:	0800a814 	.word	0x0800a814
 80019e0:	0800a824 	.word	0x0800a824
 80019e4:	20000a10 	.word	0x20000a10
 80019e8:	0800a844 	.word	0x0800a844
 80019ec:	0800a854 	.word	0x0800a854
 80019f0:	20000a14 	.word	0x20000a14
 80019f4:	0800a890 	.word	0x0800a890
 80019f8:	0800a8a0 	.word	0x0800a8a0
 80019fc:	20000c1c 	.word	0x20000c1c
 8001a00:	20000cdc 	.word	0x20000cdc
 8001a04:	0800a8cc 	.word	0x0800a8cc
 8001a08:	0800a7e8 	.word	0x0800a7e8
 8001a0c:	00088b80 	.word	0x00088b80
 8001a10:	20000c14 	.word	0x20000c14
 8001a14:	0800a8d8 	.word	0x0800a8d8
 8001a18:	0800a8e8 	.word	0x0800a8e8
 8001a1c:	0800a8f8 	.word	0x0800a8f8
 8001a20:	20000c10 	.word	0x20000c10
 8001a24:	0800a900 	.word	0x0800a900
 8001a28:	0800a974 	.word	0x0800a974
 8001a2c:	0800a978 	.word	0x0800a978

08001a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b0a6      	sub	sp, #152	; 0x98
 8001a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a36:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a3a:	2228      	movs	r2, #40	; 0x28
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f006 ff5a 	bl	80088f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a44:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	2258      	movs	r2, #88	; 0x58
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f006 ff4c 	bl	80088f8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a60:	2302      	movs	r3, #2
 8001a62:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a64:	2301      	movs	r3, #1
 8001a66:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a68:	2310      	movs	r3, #16
 8001a6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a7c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a8a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 fc46 	bl	8005320 <HAL_RCC_OscConfig>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001a9a:	f000 fabf 	bl	800201c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a9e:	230f      	movs	r3, #15
 8001aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ab4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ab8:	2102      	movs	r1, #2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f004 fb46 	bl	800614c <HAL_RCC_ClockConfig>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001ac6:	f000 faa9 	bl	800201c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <SystemClock_Config+0xcc>)
 8001acc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001ad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f004 fd68 	bl	80065b8 <HAL_RCCEx_PeriphCLKConfig>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001aee:	f000 fa95 	bl	800201c <Error_Handler>
  }
}
 8001af2:	bf00      	nop
 8001af4:	3798      	adds	r7, #152	; 0x98
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	00300082 	.word	0x00300082

08001b00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
 8001b20:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b22:	4b2e      	ldr	r3, [pc, #184]	; (8001bdc <MX_ADC1_Init+0xdc>)
 8001b24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001b28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001b2a:	4b2c      	ldr	r3, [pc, #176]	; (8001bdc <MX_ADC1_Init+0xdc>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b30:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <MX_ADC1_Init+0xdc>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b36:	4b29      	ldr	r3, [pc, #164]	; (8001bdc <MX_ADC1_Init+0xdc>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b3c:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <MX_ADC1_Init+0xdc>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b42:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <MX_ADC1_Init+0xdc>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b4a:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <MX_ADC1_Init+0xdc>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b50:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <MX_ADC1_Init+0xdc>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b56:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <MX_ADC1_Init+0xdc>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <MX_ADC1_Init+0xdc>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b62:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <MX_ADC1_Init+0xdc>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <MX_ADC1_Init+0xdc>)
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b70:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <MX_ADC1_Init+0xdc>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001b76:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <MX_ADC1_Init+0xdc>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b7c:	4817      	ldr	r0, [pc, #92]	; (8001bdc <MX_ADC1_Init+0xdc>)
 8001b7e:	f000 fdfb 	bl	8002778 <HAL_ADC_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001b88:	f000 fa48 	bl	800201c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	4619      	mov	r1, r3
 8001b96:	4811      	ldr	r0, [pc, #68]	; (8001bdc <MX_ADC1_Init+0xdc>)
 8001b98:	f002 f9da 	bl	8003f50 <HAL_ADCEx_MultiModeConfigChannel>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001ba2:	f000 fa3b 	bl	800201c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001baa:	2301      	movs	r3, #1
 8001bac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4806      	ldr	r0, [pc, #24]	; (8001bdc <MX_ADC1_Init+0xdc>)
 8001bc4:	f001 fed8 	bl	8003978 <HAL_ADC_ConfigChannel>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001bce:	f000 fa25 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	3728      	adds	r7, #40	; 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000d28 	.word	0x20000d28

08001be0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001be6:	463b      	mov	r3, r7
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
 8001bf4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001bf6:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <MX_ADC2_Init+0xb4>)
 8001bf8:	4a27      	ldr	r2, [pc, #156]	; (8001c98 <MX_ADC2_Init+0xb8>)
 8001bfa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001bfc:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <MX_ADC2_Init+0xb4>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001c02:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <MX_ADC2_Init+0xb4>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c08:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <MX_ADC2_Init+0xb4>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001c0e:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <MX_ADC2_Init+0xb4>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001c14:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <MX_ADC2_Init+0xb4>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <MX_ADC2_Init+0xb4>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c22:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <MX_ADC2_Init+0xb4>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c28:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MX_ADC2_Init+0xb4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001c2e:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <MX_ADC2_Init+0xb4>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001c34:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <MX_ADC2_Init+0xb4>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c3c:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <MX_ADC2_Init+0xb4>)
 8001c3e:	2204      	movs	r2, #4
 8001c40:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <MX_ADC2_Init+0xb4>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <MX_ADC2_Init+0xb4>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001c4e:	4811      	ldr	r0, [pc, #68]	; (8001c94 <MX_ADC2_Init+0xb4>)
 8001c50:	f000 fd92 	bl	8002778 <HAL_ADC_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001c5a:	f000 f9df 	bl	800201c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c62:	2301      	movs	r3, #1
 8001c64:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c76:	463b      	mov	r3, r7
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4806      	ldr	r0, [pc, #24]	; (8001c94 <MX_ADC2_Init+0xb4>)
 8001c7c:	f001 fe7c 	bl	8003978 <HAL_ADC_ConfigChannel>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8001c86:	f000 f9c9 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000c48 	.word	0x20000c48
 8001c98:	50000100 	.word	0x50000100

08001c9c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001cac:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_DAC1_Init+0x4c>)
 8001cae:	4a0f      	ldr	r2, [pc, #60]	; (8001cec <MX_DAC1_Init+0x50>)
 8001cb0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001cb2:	480d      	ldr	r0, [pc, #52]	; (8001ce8 <MX_DAC1_Init+0x4c>)
 8001cb4:	f002 fd21 	bl	80046fa <HAL_DAC_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8001cbe:	f000 f9ad 	bl	800201c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001cc2:	2324      	movs	r3, #36	; 0x24
 8001cc4:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_DAC1_Init+0x4c>)
 8001cd2:	f002 feb5 	bl	8004a40 <HAL_DAC_ConfigChannel>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8001cdc:	f000 f99e 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001ce0:	bf00      	nop
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000c34 	.word	0x20000c34
 8001cec:	40007400 	.word	0x40007400

08001cf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cf6:	f107 0310 	add.w	r3, r7, #16
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <MX_TIM2_Init+0x98>)
 8001d10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d16:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <MX_TIM2_Init+0x98>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <MX_TIM2_Init+0x98>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 8001d22:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <MX_TIM2_Init+0x98>)
 8001d24:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001d28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2a:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <MX_TIM2_Init+0x98>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d30:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <MX_TIM2_Init+0x98>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d36:	4814      	ldr	r0, [pc, #80]	; (8001d88 <MX_TIM2_Init+0x98>)
 8001d38:	f004 fe5c 	bl	80069f4 <HAL_TIM_Base_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d42:	f000 f96b 	bl	800201c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d4c:	f107 0310 	add.w	r3, r7, #16
 8001d50:	4619      	mov	r1, r3
 8001d52:	480d      	ldr	r0, [pc, #52]	; (8001d88 <MX_TIM2_Init+0x98>)
 8001d54:	f005 faac 	bl	80072b0 <HAL_TIM_ConfigClockSource>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001d5e:	f000 f95d 	bl	800201c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d62:	2320      	movs	r3, #32
 8001d64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4806      	ldr	r0, [pc, #24]	; (8001d88 <MX_TIM2_Init+0x98>)
 8001d70:	f005 ffe4 	bl	8007d3c <HAL_TIMEx_MasterConfigSynchronization>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001d7a:	f000 f94f 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d7e:	bf00      	nop
 8001d80:	3720      	adds	r7, #32
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2000d10c 	.word	0x2000d10c

08001d8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08e      	sub	sp, #56	; 0x38
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dac:	463b      	mov	r3, r7
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
 8001db8:	611a      	str	r2, [r3, #16]
 8001dba:	615a      	str	r2, [r3, #20]
 8001dbc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dbe:	4b2c      	ldr	r3, [pc, #176]	; (8001e70 <MX_TIM3_Init+0xe4>)
 8001dc0:	4a2c      	ldr	r2, [pc, #176]	; (8001e74 <MX_TIM3_Init+0xe8>)
 8001dc2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8001dc4:	4b2a      	ldr	r3, [pc, #168]	; (8001e70 <MX_TIM3_Init+0xe4>)
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dca:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <MX_TIM3_Init+0xe4>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50;
 8001dd0:	4b27      	ldr	r3, [pc, #156]	; (8001e70 <MX_TIM3_Init+0xe4>)
 8001dd2:	2232      	movs	r2, #50	; 0x32
 8001dd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd6:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <MX_TIM3_Init+0xe4>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ddc:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <MX_TIM3_Init+0xe4>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001de2:	4823      	ldr	r0, [pc, #140]	; (8001e70 <MX_TIM3_Init+0xe4>)
 8001de4:	f004 fe06 	bl	80069f4 <HAL_TIM_Base_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001dee:	f000 f915 	bl	800201c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001df8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	481c      	ldr	r0, [pc, #112]	; (8001e70 <MX_TIM3_Init+0xe4>)
 8001e00:	f005 fa56 	bl	80072b0 <HAL_TIM_ConfigClockSource>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001e0a:	f000 f907 	bl	800201c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e0e:	4818      	ldr	r0, [pc, #96]	; (8001e70 <MX_TIM3_Init+0xe4>)
 8001e10:	f004 feb0 	bl	8006b74 <HAL_TIM_PWM_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001e1a:	f000 f8ff 	bl	800201c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4810      	ldr	r0, [pc, #64]	; (8001e70 <MX_TIM3_Init+0xe4>)
 8001e2e:	f005 ff85 	bl	8007d3c <HAL_TIMEx_MasterConfigSynchronization>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001e38:	f000 f8f0 	bl	800201c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e3c:	2360      	movs	r3, #96	; 0x60
 8001e3e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e4c:	463b      	mov	r3, r7
 8001e4e:	2208      	movs	r2, #8
 8001e50:	4619      	mov	r1, r3
 8001e52:	4807      	ldr	r0, [pc, #28]	; (8001e70 <MX_TIM3_Init+0xe4>)
 8001e54:	f005 f91c 	bl	8007090 <HAL_TIM_PWM_ConfigChannel>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001e5e:	f000 f8dd 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e62:	4803      	ldr	r0, [pc, #12]	; (8001e70 <MX_TIM3_Init+0xe4>)
 8001e64:	f000 fa9c 	bl	80023a0 <HAL_TIM_MspPostInit>

}
 8001e68:	bf00      	nop
 8001e6a:	3738      	adds	r7, #56	; 0x38
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000cdc 	.word	0x20000cdc
 8001e74:	40000400 	.word	0x40000400

08001e78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <MX_USART2_UART_Init+0x58>)
 8001e7e:	4a15      	ldr	r2, [pc, #84]	; (8001ed4 <MX_USART2_UART_Init+0x5c>)
 8001e80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1843200;
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <MX_USART2_UART_Init+0x58>)
 8001e84:	f44f 12e1 	mov.w	r2, #1843200	; 0x1c2000
 8001e88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8a:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <MX_USART2_UART_Init+0x58>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e90:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <MX_USART2_UART_Init+0x58>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e96:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <MX_USART2_UART_Init+0x58>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <MX_USART2_UART_Init+0x58>)
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <MX_USART2_UART_Init+0x58>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <MX_USART2_UART_Init+0x58>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <MX_USART2_UART_Init+0x58>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <MX_USART2_UART_Init+0x58>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eba:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <MX_USART2_UART_Init+0x58>)
 8001ebc:	f005 ffe8 	bl	8007e90 <HAL_UART_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ec6:	f000 f8a9 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	2000d158 	.word	0x2000d158
 8001ed4:	40004400 	.word	0x40004400

08001ed8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ede:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <MX_DMA_Init+0x70>)
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	4a19      	ldr	r2, [pc, #100]	; (8001f48 <MX_DMA_Init+0x70>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6153      	str	r3, [r2, #20]
 8001eea:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <MX_DMA_Init+0x70>)
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <MX_DMA_Init+0x70>)
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	4a13      	ldr	r2, [pc, #76]	; (8001f48 <MX_DMA_Init+0x70>)
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	6153      	str	r3, [r2, #20]
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <MX_DMA_Init+0x70>)
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2100      	movs	r1, #0
 8001f12:	200b      	movs	r0, #11
 8001f14:	f002 fbbb 	bl	800468e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f18:	200b      	movs	r0, #11
 8001f1a:	f002 fbd4 	bl	80046c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2100      	movs	r1, #0
 8001f22:	200d      	movs	r0, #13
 8001f24:	f002 fbb3 	bl	800468e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001f28:	200d      	movs	r0, #13
 8001f2a:	f002 fbcc 	bl	80046c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2100      	movs	r1, #0
 8001f32:	2038      	movs	r0, #56	; 0x38
 8001f34:	f002 fbab 	bl	800468e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001f38:	2038      	movs	r0, #56	; 0x38
 8001f3a:	f002 fbc4 	bl	80046c6 <HAL_NVIC_EnableIRQ>

}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000

08001f4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	; 0x28
 8001f50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
 8001f5e:	60da      	str	r2, [r3, #12]
 8001f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f62:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <MX_GPIO_Init+0xc4>)
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	4a2a      	ldr	r2, [pc, #168]	; (8002010 <MX_GPIO_Init+0xc4>)
 8001f68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f6c:	6153      	str	r3, [r2, #20]
 8001f6e:	4b28      	ldr	r3, [pc, #160]	; (8002010 <MX_GPIO_Init+0xc4>)
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f7a:	4b25      	ldr	r3, [pc, #148]	; (8002010 <MX_GPIO_Init+0xc4>)
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	4a24      	ldr	r2, [pc, #144]	; (8002010 <MX_GPIO_Init+0xc4>)
 8001f80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f84:	6153      	str	r3, [r2, #20]
 8001f86:	4b22      	ldr	r3, [pc, #136]	; (8002010 <MX_GPIO_Init+0xc4>)
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <MX_GPIO_Init+0xc4>)
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	4a1e      	ldr	r2, [pc, #120]	; (8002010 <MX_GPIO_Init+0xc4>)
 8001f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9c:	6153      	str	r3, [r2, #20]
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <MX_GPIO_Init+0xc4>)
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001faa:	4b19      	ldr	r3, [pc, #100]	; (8002010 <MX_GPIO_Init+0xc4>)
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	4a18      	ldr	r2, [pc, #96]	; (8002010 <MX_GPIO_Init+0xc4>)
 8001fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb4:	6153      	str	r3, [r2, #20]
 8001fb6:	4b16      	ldr	r3, [pc, #88]	; (8002010 <MX_GPIO_Init+0xc4>)
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2120      	movs	r1, #32
 8001fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fca:	f003 f991 	bl	80052f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <MX_GPIO_Init+0xc8>)
 8001fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	480d      	ldr	r0, [pc, #52]	; (8002018 <MX_GPIO_Init+0xcc>)
 8001fe4:	f002 fffa 	bl	8004fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001fe8:	2320      	movs	r3, #32
 8001fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fec:	2301      	movs	r3, #1
 8001fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002002:	f002 ffeb 	bl	8004fdc <HAL_GPIO_Init>

}
 8002006:	bf00      	nop
 8002008:	3728      	adds	r7, #40	; 0x28
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000
 8002014:	10210000 	.word	0x10210000
 8002018:	48000800 	.word	0x48000800

0800201c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002020:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002022:	e7fe      	b.n	8002022 <Error_Handler+0x6>

08002024 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202a:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <HAL_MspInit+0x44>)
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	4a0e      	ldr	r2, [pc, #56]	; (8002068 <HAL_MspInit+0x44>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	6193      	str	r3, [r2, #24]
 8002036:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <HAL_MspInit+0x44>)
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_MspInit+0x44>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	4a08      	ldr	r2, [pc, #32]	; (8002068 <HAL_MspInit+0x44>)
 8002048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204c:	61d3      	str	r3, [r2, #28]
 800204e:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_MspInit+0x44>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800205a:	2007      	movs	r0, #7
 800205c:	f002 fb0c 	bl	8004678 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40021000 	.word	0x40021000

0800206c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08c      	sub	sp, #48	; 0x30
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 031c 	add.w	r3, r7, #28
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800208c:	d15e      	bne.n	800214c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800208e:	4b63      	ldr	r3, [pc, #396]	; (800221c <HAL_ADC_MspInit+0x1b0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	3301      	adds	r3, #1
 8002094:	4a61      	ldr	r2, [pc, #388]	; (800221c <HAL_ADC_MspInit+0x1b0>)
 8002096:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002098:	4b60      	ldr	r3, [pc, #384]	; (800221c <HAL_ADC_MspInit+0x1b0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d10b      	bne.n	80020b8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80020a0:	4b5f      	ldr	r3, [pc, #380]	; (8002220 <HAL_ADC_MspInit+0x1b4>)
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	4a5e      	ldr	r2, [pc, #376]	; (8002220 <HAL_ADC_MspInit+0x1b4>)
 80020a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020aa:	6153      	str	r3, [r2, #20]
 80020ac:	4b5c      	ldr	r3, [pc, #368]	; (8002220 <HAL_ADC_MspInit+0x1b4>)
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b4:	61bb      	str	r3, [r7, #24]
 80020b6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b8:	4b59      	ldr	r3, [pc, #356]	; (8002220 <HAL_ADC_MspInit+0x1b4>)
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	4a58      	ldr	r2, [pc, #352]	; (8002220 <HAL_ADC_MspInit+0x1b4>)
 80020be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c2:	6153      	str	r3, [r2, #20]
 80020c4:	4b56      	ldr	r3, [pc, #344]	; (8002220 <HAL_ADC_MspInit+0x1b4>)
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020d0:	2301      	movs	r3, #1
 80020d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020d4:	2303      	movs	r3, #3
 80020d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020dc:	f107 031c 	add.w	r3, r7, #28
 80020e0:	4619      	mov	r1, r3
 80020e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e6:	f002 ff79 	bl	8004fdc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80020ea:	4b4e      	ldr	r3, [pc, #312]	; (8002224 <HAL_ADC_MspInit+0x1b8>)
 80020ec:	4a4e      	ldr	r2, [pc, #312]	; (8002228 <HAL_ADC_MspInit+0x1bc>)
 80020ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020f0:	4b4c      	ldr	r3, [pc, #304]	; (8002224 <HAL_ADC_MspInit+0x1b8>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020f6:	4b4b      	ldr	r3, [pc, #300]	; (8002224 <HAL_ADC_MspInit+0x1b8>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020fc:	4b49      	ldr	r3, [pc, #292]	; (8002224 <HAL_ADC_MspInit+0x1b8>)
 80020fe:	2280      	movs	r2, #128	; 0x80
 8002100:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002102:	4b48      	ldr	r3, [pc, #288]	; (8002224 <HAL_ADC_MspInit+0x1b8>)
 8002104:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002108:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800210a:	4b46      	ldr	r3, [pc, #280]	; (8002224 <HAL_ADC_MspInit+0x1b8>)
 800210c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002110:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002112:	4b44      	ldr	r3, [pc, #272]	; (8002224 <HAL_ADC_MspInit+0x1b8>)
 8002114:	2220      	movs	r2, #32
 8002116:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002118:	4b42      	ldr	r3, [pc, #264]	; (8002224 <HAL_ADC_MspInit+0x1b8>)
 800211a:	2200      	movs	r2, #0
 800211c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800211e:	4841      	ldr	r0, [pc, #260]	; (8002224 <HAL_ADC_MspInit+0x1b8>)
 8002120:	f002 fd6f 	bl	8004c02 <HAL_DMA_Init>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 800212a:	f7ff ff77 	bl	800201c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a3c      	ldr	r2, [pc, #240]	; (8002224 <HAL_ADC_MspInit+0x1b8>)
 8002132:	639a      	str	r2, [r3, #56]	; 0x38
 8002134:	4a3b      	ldr	r2, [pc, #236]	; (8002224 <HAL_ADC_MspInit+0x1b8>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	2012      	movs	r0, #18
 8002140:	f002 faa5 	bl	800468e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002144:	2012      	movs	r0, #18
 8002146:	f002 fabe 	bl	80046c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800214a:	e062      	b.n	8002212 <HAL_ADC_MspInit+0x1a6>
  else if(hadc->Instance==ADC2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a36      	ldr	r2, [pc, #216]	; (800222c <HAL_ADC_MspInit+0x1c0>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d15d      	bne.n	8002212 <HAL_ADC_MspInit+0x1a6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002156:	4b31      	ldr	r3, [pc, #196]	; (800221c <HAL_ADC_MspInit+0x1b0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	3301      	adds	r3, #1
 800215c:	4a2f      	ldr	r2, [pc, #188]	; (800221c <HAL_ADC_MspInit+0x1b0>)
 800215e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002160:	4b2e      	ldr	r3, [pc, #184]	; (800221c <HAL_ADC_MspInit+0x1b0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d10b      	bne.n	8002180 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002168:	4b2d      	ldr	r3, [pc, #180]	; (8002220 <HAL_ADC_MspInit+0x1b4>)
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	4a2c      	ldr	r2, [pc, #176]	; (8002220 <HAL_ADC_MspInit+0x1b4>)
 800216e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002172:	6153      	str	r3, [r2, #20]
 8002174:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <HAL_ADC_MspInit+0x1b4>)
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002180:	4b27      	ldr	r3, [pc, #156]	; (8002220 <HAL_ADC_MspInit+0x1b4>)
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	4a26      	ldr	r2, [pc, #152]	; (8002220 <HAL_ADC_MspInit+0x1b4>)
 8002186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218a:	6153      	str	r3, [r2, #20]
 800218c:	4b24      	ldr	r3, [pc, #144]	; (8002220 <HAL_ADC_MspInit+0x1b4>)
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002198:	2340      	movs	r3, #64	; 0x40
 800219a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800219c:	2303      	movs	r3, #3
 800219e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a4:	f107 031c 	add.w	r3, r7, #28
 80021a8:	4619      	mov	r1, r3
 80021aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ae:	f002 ff15 	bl	8004fdc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 80021b2:	4b1f      	ldr	r3, [pc, #124]	; (8002230 <HAL_ADC_MspInit+0x1c4>)
 80021b4:	4a1f      	ldr	r2, [pc, #124]	; (8002234 <HAL_ADC_MspInit+0x1c8>)
 80021b6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021b8:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <HAL_ADC_MspInit+0x1c4>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80021be:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <HAL_ADC_MspInit+0x1c4>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80021c4:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <HAL_ADC_MspInit+0x1c4>)
 80021c6:	2280      	movs	r2, #128	; 0x80
 80021c8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021ca:	4b19      	ldr	r3, [pc, #100]	; (8002230 <HAL_ADC_MspInit+0x1c4>)
 80021cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021d0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021d2:	4b17      	ldr	r3, [pc, #92]	; (8002230 <HAL_ADC_MspInit+0x1c4>)
 80021d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021d8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <HAL_ADC_MspInit+0x1c4>)
 80021dc:	2220      	movs	r2, #32
 80021de:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80021e0:	4b13      	ldr	r3, [pc, #76]	; (8002230 <HAL_ADC_MspInit+0x1c4>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80021e6:	4812      	ldr	r0, [pc, #72]	; (8002230 <HAL_ADC_MspInit+0x1c4>)
 80021e8:	f002 fd0b 	bl	8004c02 <HAL_DMA_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_ADC_MspInit+0x18a>
      Error_Handler();
 80021f2:	f7ff ff13 	bl	800201c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a0d      	ldr	r2, [pc, #52]	; (8002230 <HAL_ADC_MspInit+0x1c4>)
 80021fa:	639a      	str	r2, [r3, #56]	; 0x38
 80021fc:	4a0c      	ldr	r2, [pc, #48]	; (8002230 <HAL_ADC_MspInit+0x1c4>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	2100      	movs	r1, #0
 8002206:	2012      	movs	r0, #18
 8002208:	f002 fa41 	bl	800468e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800220c:	2012      	movs	r0, #18
 800220e:	f002 fa5a 	bl	80046c6 <HAL_NVIC_EnableIRQ>
}
 8002212:	bf00      	nop
 8002214:	3730      	adds	r7, #48	; 0x30
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000c24 	.word	0x20000c24
 8002220:	40021000 	.word	0x40021000
 8002224:	20000d78 	.word	0x20000d78
 8002228:	40020008 	.word	0x40020008
 800222c:	50000100 	.word	0x50000100
 8002230:	2000d1dc 	.word	0x2000d1dc
 8002234:	40020408 	.word	0x40020408

08002238 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	; 0x28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a31      	ldr	r2, [pc, #196]	; (800231c <HAL_DAC_MspInit+0xe4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d15b      	bne.n	8002312 <HAL_DAC_MspInit+0xda>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800225a:	4b31      	ldr	r3, [pc, #196]	; (8002320 <HAL_DAC_MspInit+0xe8>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	4a30      	ldr	r2, [pc, #192]	; (8002320 <HAL_DAC_MspInit+0xe8>)
 8002260:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002264:	61d3      	str	r3, [r2, #28]
 8002266:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <HAL_DAC_MspInit+0xe8>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002272:	4b2b      	ldr	r3, [pc, #172]	; (8002320 <HAL_DAC_MspInit+0xe8>)
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	4a2a      	ldr	r2, [pc, #168]	; (8002320 <HAL_DAC_MspInit+0xe8>)
 8002278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800227c:	6153      	str	r3, [r2, #20]
 800227e:	4b28      	ldr	r3, [pc, #160]	; (8002320 <HAL_DAC_MspInit+0xe8>)
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800228a:	2310      	movs	r3, #16
 800228c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800228e:	2303      	movs	r3, #3
 8002290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	4619      	mov	r1, r3
 800229c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a0:	f002 fe9c 	bl	8004fdc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 80022a4:	4b1f      	ldr	r3, [pc, #124]	; (8002324 <HAL_DAC_MspInit+0xec>)
 80022a6:	4a20      	ldr	r2, [pc, #128]	; (8002328 <HAL_DAC_MspInit+0xf0>)
 80022a8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022aa:	4b1e      	ldr	r3, [pc, #120]	; (8002324 <HAL_DAC_MspInit+0xec>)
 80022ac:	2210      	movs	r2, #16
 80022ae:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022b0:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <HAL_DAC_MspInit+0xec>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80022b6:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <HAL_DAC_MspInit+0xec>)
 80022b8:	2280      	movs	r2, #128	; 0x80
 80022ba:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022bc:	4b19      	ldr	r3, [pc, #100]	; (8002324 <HAL_DAC_MspInit+0xec>)
 80022be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c2:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022c4:	4b17      	ldr	r3, [pc, #92]	; (8002324 <HAL_DAC_MspInit+0xec>)
 80022c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022ca:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80022cc:	4b15      	ldr	r3, [pc, #84]	; (8002324 <HAL_DAC_MspInit+0xec>)
 80022ce:	2220      	movs	r2, #32
 80022d0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <HAL_DAC_MspInit+0xec>)
 80022d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022d8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80022da:	4812      	ldr	r0, [pc, #72]	; (8002324 <HAL_DAC_MspInit+0xec>)
 80022dc:	f002 fc91 	bl	8004c02 <HAL_DMA_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 80022e6:	f7ff fe99 	bl	800201c <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <HAL_DAC_MspInit+0xf4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a0f      	ldr	r2, [pc, #60]	; (800232c <HAL_DAC_MspInit+0xf4>)
 80022f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022f4:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <HAL_DAC_MspInit+0xec>)
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	4a09      	ldr	r2, [pc, #36]	; (8002324 <HAL_DAC_MspInit+0xec>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6253      	str	r3, [r2, #36]	; 0x24

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002302:	2200      	movs	r2, #0
 8002304:	2100      	movs	r1, #0
 8002306:	2036      	movs	r0, #54	; 0x36
 8002308:	f002 f9c1 	bl	800468e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800230c:	2036      	movs	r0, #54	; 0x36
 800230e:	f002 f9da 	bl	80046c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002312:	bf00      	nop
 8002314:	3728      	adds	r7, #40	; 0x28
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40007400 	.word	0x40007400
 8002320:	40021000 	.word	0x40021000
 8002324:	20000c98 	.word	0x20000c98
 8002328:	40020030 	.word	0x40020030
 800232c:	40010000 	.word	0x40010000

08002330 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002340:	d114      	bne.n	800236c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_TIM_Base_MspInit+0x68>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	4a14      	ldr	r2, [pc, #80]	; (8002398 <HAL_TIM_Base_MspInit+0x68>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	61d3      	str	r3, [r2, #28]
 800234e:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_TIM_Base_MspInit+0x68>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800235a:	2200      	movs	r2, #0
 800235c:	2100      	movs	r1, #0
 800235e:	201c      	movs	r0, #28
 8002360:	f002 f995 	bl	800468e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002364:	201c      	movs	r0, #28
 8002366:	f002 f9ae 	bl	80046c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800236a:	e010      	b.n	800238e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a0a      	ldr	r2, [pc, #40]	; (800239c <HAL_TIM_Base_MspInit+0x6c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d10b      	bne.n	800238e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <HAL_TIM_Base_MspInit+0x68>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	4a07      	ldr	r2, [pc, #28]	; (8002398 <HAL_TIM_Base_MspInit+0x68>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	61d3      	str	r3, [r2, #28]
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_TIM_Base_MspInit+0x68>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68bb      	ldr	r3, [r7, #8]
}
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
 800239c:	40000400 	.word	0x40000400

080023a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 030c 	add.w	r3, r7, #12
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a11      	ldr	r2, [pc, #68]	; (8002404 <HAL_TIM_MspPostInit+0x64>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d11b      	bne.n	80023fa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <HAL_TIM_MspPostInit+0x68>)
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	4a10      	ldr	r2, [pc, #64]	; (8002408 <HAL_TIM_MspPostInit+0x68>)
 80023c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023cc:	6153      	str	r3, [r2, #20]
 80023ce:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <HAL_TIM_MspPostInit+0x68>)
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023da:	2301      	movs	r3, #1
 80023dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023de:	2302      	movs	r3, #2
 80023e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023ea:	2302      	movs	r3, #2
 80023ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ee:	f107 030c 	add.w	r3, r7, #12
 80023f2:	4619      	mov	r1, r3
 80023f4:	4805      	ldr	r0, [pc, #20]	; (800240c <HAL_TIM_MspPostInit+0x6c>)
 80023f6:	f002 fdf1 	bl	8004fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80023fa:	bf00      	nop
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40000400 	.word	0x40000400
 8002408:	40021000 	.word	0x40021000
 800240c:	48000400 	.word	0x48000400

08002410 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	; 0x28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	60da      	str	r2, [r3, #12]
 8002426:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a17      	ldr	r2, [pc, #92]	; (800248c <HAL_UART_MspInit+0x7c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d128      	bne.n	8002484 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002432:	4b17      	ldr	r3, [pc, #92]	; (8002490 <HAL_UART_MspInit+0x80>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	4a16      	ldr	r2, [pc, #88]	; (8002490 <HAL_UART_MspInit+0x80>)
 8002438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800243c:	61d3      	str	r3, [r2, #28]
 800243e:	4b14      	ldr	r3, [pc, #80]	; (8002490 <HAL_UART_MspInit+0x80>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_UART_MspInit+0x80>)
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	4a10      	ldr	r2, [pc, #64]	; (8002490 <HAL_UART_MspInit+0x80>)
 8002450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002454:	6153      	str	r3, [r2, #20]
 8002456:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <HAL_UART_MspInit+0x80>)
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002462:	230c      	movs	r3, #12
 8002464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002466:	2302      	movs	r3, #2
 8002468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246e:	2300      	movs	r3, #0
 8002470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002472:	2307      	movs	r3, #7
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	4619      	mov	r1, r3
 800247c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002480:	f002 fdac 	bl	8004fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002484:	bf00      	nop
 8002486:	3728      	adds	r7, #40	; 0x28
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40004400 	.word	0x40004400
 8002490:	40021000 	.word	0x40021000

08002494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002498:	e7fe      	b.n	8002498 <NMI_Handler+0x4>
	...

0800249c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printStr("Error: Hard fault");
 80024a0:	4801      	ldr	r0, [pc, #4]	; (80024a8 <HardFault_Handler+0xc>)
 80024a2:	f7fe fb5b 	bl	8000b5c <printStr>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024a6:	e7fe      	b.n	80024a6 <HardFault_Handler+0xa>
 80024a8:	0800a9bc 	.word	0x0800a9bc

080024ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b0:	e7fe      	b.n	80024b0 <MemManage_Handler+0x4>
	...

080024b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  printStr("Error: Bus fault");
 80024b8:	4801      	ldr	r0, [pc, #4]	; (80024c0 <BusFault_Handler+0xc>)
 80024ba:	f7fe fb4f 	bl	8000b5c <printStr>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024be:	e7fe      	b.n	80024be <BusFault_Handler+0xa>
 80024c0:	0800a9d0 	.word	0x0800a9d0

080024c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  printStr("Error: Usage fault");
 80024c8:	4801      	ldr	r0, [pc, #4]	; (80024d0 <UsageFault_Handler+0xc>)
 80024ca:	f7fe fb47 	bl	8000b5c <printStr>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024ce:	e7fe      	b.n	80024ce <UsageFault_Handler+0xa>
 80024d0:	0800a9e4 	.word	0x0800a9e4

080024d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002502:	f000 f8fb 	bl	80026fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002510:	4802      	ldr	r0, [pc, #8]	; (800251c <DMA1_Channel1_IRQHandler+0x10>)
 8002512:	f002 fc55 	bl	8004dc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000d78 	.word	0x20000d78

08002520 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002524:	4802      	ldr	r0, [pc, #8]	; (8002530 <DMA1_Channel3_IRQHandler+0x10>)
 8002526:	f002 fc4b 	bl	8004dc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000c98 	.word	0x20000c98

08002534 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002538:	4803      	ldr	r0, [pc, #12]	; (8002548 <ADC1_2_IRQHandler+0x14>)
 800253a:	f000 fee9 	bl	8003310 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800253e:	4803      	ldr	r0, [pc, #12]	; (800254c <ADC1_2_IRQHandler+0x18>)
 8002540:	f000 fee6 	bl	8003310 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002544:	bf00      	nop
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000d28 	.word	0x20000d28
 800254c:	20000c48 	.word	0x20000c48

08002550 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <TIM2_IRQHandler+0x10>)
 8002556:	f004 fc7b 	bl	8006e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	2000d10c 	.word	0x2000d10c

08002564 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <TIM6_DAC_IRQHandler+0x10>)
 800256a:	f002 fa0f 	bl	800498c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000c34 	.word	0x20000c34

08002578 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <DMA2_Channel1_IRQHandler+0x10>)
 800257e:	f002 fc1f 	bl	8004dc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	2000d1dc 	.word	0x2000d1dc

0800258c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002594:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <_sbrk+0x5c>)
 8002596:	4b15      	ldr	r3, [pc, #84]	; (80025ec <_sbrk+0x60>)
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a0:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <_sbrk+0x64>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <_sbrk+0x64>)
 80025aa:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <_sbrk+0x68>)
 80025ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <_sbrk+0x64>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d207      	bcs.n	80025cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025bc:	f006 f958 	bl	8008870 <__errno>
 80025c0:	4602      	mov	r2, r0
 80025c2:	230c      	movs	r3, #12
 80025c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ca:	e009      	b.n	80025e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <_sbrk+0x64>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025d2:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <_sbrk+0x64>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <_sbrk+0x64>)
 80025dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025de:	68fb      	ldr	r3, [r7, #12]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20010000 	.word	0x20010000
 80025ec:	00000400 	.word	0x00000400
 80025f0:	20000c28 	.word	0x20000c28
 80025f4:	2000d228 	.word	0x2000d228

080025f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <SystemInit+0x20>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	4a05      	ldr	r2, [pc, #20]	; (8002618 <SystemInit+0x20>)
 8002604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800261c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002654 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002620:	480d      	ldr	r0, [pc, #52]	; (8002658 <LoopForever+0x6>)
  ldr r1, =_edata
 8002622:	490e      	ldr	r1, [pc, #56]	; (800265c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002624:	4a0e      	ldr	r2, [pc, #56]	; (8002660 <LoopForever+0xe>)
  movs r3, #0
 8002626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002628:	e002      	b.n	8002630 <LoopCopyDataInit>

0800262a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800262a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800262c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800262e:	3304      	adds	r3, #4

08002630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002634:	d3f9      	bcc.n	800262a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002636:	4a0b      	ldr	r2, [pc, #44]	; (8002664 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002638:	4c0b      	ldr	r4, [pc, #44]	; (8002668 <LoopForever+0x16>)
  movs r3, #0
 800263a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800263c:	e001      	b.n	8002642 <LoopFillZerobss>

0800263e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800263e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002640:	3204      	adds	r2, #4

08002642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002644:	d3fb      	bcc.n	800263e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002646:	f7ff ffd7 	bl	80025f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800264a:	f006 f917 	bl	800887c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800264e:	f7fe ff01 	bl	8001454 <main>

08002652 <LoopForever>:

LoopForever:
    b LoopForever
 8002652:	e7fe      	b.n	8002652 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002654:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800265c:	20000bf4 	.word	0x20000bf4
  ldr r2, =_sidata
 8002660:	0800acc8 	.word	0x0800acc8
  ldr r2, =_sbss
 8002664:	20000bf4 	.word	0x20000bf4
  ldr r4, =_ebss
 8002668:	2000d228 	.word	0x2000d228

0800266c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800266c:	e7fe      	b.n	800266c <ADC3_IRQHandler>
	...

08002670 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002674:	4b08      	ldr	r3, [pc, #32]	; (8002698 <HAL_Init+0x28>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a07      	ldr	r2, [pc, #28]	; (8002698 <HAL_Init+0x28>)
 800267a:	f043 0310 	orr.w	r3, r3, #16
 800267e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002680:	2003      	movs	r0, #3
 8002682:	f001 fff9 	bl	8004678 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002686:	2000      	movs	r0, #0
 8002688:	f000 f808 	bl	800269c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800268c:	f7ff fcca 	bl	8002024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40022000 	.word	0x40022000

0800269c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026a4:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_InitTick+0x54>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <HAL_InitTick+0x58>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	4619      	mov	r1, r3
 80026ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ba:	4618      	mov	r0, r3
 80026bc:	f002 f811 	bl	80046e2 <HAL_SYSTICK_Config>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e00e      	b.n	80026e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b0f      	cmp	r3, #15
 80026ce:	d80a      	bhi.n	80026e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026d0:	2200      	movs	r2, #0
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	f04f 30ff 	mov.w	r0, #4294967295
 80026d8:	f001 ffd9 	bl	800468e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026dc:	4a06      	ldr	r2, [pc, #24]	; (80026f8 <HAL_InitTick+0x5c>)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	e000      	b.n	80026e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20000a18 	.word	0x20000a18
 80026f4:	20000a20 	.word	0x20000a20
 80026f8:	20000a1c 	.word	0x20000a1c

080026fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_IncTick+0x20>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_IncTick+0x24>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4413      	add	r3, r2
 800270c:	4a04      	ldr	r2, [pc, #16]	; (8002720 <HAL_IncTick+0x24>)
 800270e:	6013      	str	r3, [r2, #0]
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000a20 	.word	0x20000a20
 8002720:	2000d220 	.word	0x2000d220

08002724 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return uwTick;  
 8002728:	4b03      	ldr	r3, [pc, #12]	; (8002738 <HAL_GetTick+0x14>)
 800272a:	681b      	ldr	r3, [r3, #0]
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	2000d220 	.word	0x2000d220

0800273c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b09a      	sub	sp, #104	; 0x68
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e1e3      	b.n	8002b60 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f003 0310 	and.w	r3, r3, #16
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d176      	bne.n	8002898 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d152      	bne.n	8002858 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff fc4d 	bl	800206c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d13b      	bne.n	8002858 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f001 fd6b 	bl	80042bc <ADC_Disable>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d12f      	bne.n	8002858 <HAL_ADC_Init+0xe0>
 80027f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d12b      	bne.n	8002858 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002808:	f023 0302 	bic.w	r3, r3, #2
 800280c:	f043 0202 	orr.w	r2, r3, #2
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002822:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002832:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002834:	4b92      	ldr	r3, [pc, #584]	; (8002a80 <HAL_ADC_Init+0x308>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a92      	ldr	r2, [pc, #584]	; (8002a84 <HAL_ADC_Init+0x30c>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	0c9a      	lsrs	r2, r3, #18
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800284a:	e002      	b.n	8002852 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	3b01      	subs	r3, #1
 8002850:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f9      	bne.n	800284c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d007      	beq.n	8002876 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002870:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002874:	d110      	bne.n	8002898 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f023 0312 	bic.w	r3, r3, #18
 800287e:	f043 0210 	orr.w	r2, r3, #16
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	f043 0201 	orr.w	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f040 8150 	bne.w	8002b46 <HAL_ADC_Init+0x3ce>
 80028a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f040 814b 	bne.w	8002b46 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f040 8143 	bne.w	8002b46 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028c8:	f043 0202 	orr.w	r2, r3, #2
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028d8:	d004      	beq.n	80028e4 <HAL_ADC_Init+0x16c>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a6a      	ldr	r2, [pc, #424]	; (8002a88 <HAL_ADC_Init+0x310>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d101      	bne.n	80028e8 <HAL_ADC_Init+0x170>
 80028e4:	4b69      	ldr	r3, [pc, #420]	; (8002a8c <HAL_ADC_Init+0x314>)
 80028e6:	e000      	b.n	80028ea <HAL_ADC_Init+0x172>
 80028e8:	4b69      	ldr	r3, [pc, #420]	; (8002a90 <HAL_ADC_Init+0x318>)
 80028ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028f4:	d102      	bne.n	80028fc <HAL_ADC_Init+0x184>
 80028f6:	4b64      	ldr	r3, [pc, #400]	; (8002a88 <HAL_ADC_Init+0x310>)
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	e01a      	b.n	8002932 <HAL_ADC_Init+0x1ba>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a61      	ldr	r2, [pc, #388]	; (8002a88 <HAL_ADC_Init+0x310>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d103      	bne.n	800290e <HAL_ADC_Init+0x196>
 8002906:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	e011      	b.n	8002932 <HAL_ADC_Init+0x1ba>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a60      	ldr	r2, [pc, #384]	; (8002a94 <HAL_ADC_Init+0x31c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d102      	bne.n	800291e <HAL_ADC_Init+0x1a6>
 8002918:	4b5f      	ldr	r3, [pc, #380]	; (8002a98 <HAL_ADC_Init+0x320>)
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	e009      	b.n	8002932 <HAL_ADC_Init+0x1ba>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a5d      	ldr	r2, [pc, #372]	; (8002a98 <HAL_ADC_Init+0x320>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d102      	bne.n	800292e <HAL_ADC_Init+0x1b6>
 8002928:	4b5a      	ldr	r3, [pc, #360]	; (8002a94 <HAL_ADC_Init+0x31c>)
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	e001      	b.n	8002932 <HAL_ADC_Init+0x1ba>
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 0303 	and.w	r3, r3, #3
 800293c:	2b01      	cmp	r3, #1
 800293e:	d108      	bne.n	8002952 <HAL_ADC_Init+0x1da>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b01      	cmp	r3, #1
 800294c:	d101      	bne.n	8002952 <HAL_ADC_Init+0x1da>
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <HAL_ADC_Init+0x1dc>
 8002952:	2300      	movs	r3, #0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d11c      	bne.n	8002992 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002958:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800295a:	2b00      	cmp	r3, #0
 800295c:	d010      	beq.n	8002980 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	2b01      	cmp	r3, #1
 8002968:	d107      	bne.n	800297a <HAL_ADC_Init+0x202>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_ADC_Init+0x202>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_ADC_Init+0x204>
 800297a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800297c:	2b00      	cmp	r3, #0
 800297e:	d108      	bne.n	8002992 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	431a      	orrs	r2, r3
 800298e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002990:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7e5b      	ldrb	r3, [r3, #25]
 8002996:	035b      	lsls	r3, r3, #13
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800299c:	2a01      	cmp	r2, #1
 800299e:	d002      	beq.n	80029a6 <HAL_ADC_Init+0x22e>
 80029a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029a4:	e000      	b.n	80029a8 <HAL_ADC_Init+0x230>
 80029a6:	2200      	movs	r2, #0
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029b8:	4313      	orrs	r3, r2
 80029ba:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d11b      	bne.n	80029fe <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7e5b      	ldrb	r3, [r3, #25]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	3b01      	subs	r3, #1
 80029d4:	045a      	lsls	r2, r3, #17
 80029d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029d8:	4313      	orrs	r3, r2
 80029da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029de:	663b      	str	r3, [r7, #96]	; 0x60
 80029e0:	e00d      	b.n	80029fe <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80029ea:	f043 0220 	orr.w	r2, r3, #32
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	f043 0201 	orr.w	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d054      	beq.n	8002ab0 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a22      	ldr	r2, [pc, #136]	; (8002a94 <HAL_ADC_Init+0x31c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d004      	beq.n	8002a1a <HAL_ADC_Init+0x2a2>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a20      	ldr	r2, [pc, #128]	; (8002a98 <HAL_ADC_Init+0x320>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d140      	bne.n	8002a9c <HAL_ADC_Init+0x324>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002a22:	d02a      	beq.n	8002a7a <HAL_ADC_Init+0x302>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a2c:	d022      	beq.n	8002a74 <HAL_ADC_Init+0x2fc>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002a36:	d01a      	beq.n	8002a6e <HAL_ADC_Init+0x2f6>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8002a40:	d012      	beq.n	8002a68 <HAL_ADC_Init+0x2f0>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002a4a:	d00a      	beq.n	8002a62 <HAL_ADC_Init+0x2ea>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002a54:	d002      	beq.n	8002a5c <HAL_ADC_Init+0x2e4>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	e023      	b.n	8002aa4 <HAL_ADC_Init+0x32c>
 8002a5c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002a60:	e020      	b.n	8002aa4 <HAL_ADC_Init+0x32c>
 8002a62:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002a66:	e01d      	b.n	8002aa4 <HAL_ADC_Init+0x32c>
 8002a68:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002a6c:	e01a      	b.n	8002aa4 <HAL_ADC_Init+0x32c>
 8002a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a72:	e017      	b.n	8002aa4 <HAL_ADC_Init+0x32c>
 8002a74:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002a78:	e014      	b.n	8002aa4 <HAL_ADC_Init+0x32c>
 8002a7a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002a7e:	e011      	b.n	8002aa4 <HAL_ADC_Init+0x32c>
 8002a80:	20000a18 	.word	0x20000a18
 8002a84:	431bde83 	.word	0x431bde83
 8002a88:	50000100 	.word	0x50000100
 8002a8c:	50000300 	.word	0x50000300
 8002a90:	50000700 	.word	0x50000700
 8002a94:	50000400 	.word	0x50000400
 8002a98:	50000500 	.word	0x50000500
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002aac:	4313      	orrs	r3, r2
 8002aae:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d114      	bne.n	8002ae8 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002acc:	f023 0302 	bic.w	r3, r3, #2
 8002ad0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	7e1b      	ldrb	r3, [r3, #24]
 8002ad6:	039a      	lsls	r2, r3, #14
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <HAL_ADC_Init+0x3f0>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002af8:	430b      	orrs	r3, r1
 8002afa:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d10c      	bne.n	8002b1e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f023 010f 	bic.w	r1, r3, #15
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	1e5a      	subs	r2, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b1c:	e007      	b.n	8002b2e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 020f 	bic.w	r2, r2, #15
 8002b2c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	f023 0303 	bic.w	r3, r3, #3
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40
 8002b44:	e00a      	b.n	8002b5c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f023 0312 	bic.w	r3, r3, #18
 8002b4e:	f043 0210 	orr.w	r2, r3, #16
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002b56:	2301      	movs	r3, #1
 8002b58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002b5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3768      	adds	r7, #104	; 0x68
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	fff0c007 	.word	0xfff0c007

08002b6c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f040 80f9 	bne.w	8002d7a <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_ADC_Start+0x2a>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e0f4      	b.n	8002d80 <HAL_ADC_Start+0x214>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f001 fb2e 	bl	8004200 <ADC_Enable>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f040 80e0 	bne.w	8002d70 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bcc:	d004      	beq.n	8002bd8 <HAL_ADC_Start+0x6c>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a6d      	ldr	r2, [pc, #436]	; (8002d88 <HAL_ADC_Start+0x21c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d106      	bne.n	8002be6 <HAL_ADC_Start+0x7a>
 8002bd8:	4b6c      	ldr	r3, [pc, #432]	; (8002d8c <HAL_ADC_Start+0x220>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d010      	beq.n	8002c06 <HAL_ADC_Start+0x9a>
 8002be4:	e005      	b.n	8002bf2 <HAL_ADC_Start+0x86>
 8002be6:	4b6a      	ldr	r3, [pc, #424]	; (8002d90 <HAL_ADC_Start+0x224>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 031f 	and.w	r3, r3, #31
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d009      	beq.n	8002c06 <HAL_ADC_Start+0x9a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bfa:	d004      	beq.n	8002c06 <HAL_ADC_Start+0x9a>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a64      	ldr	r2, [pc, #400]	; (8002d94 <HAL_ADC_Start+0x228>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d115      	bne.n	8002c32 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d036      	beq.n	8002c8e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002c30:	e02d      	b.n	8002c8e <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c46:	d004      	beq.n	8002c52 <HAL_ADC_Start+0xe6>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a4e      	ldr	r2, [pc, #312]	; (8002d88 <HAL_ADC_Start+0x21c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d10a      	bne.n	8002c68 <HAL_ADC_Start+0xfc>
 8002c52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	bf14      	ite	ne
 8002c60:	2301      	movne	r3, #1
 8002c62:	2300      	moveq	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	e008      	b.n	8002c7a <HAL_ADC_Start+0x10e>
 8002c68:	4b4a      	ldr	r3, [pc, #296]	; (8002d94 <HAL_ADC_Start+0x228>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	bf14      	ite	ne
 8002c74:	2301      	movne	r3, #1
 8002c76:	2300      	moveq	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d007      	beq.n	8002c8e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9a:	d106      	bne.n	8002caa <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	f023 0206 	bic.w	r2, r3, #6
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	645a      	str	r2, [r3, #68]	; 0x44
 8002ca8:	e002      	b.n	8002cb0 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	221c      	movs	r2, #28
 8002cbe:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cc8:	d004      	beq.n	8002cd4 <HAL_ADC_Start+0x168>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a2e      	ldr	r2, [pc, #184]	; (8002d88 <HAL_ADC_Start+0x21c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d106      	bne.n	8002ce2 <HAL_ADC_Start+0x176>
 8002cd4:	4b2d      	ldr	r3, [pc, #180]	; (8002d8c <HAL_ADC_Start+0x220>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d03e      	beq.n	8002d5e <HAL_ADC_Start+0x1f2>
 8002ce0:	e005      	b.n	8002cee <HAL_ADC_Start+0x182>
 8002ce2:	4b2b      	ldr	r3, [pc, #172]	; (8002d90 <HAL_ADC_Start+0x224>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d037      	beq.n	8002d5e <HAL_ADC_Start+0x1f2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cf6:	d004      	beq.n	8002d02 <HAL_ADC_Start+0x196>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a22      	ldr	r2, [pc, #136]	; (8002d88 <HAL_ADC_Start+0x21c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d106      	bne.n	8002d10 <HAL_ADC_Start+0x1a4>
 8002d02:	4b22      	ldr	r3, [pc, #136]	; (8002d8c <HAL_ADC_Start+0x220>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 031f 	and.w	r3, r3, #31
 8002d0a:	2b05      	cmp	r3, #5
 8002d0c:	d027      	beq.n	8002d5e <HAL_ADC_Start+0x1f2>
 8002d0e:	e005      	b.n	8002d1c <HAL_ADC_Start+0x1b0>
 8002d10:	4b1f      	ldr	r3, [pc, #124]	; (8002d90 <HAL_ADC_Start+0x224>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	2b05      	cmp	r3, #5
 8002d1a:	d020      	beq.n	8002d5e <HAL_ADC_Start+0x1f2>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d24:	d004      	beq.n	8002d30 <HAL_ADC_Start+0x1c4>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a17      	ldr	r2, [pc, #92]	; (8002d88 <HAL_ADC_Start+0x21c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d106      	bne.n	8002d3e <HAL_ADC_Start+0x1d2>
 8002d30:	4b16      	ldr	r3, [pc, #88]	; (8002d8c <HAL_ADC_Start+0x220>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 031f 	and.w	r3, r3, #31
 8002d38:	2b09      	cmp	r3, #9
 8002d3a:	d010      	beq.n	8002d5e <HAL_ADC_Start+0x1f2>
 8002d3c:	e005      	b.n	8002d4a <HAL_ADC_Start+0x1de>
 8002d3e:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <HAL_ADC_Start+0x224>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 031f 	and.w	r3, r3, #31
 8002d46:	2b09      	cmp	r3, #9
 8002d48:	d009      	beq.n	8002d5e <HAL_ADC_Start+0x1f2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d52:	d004      	beq.n	8002d5e <HAL_ADC_Start+0x1f2>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a0e      	ldr	r2, [pc, #56]	; (8002d94 <HAL_ADC_Start+0x228>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d10f      	bne.n	8002d7e <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0204 	orr.w	r2, r2, #4
 8002d6c:	609a      	str	r2, [r3, #8]
 8002d6e:	e006      	b.n	8002d7e <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d78:	e001      	b.n	8002d7e <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	50000100 	.word	0x50000100
 8002d8c:	50000300 	.word	0x50000300
 8002d90:	50000700 	.word	0x50000700
 8002d94:	50000400 	.word	0x50000400

08002d98 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d101      	bne.n	8002db2 <HAL_ADC_Stop+0x1a>
 8002dae:	2302      	movs	r3, #2
 8002db0:	e023      	b.n	8002dfa <HAL_ADC_Stop+0x62>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002dba:	216c      	movs	r1, #108	; 0x6c
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f001 fadd 	bl	800437c <ADC_ConversionStop>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d111      	bne.n	8002df0 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f001 fa75 	bl	80042bc <ADC_Disable>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002de4:	f023 0301 	bic.w	r3, r3, #1
 8002de8:	f043 0201 	orr.w	r2, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d102      	bne.n	8002e20 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002e1a:	2308      	movs	r3, #8
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	e03a      	b.n	8002e96 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e28:	d004      	beq.n	8002e34 <HAL_ADC_PollForConversion+0x30>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a6e      	ldr	r2, [pc, #440]	; (8002fe8 <HAL_ADC_PollForConversion+0x1e4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d101      	bne.n	8002e38 <HAL_ADC_PollForConversion+0x34>
 8002e34:	4b6d      	ldr	r3, [pc, #436]	; (8002fec <HAL_ADC_PollForConversion+0x1e8>)
 8002e36:	e000      	b.n	8002e3a <HAL_ADC_PollForConversion+0x36>
 8002e38:	4b6d      	ldr	r3, [pc, #436]	; (8002ff0 <HAL_ADC_PollForConversion+0x1ec>)
 8002e3a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 031f 	and.w	r3, r3, #31
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d112      	bne.n	8002e6e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d11d      	bne.n	8002e92 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f043 0220 	orr.w	r2, r3, #32
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e0b8      	b.n	8002fe0 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00b      	beq.n	8002e92 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f043 0220 	orr.w	r2, r3, #32
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e0a6      	b.n	8002fe0 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002e92:	230c      	movs	r3, #12
 8002e94:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e9e:	d004      	beq.n	8002eaa <HAL_ADC_PollForConversion+0xa6>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a50      	ldr	r2, [pc, #320]	; (8002fe8 <HAL_ADC_PollForConversion+0x1e4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d106      	bne.n	8002eb8 <HAL_ADC_PollForConversion+0xb4>
 8002eaa:	4b50      	ldr	r3, [pc, #320]	; (8002fec <HAL_ADC_PollForConversion+0x1e8>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 031f 	and.w	r3, r3, #31
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d010      	beq.n	8002ed8 <HAL_ADC_PollForConversion+0xd4>
 8002eb6:	e005      	b.n	8002ec4 <HAL_ADC_PollForConversion+0xc0>
 8002eb8:	4b4d      	ldr	r3, [pc, #308]	; (8002ff0 <HAL_ADC_PollForConversion+0x1ec>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 031f 	and.w	r3, r3, #31
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d009      	beq.n	8002ed8 <HAL_ADC_PollForConversion+0xd4>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ecc:	d004      	beq.n	8002ed8 <HAL_ADC_PollForConversion+0xd4>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a48      	ldr	r2, [pc, #288]	; (8002ff4 <HAL_ADC_PollForConversion+0x1f0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d104      	bne.n	8002ee2 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	613b      	str	r3, [r7, #16]
 8002ee0:	e00f      	b.n	8002f02 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eea:	d004      	beq.n	8002ef6 <HAL_ADC_PollForConversion+0xf2>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a3d      	ldr	r2, [pc, #244]	; (8002fe8 <HAL_ADC_PollForConversion+0x1e4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d102      	bne.n	8002efc <HAL_ADC_PollForConversion+0xf8>
 8002ef6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002efa:	e000      	b.n	8002efe <HAL_ADC_PollForConversion+0xfa>
 8002efc:	4b3d      	ldr	r3, [pc, #244]	; (8002ff4 <HAL_ADC_PollForConversion+0x1f0>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002f02:	f7ff fc0f 	bl	8002724 <HAL_GetTick>
 8002f06:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002f08:	e01a      	b.n	8002f40 <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f10:	d016      	beq.n	8002f40 <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <HAL_ADC_PollForConversion+0x124>
 8002f18:	f7ff fc04 	bl	8002724 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d20b      	bcs.n	8002f40 <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	f043 0204 	orr.w	r2, r3, #4
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e04f      	b.n	8002fe0 <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0dd      	beq.n	8002f0a <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d131      	bne.n	8002fcc <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d12c      	bne.n	8002fcc <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d125      	bne.n	8002fcc <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d112      	bne.n	8002fb4 <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d112      	bne.n	8002fcc <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f043 0201 	orr.w	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	641a      	str	r2, [r3, #64]	; 0x40
 8002fb2:	e00b      	b.n	8002fcc <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	f043 0220 	orr.w	r2, r3, #32
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc4:	f043 0201 	orr.w	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d103      	bne.n	8002fde <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	50000100 	.word	0x50000100
 8002fec:	50000300 	.word	0x50000300
 8002ff0:	50000700 	.word	0x50000700
 8002ff4:	50000400 	.word	0x50000400

08002ff8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	2b00      	cmp	r3, #0
 8003014:	f040 80f7 	bne.w	8003206 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_ADC_Start_DMA+0x2e>
 8003022:	2302      	movs	r3, #2
 8003024:	e0f2      	b.n	800320c <HAL_ADC_Start_DMA+0x214>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003036:	d004      	beq.n	8003042 <HAL_ADC_Start_DMA+0x4a>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a75      	ldr	r2, [pc, #468]	; (8003214 <HAL_ADC_Start_DMA+0x21c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d109      	bne.n	8003056 <HAL_ADC_Start_DMA+0x5e>
 8003042:	4b75      	ldr	r3, [pc, #468]	; (8003218 <HAL_ADC_Start_DMA+0x220>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 031f 	and.w	r3, r3, #31
 800304a:	2b00      	cmp	r3, #0
 800304c:	bf0c      	ite	eq
 800304e:	2301      	moveq	r3, #1
 8003050:	2300      	movne	r3, #0
 8003052:	b2db      	uxtb	r3, r3
 8003054:	e008      	b.n	8003068 <HAL_ADC_Start_DMA+0x70>
 8003056:	4b71      	ldr	r3, [pc, #452]	; (800321c <HAL_ADC_Start_DMA+0x224>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 031f 	and.w	r3, r3, #31
 800305e:	2b00      	cmp	r3, #0
 8003060:	bf0c      	ite	eq
 8003062:	2301      	moveq	r3, #1
 8003064:	2300      	movne	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80c5 	beq.w	80031f8 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f001 f8c6 	bl	8004200 <ADC_Enable>
 8003074:	4603      	mov	r3, r0
 8003076:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003078:	7dfb      	ldrb	r3, [r7, #23]
 800307a:	2b00      	cmp	r3, #0
 800307c:	f040 80b7 	bne.w	80031ee <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003088:	f023 0301 	bic.w	r3, r3, #1
 800308c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800309c:	d004      	beq.n	80030a8 <HAL_ADC_Start_DMA+0xb0>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a5c      	ldr	r2, [pc, #368]	; (8003214 <HAL_ADC_Start_DMA+0x21c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d106      	bne.n	80030b6 <HAL_ADC_Start_DMA+0xbe>
 80030a8:	4b5b      	ldr	r3, [pc, #364]	; (8003218 <HAL_ADC_Start_DMA+0x220>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 031f 	and.w	r3, r3, #31
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d010      	beq.n	80030d6 <HAL_ADC_Start_DMA+0xde>
 80030b4:	e005      	b.n	80030c2 <HAL_ADC_Start_DMA+0xca>
 80030b6:	4b59      	ldr	r3, [pc, #356]	; (800321c <HAL_ADC_Start_DMA+0x224>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 031f 	and.w	r3, r3, #31
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <HAL_ADC_Start_DMA+0xde>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030ca:	d004      	beq.n	80030d6 <HAL_ADC_Start_DMA+0xde>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a53      	ldr	r2, [pc, #332]	; (8003220 <HAL_ADC_Start_DMA+0x228>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d115      	bne.n	8003102 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d036      	beq.n	800315e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003100:	e02d      	b.n	800315e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003116:	d004      	beq.n	8003122 <HAL_ADC_Start_DMA+0x12a>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a3d      	ldr	r2, [pc, #244]	; (8003214 <HAL_ADC_Start_DMA+0x21c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d10a      	bne.n	8003138 <HAL_ADC_Start_DMA+0x140>
 8003122:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf14      	ite	ne
 8003130:	2301      	movne	r3, #1
 8003132:	2300      	moveq	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	e008      	b.n	800314a <HAL_ADC_Start_DMA+0x152>
 8003138:	4b39      	ldr	r3, [pc, #228]	; (8003220 <HAL_ADC_Start_DMA+0x228>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	bf14      	ite	ne
 8003144:	2301      	movne	r3, #1
 8003146:	2300      	moveq	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d007      	beq.n	800315e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003156:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800316a:	d106      	bne.n	800317a <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003170:	f023 0206 	bic.w	r2, r3, #6
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	645a      	str	r2, [r3, #68]	; 0x44
 8003178:	e002      	b.n	8003180 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318c:	4a25      	ldr	r2, [pc, #148]	; (8003224 <HAL_ADC_Start_DMA+0x22c>)
 800318e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003194:	4a24      	ldr	r2, [pc, #144]	; (8003228 <HAL_ADC_Start_DMA+0x230>)
 8003196:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319c:	4a23      	ldr	r2, [pc, #140]	; (800322c <HAL_ADC_Start_DMA+0x234>)
 800319e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	221c      	movs	r2, #28
 80031a6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0210 	orr.w	r2, r2, #16
 80031b6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0201 	orr.w	r2, r2, #1
 80031c6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3340      	adds	r3, #64	; 0x40
 80031d2:	4619      	mov	r1, r3
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f001 fd5a 	bl	8004c90 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0204 	orr.w	r2, r2, #4
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	e00d      	b.n	800320a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80031f6:	e008      	b.n	800320a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003204:	e001      	b.n	800320a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003206:	2302      	movs	r3, #2
 8003208:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800320a:	7dfb      	ldrb	r3, [r7, #23]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	50000100 	.word	0x50000100
 8003218:	50000300 	.word	0x50000300
 800321c:	50000700 	.word	0x50000700
 8003220:	50000400 	.word	0x50000400
 8003224:	08004135 	.word	0x08004135
 8003228:	080041af 	.word	0x080041af
 800322c:	080041cb 	.word	0x080041cb

08003230 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_ADC_Stop_DMA+0x1a>
 8003246:	2302      	movs	r3, #2
 8003248:	e050      	b.n	80032ec <HAL_ADC_Stop_DMA+0xbc>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003252:	216c      	movs	r1, #108	; 0x6c
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f001 f891 	bl	800437c <ADC_ConversionStop>
 800325a:	4603      	mov	r3, r0
 800325c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d13e      	bne.n	80032e2 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003278:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800327c:	2b02      	cmp	r3, #2
 800327e:	d10f      	bne.n	80032a0 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003284:	4618      	mov	r0, r3
 8003286:	f001 fd62 	bl	8004d4e <HAL_DMA_Abort>
 800328a:	4603      	mov	r3, r0
 800328c:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800328e:	7bfb      	ldrb	r3, [r7, #15]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0210 	bic.w	r2, r2, #16
 80032ae:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d105      	bne.n	80032c2 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f001 f800 	bl	80042bc <ADC_Disable>
 80032bc:	4603      	mov	r3, r0
 80032be:	73fb      	strb	r3, [r7, #15]
 80032c0:	e002      	b.n	80032c8 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fffa 	bl	80042bc <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032d6:	f023 0301 	bic.w	r3, r3, #1
 80032da:	f043 0201 	orr.w	r2, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800331c:	2300      	movs	r3, #0
 800331e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8003320:	2300      	movs	r3, #0
 8003322:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b04      	cmp	r3, #4
 8003330:	d106      	bne.n	8003340 <HAL_ADC_IRQHandler+0x30>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b04      	cmp	r3, #4
 800333e:	d00f      	beq.n	8003360 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800334a:	2b08      	cmp	r3, #8
 800334c:	f040 80c0 	bne.w	80034d0 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b08      	cmp	r3, #8
 800335c:	f040 80b8 	bne.w	80034d0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	f003 0310 	and.w	r3, r3, #16
 8003368:	2b00      	cmp	r3, #0
 800336a:	d105      	bne.n	8003378 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003380:	d004      	beq.n	800338c <HAL_ADC_IRQHandler+0x7c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a95      	ldr	r2, [pc, #596]	; (80035dc <HAL_ADC_IRQHandler+0x2cc>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d106      	bne.n	800339a <HAL_ADC_IRQHandler+0x8a>
 800338c:	4b94      	ldr	r3, [pc, #592]	; (80035e0 <HAL_ADC_IRQHandler+0x2d0>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	2b00      	cmp	r3, #0
 8003396:	d03e      	beq.n	8003416 <HAL_ADC_IRQHandler+0x106>
 8003398:	e005      	b.n	80033a6 <HAL_ADC_IRQHandler+0x96>
 800339a:	4b92      	ldr	r3, [pc, #584]	; (80035e4 <HAL_ADC_IRQHandler+0x2d4>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 031f 	and.w	r3, r3, #31
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d037      	beq.n	8003416 <HAL_ADC_IRQHandler+0x106>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033ae:	d004      	beq.n	80033ba <HAL_ADC_IRQHandler+0xaa>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a89      	ldr	r2, [pc, #548]	; (80035dc <HAL_ADC_IRQHandler+0x2cc>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d106      	bne.n	80033c8 <HAL_ADC_IRQHandler+0xb8>
 80033ba:	4b89      	ldr	r3, [pc, #548]	; (80035e0 <HAL_ADC_IRQHandler+0x2d0>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	2b05      	cmp	r3, #5
 80033c4:	d027      	beq.n	8003416 <HAL_ADC_IRQHandler+0x106>
 80033c6:	e005      	b.n	80033d4 <HAL_ADC_IRQHandler+0xc4>
 80033c8:	4b86      	ldr	r3, [pc, #536]	; (80035e4 <HAL_ADC_IRQHandler+0x2d4>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	2b05      	cmp	r3, #5
 80033d2:	d020      	beq.n	8003416 <HAL_ADC_IRQHandler+0x106>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033dc:	d004      	beq.n	80033e8 <HAL_ADC_IRQHandler+0xd8>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a7e      	ldr	r2, [pc, #504]	; (80035dc <HAL_ADC_IRQHandler+0x2cc>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d106      	bne.n	80033f6 <HAL_ADC_IRQHandler+0xe6>
 80033e8:	4b7d      	ldr	r3, [pc, #500]	; (80035e0 <HAL_ADC_IRQHandler+0x2d0>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	2b09      	cmp	r3, #9
 80033f2:	d010      	beq.n	8003416 <HAL_ADC_IRQHandler+0x106>
 80033f4:	e005      	b.n	8003402 <HAL_ADC_IRQHandler+0xf2>
 80033f6:	4b7b      	ldr	r3, [pc, #492]	; (80035e4 <HAL_ADC_IRQHandler+0x2d4>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 031f 	and.w	r3, r3, #31
 80033fe:	2b09      	cmp	r3, #9
 8003400:	d009      	beq.n	8003416 <HAL_ADC_IRQHandler+0x106>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800340a:	d004      	beq.n	8003416 <HAL_ADC_IRQHandler+0x106>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a75      	ldr	r2, [pc, #468]	; (80035e8 <HAL_ADC_IRQHandler+0x2d8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d104      	bne.n	8003420 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	e00f      	b.n	8003440 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003428:	d004      	beq.n	8003434 <HAL_ADC_IRQHandler+0x124>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a6b      	ldr	r2, [pc, #428]	; (80035dc <HAL_ADC_IRQHandler+0x2cc>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d102      	bne.n	800343a <HAL_ADC_IRQHandler+0x12a>
 8003434:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003438:	e000      	b.n	800343c <HAL_ADC_IRQHandler+0x12c>
 800343a:	4b6b      	ldr	r3, [pc, #428]	; (80035e8 <HAL_ADC_IRQHandler+0x2d8>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800344a:	2b00      	cmp	r3, #0
 800344c:	d139      	bne.n	80034c2 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003454:	2b00      	cmp	r3, #0
 8003456:	d134      	bne.n	80034c2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b08      	cmp	r3, #8
 8003464:	d12d      	bne.n	80034c2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d11a      	bne.n	80034aa <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 020c 	bic.w	r2, r2, #12
 8003482:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d112      	bne.n	80034c2 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	f043 0201 	orr.w	r2, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	641a      	str	r2, [r3, #64]	; 0x40
 80034a8:	e00b      	b.n	80034c2 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f043 0210 	orr.w	r2, r3, #16
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ba:	f043 0201 	orr.w	r2, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7fd fea4 	bl	8001210 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	220c      	movs	r2, #12
 80034ce:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d106      	bne.n	80034ec <HAL_ADC_IRQHandler+0x1dc>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 0320 	and.w	r3, r3, #32
 80034e8:	2b20      	cmp	r3, #32
 80034ea:	d00f      	beq.n	800350c <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80034f6:	2b40      	cmp	r3, #64	; 0x40
 80034f8:	f040 813c 	bne.w	8003774 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003506:	2b40      	cmp	r3, #64	; 0x40
 8003508:	f040 8134 	bne.w	8003774 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003520:	d004      	beq.n	800352c <HAL_ADC_IRQHandler+0x21c>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a2d      	ldr	r2, [pc, #180]	; (80035dc <HAL_ADC_IRQHandler+0x2cc>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d106      	bne.n	800353a <HAL_ADC_IRQHandler+0x22a>
 800352c:	4b2c      	ldr	r3, [pc, #176]	; (80035e0 <HAL_ADC_IRQHandler+0x2d0>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	2b00      	cmp	r3, #0
 8003536:	d03e      	beq.n	80035b6 <HAL_ADC_IRQHandler+0x2a6>
 8003538:	e005      	b.n	8003546 <HAL_ADC_IRQHandler+0x236>
 800353a:	4b2a      	ldr	r3, [pc, #168]	; (80035e4 <HAL_ADC_IRQHandler+0x2d4>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	2b00      	cmp	r3, #0
 8003544:	d037      	beq.n	80035b6 <HAL_ADC_IRQHandler+0x2a6>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800354e:	d004      	beq.n	800355a <HAL_ADC_IRQHandler+0x24a>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a21      	ldr	r2, [pc, #132]	; (80035dc <HAL_ADC_IRQHandler+0x2cc>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d106      	bne.n	8003568 <HAL_ADC_IRQHandler+0x258>
 800355a:	4b21      	ldr	r3, [pc, #132]	; (80035e0 <HAL_ADC_IRQHandler+0x2d0>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	2b05      	cmp	r3, #5
 8003564:	d027      	beq.n	80035b6 <HAL_ADC_IRQHandler+0x2a6>
 8003566:	e005      	b.n	8003574 <HAL_ADC_IRQHandler+0x264>
 8003568:	4b1e      	ldr	r3, [pc, #120]	; (80035e4 <HAL_ADC_IRQHandler+0x2d4>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 031f 	and.w	r3, r3, #31
 8003570:	2b05      	cmp	r3, #5
 8003572:	d020      	beq.n	80035b6 <HAL_ADC_IRQHandler+0x2a6>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800357c:	d004      	beq.n	8003588 <HAL_ADC_IRQHandler+0x278>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a16      	ldr	r2, [pc, #88]	; (80035dc <HAL_ADC_IRQHandler+0x2cc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d106      	bne.n	8003596 <HAL_ADC_IRQHandler+0x286>
 8003588:	4b15      	ldr	r3, [pc, #84]	; (80035e0 <HAL_ADC_IRQHandler+0x2d0>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	2b09      	cmp	r3, #9
 8003592:	d010      	beq.n	80035b6 <HAL_ADC_IRQHandler+0x2a6>
 8003594:	e005      	b.n	80035a2 <HAL_ADC_IRQHandler+0x292>
 8003596:	4b13      	ldr	r3, [pc, #76]	; (80035e4 <HAL_ADC_IRQHandler+0x2d4>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 031f 	and.w	r3, r3, #31
 800359e:	2b09      	cmp	r3, #9
 80035a0:	d009      	beq.n	80035b6 <HAL_ADC_IRQHandler+0x2a6>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035aa:	d004      	beq.n	80035b6 <HAL_ADC_IRQHandler+0x2a6>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a0d      	ldr	r2, [pc, #52]	; (80035e8 <HAL_ADC_IRQHandler+0x2d8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d104      	bne.n	80035c0 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	e018      	b.n	80035f2 <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035c8:	d004      	beq.n	80035d4 <HAL_ADC_IRQHandler+0x2c4>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a03      	ldr	r2, [pc, #12]	; (80035dc <HAL_ADC_IRQHandler+0x2cc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d10b      	bne.n	80035ec <HAL_ADC_IRQHandler+0x2dc>
 80035d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035d8:	e009      	b.n	80035ee <HAL_ADC_IRQHandler+0x2de>
 80035da:	bf00      	nop
 80035dc:	50000100 	.word	0x50000100
 80035e0:	50000300 	.word	0x50000300
 80035e4:	50000700 	.word	0x50000700
 80035e8:	50000400 	.word	0x50000400
 80035ec:	4b9d      	ldr	r3, [pc, #628]	; (8003864 <HAL_ADC_IRQHandler+0x554>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f040 80b2 	bne.w	8003766 <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00d      	beq.n	8003628 <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003616:	2b00      	cmp	r3, #0
 8003618:	f040 80a5 	bne.w	8003766 <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003622:	2b00      	cmp	r3, #0
 8003624:	f040 809f 	bne.w	8003766 <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003632:	2b40      	cmp	r3, #64	; 0x40
 8003634:	f040 8097 	bne.w	8003766 <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003640:	d004      	beq.n	800364c <HAL_ADC_IRQHandler+0x33c>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a88      	ldr	r2, [pc, #544]	; (8003868 <HAL_ADC_IRQHandler+0x558>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d106      	bne.n	800365a <HAL_ADC_IRQHandler+0x34a>
 800364c:	4b87      	ldr	r3, [pc, #540]	; (800386c <HAL_ADC_IRQHandler+0x55c>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 031f 	and.w	r3, r3, #31
 8003654:	2b00      	cmp	r3, #0
 8003656:	d03e      	beq.n	80036d6 <HAL_ADC_IRQHandler+0x3c6>
 8003658:	e005      	b.n	8003666 <HAL_ADC_IRQHandler+0x356>
 800365a:	4b85      	ldr	r3, [pc, #532]	; (8003870 <HAL_ADC_IRQHandler+0x560>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 031f 	and.w	r3, r3, #31
 8003662:	2b00      	cmp	r3, #0
 8003664:	d037      	beq.n	80036d6 <HAL_ADC_IRQHandler+0x3c6>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800366e:	d004      	beq.n	800367a <HAL_ADC_IRQHandler+0x36a>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a7c      	ldr	r2, [pc, #496]	; (8003868 <HAL_ADC_IRQHandler+0x558>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d106      	bne.n	8003688 <HAL_ADC_IRQHandler+0x378>
 800367a:	4b7c      	ldr	r3, [pc, #496]	; (800386c <HAL_ADC_IRQHandler+0x55c>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 031f 	and.w	r3, r3, #31
 8003682:	2b06      	cmp	r3, #6
 8003684:	d027      	beq.n	80036d6 <HAL_ADC_IRQHandler+0x3c6>
 8003686:	e005      	b.n	8003694 <HAL_ADC_IRQHandler+0x384>
 8003688:	4b79      	ldr	r3, [pc, #484]	; (8003870 <HAL_ADC_IRQHandler+0x560>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 031f 	and.w	r3, r3, #31
 8003690:	2b06      	cmp	r3, #6
 8003692:	d020      	beq.n	80036d6 <HAL_ADC_IRQHandler+0x3c6>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800369c:	d004      	beq.n	80036a8 <HAL_ADC_IRQHandler+0x398>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a71      	ldr	r2, [pc, #452]	; (8003868 <HAL_ADC_IRQHandler+0x558>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d106      	bne.n	80036b6 <HAL_ADC_IRQHandler+0x3a6>
 80036a8:	4b70      	ldr	r3, [pc, #448]	; (800386c <HAL_ADC_IRQHandler+0x55c>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 031f 	and.w	r3, r3, #31
 80036b0:	2b07      	cmp	r3, #7
 80036b2:	d010      	beq.n	80036d6 <HAL_ADC_IRQHandler+0x3c6>
 80036b4:	e005      	b.n	80036c2 <HAL_ADC_IRQHandler+0x3b2>
 80036b6:	4b6e      	ldr	r3, [pc, #440]	; (8003870 <HAL_ADC_IRQHandler+0x560>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 031f 	and.w	r3, r3, #31
 80036be:	2b07      	cmp	r3, #7
 80036c0:	d009      	beq.n	80036d6 <HAL_ADC_IRQHandler+0x3c6>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036ca:	d004      	beq.n	80036d6 <HAL_ADC_IRQHandler+0x3c6>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a64      	ldr	r2, [pc, #400]	; (8003864 <HAL_ADC_IRQHandler+0x554>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d104      	bne.n	80036e0 <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	e00f      	b.n	8003700 <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036e8:	d004      	beq.n	80036f4 <HAL_ADC_IRQHandler+0x3e4>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a5e      	ldr	r2, [pc, #376]	; (8003868 <HAL_ADC_IRQHandler+0x558>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d102      	bne.n	80036fa <HAL_ADC_IRQHandler+0x3ea>
 80036f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80036f8:	e000      	b.n	80036fc <HAL_ADC_IRQHandler+0x3ec>
 80036fa:	4b5a      	ldr	r3, [pc, #360]	; (8003864 <HAL_ADC_IRQHandler+0x554>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d12d      	bne.n	8003766 <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d11a      	bne.n	800374e <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003726:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d112      	bne.n	8003766 <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	f043 0201 	orr.w	r2, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	641a      	str	r2, [r3, #64]	; 0x40
 800374c:	e00b      	b.n	8003766 <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	f043 0210 	orr.w	r2, r3, #16
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	f043 0201 	orr.w	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f8de 	bl	8003928 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2260      	movs	r2, #96	; 0x60
 8003772:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377e:	2b80      	cmp	r3, #128	; 0x80
 8003780:	d113      	bne.n	80037aa <HAL_ADC_IRQHandler+0x49a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378c:	2b80      	cmp	r3, #128	; 0x80
 800378e:	d10c      	bne.n	80037aa <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7fe ffd7 	bl	8002750 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2280      	movs	r2, #128	; 0x80
 80037a8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b8:	d115      	bne.n	80037e6 <HAL_ADC_IRQHandler+0x4d6>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c8:	d10d      	bne.n	80037e6 <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f8ba 	bl	8003950 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037e4:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037f4:	d115      	bne.n	8003822 <HAL_ADC_IRQHandler+0x512>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003804:	d10d      	bne.n	8003822 <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f8a6 	bl	8003964 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003820:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b10      	cmp	r3, #16
 800382e:	d151      	bne.n	80038d4 <HAL_ADC_IRQHandler+0x5c4>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 0310 	and.w	r3, r3, #16
 800383a:	2b10      	cmp	r3, #16
 800383c:	d14a      	bne.n	80038d4 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003842:	2b01      	cmp	r3, #1
 8003844:	d102      	bne.n	800384c <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8003846:	2301      	movs	r3, #1
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	e02d      	b.n	80038a8 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003854:	d004      	beq.n	8003860 <HAL_ADC_IRQHandler+0x550>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a03      	ldr	r2, [pc, #12]	; (8003868 <HAL_ADC_IRQHandler+0x558>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d109      	bne.n	8003874 <HAL_ADC_IRQHandler+0x564>
 8003860:	4b02      	ldr	r3, [pc, #8]	; (800386c <HAL_ADC_IRQHandler+0x55c>)
 8003862:	e008      	b.n	8003876 <HAL_ADC_IRQHandler+0x566>
 8003864:	50000400 	.word	0x50000400
 8003868:	50000100 	.word	0x50000100
 800386c:	50000300 	.word	0x50000300
 8003870:	50000700 	.word	0x50000700
 8003874:	4b2b      	ldr	r3, [pc, #172]	; (8003924 <HAL_ADC_IRQHandler+0x614>)
 8003876:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	2b00      	cmp	r3, #0
 8003882:	d109      	bne.n	8003898 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b01      	cmp	r3, #1
 8003890:	d10a      	bne.n	80038a8 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8003892:	2301      	movs	r3, #1
 8003894:	617b      	str	r3, [r7, #20]
 8003896:	e007      	b.n	80038a8 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 80038a4:	2301      	movs	r3, #1
 80038a6:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d10e      	bne.n	80038cc <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	f043 0202 	orr.w	r2, r3, #2
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fe ff4c 	bl	8002764 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2210      	movs	r2, #16
 80038d2:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e2:	d11b      	bne.n	800391c <HAL_ADC_IRQHandler+0x60c>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f2:	d113      	bne.n	800391c <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003904:	f043 0208 	orr.w	r2, r3, #8
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003914:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f810 	bl	800393c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800391c:	bf00      	nop
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	50000700 	.word	0x50000700

08003928 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003978:	b480      	push	{r7}
 800397a:	b09b      	sub	sp, #108	; 0x6c
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_ADC_ConfigChannel+0x22>
 8003996:	2302      	movs	r3, #2
 8003998:	e2cb      	b.n	8003f32 <HAL_ADC_ConfigChannel+0x5ba>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f040 82af 	bne.w	8003f10 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d81c      	bhi.n	80039f4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	4413      	add	r3, r2
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	461a      	mov	r2, r3
 80039ce:	231f      	movs	r3, #31
 80039d0:	4093      	lsls	r3, r2
 80039d2:	43db      	mvns	r3, r3
 80039d4:	4019      	ands	r1, r3
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	4413      	add	r3, r2
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	fa00 f203 	lsl.w	r2, r0, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	631a      	str	r2, [r3, #48]	; 0x30
 80039f2:	e063      	b.n	8003abc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b09      	cmp	r3, #9
 80039fa:	d81e      	bhi.n	8003a3a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	4613      	mov	r3, r2
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	4413      	add	r3, r2
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	3b1e      	subs	r3, #30
 8003a10:	221f      	movs	r2, #31
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	43db      	mvns	r3, r3
 8003a18:	4019      	ands	r1, r3
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	4413      	add	r3, r2
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	3b1e      	subs	r3, #30
 8003a2c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	635a      	str	r2, [r3, #52]	; 0x34
 8003a38:	e040      	b.n	8003abc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b0e      	cmp	r3, #14
 8003a40:	d81e      	bhi.n	8003a80 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	4413      	add	r3, r2
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	3b3c      	subs	r3, #60	; 0x3c
 8003a56:	221f      	movs	r2, #31
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	4019      	ands	r1, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	6818      	ldr	r0, [r3, #0]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	4413      	add	r3, r2
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	3b3c      	subs	r3, #60	; 0x3c
 8003a72:	fa00 f203 	lsl.w	r2, r0, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	639a      	str	r2, [r3, #56]	; 0x38
 8003a7e:	e01d      	b.n	8003abc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	4413      	add	r3, r2
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	3b5a      	subs	r3, #90	; 0x5a
 8003a94:	221f      	movs	r2, #31
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	4019      	ands	r1, r3
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	4413      	add	r3, r2
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	3b5a      	subs	r3, #90	; 0x5a
 8003ab0:	fa00 f203 	lsl.w	r2, r0, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f040 80e5 	bne.w	8003c96 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b09      	cmp	r3, #9
 8003ad2:	d91c      	bls.n	8003b0e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6999      	ldr	r1, [r3, #24]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3b1e      	subs	r3, #30
 8003ae6:	2207      	movs	r2, #7
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43db      	mvns	r3, r3
 8003aee:	4019      	ands	r1, r3
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	6898      	ldr	r0, [r3, #8]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	4613      	mov	r3, r2
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	4413      	add	r3, r2
 8003afe:	3b1e      	subs	r3, #30
 8003b00:	fa00 f203 	lsl.w	r2, r0, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	619a      	str	r2, [r3, #24]
 8003b0c:	e019      	b.n	8003b42 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6959      	ldr	r1, [r3, #20]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	4413      	add	r3, r2
 8003b1e:	2207      	movs	r2, #7
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	43db      	mvns	r3, r3
 8003b26:	4019      	ands	r1, r3
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	6898      	ldr	r0, [r3, #8]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	4613      	mov	r3, r2
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	4413      	add	r3, r2
 8003b36:	fa00 f203 	lsl.w	r2, r0, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	08db      	lsrs	r3, r3, #3
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d84f      	bhi.n	8003c04 <HAL_ADC_ConfigChannel+0x28c>
 8003b64:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <HAL_ADC_ConfigChannel+0x1f4>)
 8003b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6a:	bf00      	nop
 8003b6c:	08003b7d 	.word	0x08003b7d
 8003b70:	08003b9f 	.word	0x08003b9f
 8003b74:	08003bc1 	.word	0x08003bc1
 8003b78:	08003be3 	.word	0x08003be3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b82:	4b9f      	ldr	r3, [pc, #636]	; (8003e00 <HAL_ADC_ConfigChannel+0x488>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	6812      	ldr	r2, [r2, #0]
 8003b8a:	0691      	lsls	r1, r2, #26
 8003b8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003b9a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003b9c:	e07e      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003ba4:	4b96      	ldr	r3, [pc, #600]	; (8003e00 <HAL_ADC_ConfigChannel+0x488>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	6812      	ldr	r2, [r2, #0]
 8003bac:	0691      	lsls	r1, r2, #26
 8003bae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003bbc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003bbe:	e06d      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003bc6:	4b8e      	ldr	r3, [pc, #568]	; (8003e00 <HAL_ADC_ConfigChannel+0x488>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	6812      	ldr	r2, [r2, #0]
 8003bce:	0691      	lsls	r1, r2, #26
 8003bd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003bde:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003be0:	e05c      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003be8:	4b85      	ldr	r3, [pc, #532]	; (8003e00 <HAL_ADC_ConfigChannel+0x488>)
 8003bea:	4013      	ands	r3, r2
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	6812      	ldr	r2, [r2, #0]
 8003bf0:	0691      	lsls	r1, r2, #26
 8003bf2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003c00:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003c02:	e04b      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	069b      	lsls	r3, r3, #26
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d107      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c26:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	069b      	lsls	r3, r3, #26
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d107      	bne.n	8003c4c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c4a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	069b      	lsls	r3, r3, #26
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d107      	bne.n	8003c70 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c6e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	069b      	lsls	r3, r3, #26
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d10a      	bne.n	8003c9a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c92:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003c94:	e001      	b.n	8003c9a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003c96:	bf00      	nop
 8003c98:	e000      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x324>
      break;
 8003c9a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d108      	bne.n	8003cbc <HAL_ADC_ConfigChannel+0x344>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_ADC_ConfigChannel+0x344>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e000      	b.n	8003cbe <HAL_ADC_ConfigChannel+0x346>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f040 8131 	bne.w	8003f26 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d00f      	beq.n	8003cec <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43da      	mvns	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	400a      	ands	r2, r1
 8003ce6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003cea:	e049      	b.n	8003d80 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b09      	cmp	r3, #9
 8003d0c:	d91c      	bls.n	8003d48 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6999      	ldr	r1, [r3, #24]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3b1b      	subs	r3, #27
 8003d20:	2207      	movs	r2, #7
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	43db      	mvns	r3, r3
 8003d28:	4019      	ands	r1, r3
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6898      	ldr	r0, [r3, #8]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	4613      	mov	r3, r2
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	4413      	add	r3, r2
 8003d38:	3b1b      	subs	r3, #27
 8003d3a:	fa00 f203 	lsl.w	r2, r0, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	619a      	str	r2, [r3, #24]
 8003d46:	e01b      	b.n	8003d80 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6959      	ldr	r1, [r3, #20]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	4613      	mov	r3, r2
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	4413      	add	r3, r2
 8003d5a:	2207      	movs	r2, #7
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	43db      	mvns	r3, r3
 8003d62:	4019      	ands	r1, r3
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	6898      	ldr	r0, [r3, #8]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	4613      	mov	r3, r2
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	4413      	add	r3, r2
 8003d74:	fa00 f203 	lsl.w	r2, r0, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d88:	d004      	beq.n	8003d94 <HAL_ADC_ConfigChannel+0x41c>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a1d      	ldr	r2, [pc, #116]	; (8003e04 <HAL_ADC_ConfigChannel+0x48c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d101      	bne.n	8003d98 <HAL_ADC_ConfigChannel+0x420>
 8003d94:	4b1c      	ldr	r3, [pc, #112]	; (8003e08 <HAL_ADC_ConfigChannel+0x490>)
 8003d96:	e000      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x422>
 8003d98:	4b1c      	ldr	r3, [pc, #112]	; (8003e0c <HAL_ADC_ConfigChannel+0x494>)
 8003d9a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b10      	cmp	r3, #16
 8003da2:	d105      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003da4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d015      	beq.n	8003ddc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003db4:	2b11      	cmp	r3, #17
 8003db6:	d105      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003db8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00b      	beq.n	8003ddc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003dc8:	2b12      	cmp	r3, #18
 8003dca:	f040 80ac 	bne.w	8003f26 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f040 80a5 	bne.w	8003f26 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003de4:	d102      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x474>
 8003de6:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <HAL_ADC_ConfigChannel+0x48c>)
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	e023      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x4bc>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a04      	ldr	r2, [pc, #16]	; (8003e04 <HAL_ADC_ConfigChannel+0x48c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d10c      	bne.n	8003e10 <HAL_ADC_ConfigChannel+0x498>
 8003df6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	e01a      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x4bc>
 8003dfe:	bf00      	nop
 8003e00:	83fff000 	.word	0x83fff000
 8003e04:	50000100 	.word	0x50000100
 8003e08:	50000300 	.word	0x50000300
 8003e0c:	50000700 	.word	0x50000700
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a4a      	ldr	r2, [pc, #296]	; (8003f40 <HAL_ADC_ConfigChannel+0x5c8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d102      	bne.n	8003e20 <HAL_ADC_ConfigChannel+0x4a8>
 8003e1a:	4b4a      	ldr	r3, [pc, #296]	; (8003f44 <HAL_ADC_ConfigChannel+0x5cc>)
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	e009      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x4bc>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a47      	ldr	r2, [pc, #284]	; (8003f44 <HAL_ADC_ConfigChannel+0x5cc>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d102      	bne.n	8003e30 <HAL_ADC_ConfigChannel+0x4b8>
 8003e2a:	4b45      	ldr	r3, [pc, #276]	; (8003f40 <HAL_ADC_ConfigChannel+0x5c8>)
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	e001      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x4bc>
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d108      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x4dc>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x4dc>
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <HAL_ADC_ConfigChannel+0x4de>
 8003e54:	2300      	movs	r3, #0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d150      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003e5a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d010      	beq.n	8003e82 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d107      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x504>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x504>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <HAL_ADC_ConfigChannel+0x506>
 8003e7c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d13c      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b10      	cmp	r3, #16
 8003e88:	d11d      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x54e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e92:	d118      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e9e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ea0:	4b29      	ldr	r3, [pc, #164]	; (8003f48 <HAL_ADC_ConfigChannel+0x5d0>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a29      	ldr	r2, [pc, #164]	; (8003f4c <HAL_ADC_ConfigChannel+0x5d4>)
 8003ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eaa:	0c9a      	lsrs	r2, r3, #18
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003eb6:	e002      	b.n	8003ebe <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1f9      	bne.n	8003eb8 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003ec4:	e02e      	b.n	8003f24 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b11      	cmp	r3, #17
 8003ecc:	d10b      	bne.n	8003ee6 <HAL_ADC_ConfigChannel+0x56e>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ed6:	d106      	bne.n	8003ee6 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003ed8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003ee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ee2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003ee4:	e01e      	b.n	8003f24 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b12      	cmp	r3, #18
 8003eec:	d11a      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003efa:	e013      	b.n	8003f24 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	f043 0220 	orr.w	r2, r3, #32
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003f0e:	e00a      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	f043 0220 	orr.w	r2, r3, #32
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003f22:	e000      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003f24:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003f2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	376c      	adds	r7, #108	; 0x6c
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	50000400 	.word	0x50000400
 8003f44:	50000500 	.word	0x50000500
 8003f48:	20000a18 	.word	0x20000a18
 8003f4c:	431bde83 	.word	0x431bde83

08003f50 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b099      	sub	sp, #100	; 0x64
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f68:	d102      	bne.n	8003f70 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003f6a:	4b6d      	ldr	r3, [pc, #436]	; (8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	e01a      	b.n	8003fa6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a6a      	ldr	r2, [pc, #424]	; (8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d103      	bne.n	8003f82 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003f7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003f7e:	60bb      	str	r3, [r7, #8]
 8003f80:	e011      	b.n	8003fa6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a67      	ldr	r2, [pc, #412]	; (8004124 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d102      	bne.n	8003f92 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003f8c:	4b66      	ldr	r3, [pc, #408]	; (8004128 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003f8e:	60bb      	str	r3, [r7, #8]
 8003f90:	e009      	b.n	8003fa6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a64      	ldr	r2, [pc, #400]	; (8004128 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d102      	bne.n	8003fa2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003f9c:	4b61      	ldr	r3, [pc, #388]	; (8004124 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	e001      	b.n	8003fa6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e0b0      	b.n	8004112 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e0a9      	b.n	8004112 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f040 808d 	bne.w	80040f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 0304 	and.w	r3, r3, #4
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f040 8086 	bne.w	80040f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fec:	d004      	beq.n	8003ff8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a4b      	ldr	r2, [pc, #300]	; (8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d101      	bne.n	8003ffc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003ff8:	4b4c      	ldr	r3, [pc, #304]	; (800412c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003ffa:	e000      	b.n	8003ffe <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003ffc:	4b4c      	ldr	r3, [pc, #304]	; (8004130 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003ffe:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d040      	beq.n	800408a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004008:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	6859      	ldr	r1, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800401a:	035b      	lsls	r3, r3, #13
 800401c:	430b      	orrs	r3, r1
 800401e:	431a      	orrs	r2, r3
 8004020:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004022:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	2b01      	cmp	r3, #1
 8004030:	d108      	bne.n	8004044 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004044:	2300      	movs	r3, #0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d15c      	bne.n	8004104 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	2b01      	cmp	r3, #1
 8004054:	d107      	bne.n	8004066 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b01      	cmp	r3, #1
 8004060:	d101      	bne.n	8004066 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8004066:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004068:	2b00      	cmp	r3, #0
 800406a:	d14b      	bne.n	8004104 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800406c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004074:	f023 030f 	bic.w	r3, r3, #15
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	6811      	ldr	r1, [r2, #0]
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	6892      	ldr	r2, [r2, #8]
 8004080:	430a      	orrs	r2, r1
 8004082:	431a      	orrs	r2, r3
 8004084:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004086:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004088:	e03c      	b.n	8004104 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800408a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004094:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d108      	bne.n	80040b6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80040b6:	2300      	movs	r3, #0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d123      	bne.n	8004104 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d107      	bne.n	80040d8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80040d4:	2301      	movs	r3, #1
 80040d6:	e000      	b.n	80040da <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80040d8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d112      	bne.n	8004104 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80040de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80040e6:	f023 030f 	bic.w	r3, r3, #15
 80040ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040ec:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80040ee:	e009      	b.n	8004104 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	f043 0220 	orr.w	r2, r3, #32
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004102:	e000      	b.n	8004106 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004104:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800410e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8004112:	4618      	mov	r0, r3
 8004114:	3764      	adds	r7, #100	; 0x64
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	50000100 	.word	0x50000100
 8004124:	50000400 	.word	0x50000400
 8004128:	50000500 	.word	0x50000500
 800412c:	50000300 	.word	0x50000300
 8004130:	50000700 	.word	0x50000700

08004134 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800414a:	2b00      	cmp	r3, #0
 800414c:	d126      	bne.n	800419c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004164:	2b00      	cmp	r3, #0
 8004166:	d115      	bne.n	8004194 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800416c:	2b00      	cmp	r3, #0
 800416e:	d111      	bne.n	8004194 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d105      	bne.n	8004194 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	f043 0201 	orr.w	r2, r3, #1
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f7fd f83b 	bl	8001210 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800419a:	e004      	b.n	80041a6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	4798      	blx	r3
}
 80041a6:	bf00      	nop
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f7fe fabd 	bl	800273c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e8:	f043 0204 	orr.w	r2, r3, #4
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f7fe fab7 	bl	8002764 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041f6:	bf00      	nop
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	2b01      	cmp	r3, #1
 8004218:	d108      	bne.n	800422c <ADC_Enable+0x2c>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <ADC_Enable+0x2c>
 8004228:	2301      	movs	r3, #1
 800422a:	e000      	b.n	800422e <ADC_Enable+0x2e>
 800422c:	2300      	movs	r3, #0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d13c      	bne.n	80042ac <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	4b1f      	ldr	r3, [pc, #124]	; (80042b8 <ADC_Enable+0xb8>)
 800423a:	4013      	ands	r3, r2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00d      	beq.n	800425c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004244:	f043 0210 	orr.w	r2, r3, #16
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004250:	f043 0201 	orr.w	r2, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e028      	b.n	80042ae <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800426c:	f7fe fa5a 	bl	8002724 <HAL_GetTick>
 8004270:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004272:	e014      	b.n	800429e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004274:	f7fe fa56 	bl	8002724 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d90d      	bls.n	800429e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	f043 0210 	orr.w	r2, r3, #16
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004292:	f043 0201 	orr.w	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e007      	b.n	80042ae <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d1e3      	bne.n	8004274 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	8000003f 	.word	0x8000003f

080042bc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d108      	bne.n	80042e8 <ADC_Disable+0x2c>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <ADC_Disable+0x2c>
 80042e4:	2301      	movs	r3, #1
 80042e6:	e000      	b.n	80042ea <ADC_Disable+0x2e>
 80042e8:	2300      	movs	r3, #0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d040      	beq.n	8004370 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 030d 	and.w	r3, r3, #13
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d10f      	bne.n	800431c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0202 	orr.w	r2, r2, #2
 800430a:	609a      	str	r2, [r3, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2203      	movs	r2, #3
 8004312:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004314:	f7fe fa06 	bl	8002724 <HAL_GetTick>
 8004318:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800431a:	e022      	b.n	8004362 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	f043 0210 	orr.w	r2, r3, #16
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432c:	f043 0201 	orr.w	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e01c      	b.n	8004372 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004338:	f7fe f9f4 	bl	8002724 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d90d      	bls.n	8004362 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	f043 0210 	orr.w	r2, r3, #16
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	f043 0201 	orr.w	r2, r3, #1
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e007      	b.n	8004372 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b01      	cmp	r3, #1
 800436e:	d0e3      	beq.n	8004338 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800438e:	2300      	movs	r3, #0
 8004390:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 030c 	and.w	r3, r3, #12
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 8093 	beq.w	80044c8 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043b0:	d12a      	bne.n	8004408 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d126      	bne.n	8004408 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d122      	bne.n	8004408 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80043c2:	230c      	movs	r3, #12
 80043c4:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80043c6:	e014      	b.n	80043f2 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	4a42      	ldr	r2, [pc, #264]	; (80044d4 <ADC_ConversionStop+0x158>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d90d      	bls.n	80043ec <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	f043 0210 	orr.w	r2, r3, #16
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e0:	f043 0201 	orr.w	r2, r3, #1
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e06e      	b.n	80044ca <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	3301      	adds	r3, #1
 80043f0:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fc:	2b40      	cmp	r3, #64	; 0x40
 80043fe:	d1e3      	bne.n	80043c8 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2240      	movs	r2, #64	; 0x40
 8004406:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2b60      	cmp	r3, #96	; 0x60
 800440c:	d015      	beq.n	800443a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b04      	cmp	r3, #4
 800441a:	d10e      	bne.n	800443a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004426:	2b00      	cmp	r3, #0
 8004428:	d107      	bne.n	800443a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0210 	orr.w	r2, r2, #16
 8004438:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b0c      	cmp	r3, #12
 800443e:	d015      	beq.n	800446c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b08      	cmp	r3, #8
 800444c:	d10e      	bne.n	800446c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004458:	2b00      	cmp	r3, #0
 800445a:	d107      	bne.n	800446c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0220 	orr.w	r2, r2, #32
 800446a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	2b60      	cmp	r3, #96	; 0x60
 8004470:	d004      	beq.n	800447c <ADC_ConversionStop+0x100>
 8004472:	2b6c      	cmp	r3, #108	; 0x6c
 8004474:	d105      	bne.n	8004482 <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004476:	230c      	movs	r3, #12
 8004478:	617b      	str	r3, [r7, #20]
        break;
 800447a:	e005      	b.n	8004488 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800447c:	2308      	movs	r3, #8
 800447e:	617b      	str	r3, [r7, #20]
        break;
 8004480:	e002      	b.n	8004488 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004482:	2304      	movs	r3, #4
 8004484:	617b      	str	r3, [r7, #20]
        break;
 8004486:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004488:	f7fe f94c 	bl	8002724 <HAL_GetTick>
 800448c:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800448e:	e014      	b.n	80044ba <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004490:	f7fe f948 	bl	8002724 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b0b      	cmp	r3, #11
 800449c:	d90d      	bls.n	80044ba <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f043 0210 	orr.w	r2, r3, #16
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ae:	f043 0201 	orr.w	r2, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e007      	b.n	80044ca <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	4013      	ands	r3, r2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e3      	bne.n	8004490 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	000993ff 	.word	0x000993ff

080044d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044e8:	4b0c      	ldr	r3, [pc, #48]	; (800451c <__NVIC_SetPriorityGrouping+0x44>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044f4:	4013      	ands	r3, r2
 80044f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800450a:	4a04      	ldr	r2, [pc, #16]	; (800451c <__NVIC_SetPriorityGrouping+0x44>)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	60d3      	str	r3, [r2, #12]
}
 8004510:	bf00      	nop
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	e000ed00 	.word	0xe000ed00

08004520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004524:	4b04      	ldr	r3, [pc, #16]	; (8004538 <__NVIC_GetPriorityGrouping+0x18>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	0a1b      	lsrs	r3, r3, #8
 800452a:	f003 0307 	and.w	r3, r3, #7
}
 800452e:	4618      	mov	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454a:	2b00      	cmp	r3, #0
 800454c:	db0b      	blt.n	8004566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	f003 021f 	and.w	r2, r3, #31
 8004554:	4907      	ldr	r1, [pc, #28]	; (8004574 <__NVIC_EnableIRQ+0x38>)
 8004556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	2001      	movs	r0, #1
 800455e:	fa00 f202 	lsl.w	r2, r0, r2
 8004562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	e000e100 	.word	0xe000e100

08004578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	6039      	str	r1, [r7, #0]
 8004582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004588:	2b00      	cmp	r3, #0
 800458a:	db0a      	blt.n	80045a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	b2da      	uxtb	r2, r3
 8004590:	490c      	ldr	r1, [pc, #48]	; (80045c4 <__NVIC_SetPriority+0x4c>)
 8004592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004596:	0112      	lsls	r2, r2, #4
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	440b      	add	r3, r1
 800459c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045a0:	e00a      	b.n	80045b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	4908      	ldr	r1, [pc, #32]	; (80045c8 <__NVIC_SetPriority+0x50>)
 80045a8:	79fb      	ldrb	r3, [r7, #7]
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	3b04      	subs	r3, #4
 80045b0:	0112      	lsls	r2, r2, #4
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	440b      	add	r3, r1
 80045b6:	761a      	strb	r2, [r3, #24]
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	e000e100 	.word	0xe000e100
 80045c8:	e000ed00 	.word	0xe000ed00

080045cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b089      	sub	sp, #36	; 0x24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	f1c3 0307 	rsb	r3, r3, #7
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	bf28      	it	cs
 80045ea:	2304      	movcs	r3, #4
 80045ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	3304      	adds	r3, #4
 80045f2:	2b06      	cmp	r3, #6
 80045f4:	d902      	bls.n	80045fc <NVIC_EncodePriority+0x30>
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	3b03      	subs	r3, #3
 80045fa:	e000      	b.n	80045fe <NVIC_EncodePriority+0x32>
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004600:	f04f 32ff 	mov.w	r2, #4294967295
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43da      	mvns	r2, r3
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	401a      	ands	r2, r3
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004614:	f04f 31ff 	mov.w	r1, #4294967295
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	fa01 f303 	lsl.w	r3, r1, r3
 800461e:	43d9      	mvns	r1, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004624:	4313      	orrs	r3, r2
         );
}
 8004626:	4618      	mov	r0, r3
 8004628:	3724      	adds	r7, #36	; 0x24
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
	...

08004634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3b01      	subs	r3, #1
 8004640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004644:	d301      	bcc.n	800464a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004646:	2301      	movs	r3, #1
 8004648:	e00f      	b.n	800466a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800464a:	4a0a      	ldr	r2, [pc, #40]	; (8004674 <SysTick_Config+0x40>)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3b01      	subs	r3, #1
 8004650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004652:	210f      	movs	r1, #15
 8004654:	f04f 30ff 	mov.w	r0, #4294967295
 8004658:	f7ff ff8e 	bl	8004578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800465c:	4b05      	ldr	r3, [pc, #20]	; (8004674 <SysTick_Config+0x40>)
 800465e:	2200      	movs	r2, #0
 8004660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004662:	4b04      	ldr	r3, [pc, #16]	; (8004674 <SysTick_Config+0x40>)
 8004664:	2207      	movs	r2, #7
 8004666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	e000e010 	.word	0xe000e010

08004678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff ff29 	bl	80044d8 <__NVIC_SetPriorityGrouping>
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b086      	sub	sp, #24
 8004692:	af00      	add	r7, sp, #0
 8004694:	4603      	mov	r3, r0
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	607a      	str	r2, [r7, #4]
 800469a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046a0:	f7ff ff3e 	bl	8004520 <__NVIC_GetPriorityGrouping>
 80046a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	68b9      	ldr	r1, [r7, #8]
 80046aa:	6978      	ldr	r0, [r7, #20]
 80046ac:	f7ff ff8e 	bl	80045cc <NVIC_EncodePriority>
 80046b0:	4602      	mov	r2, r0
 80046b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046b6:	4611      	mov	r1, r2
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff ff5d 	bl	8004578 <__NVIC_SetPriority>
}
 80046be:	bf00      	nop
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	4603      	mov	r3, r0
 80046ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff ff31 	bl	800453c <__NVIC_EnableIRQ>
}
 80046da:	bf00      	nop
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b082      	sub	sp, #8
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff ffa2 	bl	8004634 <SysTick_Config>
 80046f0:	4603      	mov	r3, r0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e014      	b.n	8004736 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	791b      	ldrb	r3, [r3, #4]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d105      	bne.n	8004722 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7fd fd8b 	bl	8002238 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2202      	movs	r2, #2
 8004726:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	73fb      	strb	r3, [r7, #15]
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6819      	ldr	r1, [r3, #0]
 8004752:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	43da      	mvns	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	400a      	ands	r2, r1
 8004764:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6819      	ldr	r1, [r3, #0]
 800476c:	2201      	movs	r2, #1
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	43da      	mvns	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	400a      	ands	r2, r1
 800477c:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10f      	bne.n	80047a4 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fae0 	bl	8004d4e <HAL_DMA_Abort>
 800478e:	4603      	mov	r3, r0
 8004790:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	e00e      	b.n	80047c2 <HAL_DAC_Stop_DMA+0x84>
  /* For all products including channel 2U */
  /* DAC channel 2 is available on top of DAC channel 1U */
  else /* Channel2 is used */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fad0 	bl	8004d4e <HAL_DMA_Abort>
 80047ae:	4603      	mov	r3, r0
 80047b0:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80047c0:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <HAL_DAC_Stop_DMA+0x92>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2204      	movs	r2, #4
 80047cc:	711a      	strb	r2, [r3, #4]
 80047ce:	e002      	b.n	80047d6 <HAL_DAC_Stop_DMA+0x98>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	711a      	strb	r2, [r3, #4]
  }
  
  /* Return function status */
  return status;
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	795b      	ldrb	r3, [r3, #5]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d101      	bne.n	800484e <HAL_DAC_Start_DMA+0x1e>
 800484a:	2302      	movs	r3, #2
 800484c:	e08e      	b.n	800496c <HAL_DAC_Start_DMA+0x13c>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2201      	movs	r2, #1
 8004852:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2202      	movs	r2, #2
 8004858:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d12a      	bne.n	80048b6 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	4a43      	ldr	r2, [pc, #268]	; (8004974 <HAL_DAC_Start_DMA+0x144>)
 8004866:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	4a42      	ldr	r2, [pc, #264]	; (8004978 <HAL_DAC_Start_DMA+0x148>)
 800486e:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	4a41      	ldr	r2, [pc, #260]	; (800497c <HAL_DAC_Start_DMA+0x14c>)
 8004876:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004886:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	2b04      	cmp	r3, #4
 800488c:	d009      	beq.n	80048a2 <HAL_DAC_Start_DMA+0x72>
 800488e:	2b08      	cmp	r3, #8
 8004890:	d00c      	beq.n	80048ac <HAL_DAC_Start_DMA+0x7c>
 8004892:	2b00      	cmp	r3, #0
 8004894:	d000      	beq.n	8004898 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004896:	e039      	b.n	800490c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3308      	adds	r3, #8
 800489e:	617b      	str	r3, [r7, #20]
        break;
 80048a0:	e034      	b.n	800490c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	330c      	adds	r3, #12
 80048a8:	617b      	str	r3, [r7, #20]
        break;
 80048aa:	e02f      	b.n	800490c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3310      	adds	r3, #16
 80048b2:	617b      	str	r3, [r7, #20]
        break;
 80048b4:	e02a      	b.n	800490c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	4a31      	ldr	r2, [pc, #196]	; (8004980 <HAL_DAC_Start_DMA+0x150>)
 80048bc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	4a30      	ldr	r2, [pc, #192]	; (8004984 <HAL_DAC_Start_DMA+0x154>)
 80048c4:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	4a2f      	ldr	r2, [pc, #188]	; (8004988 <HAL_DAC_Start_DMA+0x158>)
 80048cc:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80048dc:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d009      	beq.n	80048f8 <HAL_DAC_Start_DMA+0xc8>
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d00c      	beq.n	8004902 <HAL_DAC_Start_DMA+0xd2>
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d000      	beq.n	80048ee <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80048ec:	e00e      	b.n	800490c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3314      	adds	r3, #20
 80048f4:	617b      	str	r3, [r7, #20]
        break;
 80048f6:	e009      	b.n	800490c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3318      	adds	r3, #24
 80048fe:	617b      	str	r3, [r7, #20]
        break;
 8004900:	e004      	b.n	800490c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	331c      	adds	r3, #28
 8004908:	617b      	str	r3, [r7, #20]
        break;
 800490a:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10f      	bne.n	8004932 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004920:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6898      	ldr	r0, [r3, #8]
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	f000 f9b0 	bl	8004c90 <HAL_DMA_Start_IT>
 8004930:	e00e      	b.n	8004950 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004940:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	68d8      	ldr	r0, [r3, #12]
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	f000 f9a0 	bl	8004c90 <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6819      	ldr	r1, [r3, #0]
 800495c:	2201      	movs	r2, #1
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	409a      	lsls	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	08004b2b 	.word	0x08004b2b
 8004978:	08004b4d 	.word	0x08004b4d
 800497c:	08004b69 	.word	0x08004b69
 8004980:	08004b97 	.word	0x08004b97
 8004984:	08004bb9 	.word	0x08004bb9
 8004988:	08004bd5 	.word	0x08004bd5

0800498c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800499e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a2:	d120      	bne.n	80049e6 <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049b2:	d118      	bne.n	80049e6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2204      	movs	r2, #4
 80049b8:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f043 0201 	orr.w	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	611a      	str	r2, [r3, #16]
          
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049ce:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049de:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff ff1b 	bl	800481c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif
    }
  }
  
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049f4:	d120      	bne.n	8004a38 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a04:	d118      	bne.n	8004a38 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2204      	movs	r2, #4
 8004a0a:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f043 0202 	orr.w	r2, r3, #2
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004a20:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004a30:	601a      	str	r2, [r3, #0]
   
      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f86f 	bl	8004b16 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif
    }
  }
}
 8004a38:	bf00      	nop
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	2300      	movs	r3, #0
 8004a52:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	795b      	ldrb	r3, [r3, #5]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_DAC_ConfigChannel+0x20>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e036      	b.n	8004ace <HAL_DAC_ConfigChannel+0x8e>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2201      	movs	r2, #1
 8004a64:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004a74:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7e:	43db      	mvns	r3, r3
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	4013      	ands	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6819      	ldr	r1, [r3, #0]
 8004aae:	22c0      	movs	r2, #192	; 0xc0
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab6:	43da      	mvns	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	400a      	ands	r2, r1
 8004abe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	371c      	adds	r7, #28
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f7ff fe51 	bl	80047e0 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2201      	movs	r2, #1
 8004b42:	711a      	strb	r2, [r3, #4]
}
 8004b44:	bf00      	nop
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f7ff fe4a 	bl	80047f4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8004b60:	bf00      	nop
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f043 0204 	orr.w	r2, r3, #4
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f7ff fe40 	bl	8004808 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	711a      	strb	r2, [r3, #4]
}
 8004b8e:	bf00      	nop
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b084      	sub	sp, #16
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f7ff ff98 	bl	8004ada <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2201      	movs	r2, #1
 8004bae:	711a      	strb	r2, [r3, #4]
}
 8004bb0:	bf00      	nop
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f7ff ff91 	bl	8004aee <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8004bcc:	bf00      	nop
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f043 0204 	orr.w	r2, r3, #4
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f7ff ff87 	bl	8004b02 <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	711a      	strb	r2, [r3, #4]
}
 8004bfa:	bf00      	nop
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e037      	b.n	8004c88 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004c2e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004c32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f97a 	bl	8004f64 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}  
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d101      	bne.n	8004cb0 <HAL_DMA_Start_IT+0x20>
 8004cac:	2302      	movs	r3, #2
 8004cae:	e04a      	b.n	8004d46 <HAL_DMA_Start_IT+0xb6>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d13a      	bne.n	8004d38 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0201 	bic.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	68b9      	ldr	r1, [r7, #8]
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 f90d 	bl	8004f06 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d008      	beq.n	8004d06 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 020e 	orr.w	r2, r2, #14
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	e00f      	b.n	8004d26 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 020a 	orr.w	r2, r2, #10
 8004d14:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0204 	bic.w	r2, r2, #4
 8004d24:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0201 	orr.w	r2, r2, #1
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	e005      	b.n	8004d44 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004d40:	2302      	movs	r3, #2
 8004d42:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004d44:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d008      	beq.n	8004d72 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2204      	movs	r2, #4
 8004d64:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e020      	b.n	8004db4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 020e 	bic.w	r2, r2, #14
 8004d80:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0201 	bic.w	r2, r2, #1
 8004d90:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004da0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	2204      	movs	r2, #4
 8004dde:	409a      	lsls	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4013      	ands	r3, r2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d024      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x72>
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f003 0304 	and.w	r3, r3, #4
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d01f      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0320 	and.w	r3, r3, #32
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d107      	bne.n	8004e10 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0204 	bic.w	r2, r2, #4
 8004e0e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e18:	2104      	movs	r1, #4
 8004e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e1e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d06a      	beq.n	8004efe <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004e30:	e065      	b.n	8004efe <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	2202      	movs	r2, #2
 8004e38:	409a      	lsls	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d02c      	beq.n	8004e9c <HAL_DMA_IRQHandler+0xdc>
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d027      	beq.n	8004e9c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10b      	bne.n	8004e72 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 020a 	bic.w	r2, r2, #10
 8004e68:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7a:	2102      	movs	r1, #2
 8004e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e80:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d035      	beq.n	8004efe <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004e9a:	e030      	b.n	8004efe <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	2208      	movs	r2, #8
 8004ea2:	409a      	lsls	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d028      	beq.n	8004efe <HAL_DMA_IRQHandler+0x13e>
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d023      	beq.n	8004efe <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 020e 	bic.w	r2, r2, #14
 8004ec4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ece:	2101      	movs	r1, #1
 8004ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ed4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d004      	beq.n	8004efe <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	4798      	blx	r3
    }
  }
}  
 8004efc:	e7ff      	b.n	8004efe <HAL_DMA_IRQHandler+0x13e>
 8004efe:	bf00      	nop
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b085      	sub	sp, #20
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	60f8      	str	r0, [r7, #12]
 8004f0e:	60b9      	str	r1, [r7, #8]
 8004f10:	607a      	str	r2, [r7, #4]
 8004f12:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f22:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2b10      	cmp	r3, #16
 8004f32:	d108      	bne.n	8004f46 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004f44:	e007      	b.n	8004f56 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	60da      	str	r2, [r3, #12]
}
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
	...

08004f64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	461a      	mov	r2, r3
 8004f72:	4b14      	ldr	r3, [pc, #80]	; (8004fc4 <DMA_CalcBaseAndBitshift+0x60>)
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d80f      	bhi.n	8004f98 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	4b12      	ldr	r3, [pc, #72]	; (8004fc8 <DMA_CalcBaseAndBitshift+0x64>)
 8004f80:	4413      	add	r3, r2
 8004f82:	4a12      	ldr	r2, [pc, #72]	; (8004fcc <DMA_CalcBaseAndBitshift+0x68>)
 8004f84:	fba2 2303 	umull	r2, r3, r2, r3
 8004f88:	091b      	lsrs	r3, r3, #4
 8004f8a:	009a      	lsls	r2, r3, #2
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a0f      	ldr	r2, [pc, #60]	; (8004fd0 <DMA_CalcBaseAndBitshift+0x6c>)
 8004f94:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004f96:	e00e      	b.n	8004fb6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	4b0d      	ldr	r3, [pc, #52]	; (8004fd4 <DMA_CalcBaseAndBitshift+0x70>)
 8004fa0:	4413      	add	r3, r2
 8004fa2:	4a0a      	ldr	r2, [pc, #40]	; (8004fcc <DMA_CalcBaseAndBitshift+0x68>)
 8004fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa8:	091b      	lsrs	r3, r3, #4
 8004faa:	009a      	lsls	r2, r3, #2
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a09      	ldr	r2, [pc, #36]	; (8004fd8 <DMA_CalcBaseAndBitshift+0x74>)
 8004fb4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40020407 	.word	0x40020407
 8004fc8:	bffdfff8 	.word	0xbffdfff8
 8004fcc:	cccccccd 	.word	0xcccccccd
 8004fd0:	40020000 	.word	0x40020000
 8004fd4:	bffdfbf8 	.word	0xbffdfbf8
 8004fd8:	40020400 	.word	0x40020400

08004fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fea:	e160      	b.n	80052ae <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 8152 	beq.w	80052a8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d00b      	beq.n	8005024 <HAL_GPIO_Init+0x48>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2b02      	cmp	r3, #2
 8005012:	d007      	beq.n	8005024 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005018:	2b11      	cmp	r3, #17
 800501a:	d003      	beq.n	8005024 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	2b12      	cmp	r3, #18
 8005022:	d130      	bne.n	8005086 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	2203      	movs	r2, #3
 8005030:	fa02 f303 	lsl.w	r3, r2, r3
 8005034:	43db      	mvns	r3, r3
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4013      	ands	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	fa02 f303 	lsl.w	r3, r2, r3
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800505a:	2201      	movs	r2, #1
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	fa02 f303 	lsl.w	r3, r2, r3
 8005062:	43db      	mvns	r3, r3
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	4013      	ands	r3, r2
 8005068:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	091b      	lsrs	r3, r3, #4
 8005070:	f003 0201 	and.w	r2, r3, #1
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	fa02 f303 	lsl.w	r3, r2, r3
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	4313      	orrs	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	2203      	movs	r2, #3
 8005092:	fa02 f303 	lsl.w	r3, r2, r3
 8005096:	43db      	mvns	r3, r3
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	4013      	ands	r3, r2
 800509c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	689a      	ldr	r2, [r3, #8]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	fa02 f303 	lsl.w	r3, r2, r3
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d003      	beq.n	80050c6 <HAL_GPIO_Init+0xea>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2b12      	cmp	r3, #18
 80050c4:	d123      	bne.n	800510e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	08da      	lsrs	r2, r3, #3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	3208      	adds	r2, #8
 80050ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	220f      	movs	r2, #15
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	43db      	mvns	r3, r3
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4013      	ands	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	691a      	ldr	r2, [r3, #16]
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f003 0307 	and.w	r3, r3, #7
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	fa02 f303 	lsl.w	r3, r2, r3
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	08da      	lsrs	r2, r3, #3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3208      	adds	r2, #8
 8005108:	6939      	ldr	r1, [r7, #16]
 800510a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	2203      	movs	r2, #3
 800511a:	fa02 f303 	lsl.w	r3, r2, r3
 800511e:	43db      	mvns	r3, r3
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	4013      	ands	r3, r2
 8005124:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f003 0203 	and.w	r2, r3, #3
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	fa02 f303 	lsl.w	r3, r2, r3
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 80ac 	beq.w	80052a8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005150:	4b5e      	ldr	r3, [pc, #376]	; (80052cc <HAL_GPIO_Init+0x2f0>)
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	4a5d      	ldr	r2, [pc, #372]	; (80052cc <HAL_GPIO_Init+0x2f0>)
 8005156:	f043 0301 	orr.w	r3, r3, #1
 800515a:	6193      	str	r3, [r2, #24]
 800515c:	4b5b      	ldr	r3, [pc, #364]	; (80052cc <HAL_GPIO_Init+0x2f0>)
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005168:	4a59      	ldr	r2, [pc, #356]	; (80052d0 <HAL_GPIO_Init+0x2f4>)
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	089b      	lsrs	r3, r3, #2
 800516e:	3302      	adds	r3, #2
 8005170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005174:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f003 0303 	and.w	r3, r3, #3
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	220f      	movs	r2, #15
 8005180:	fa02 f303 	lsl.w	r3, r2, r3
 8005184:	43db      	mvns	r3, r3
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	4013      	ands	r3, r2
 800518a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005192:	d025      	beq.n	80051e0 <HAL_GPIO_Init+0x204>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a4f      	ldr	r2, [pc, #316]	; (80052d4 <HAL_GPIO_Init+0x2f8>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d01f      	beq.n	80051dc <HAL_GPIO_Init+0x200>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a4e      	ldr	r2, [pc, #312]	; (80052d8 <HAL_GPIO_Init+0x2fc>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d019      	beq.n	80051d8 <HAL_GPIO_Init+0x1fc>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a4d      	ldr	r2, [pc, #308]	; (80052dc <HAL_GPIO_Init+0x300>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d013      	beq.n	80051d4 <HAL_GPIO_Init+0x1f8>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a4c      	ldr	r2, [pc, #304]	; (80052e0 <HAL_GPIO_Init+0x304>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d00d      	beq.n	80051d0 <HAL_GPIO_Init+0x1f4>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a4b      	ldr	r2, [pc, #300]	; (80052e4 <HAL_GPIO_Init+0x308>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d007      	beq.n	80051cc <HAL_GPIO_Init+0x1f0>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a4a      	ldr	r2, [pc, #296]	; (80052e8 <HAL_GPIO_Init+0x30c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d101      	bne.n	80051c8 <HAL_GPIO_Init+0x1ec>
 80051c4:	2306      	movs	r3, #6
 80051c6:	e00c      	b.n	80051e2 <HAL_GPIO_Init+0x206>
 80051c8:	2307      	movs	r3, #7
 80051ca:	e00a      	b.n	80051e2 <HAL_GPIO_Init+0x206>
 80051cc:	2305      	movs	r3, #5
 80051ce:	e008      	b.n	80051e2 <HAL_GPIO_Init+0x206>
 80051d0:	2304      	movs	r3, #4
 80051d2:	e006      	b.n	80051e2 <HAL_GPIO_Init+0x206>
 80051d4:	2303      	movs	r3, #3
 80051d6:	e004      	b.n	80051e2 <HAL_GPIO_Init+0x206>
 80051d8:	2302      	movs	r3, #2
 80051da:	e002      	b.n	80051e2 <HAL_GPIO_Init+0x206>
 80051dc:	2301      	movs	r3, #1
 80051de:	e000      	b.n	80051e2 <HAL_GPIO_Init+0x206>
 80051e0:	2300      	movs	r3, #0
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	f002 0203 	and.w	r2, r2, #3
 80051e8:	0092      	lsls	r2, r2, #2
 80051ea:	4093      	lsls	r3, r2
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80051f2:	4937      	ldr	r1, [pc, #220]	; (80052d0 <HAL_GPIO_Init+0x2f4>)
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	089b      	lsrs	r3, r3, #2
 80051f8:	3302      	adds	r3, #2
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005200:	4b3a      	ldr	r3, [pc, #232]	; (80052ec <HAL_GPIO_Init+0x310>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	43db      	mvns	r3, r3
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4013      	ands	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005224:	4a31      	ldr	r2, [pc, #196]	; (80052ec <HAL_GPIO_Init+0x310>)
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800522a:	4b30      	ldr	r3, [pc, #192]	; (80052ec <HAL_GPIO_Init+0x310>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	43db      	mvns	r3, r3
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4013      	ands	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800524e:	4a27      	ldr	r2, [pc, #156]	; (80052ec <HAL_GPIO_Init+0x310>)
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005254:	4b25      	ldr	r3, [pc, #148]	; (80052ec <HAL_GPIO_Init+0x310>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	43db      	mvns	r3, r3
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4013      	ands	r3, r2
 8005262:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	4313      	orrs	r3, r2
 8005276:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005278:	4a1c      	ldr	r2, [pc, #112]	; (80052ec <HAL_GPIO_Init+0x310>)
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800527e:	4b1b      	ldr	r3, [pc, #108]	; (80052ec <HAL_GPIO_Init+0x310>)
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	43db      	mvns	r3, r3
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	4013      	ands	r3, r2
 800528c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80052a2:	4a12      	ldr	r2, [pc, #72]	; (80052ec <HAL_GPIO_Init+0x310>)
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	3301      	adds	r3, #1
 80052ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	fa22 f303 	lsr.w	r3, r2, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f47f ae97 	bne.w	8004fec <HAL_GPIO_Init+0x10>
  }
}
 80052be:	bf00      	nop
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40021000 	.word	0x40021000
 80052d0:	40010000 	.word	0x40010000
 80052d4:	48000400 	.word	0x48000400
 80052d8:	48000800 	.word	0x48000800
 80052dc:	48000c00 	.word	0x48000c00
 80052e0:	48001000 	.word	0x48001000
 80052e4:	48001400 	.word	0x48001400
 80052e8:	48001800 	.word	0x48001800
 80052ec:	40010400 	.word	0x40010400

080052f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	460b      	mov	r3, r1
 80052fa:	807b      	strh	r3, [r7, #2]
 80052fc:	4613      	mov	r3, r2
 80052fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005300:	787b      	ldrb	r3, [r7, #1]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005306:	887a      	ldrh	r2, [r7, #2]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800530c:	e002      	b.n	8005314 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800530e:	887a      	ldrh	r2, [r7, #2]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8005326:	af00      	add	r7, sp, #0
 8005328:	1d3b      	adds	r3, r7, #4
 800532a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800532c:	1d3b      	adds	r3, r7, #4
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d102      	bne.n	800533a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	f000 bf01 	b.w	800613c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800533a:	1d3b      	adds	r3, r7, #4
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 8160 	beq.w	800560a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800534a:	4bae      	ldr	r3, [pc, #696]	; (8005604 <HAL_RCC_OscConfig+0x2e4>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f003 030c 	and.w	r3, r3, #12
 8005352:	2b04      	cmp	r3, #4
 8005354:	d00c      	beq.n	8005370 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005356:	4bab      	ldr	r3, [pc, #684]	; (8005604 <HAL_RCC_OscConfig+0x2e4>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f003 030c 	and.w	r3, r3, #12
 800535e:	2b08      	cmp	r3, #8
 8005360:	d159      	bne.n	8005416 <HAL_RCC_OscConfig+0xf6>
 8005362:	4ba8      	ldr	r3, [pc, #672]	; (8005604 <HAL_RCC_OscConfig+0x2e4>)
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800536a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800536e:	d152      	bne.n	8005416 <HAL_RCC_OscConfig+0xf6>
 8005370:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005374:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005378:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800537c:	fa93 f3a3 	rbit	r3, r3
 8005380:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005384:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005388:	fab3 f383 	clz	r3, r3
 800538c:	b2db      	uxtb	r3, r3
 800538e:	095b      	lsrs	r3, r3, #5
 8005390:	b2db      	uxtb	r3, r3
 8005392:	f043 0301 	orr.w	r3, r3, #1
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b01      	cmp	r3, #1
 800539a:	d102      	bne.n	80053a2 <HAL_RCC_OscConfig+0x82>
 800539c:	4b99      	ldr	r3, [pc, #612]	; (8005604 <HAL_RCC_OscConfig+0x2e4>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	e015      	b.n	80053ce <HAL_RCC_OscConfig+0xae>
 80053a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053a6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053aa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80053ae:	fa93 f3a3 	rbit	r3, r3
 80053b2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80053b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053ba:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80053be:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80053c2:	fa93 f3a3 	rbit	r3, r3
 80053c6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80053ca:	4b8e      	ldr	r3, [pc, #568]	; (8005604 <HAL_RCC_OscConfig+0x2e4>)
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80053d2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80053d6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80053da:	fa92 f2a2 	rbit	r2, r2
 80053de:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80053e2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80053e6:	fab2 f282 	clz	r2, r2
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	f042 0220 	orr.w	r2, r2, #32
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	f002 021f 	and.w	r2, r2, #31
 80053f6:	2101      	movs	r1, #1
 80053f8:	fa01 f202 	lsl.w	r2, r1, r2
 80053fc:	4013      	ands	r3, r2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 8102 	beq.w	8005608 <HAL_RCC_OscConfig+0x2e8>
 8005404:	1d3b      	adds	r3, r7, #4
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	f040 80fc 	bne.w	8005608 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	f000 be93 	b.w	800613c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005416:	1d3b      	adds	r3, r7, #4
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005420:	d106      	bne.n	8005430 <HAL_RCC_OscConfig+0x110>
 8005422:	4b78      	ldr	r3, [pc, #480]	; (8005604 <HAL_RCC_OscConfig+0x2e4>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a77      	ldr	r2, [pc, #476]	; (8005604 <HAL_RCC_OscConfig+0x2e4>)
 8005428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	e030      	b.n	8005492 <HAL_RCC_OscConfig+0x172>
 8005430:	1d3b      	adds	r3, r7, #4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10c      	bne.n	8005454 <HAL_RCC_OscConfig+0x134>
 800543a:	4b72      	ldr	r3, [pc, #456]	; (8005604 <HAL_RCC_OscConfig+0x2e4>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a71      	ldr	r2, [pc, #452]	; (8005604 <HAL_RCC_OscConfig+0x2e4>)
 8005440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	4b6f      	ldr	r3, [pc, #444]	; (8005604 <HAL_RCC_OscConfig+0x2e4>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a6e      	ldr	r2, [pc, #440]	; (8005604 <HAL_RCC_OscConfig+0x2e4>)
 800544c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	e01e      	b.n	8005492 <HAL_RCC_OscConfig+0x172>
 8005454:	1d3b      	adds	r3, r7, #4
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800545e:	d10c      	bne.n	800547a <HAL_RCC_OscConfig+0x15a>
 8005460:	4b68      	ldr	r3, [pc, #416]	; (8005604 <HAL_RCC_OscConfig+0x2e4>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a67      	ldr	r2, [pc, #412]	; (8005604 <HAL_RCC_OscConfig+0x2e4>)
 8005466:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800546a:	6013      	str	r3, [r2, #0]
 800546c:	4b65      	ldr	r3, [pc, #404]	; (8005604 <HAL_RCC_OscConfig+0x2e4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a64      	ldr	r2, [pc, #400]	; (8005604 <HAL_RCC_OscConfig+0x2e4>)
 8005472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	e00b      	b.n	8005492 <HAL_RCC_OscConfig+0x172>
 800547a:	4b62      	ldr	r3, [pc, #392]	; (8005604 <HAL_RCC_OscConfig+0x2e4>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a61      	ldr	r2, [pc, #388]	; (8005604 <HAL_RCC_OscConfig+0x2e4>)
 8005480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	4b5f      	ldr	r3, [pc, #380]	; (8005604 <HAL_RCC_OscConfig+0x2e4>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a5e      	ldr	r2, [pc, #376]	; (8005604 <HAL_RCC_OscConfig+0x2e4>)
 800548c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005490:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005492:	1d3b      	adds	r3, r7, #4
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d059      	beq.n	8005550 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549c:	f7fd f942 	bl	8002724 <HAL_GetTick>
 80054a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054a4:	e00a      	b.n	80054bc <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054a6:	f7fd f93d 	bl	8002724 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b64      	cmp	r3, #100	; 0x64
 80054b4:	d902      	bls.n	80054bc <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	f000 be40 	b.w	800613c <HAL_RCC_OscConfig+0xe1c>
 80054bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054c0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80054c8:	fa93 f3a3 	rbit	r3, r3
 80054cc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80054d0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054d4:	fab3 f383 	clz	r3, r3
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f043 0301 	orr.w	r3, r3, #1
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d102      	bne.n	80054ee <HAL_RCC_OscConfig+0x1ce>
 80054e8:	4b46      	ldr	r3, [pc, #280]	; (8005604 <HAL_RCC_OscConfig+0x2e4>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	e015      	b.n	800551a <HAL_RCC_OscConfig+0x1fa>
 80054ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054f2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80054fa:	fa93 f3a3 	rbit	r3, r3
 80054fe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8005502:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005506:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800550a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800550e:	fa93 f3a3 	rbit	r3, r3
 8005512:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005516:	4b3b      	ldr	r3, [pc, #236]	; (8005604 <HAL_RCC_OscConfig+0x2e4>)
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800551e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8005522:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8005526:	fa92 f2a2 	rbit	r2, r2
 800552a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800552e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005532:	fab2 f282 	clz	r2, r2
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	f042 0220 	orr.w	r2, r2, #32
 800553c:	b2d2      	uxtb	r2, r2
 800553e:	f002 021f 	and.w	r2, r2, #31
 8005542:	2101      	movs	r1, #1
 8005544:	fa01 f202 	lsl.w	r2, r1, r2
 8005548:	4013      	ands	r3, r2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0ab      	beq.n	80054a6 <HAL_RCC_OscConfig+0x186>
 800554e:	e05c      	b.n	800560a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005550:	f7fd f8e8 	bl	8002724 <HAL_GetTick>
 8005554:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005558:	e00a      	b.n	8005570 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800555a:	f7fd f8e3 	bl	8002724 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b64      	cmp	r3, #100	; 0x64
 8005568:	d902      	bls.n	8005570 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	f000 bde6 	b.w	800613c <HAL_RCC_OscConfig+0xe1c>
 8005570:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005574:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005578:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800557c:	fa93 f3a3 	rbit	r3, r3
 8005580:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8005584:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005588:	fab3 f383 	clz	r3, r3
 800558c:	b2db      	uxtb	r3, r3
 800558e:	095b      	lsrs	r3, r3, #5
 8005590:	b2db      	uxtb	r3, r3
 8005592:	f043 0301 	orr.w	r3, r3, #1
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b01      	cmp	r3, #1
 800559a:	d102      	bne.n	80055a2 <HAL_RCC_OscConfig+0x282>
 800559c:	4b19      	ldr	r3, [pc, #100]	; (8005604 <HAL_RCC_OscConfig+0x2e4>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	e015      	b.n	80055ce <HAL_RCC_OscConfig+0x2ae>
 80055a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055a6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80055ae:	fa93 f3a3 	rbit	r3, r3
 80055b2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80055b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055ba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80055be:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80055c2:	fa93 f3a3 	rbit	r3, r3
 80055c6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80055ca:	4b0e      	ldr	r3, [pc, #56]	; (8005604 <HAL_RCC_OscConfig+0x2e4>)
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80055d2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80055d6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80055da:	fa92 f2a2 	rbit	r2, r2
 80055de:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80055e2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80055e6:	fab2 f282 	clz	r2, r2
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	f042 0220 	orr.w	r2, r2, #32
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	f002 021f 	and.w	r2, r2, #31
 80055f6:	2101      	movs	r1, #1
 80055f8:	fa01 f202 	lsl.w	r2, r1, r2
 80055fc:	4013      	ands	r3, r2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1ab      	bne.n	800555a <HAL_RCC_OscConfig+0x23a>
 8005602:	e002      	b.n	800560a <HAL_RCC_OscConfig+0x2ea>
 8005604:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800560a:	1d3b      	adds	r3, r7, #4
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 8170 	beq.w	80058fa <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800561a:	4bd0      	ldr	r3, [pc, #832]	; (800595c <HAL_RCC_OscConfig+0x63c>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f003 030c 	and.w	r3, r3, #12
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00c      	beq.n	8005640 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005626:	4bcd      	ldr	r3, [pc, #820]	; (800595c <HAL_RCC_OscConfig+0x63c>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f003 030c 	and.w	r3, r3, #12
 800562e:	2b08      	cmp	r3, #8
 8005630:	d16d      	bne.n	800570e <HAL_RCC_OscConfig+0x3ee>
 8005632:	4bca      	ldr	r3, [pc, #808]	; (800595c <HAL_RCC_OscConfig+0x63c>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800563a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800563e:	d166      	bne.n	800570e <HAL_RCC_OscConfig+0x3ee>
 8005640:	2302      	movs	r3, #2
 8005642:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005646:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800564a:	fa93 f3a3 	rbit	r3, r3
 800564e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8005652:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005656:	fab3 f383 	clz	r3, r3
 800565a:	b2db      	uxtb	r3, r3
 800565c:	095b      	lsrs	r3, r3, #5
 800565e:	b2db      	uxtb	r3, r3
 8005660:	f043 0301 	orr.w	r3, r3, #1
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b01      	cmp	r3, #1
 8005668:	d102      	bne.n	8005670 <HAL_RCC_OscConfig+0x350>
 800566a:	4bbc      	ldr	r3, [pc, #752]	; (800595c <HAL_RCC_OscConfig+0x63c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	e013      	b.n	8005698 <HAL_RCC_OscConfig+0x378>
 8005670:	2302      	movs	r3, #2
 8005672:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005676:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800567a:	fa93 f3a3 	rbit	r3, r3
 800567e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8005682:	2302      	movs	r3, #2
 8005684:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005688:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800568c:	fa93 f3a3 	rbit	r3, r3
 8005690:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005694:	4bb1      	ldr	r3, [pc, #708]	; (800595c <HAL_RCC_OscConfig+0x63c>)
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	2202      	movs	r2, #2
 800569a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800569e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80056a2:	fa92 f2a2 	rbit	r2, r2
 80056a6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80056aa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80056ae:	fab2 f282 	clz	r2, r2
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	f042 0220 	orr.w	r2, r2, #32
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	f002 021f 	and.w	r2, r2, #31
 80056be:	2101      	movs	r1, #1
 80056c0:	fa01 f202 	lsl.w	r2, r1, r2
 80056c4:	4013      	ands	r3, r2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d007      	beq.n	80056da <HAL_RCC_OscConfig+0x3ba>
 80056ca:	1d3b      	adds	r3, r7, #4
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d002      	beq.n	80056da <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	f000 bd31 	b.w	800613c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056da:	4ba0      	ldr	r3, [pc, #640]	; (800595c <HAL_RCC_OscConfig+0x63c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056e2:	1d3b      	adds	r3, r7, #4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	21f8      	movs	r1, #248	; 0xf8
 80056ea:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ee:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80056f2:	fa91 f1a1 	rbit	r1, r1
 80056f6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80056fa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80056fe:	fab1 f181 	clz	r1, r1
 8005702:	b2c9      	uxtb	r1, r1
 8005704:	408b      	lsls	r3, r1
 8005706:	4995      	ldr	r1, [pc, #596]	; (800595c <HAL_RCC_OscConfig+0x63c>)
 8005708:	4313      	orrs	r3, r2
 800570a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800570c:	e0f5      	b.n	80058fa <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800570e:	1d3b      	adds	r3, r7, #4
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 8085 	beq.w	8005824 <HAL_RCC_OscConfig+0x504>
 800571a:	2301      	movs	r3, #1
 800571c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005720:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005724:	fa93 f3a3 	rbit	r3, r3
 8005728:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800572c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005730:	fab3 f383 	clz	r3, r3
 8005734:	b2db      	uxtb	r3, r3
 8005736:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800573a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	461a      	mov	r2, r3
 8005742:	2301      	movs	r3, #1
 8005744:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005746:	f7fc ffed 	bl	8002724 <HAL_GetTick>
 800574a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800574e:	e00a      	b.n	8005766 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005750:	f7fc ffe8 	bl	8002724 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d902      	bls.n	8005766 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	f000 bceb 	b.w	800613c <HAL_RCC_OscConfig+0xe1c>
 8005766:	2302      	movs	r3, #2
 8005768:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800576c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005770:	fa93 f3a3 	rbit	r3, r3
 8005774:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8005778:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800577c:	fab3 f383 	clz	r3, r3
 8005780:	b2db      	uxtb	r3, r3
 8005782:	095b      	lsrs	r3, r3, #5
 8005784:	b2db      	uxtb	r3, r3
 8005786:	f043 0301 	orr.w	r3, r3, #1
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b01      	cmp	r3, #1
 800578e:	d102      	bne.n	8005796 <HAL_RCC_OscConfig+0x476>
 8005790:	4b72      	ldr	r3, [pc, #456]	; (800595c <HAL_RCC_OscConfig+0x63c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	e013      	b.n	80057be <HAL_RCC_OscConfig+0x49e>
 8005796:	2302      	movs	r3, #2
 8005798:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80057a0:	fa93 f3a3 	rbit	r3, r3
 80057a4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80057a8:	2302      	movs	r3, #2
 80057aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80057ae:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80057b2:	fa93 f3a3 	rbit	r3, r3
 80057b6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80057ba:	4b68      	ldr	r3, [pc, #416]	; (800595c <HAL_RCC_OscConfig+0x63c>)
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	2202      	movs	r2, #2
 80057c0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80057c4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80057c8:	fa92 f2a2 	rbit	r2, r2
 80057cc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80057d0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80057d4:	fab2 f282 	clz	r2, r2
 80057d8:	b2d2      	uxtb	r2, r2
 80057da:	f042 0220 	orr.w	r2, r2, #32
 80057de:	b2d2      	uxtb	r2, r2
 80057e0:	f002 021f 	and.w	r2, r2, #31
 80057e4:	2101      	movs	r1, #1
 80057e6:	fa01 f202 	lsl.w	r2, r1, r2
 80057ea:	4013      	ands	r3, r2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0af      	beq.n	8005750 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057f0:	4b5a      	ldr	r3, [pc, #360]	; (800595c <HAL_RCC_OscConfig+0x63c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057f8:	1d3b      	adds	r3, r7, #4
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	21f8      	movs	r1, #248	; 0xf8
 8005800:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005804:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8005808:	fa91 f1a1 	rbit	r1, r1
 800580c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8005810:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005814:	fab1 f181 	clz	r1, r1
 8005818:	b2c9      	uxtb	r1, r1
 800581a:	408b      	lsls	r3, r1
 800581c:	494f      	ldr	r1, [pc, #316]	; (800595c <HAL_RCC_OscConfig+0x63c>)
 800581e:	4313      	orrs	r3, r2
 8005820:	600b      	str	r3, [r1, #0]
 8005822:	e06a      	b.n	80058fa <HAL_RCC_OscConfig+0x5da>
 8005824:	2301      	movs	r3, #1
 8005826:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800582a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800582e:	fa93 f3a3 	rbit	r3, r3
 8005832:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8005836:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800583a:	fab3 f383 	clz	r3, r3
 800583e:	b2db      	uxtb	r3, r3
 8005840:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005844:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	461a      	mov	r2, r3
 800584c:	2300      	movs	r3, #0
 800584e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005850:	f7fc ff68 	bl	8002724 <HAL_GetTick>
 8005854:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005858:	e00a      	b.n	8005870 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800585a:	f7fc ff63 	bl	8002724 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d902      	bls.n	8005870 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	f000 bc66 	b.w	800613c <HAL_RCC_OscConfig+0xe1c>
 8005870:	2302      	movs	r3, #2
 8005872:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005876:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800587a:	fa93 f3a3 	rbit	r3, r3
 800587e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8005882:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005886:	fab3 f383 	clz	r3, r3
 800588a:	b2db      	uxtb	r3, r3
 800588c:	095b      	lsrs	r3, r3, #5
 800588e:	b2db      	uxtb	r3, r3
 8005890:	f043 0301 	orr.w	r3, r3, #1
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b01      	cmp	r3, #1
 8005898:	d102      	bne.n	80058a0 <HAL_RCC_OscConfig+0x580>
 800589a:	4b30      	ldr	r3, [pc, #192]	; (800595c <HAL_RCC_OscConfig+0x63c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	e013      	b.n	80058c8 <HAL_RCC_OscConfig+0x5a8>
 80058a0:	2302      	movs	r3, #2
 80058a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058aa:	fa93 f3a3 	rbit	r3, r3
 80058ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80058b2:	2302      	movs	r3, #2
 80058b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80058b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058bc:	fa93 f3a3 	rbit	r3, r3
 80058c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80058c4:	4b25      	ldr	r3, [pc, #148]	; (800595c <HAL_RCC_OscConfig+0x63c>)
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	2202      	movs	r2, #2
 80058ca:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80058ce:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80058d2:	fa92 f2a2 	rbit	r2, r2
 80058d6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80058da:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80058de:	fab2 f282 	clz	r2, r2
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	f042 0220 	orr.w	r2, r2, #32
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	f002 021f 	and.w	r2, r2, #31
 80058ee:	2101      	movs	r1, #1
 80058f0:	fa01 f202 	lsl.w	r2, r1, r2
 80058f4:	4013      	ands	r3, r2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1af      	bne.n	800585a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058fa:	1d3b      	adds	r3, r7, #4
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0308 	and.w	r3, r3, #8
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 80da 	beq.w	8005abe <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800590a:	1d3b      	adds	r3, r7, #4
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d069      	beq.n	80059e8 <HAL_RCC_OscConfig+0x6c8>
 8005914:	2301      	movs	r3, #1
 8005916:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800591e:	fa93 f3a3 	rbit	r3, r3
 8005922:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8005926:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800592a:	fab3 f383 	clz	r3, r3
 800592e:	b2db      	uxtb	r3, r3
 8005930:	461a      	mov	r2, r3
 8005932:	4b0b      	ldr	r3, [pc, #44]	; (8005960 <HAL_RCC_OscConfig+0x640>)
 8005934:	4413      	add	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	461a      	mov	r2, r3
 800593a:	2301      	movs	r3, #1
 800593c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800593e:	f7fc fef1 	bl	8002724 <HAL_GetTick>
 8005942:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005946:	e00d      	b.n	8005964 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005948:	f7fc feec 	bl	8002724 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d905      	bls.n	8005964 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e3ef      	b.n	800613c <HAL_RCC_OscConfig+0xe1c>
 800595c:	40021000 	.word	0x40021000
 8005960:	10908120 	.word	0x10908120
 8005964:	2302      	movs	r3, #2
 8005966:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800596a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800596e:	fa93 f2a3 	rbit	r2, r3
 8005972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800597c:	2202      	movs	r2, #2
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	fa93 f2a3 	rbit	r2, r3
 800598a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005994:	2202      	movs	r2, #2
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	fa93 f2a3 	rbit	r2, r3
 80059a2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80059a6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059a8:	4ba4      	ldr	r3, [pc, #656]	; (8005c3c <HAL_RCC_OscConfig+0x91c>)
 80059aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059ac:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80059b0:	2102      	movs	r1, #2
 80059b2:	6019      	str	r1, [r3, #0]
 80059b4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	fa93 f1a3 	rbit	r1, r3
 80059be:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80059c2:	6019      	str	r1, [r3, #0]
  return result;
 80059c4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	fab3 f383 	clz	r3, r3
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	f003 031f 	and.w	r3, r3, #31
 80059da:	2101      	movs	r1, #1
 80059dc:	fa01 f303 	lsl.w	r3, r1, r3
 80059e0:	4013      	ands	r3, r2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0b0      	beq.n	8005948 <HAL_RCC_OscConfig+0x628>
 80059e6:	e06a      	b.n	8005abe <HAL_RCC_OscConfig+0x79e>
 80059e8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80059ec:	2201      	movs	r2, #1
 80059ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	fa93 f2a3 	rbit	r2, r3
 80059fa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80059fe:	601a      	str	r2, [r3, #0]
  return result;
 8005a00:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005a04:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a06:	fab3 f383 	clz	r3, r3
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	4b8c      	ldr	r3, [pc, #560]	; (8005c40 <HAL_RCC_OscConfig+0x920>)
 8005a10:	4413      	add	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	461a      	mov	r2, r3
 8005a16:	2300      	movs	r3, #0
 8005a18:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a1a:	f7fc fe83 	bl	8002724 <HAL_GetTick>
 8005a1e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a22:	e009      	b.n	8005a38 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a24:	f7fc fe7e 	bl	8002724 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e381      	b.n	800613c <HAL_RCC_OscConfig+0xe1c>
 8005a38:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a40:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	fa93 f2a3 	rbit	r2, r3
 8005a4a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005a54:	2202      	movs	r2, #2
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	fa93 f2a3 	rbit	r2, r3
 8005a62:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	fa93 f2a3 	rbit	r2, r3
 8005a7a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005a7e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a80:	4b6e      	ldr	r3, [pc, #440]	; (8005c3c <HAL_RCC_OscConfig+0x91c>)
 8005a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005a88:	2102      	movs	r1, #2
 8005a8a:	6019      	str	r1, [r3, #0]
 8005a8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	fa93 f1a3 	rbit	r1, r3
 8005a96:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005a9a:	6019      	str	r1, [r3, #0]
  return result;
 8005a9c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	fab3 f383 	clz	r3, r3
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	f003 031f 	and.w	r3, r3, #31
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab8:	4013      	ands	r3, r2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1b2      	bne.n	8005a24 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005abe:	1d3b      	adds	r3, r7, #4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 8157 	beq.w	8005d7c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ad4:	4b59      	ldr	r3, [pc, #356]	; (8005c3c <HAL_RCC_OscConfig+0x91c>)
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d112      	bne.n	8005b06 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ae0:	4b56      	ldr	r3, [pc, #344]	; (8005c3c <HAL_RCC_OscConfig+0x91c>)
 8005ae2:	69db      	ldr	r3, [r3, #28]
 8005ae4:	4a55      	ldr	r2, [pc, #340]	; (8005c3c <HAL_RCC_OscConfig+0x91c>)
 8005ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aea:	61d3      	str	r3, [r2, #28]
 8005aec:	4b53      	ldr	r3, [pc, #332]	; (8005c3c <HAL_RCC_OscConfig+0x91c>)
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005af4:	f107 030c 	add.w	r3, r7, #12
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	f107 030c 	add.w	r3, r7, #12
 8005afe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005b00:	2301      	movs	r3, #1
 8005b02:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b06:	4b4f      	ldr	r3, [pc, #316]	; (8005c44 <HAL_RCC_OscConfig+0x924>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d11a      	bne.n	8005b48 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b12:	4b4c      	ldr	r3, [pc, #304]	; (8005c44 <HAL_RCC_OscConfig+0x924>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a4b      	ldr	r2, [pc, #300]	; (8005c44 <HAL_RCC_OscConfig+0x924>)
 8005b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b1c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b1e:	f7fc fe01 	bl	8002724 <HAL_GetTick>
 8005b22:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b26:	e009      	b.n	8005b3c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b28:	f7fc fdfc 	bl	8002724 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b64      	cmp	r3, #100	; 0x64
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e2ff      	b.n	800613c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b3c:	4b41      	ldr	r3, [pc, #260]	; (8005c44 <HAL_RCC_OscConfig+0x924>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0ef      	beq.n	8005b28 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b48:	1d3b      	adds	r3, r7, #4
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d106      	bne.n	8005b60 <HAL_RCC_OscConfig+0x840>
 8005b52:	4b3a      	ldr	r3, [pc, #232]	; (8005c3c <HAL_RCC_OscConfig+0x91c>)
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	4a39      	ldr	r2, [pc, #228]	; (8005c3c <HAL_RCC_OscConfig+0x91c>)
 8005b58:	f043 0301 	orr.w	r3, r3, #1
 8005b5c:	6213      	str	r3, [r2, #32]
 8005b5e:	e02f      	b.n	8005bc0 <HAL_RCC_OscConfig+0x8a0>
 8005b60:	1d3b      	adds	r3, r7, #4
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10c      	bne.n	8005b84 <HAL_RCC_OscConfig+0x864>
 8005b6a:	4b34      	ldr	r3, [pc, #208]	; (8005c3c <HAL_RCC_OscConfig+0x91c>)
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	4a33      	ldr	r2, [pc, #204]	; (8005c3c <HAL_RCC_OscConfig+0x91c>)
 8005b70:	f023 0301 	bic.w	r3, r3, #1
 8005b74:	6213      	str	r3, [r2, #32]
 8005b76:	4b31      	ldr	r3, [pc, #196]	; (8005c3c <HAL_RCC_OscConfig+0x91c>)
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	4a30      	ldr	r2, [pc, #192]	; (8005c3c <HAL_RCC_OscConfig+0x91c>)
 8005b7c:	f023 0304 	bic.w	r3, r3, #4
 8005b80:	6213      	str	r3, [r2, #32]
 8005b82:	e01d      	b.n	8005bc0 <HAL_RCC_OscConfig+0x8a0>
 8005b84:	1d3b      	adds	r3, r7, #4
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	2b05      	cmp	r3, #5
 8005b8c:	d10c      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x888>
 8005b8e:	4b2b      	ldr	r3, [pc, #172]	; (8005c3c <HAL_RCC_OscConfig+0x91c>)
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	4a2a      	ldr	r2, [pc, #168]	; (8005c3c <HAL_RCC_OscConfig+0x91c>)
 8005b94:	f043 0304 	orr.w	r3, r3, #4
 8005b98:	6213      	str	r3, [r2, #32]
 8005b9a:	4b28      	ldr	r3, [pc, #160]	; (8005c3c <HAL_RCC_OscConfig+0x91c>)
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	4a27      	ldr	r2, [pc, #156]	; (8005c3c <HAL_RCC_OscConfig+0x91c>)
 8005ba0:	f043 0301 	orr.w	r3, r3, #1
 8005ba4:	6213      	str	r3, [r2, #32]
 8005ba6:	e00b      	b.n	8005bc0 <HAL_RCC_OscConfig+0x8a0>
 8005ba8:	4b24      	ldr	r3, [pc, #144]	; (8005c3c <HAL_RCC_OscConfig+0x91c>)
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	4a23      	ldr	r2, [pc, #140]	; (8005c3c <HAL_RCC_OscConfig+0x91c>)
 8005bae:	f023 0301 	bic.w	r3, r3, #1
 8005bb2:	6213      	str	r3, [r2, #32]
 8005bb4:	4b21      	ldr	r3, [pc, #132]	; (8005c3c <HAL_RCC_OscConfig+0x91c>)
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	4a20      	ldr	r2, [pc, #128]	; (8005c3c <HAL_RCC_OscConfig+0x91c>)
 8005bba:	f023 0304 	bic.w	r3, r3, #4
 8005bbe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bc0:	1d3b      	adds	r3, r7, #4
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d06a      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bca:	f7fc fdab 	bl	8002724 <HAL_GetTick>
 8005bce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bd2:	e00b      	b.n	8005bec <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bd4:	f7fc fda6 	bl	8002724 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d901      	bls.n	8005bec <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e2a7      	b.n	800613c <HAL_RCC_OscConfig+0xe1c>
 8005bec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	fa93 f2a3 	rbit	r2, r3
 8005bfe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005c08:	2202      	movs	r2, #2
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	fa93 f2a3 	rbit	r2, r3
 8005c16:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005c1a:	601a      	str	r2, [r3, #0]
  return result;
 8005c1c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005c20:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c22:	fab3 f383 	clz	r3, r3
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	095b      	lsrs	r3, r3, #5
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	f043 0302 	orr.w	r3, r3, #2
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d108      	bne.n	8005c48 <HAL_RCC_OscConfig+0x928>
 8005c36:	4b01      	ldr	r3, [pc, #4]	; (8005c3c <HAL_RCC_OscConfig+0x91c>)
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	e013      	b.n	8005c64 <HAL_RCC_OscConfig+0x944>
 8005c3c:	40021000 	.word	0x40021000
 8005c40:	10908120 	.word	0x10908120
 8005c44:	40007000 	.word	0x40007000
 8005c48:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c50:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	fa93 f2a3 	rbit	r2, r3
 8005c5a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	4bc0      	ldr	r3, [pc, #768]	; (8005f64 <HAL_RCC_OscConfig+0xc44>)
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005c68:	2102      	movs	r1, #2
 8005c6a:	6011      	str	r1, [r2, #0]
 8005c6c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005c70:	6812      	ldr	r2, [r2, #0]
 8005c72:	fa92 f1a2 	rbit	r1, r2
 8005c76:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005c7a:	6011      	str	r1, [r2, #0]
  return result;
 8005c7c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005c80:	6812      	ldr	r2, [r2, #0]
 8005c82:	fab2 f282 	clz	r2, r2
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	f002 021f 	and.w	r2, r2, #31
 8005c92:	2101      	movs	r1, #1
 8005c94:	fa01 f202 	lsl.w	r2, r1, r2
 8005c98:	4013      	ands	r3, r2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d09a      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x8b4>
 8005c9e:	e063      	b.n	8005d68 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ca0:	f7fc fd40 	bl	8002724 <HAL_GetTick>
 8005ca4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ca8:	e00b      	b.n	8005cc2 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005caa:	f7fc fd3b 	bl	8002724 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e23c      	b.n	800613c <HAL_RCC_OscConfig+0xe1c>
 8005cc2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	fa93 f2a3 	rbit	r2, r3
 8005cd4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005cde:	2202      	movs	r2, #2
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	fa93 f2a3 	rbit	r2, r3
 8005cec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005cf0:	601a      	str	r2, [r3, #0]
  return result;
 8005cf2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005cf6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cf8:	fab3 f383 	clz	r3, r3
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	095b      	lsrs	r3, r3, #5
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	f043 0302 	orr.w	r3, r3, #2
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d102      	bne.n	8005d12 <HAL_RCC_OscConfig+0x9f2>
 8005d0c:	4b95      	ldr	r3, [pc, #596]	; (8005f64 <HAL_RCC_OscConfig+0xc44>)
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	e00d      	b.n	8005d2e <HAL_RCC_OscConfig+0xa0e>
 8005d12:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005d16:	2202      	movs	r2, #2
 8005d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d1a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	fa93 f2a3 	rbit	r2, r3
 8005d24:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	4b8e      	ldr	r3, [pc, #568]	; (8005f64 <HAL_RCC_OscConfig+0xc44>)
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8005d32:	2102      	movs	r1, #2
 8005d34:	6011      	str	r1, [r2, #0]
 8005d36:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8005d3a:	6812      	ldr	r2, [r2, #0]
 8005d3c:	fa92 f1a2 	rbit	r1, r2
 8005d40:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005d44:	6011      	str	r1, [r2, #0]
  return result;
 8005d46:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005d4a:	6812      	ldr	r2, [r2, #0]
 8005d4c:	fab2 f282 	clz	r2, r2
 8005d50:	b2d2      	uxtb	r2, r2
 8005d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	f002 021f 	and.w	r2, r2, #31
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8005d62:	4013      	ands	r3, r2
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1a0      	bne.n	8005caa <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005d68:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d105      	bne.n	8005d7c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d70:	4b7c      	ldr	r3, [pc, #496]	; (8005f64 <HAL_RCC_OscConfig+0xc44>)
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	4a7b      	ldr	r2, [pc, #492]	; (8005f64 <HAL_RCC_OscConfig+0xc44>)
 8005d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d7a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d7c:	1d3b      	adds	r3, r7, #4
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 81d9 	beq.w	800613a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d88:	4b76      	ldr	r3, [pc, #472]	; (8005f64 <HAL_RCC_OscConfig+0xc44>)
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f003 030c 	and.w	r3, r3, #12
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	f000 81a6 	beq.w	80060e2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d96:	1d3b      	adds	r3, r7, #4
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	f040 811e 	bne.w	8005fde <HAL_RCC_OscConfig+0xcbe>
 8005da2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005da6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005daa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dac:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	fa93 f2a3 	rbit	r2, r3
 8005db6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005dba:	601a      	str	r2, [r3, #0]
  return result;
 8005dbc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005dc0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dc2:	fab3 f383 	clz	r3, r3
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005dcc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd8:	f7fc fca4 	bl	8002724 <HAL_GetTick>
 8005ddc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005de0:	e009      	b.n	8005df6 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005de2:	f7fc fc9f 	bl	8002724 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e1a2      	b.n	800613c <HAL_RCC_OscConfig+0xe1c>
 8005df6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005dfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005dfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e00:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	fa93 f2a3 	rbit	r2, r3
 8005e0a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005e0e:	601a      	str	r2, [r3, #0]
  return result;
 8005e10:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005e14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e16:	fab3 f383 	clz	r3, r3
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	095b      	lsrs	r3, r3, #5
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	f043 0301 	orr.w	r3, r3, #1
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d102      	bne.n	8005e30 <HAL_RCC_OscConfig+0xb10>
 8005e2a:	4b4e      	ldr	r3, [pc, #312]	; (8005f64 <HAL_RCC_OscConfig+0xc44>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	e01b      	b.n	8005e68 <HAL_RCC_OscConfig+0xb48>
 8005e30:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e3a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	fa93 f2a3 	rbit	r2, r3
 8005e44:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	fa93 f2a3 	rbit	r2, r3
 8005e5e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	4b3f      	ldr	r3, [pc, #252]	; (8005f64 <HAL_RCC_OscConfig+0xc44>)
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005e6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005e70:	6011      	str	r1, [r2, #0]
 8005e72:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005e76:	6812      	ldr	r2, [r2, #0]
 8005e78:	fa92 f1a2 	rbit	r1, r2
 8005e7c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005e80:	6011      	str	r1, [r2, #0]
  return result;
 8005e82:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005e86:	6812      	ldr	r2, [r2, #0]
 8005e88:	fab2 f282 	clz	r2, r2
 8005e8c:	b2d2      	uxtb	r2, r2
 8005e8e:	f042 0220 	orr.w	r2, r2, #32
 8005e92:	b2d2      	uxtb	r2, r2
 8005e94:	f002 021f 	and.w	r2, r2, #31
 8005e98:	2101      	movs	r1, #1
 8005e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d19e      	bne.n	8005de2 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ea4:	4b2f      	ldr	r3, [pc, #188]	; (8005f64 <HAL_RCC_OscConfig+0xc44>)
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	f023 020f 	bic.w	r2, r3, #15
 8005eac:	1d3b      	adds	r3, r7, #4
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	492c      	ldr	r1, [pc, #176]	; (8005f64 <HAL_RCC_OscConfig+0xc44>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005eb8:	4b2a      	ldr	r3, [pc, #168]	; (8005f64 <HAL_RCC_OscConfig+0xc44>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8005ec0:	1d3b      	adds	r3, r7, #4
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6a19      	ldr	r1, [r3, #32]
 8005ec6:	1d3b      	adds	r3, r7, #4
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	69db      	ldr	r3, [r3, #28]
 8005ecc:	430b      	orrs	r3, r1
 8005ece:	4925      	ldr	r1, [pc, #148]	; (8005f64 <HAL_RCC_OscConfig+0xc44>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	604b      	str	r3, [r1, #4]
 8005ed4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005ed8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ede:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	fa93 f2a3 	rbit	r2, r3
 8005ee8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005eec:	601a      	str	r2, [r3, #0]
  return result;
 8005eee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ef2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ef4:	fab3 f383 	clz	r3, r3
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005efe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	461a      	mov	r2, r3
 8005f06:	2301      	movs	r3, #1
 8005f08:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f0a:	f7fc fc0b 	bl	8002724 <HAL_GetTick>
 8005f0e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f12:	e009      	b.n	8005f28 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f14:	f7fc fc06 	bl	8002724 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d901      	bls.n	8005f28 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e109      	b.n	800613c <HAL_RCC_OscConfig+0xe1c>
 8005f28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005f2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	fa93 f2a3 	rbit	r2, r3
 8005f3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005f40:	601a      	str	r2, [r3, #0]
  return result;
 8005f42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005f46:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f48:	fab3 f383 	clz	r3, r3
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	f043 0301 	orr.w	r3, r3, #1
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d105      	bne.n	8005f68 <HAL_RCC_OscConfig+0xc48>
 8005f5c:	4b01      	ldr	r3, [pc, #4]	; (8005f64 <HAL_RCC_OscConfig+0xc44>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	e01e      	b.n	8005fa0 <HAL_RCC_OscConfig+0xc80>
 8005f62:	bf00      	nop
 8005f64:	40021000 	.word	0x40021000
 8005f68:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005f6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f72:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	fa93 f2a3 	rbit	r2, r3
 8005f7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005f86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	fa93 f2a3 	rbit	r2, r3
 8005f96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	4b6a      	ldr	r3, [pc, #424]	; (8006148 <HAL_RCC_OscConfig+0xe28>)
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005fa4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005fa8:	6011      	str	r1, [r2, #0]
 8005faa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005fae:	6812      	ldr	r2, [r2, #0]
 8005fb0:	fa92 f1a2 	rbit	r1, r2
 8005fb4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005fb8:	6011      	str	r1, [r2, #0]
  return result;
 8005fba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005fbe:	6812      	ldr	r2, [r2, #0]
 8005fc0:	fab2 f282 	clz	r2, r2
 8005fc4:	b2d2      	uxtb	r2, r2
 8005fc6:	f042 0220 	orr.w	r2, r2, #32
 8005fca:	b2d2      	uxtb	r2, r2
 8005fcc:	f002 021f 	and.w	r2, r2, #31
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d09b      	beq.n	8005f14 <HAL_RCC_OscConfig+0xbf4>
 8005fdc:	e0ad      	b.n	800613a <HAL_RCC_OscConfig+0xe1a>
 8005fde:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005fe2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fe6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	fa93 f2a3 	rbit	r2, r3
 8005ff2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ff6:	601a      	str	r2, [r3, #0]
  return result;
 8005ff8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ffc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ffe:	fab3 f383 	clz	r3, r3
 8006002:	b2db      	uxtb	r3, r3
 8006004:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006008:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	461a      	mov	r2, r3
 8006010:	2300      	movs	r3, #0
 8006012:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006014:	f7fc fb86 	bl	8002724 <HAL_GetTick>
 8006018:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800601c:	e009      	b.n	8006032 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800601e:	f7fc fb81 	bl	8002724 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d901      	bls.n	8006032 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e084      	b.n	800613c <HAL_RCC_OscConfig+0xe1c>
 8006032:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006036:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800603a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800603c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	fa93 f2a3 	rbit	r2, r3
 8006046:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800604a:	601a      	str	r2, [r3, #0]
  return result;
 800604c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006050:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006052:	fab3 f383 	clz	r3, r3
 8006056:	b2db      	uxtb	r3, r3
 8006058:	095b      	lsrs	r3, r3, #5
 800605a:	b2db      	uxtb	r3, r3
 800605c:	f043 0301 	orr.w	r3, r3, #1
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b01      	cmp	r3, #1
 8006064:	d102      	bne.n	800606c <HAL_RCC_OscConfig+0xd4c>
 8006066:	4b38      	ldr	r3, [pc, #224]	; (8006148 <HAL_RCC_OscConfig+0xe28>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	e01b      	b.n	80060a4 <HAL_RCC_OscConfig+0xd84>
 800606c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006070:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006074:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	fa93 f2a3 	rbit	r2, r3
 8006080:	f107 0320 	add.w	r3, r7, #32
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	f107 031c 	add.w	r3, r7, #28
 800608a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	f107 031c 	add.w	r3, r7, #28
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	fa93 f2a3 	rbit	r2, r3
 800609a:	f107 0318 	add.w	r3, r7, #24
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	4b29      	ldr	r3, [pc, #164]	; (8006148 <HAL_RCC_OscConfig+0xe28>)
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	f107 0214 	add.w	r2, r7, #20
 80060a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80060ac:	6011      	str	r1, [r2, #0]
 80060ae:	f107 0214 	add.w	r2, r7, #20
 80060b2:	6812      	ldr	r2, [r2, #0]
 80060b4:	fa92 f1a2 	rbit	r1, r2
 80060b8:	f107 0210 	add.w	r2, r7, #16
 80060bc:	6011      	str	r1, [r2, #0]
  return result;
 80060be:	f107 0210 	add.w	r2, r7, #16
 80060c2:	6812      	ldr	r2, [r2, #0]
 80060c4:	fab2 f282 	clz	r2, r2
 80060c8:	b2d2      	uxtb	r2, r2
 80060ca:	f042 0220 	orr.w	r2, r2, #32
 80060ce:	b2d2      	uxtb	r2, r2
 80060d0:	f002 021f 	and.w	r2, r2, #31
 80060d4:	2101      	movs	r1, #1
 80060d6:	fa01 f202 	lsl.w	r2, r1, r2
 80060da:	4013      	ands	r3, r2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d19e      	bne.n	800601e <HAL_RCC_OscConfig+0xcfe>
 80060e0:	e02b      	b.n	800613a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060e2:	1d3b      	adds	r3, r7, #4
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d101      	bne.n	80060f0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e025      	b.n	800613c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80060f0:	4b15      	ldr	r3, [pc, #84]	; (8006148 <HAL_RCC_OscConfig+0xe28>)
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80060f8:	4b13      	ldr	r3, [pc, #76]	; (8006148 <HAL_RCC_OscConfig+0xe28>)
 80060fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006100:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006104:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8006108:	1d3b      	adds	r3, r7, #4
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	429a      	cmp	r2, r3
 8006110:	d111      	bne.n	8006136 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006112:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006116:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800611a:	1d3b      	adds	r3, r7, #4
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006120:	429a      	cmp	r2, r3
 8006122:	d108      	bne.n	8006136 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8006124:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006128:	f003 020f 	and.w	r2, r3, #15
 800612c:	1d3b      	adds	r3, r7, #4
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006132:	429a      	cmp	r2, r3
 8006134:	d001      	beq.n	800613a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e000      	b.n	800613c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	40021000 	.word	0x40021000

0800614c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b09e      	sub	sp, #120	; 0x78
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e162      	b.n	800642a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006164:	4b90      	ldr	r3, [pc, #576]	; (80063a8 <HAL_RCC_ClockConfig+0x25c>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	429a      	cmp	r2, r3
 8006170:	d910      	bls.n	8006194 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006172:	4b8d      	ldr	r3, [pc, #564]	; (80063a8 <HAL_RCC_ClockConfig+0x25c>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f023 0207 	bic.w	r2, r3, #7
 800617a:	498b      	ldr	r1, [pc, #556]	; (80063a8 <HAL_RCC_ClockConfig+0x25c>)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	4313      	orrs	r3, r2
 8006180:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006182:	4b89      	ldr	r3, [pc, #548]	; (80063a8 <HAL_RCC_ClockConfig+0x25c>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	429a      	cmp	r2, r3
 800618e:	d001      	beq.n	8006194 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e14a      	b.n	800642a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d008      	beq.n	80061b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061a0:	4b82      	ldr	r3, [pc, #520]	; (80063ac <HAL_RCC_ClockConfig+0x260>)
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	497f      	ldr	r1, [pc, #508]	; (80063ac <HAL_RCC_ClockConfig+0x260>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f000 80dc 	beq.w	8006378 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d13c      	bne.n	8006242 <HAL_RCC_ClockConfig+0xf6>
 80061c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061cc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061d0:	fa93 f3a3 	rbit	r3, r3
 80061d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80061d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061d8:	fab3 f383 	clz	r3, r3
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	095b      	lsrs	r3, r3, #5
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	f043 0301 	orr.w	r3, r3, #1
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d102      	bne.n	80061f2 <HAL_RCC_ClockConfig+0xa6>
 80061ec:	4b6f      	ldr	r3, [pc, #444]	; (80063ac <HAL_RCC_ClockConfig+0x260>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	e00f      	b.n	8006212 <HAL_RCC_ClockConfig+0xc6>
 80061f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061fa:	fa93 f3a3 	rbit	r3, r3
 80061fe:	667b      	str	r3, [r7, #100]	; 0x64
 8006200:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006204:	663b      	str	r3, [r7, #96]	; 0x60
 8006206:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006208:	fa93 f3a3 	rbit	r3, r3
 800620c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800620e:	4b67      	ldr	r3, [pc, #412]	; (80063ac <HAL_RCC_ClockConfig+0x260>)
 8006210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006212:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006216:	65ba      	str	r2, [r7, #88]	; 0x58
 8006218:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800621a:	fa92 f2a2 	rbit	r2, r2
 800621e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006220:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006222:	fab2 f282 	clz	r2, r2
 8006226:	b2d2      	uxtb	r2, r2
 8006228:	f042 0220 	orr.w	r2, r2, #32
 800622c:	b2d2      	uxtb	r2, r2
 800622e:	f002 021f 	and.w	r2, r2, #31
 8006232:	2101      	movs	r1, #1
 8006234:	fa01 f202 	lsl.w	r2, r1, r2
 8006238:	4013      	ands	r3, r2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d17b      	bne.n	8006336 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e0f3      	b.n	800642a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	2b02      	cmp	r3, #2
 8006248:	d13c      	bne.n	80062c4 <HAL_RCC_ClockConfig+0x178>
 800624a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800624e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006252:	fa93 f3a3 	rbit	r3, r3
 8006256:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800625a:	fab3 f383 	clz	r3, r3
 800625e:	b2db      	uxtb	r3, r3
 8006260:	095b      	lsrs	r3, r3, #5
 8006262:	b2db      	uxtb	r3, r3
 8006264:	f043 0301 	orr.w	r3, r3, #1
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b01      	cmp	r3, #1
 800626c:	d102      	bne.n	8006274 <HAL_RCC_ClockConfig+0x128>
 800626e:	4b4f      	ldr	r3, [pc, #316]	; (80063ac <HAL_RCC_ClockConfig+0x260>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	e00f      	b.n	8006294 <HAL_RCC_ClockConfig+0x148>
 8006274:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006278:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800627a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800627c:	fa93 f3a3 	rbit	r3, r3
 8006280:	647b      	str	r3, [r7, #68]	; 0x44
 8006282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006286:	643b      	str	r3, [r7, #64]	; 0x40
 8006288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800628a:	fa93 f3a3 	rbit	r3, r3
 800628e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006290:	4b46      	ldr	r3, [pc, #280]	; (80063ac <HAL_RCC_ClockConfig+0x260>)
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006298:	63ba      	str	r2, [r7, #56]	; 0x38
 800629a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800629c:	fa92 f2a2 	rbit	r2, r2
 80062a0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80062a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062a4:	fab2 f282 	clz	r2, r2
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	f042 0220 	orr.w	r2, r2, #32
 80062ae:	b2d2      	uxtb	r2, r2
 80062b0:	f002 021f 	and.w	r2, r2, #31
 80062b4:	2101      	movs	r1, #1
 80062b6:	fa01 f202 	lsl.w	r2, r1, r2
 80062ba:	4013      	ands	r3, r2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d13a      	bne.n	8006336 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e0b2      	b.n	800642a <HAL_RCC_ClockConfig+0x2de>
 80062c4:	2302      	movs	r3, #2
 80062c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	fa93 f3a3 	rbit	r3, r3
 80062ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80062d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062d2:	fab3 f383 	clz	r3, r3
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	095b      	lsrs	r3, r3, #5
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	f043 0301 	orr.w	r3, r3, #1
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d102      	bne.n	80062ec <HAL_RCC_ClockConfig+0x1a0>
 80062e6:	4b31      	ldr	r3, [pc, #196]	; (80063ac <HAL_RCC_ClockConfig+0x260>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	e00d      	b.n	8006308 <HAL_RCC_ClockConfig+0x1bc>
 80062ec:	2302      	movs	r3, #2
 80062ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	fa93 f3a3 	rbit	r3, r3
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
 80062f8:	2302      	movs	r3, #2
 80062fa:	623b      	str	r3, [r7, #32]
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	fa93 f3a3 	rbit	r3, r3
 8006302:	61fb      	str	r3, [r7, #28]
 8006304:	4b29      	ldr	r3, [pc, #164]	; (80063ac <HAL_RCC_ClockConfig+0x260>)
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	2202      	movs	r2, #2
 800630a:	61ba      	str	r2, [r7, #24]
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	fa92 f2a2 	rbit	r2, r2
 8006312:	617a      	str	r2, [r7, #20]
  return result;
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	fab2 f282 	clz	r2, r2
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	f042 0220 	orr.w	r2, r2, #32
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	f002 021f 	and.w	r2, r2, #31
 8006326:	2101      	movs	r1, #1
 8006328:	fa01 f202 	lsl.w	r2, r1, r2
 800632c:	4013      	ands	r3, r2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e079      	b.n	800642a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006336:	4b1d      	ldr	r3, [pc, #116]	; (80063ac <HAL_RCC_ClockConfig+0x260>)
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f023 0203 	bic.w	r2, r3, #3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	491a      	ldr	r1, [pc, #104]	; (80063ac <HAL_RCC_ClockConfig+0x260>)
 8006344:	4313      	orrs	r3, r2
 8006346:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006348:	f7fc f9ec 	bl	8002724 <HAL_GetTick>
 800634c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800634e:	e00a      	b.n	8006366 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006350:	f7fc f9e8 	bl	8002724 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	f241 3288 	movw	r2, #5000	; 0x1388
 800635e:	4293      	cmp	r3, r2
 8006360:	d901      	bls.n	8006366 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e061      	b.n	800642a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006366:	4b11      	ldr	r3, [pc, #68]	; (80063ac <HAL_RCC_ClockConfig+0x260>)
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f003 020c 	and.w	r2, r3, #12
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	429a      	cmp	r2, r3
 8006376:	d1eb      	bne.n	8006350 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006378:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <HAL_RCC_ClockConfig+0x25c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d214      	bcs.n	80063b0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006386:	4b08      	ldr	r3, [pc, #32]	; (80063a8 <HAL_RCC_ClockConfig+0x25c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f023 0207 	bic.w	r2, r3, #7
 800638e:	4906      	ldr	r1, [pc, #24]	; (80063a8 <HAL_RCC_ClockConfig+0x25c>)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	4313      	orrs	r3, r2
 8006394:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006396:	4b04      	ldr	r3, [pc, #16]	; (80063a8 <HAL_RCC_ClockConfig+0x25c>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0307 	and.w	r3, r3, #7
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d005      	beq.n	80063b0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e040      	b.n	800642a <HAL_RCC_ClockConfig+0x2de>
 80063a8:	40022000 	.word	0x40022000
 80063ac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d008      	beq.n	80063ce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063bc:	4b1d      	ldr	r3, [pc, #116]	; (8006434 <HAL_RCC_ClockConfig+0x2e8>)
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	491a      	ldr	r1, [pc, #104]	; (8006434 <HAL_RCC_ClockConfig+0x2e8>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0308 	and.w	r3, r3, #8
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d009      	beq.n	80063ee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063da:	4b16      	ldr	r3, [pc, #88]	; (8006434 <HAL_RCC_ClockConfig+0x2e8>)
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	4912      	ldr	r1, [pc, #72]	; (8006434 <HAL_RCC_ClockConfig+0x2e8>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80063ee:	f000 f829 	bl	8006444 <HAL_RCC_GetSysClockFreq>
 80063f2:	4601      	mov	r1, r0
 80063f4:	4b0f      	ldr	r3, [pc, #60]	; (8006434 <HAL_RCC_ClockConfig+0x2e8>)
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063fc:	22f0      	movs	r2, #240	; 0xf0
 80063fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	fa92 f2a2 	rbit	r2, r2
 8006406:	60fa      	str	r2, [r7, #12]
  return result;
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	fab2 f282 	clz	r2, r2
 800640e:	b2d2      	uxtb	r2, r2
 8006410:	40d3      	lsrs	r3, r2
 8006412:	4a09      	ldr	r2, [pc, #36]	; (8006438 <HAL_RCC_ClockConfig+0x2ec>)
 8006414:	5cd3      	ldrb	r3, [r2, r3]
 8006416:	fa21 f303 	lsr.w	r3, r1, r3
 800641a:	4a08      	ldr	r2, [pc, #32]	; (800643c <HAL_RCC_ClockConfig+0x2f0>)
 800641c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800641e:	4b08      	ldr	r3, [pc, #32]	; (8006440 <HAL_RCC_ClockConfig+0x2f4>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4618      	mov	r0, r3
 8006424:	f7fc f93a 	bl	800269c <HAL_InitTick>
  
  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3778      	adds	r7, #120	; 0x78
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	40021000 	.word	0x40021000
 8006438:	0800a9f8 	.word	0x0800a9f8
 800643c:	20000a18 	.word	0x20000a18
 8006440:	20000a1c 	.word	0x20000a1c

08006444 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006444:	b480      	push	{r7}
 8006446:	b08b      	sub	sp, #44	; 0x2c
 8006448:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	61fb      	str	r3, [r7, #28]
 800644e:	2300      	movs	r3, #0
 8006450:	61bb      	str	r3, [r7, #24]
 8006452:	2300      	movs	r3, #0
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
 8006456:	2300      	movs	r3, #0
 8006458:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800645a:	2300      	movs	r3, #0
 800645c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800645e:	4b2a      	ldr	r3, [pc, #168]	; (8006508 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	f003 030c 	and.w	r3, r3, #12
 800646a:	2b04      	cmp	r3, #4
 800646c:	d002      	beq.n	8006474 <HAL_RCC_GetSysClockFreq+0x30>
 800646e:	2b08      	cmp	r3, #8
 8006470:	d003      	beq.n	800647a <HAL_RCC_GetSysClockFreq+0x36>
 8006472:	e03f      	b.n	80064f4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006474:	4b25      	ldr	r3, [pc, #148]	; (800650c <HAL_RCC_GetSysClockFreq+0xc8>)
 8006476:	623b      	str	r3, [r7, #32]
      break;
 8006478:	e03f      	b.n	80064fa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006480:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006484:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	fa92 f2a2 	rbit	r2, r2
 800648c:	607a      	str	r2, [r7, #4]
  return result;
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	fab2 f282 	clz	r2, r2
 8006494:	b2d2      	uxtb	r2, r2
 8006496:	40d3      	lsrs	r3, r2
 8006498:	4a1d      	ldr	r2, [pc, #116]	; (8006510 <HAL_RCC_GetSysClockFreq+0xcc>)
 800649a:	5cd3      	ldrb	r3, [r2, r3]
 800649c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800649e:	4b1a      	ldr	r3, [pc, #104]	; (8006508 <HAL_RCC_GetSysClockFreq+0xc4>)
 80064a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a2:	f003 030f 	and.w	r3, r3, #15
 80064a6:	220f      	movs	r2, #15
 80064a8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	fa92 f2a2 	rbit	r2, r2
 80064b0:	60fa      	str	r2, [r7, #12]
  return result;
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	fab2 f282 	clz	r2, r2
 80064b8:	b2d2      	uxtb	r2, r2
 80064ba:	40d3      	lsrs	r3, r2
 80064bc:	4a15      	ldr	r2, [pc, #84]	; (8006514 <HAL_RCC_GetSysClockFreq+0xd0>)
 80064be:	5cd3      	ldrb	r3, [r2, r3]
 80064c0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d008      	beq.n	80064de <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80064cc:	4a0f      	ldr	r2, [pc, #60]	; (800650c <HAL_RCC_GetSysClockFreq+0xc8>)
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	fb02 f303 	mul.w	r3, r2, r3
 80064da:	627b      	str	r3, [r7, #36]	; 0x24
 80064dc:	e007      	b.n	80064ee <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80064de:	4a0b      	ldr	r2, [pc, #44]	; (800650c <HAL_RCC_GetSysClockFreq+0xc8>)
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	fb02 f303 	mul.w	r3, r2, r3
 80064ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	623b      	str	r3, [r7, #32]
      break;
 80064f2:	e002      	b.n	80064fa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80064f4:	4b05      	ldr	r3, [pc, #20]	; (800650c <HAL_RCC_GetSysClockFreq+0xc8>)
 80064f6:	623b      	str	r3, [r7, #32]
      break;
 80064f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064fa:	6a3b      	ldr	r3, [r7, #32]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	372c      	adds	r7, #44	; 0x2c
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	40021000 	.word	0x40021000
 800650c:	007a1200 	.word	0x007a1200
 8006510:	0800aa10 	.word	0x0800aa10
 8006514:	0800aa20 	.word	0x0800aa20

08006518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006518:	b480      	push	{r7}
 800651a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800651c:	4b03      	ldr	r3, [pc, #12]	; (800652c <HAL_RCC_GetHCLKFreq+0x14>)
 800651e:	681b      	ldr	r3, [r3, #0]
}
 8006520:	4618      	mov	r0, r3
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	20000a18 	.word	0x20000a18

08006530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006536:	f7ff ffef 	bl	8006518 <HAL_RCC_GetHCLKFreq>
 800653a:	4601      	mov	r1, r0
 800653c:	4b0b      	ldr	r3, [pc, #44]	; (800656c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006544:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006548:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	fa92 f2a2 	rbit	r2, r2
 8006550:	603a      	str	r2, [r7, #0]
  return result;
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	fab2 f282 	clz	r2, r2
 8006558:	b2d2      	uxtb	r2, r2
 800655a:	40d3      	lsrs	r3, r2
 800655c:	4a04      	ldr	r2, [pc, #16]	; (8006570 <HAL_RCC_GetPCLK1Freq+0x40>)
 800655e:	5cd3      	ldrb	r3, [r2, r3]
 8006560:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006564:	4618      	mov	r0, r3
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	40021000 	.word	0x40021000
 8006570:	0800aa08 	.word	0x0800aa08

08006574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800657a:	f7ff ffcd 	bl	8006518 <HAL_RCC_GetHCLKFreq>
 800657e:	4601      	mov	r1, r0
 8006580:	4b0b      	ldr	r3, [pc, #44]	; (80065b0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006588:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800658c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	fa92 f2a2 	rbit	r2, r2
 8006594:	603a      	str	r2, [r7, #0]
  return result;
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	fab2 f282 	clz	r2, r2
 800659c:	b2d2      	uxtb	r2, r2
 800659e:	40d3      	lsrs	r3, r2
 80065a0:	4a04      	ldr	r2, [pc, #16]	; (80065b4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80065a2:	5cd3      	ldrb	r3, [r2, r3]
 80065a4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80065a8:	4618      	mov	r0, r3
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	40021000 	.word	0x40021000
 80065b4:	0800aa08 	.word	0x0800aa08

080065b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b092      	sub	sp, #72	; 0x48
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80065c8:	2300      	movs	r3, #0
 80065ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 80d4 	beq.w	8006784 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065dc:	4b4e      	ldr	r3, [pc, #312]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10e      	bne.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065e8:	4b4b      	ldr	r3, [pc, #300]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	4a4a      	ldr	r2, [pc, #296]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065f2:	61d3      	str	r3, [r2, #28]
 80065f4:	4b48      	ldr	r3, [pc, #288]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065fc:	60bb      	str	r3, [r7, #8]
 80065fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006600:	2301      	movs	r3, #1
 8006602:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006606:	4b45      	ldr	r3, [pc, #276]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660e:	2b00      	cmp	r3, #0
 8006610:	d118      	bne.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006612:	4b42      	ldr	r3, [pc, #264]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a41      	ldr	r2, [pc, #260]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800661c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800661e:	f7fc f881 	bl	8002724 <HAL_GetTick>
 8006622:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006624:	e008      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006626:	f7fc f87d 	bl	8002724 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	2b64      	cmp	r3, #100	; 0x64
 8006632:	d901      	bls.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e1d6      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006638:	4b38      	ldr	r3, [pc, #224]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006640:	2b00      	cmp	r3, #0
 8006642:	d0f0      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006644:	4b34      	ldr	r3, [pc, #208]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800664c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800664e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 8084 	beq.w	800675e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800665e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006660:	429a      	cmp	r2, r3
 8006662:	d07c      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006664:	4b2c      	ldr	r3, [pc, #176]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800666c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800666e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006672:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006676:	fa93 f3a3 	rbit	r3, r3
 800667a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800667c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800667e:	fab3 f383 	clz	r3, r3
 8006682:	b2db      	uxtb	r3, r3
 8006684:	461a      	mov	r2, r3
 8006686:	4b26      	ldr	r3, [pc, #152]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006688:	4413      	add	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	461a      	mov	r2, r3
 800668e:	2301      	movs	r3, #1
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006696:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669a:	fa93 f3a3 	rbit	r3, r3
 800669e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80066a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066a2:	fab3 f383 	clz	r3, r3
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	461a      	mov	r2, r3
 80066aa:	4b1d      	ldr	r3, [pc, #116]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80066ac:	4413      	add	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	461a      	mov	r2, r3
 80066b2:	2300      	movs	r3, #0
 80066b4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80066b6:	4a18      	ldr	r2, [pc, #96]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ba:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80066bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d04b      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c6:	f7fc f82d 	bl	8002724 <HAL_GetTick>
 80066ca:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066cc:	e00a      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ce:	f7fc f829 	bl	8002724 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80066dc:	4293      	cmp	r3, r2
 80066de:	d901      	bls.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e180      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80066e4:	2302      	movs	r3, #2
 80066e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ea:	fa93 f3a3 	rbit	r3, r3
 80066ee:	627b      	str	r3, [r7, #36]	; 0x24
 80066f0:	2302      	movs	r3, #2
 80066f2:	623b      	str	r3, [r7, #32]
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	fa93 f3a3 	rbit	r3, r3
 80066fa:	61fb      	str	r3, [r7, #28]
  return result;
 80066fc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066fe:	fab3 f383 	clz	r3, r3
 8006702:	b2db      	uxtb	r3, r3
 8006704:	095b      	lsrs	r3, r3, #5
 8006706:	b2db      	uxtb	r3, r3
 8006708:	f043 0302 	orr.w	r3, r3, #2
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b02      	cmp	r3, #2
 8006710:	d108      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006712:	4b01      	ldr	r3, [pc, #4]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	e00d      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006718:	40021000 	.word	0x40021000
 800671c:	40007000 	.word	0x40007000
 8006720:	10908100 	.word	0x10908100
 8006724:	2302      	movs	r3, #2
 8006726:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	fa93 f3a3 	rbit	r3, r3
 800672e:	617b      	str	r3, [r7, #20]
 8006730:	4ba0      	ldr	r3, [pc, #640]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	2202      	movs	r2, #2
 8006736:	613a      	str	r2, [r7, #16]
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	fa92 f2a2 	rbit	r2, r2
 800673e:	60fa      	str	r2, [r7, #12]
  return result;
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	fab2 f282 	clz	r2, r2
 8006746:	b2d2      	uxtb	r2, r2
 8006748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800674c:	b2d2      	uxtb	r2, r2
 800674e:	f002 021f 	and.w	r2, r2, #31
 8006752:	2101      	movs	r1, #1
 8006754:	fa01 f202 	lsl.w	r2, r1, r2
 8006758:	4013      	ands	r3, r2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d0b7      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800675e:	4b95      	ldr	r3, [pc, #596]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	4992      	ldr	r1, [pc, #584]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800676c:	4313      	orrs	r3, r2
 800676e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006770:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006774:	2b01      	cmp	r3, #1
 8006776:	d105      	bne.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006778:	4b8e      	ldr	r3, [pc, #568]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	4a8d      	ldr	r2, [pc, #564]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800677e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006782:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d008      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006790:	4b88      	ldr	r3, [pc, #544]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006794:	f023 0203 	bic.w	r2, r3, #3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	4985      	ldr	r1, [pc, #532]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d008      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067ae:	4b81      	ldr	r3, [pc, #516]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80067b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	497e      	ldr	r1, [pc, #504]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d008      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067cc:	4b79      	ldr	r3, [pc, #484]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80067ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	4976      	ldr	r1, [pc, #472]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0320 	and.w	r3, r3, #32
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d008      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067ea:	4b72      	ldr	r3, [pc, #456]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80067ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ee:	f023 0210 	bic.w	r2, r3, #16
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	496f      	ldr	r1, [pc, #444]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d008      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006808:	4b6a      	ldr	r3, [pc, #424]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006814:	4967      	ldr	r1, [pc, #412]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006816:	4313      	orrs	r3, r2
 8006818:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006822:	2b00      	cmp	r3, #0
 8006824:	d008      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006826:	4b63      	ldr	r3, [pc, #396]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682a:	f023 0220 	bic.w	r2, r3, #32
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	4960      	ldr	r1, [pc, #384]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006834:	4313      	orrs	r3, r2
 8006836:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d008      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006844:	4b5b      	ldr	r3, [pc, #364]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006848:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	4958      	ldr	r1, [pc, #352]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006852:	4313      	orrs	r3, r2
 8006854:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	2b00      	cmp	r3, #0
 8006860:	d008      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006862:	4b54      	ldr	r3, [pc, #336]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006866:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	4951      	ldr	r1, [pc, #324]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006870:	4313      	orrs	r3, r2
 8006872:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0310 	and.w	r3, r3, #16
 800687c:	2b00      	cmp	r3, #0
 800687e:	d008      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006880:	4b4c      	ldr	r3, [pc, #304]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006884:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	4949      	ldr	r1, [pc, #292]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800688e:	4313      	orrs	r3, r2
 8006890:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800689a:	2b00      	cmp	r3, #0
 800689c:	d008      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800689e:	4b45      	ldr	r3, [pc, #276]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068aa:	4942      	ldr	r1, [pc, #264]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d008      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80068bc:	4b3d      	ldr	r3, [pc, #244]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80068be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c8:	493a      	ldr	r1, [pc, #232]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d008      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80068da:	4b36      	ldr	r3, [pc, #216]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80068dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068de:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e6:	4933      	ldr	r1, [pc, #204]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d008      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80068f8:	4b2e      	ldr	r3, [pc, #184]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80068fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006904:	492b      	ldr	r1, [pc, #172]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006906:	4313      	orrs	r3, r2
 8006908:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d008      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006916:	4b27      	ldr	r3, [pc, #156]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	4924      	ldr	r1, [pc, #144]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006924:	4313      	orrs	r3, r2
 8006926:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d008      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8006934:	4b1f      	ldr	r3, [pc, #124]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006938:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	491c      	ldr	r1, [pc, #112]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006942:	4313      	orrs	r3, r2
 8006944:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d008      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8006952:	4b18      	ldr	r3, [pc, #96]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006956:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695e:	4915      	ldr	r1, [pc, #84]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006960:	4313      	orrs	r3, r2
 8006962:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d008      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006970:	4b10      	ldr	r3, [pc, #64]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006974:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697c:	490d      	ldr	r1, [pc, #52]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800697e:	4313      	orrs	r3, r2
 8006980:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d008      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800698e:	4b09      	ldr	r3, [pc, #36]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006992:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800699a:	4906      	ldr	r1, [pc, #24]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800699c:	4313      	orrs	r3, r2
 800699e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00c      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80069ac:	4b01      	ldr	r3, [pc, #4]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80069ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b0:	e002      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80069b2:	bf00      	nop
 80069b4:	40021000 	.word	0x40021000
 80069b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c0:	490b      	ldr	r1, [pc, #44]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d008      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80069d2:	4b07      	ldr	r3, [pc, #28]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80069d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069de:	4904      	ldr	r1, [pc, #16]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3748      	adds	r7, #72	; 0x48
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	40021000 	.word	0x40021000

080069f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e049      	b.n	8006a9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d106      	bne.n	8006a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7fb fc88 	bl	8002330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2202      	movs	r2, #2
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3304      	adds	r3, #4
 8006a30:	4619      	mov	r1, r3
 8006a32:	4610      	mov	r0, r2
 8006a34:	f000 fd1e 	bl	8007474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
	...

08006aa4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d001      	beq.n	8006abc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e047      	b.n	8006b4c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a23      	ldr	r2, [pc, #140]	; (8006b58 <HAL_TIM_Base_Start+0xb4>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d01d      	beq.n	8006b0a <HAL_TIM_Base_Start+0x66>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad6:	d018      	beq.n	8006b0a <HAL_TIM_Base_Start+0x66>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a1f      	ldr	r2, [pc, #124]	; (8006b5c <HAL_TIM_Base_Start+0xb8>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d013      	beq.n	8006b0a <HAL_TIM_Base_Start+0x66>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a1e      	ldr	r2, [pc, #120]	; (8006b60 <HAL_TIM_Base_Start+0xbc>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d00e      	beq.n	8006b0a <HAL_TIM_Base_Start+0x66>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a1c      	ldr	r2, [pc, #112]	; (8006b64 <HAL_TIM_Base_Start+0xc0>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d009      	beq.n	8006b0a <HAL_TIM_Base_Start+0x66>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a1b      	ldr	r2, [pc, #108]	; (8006b68 <HAL_TIM_Base_Start+0xc4>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d004      	beq.n	8006b0a <HAL_TIM_Base_Start+0x66>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a19      	ldr	r2, [pc, #100]	; (8006b6c <HAL_TIM_Base_Start+0xc8>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d115      	bne.n	8006b36 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	4b17      	ldr	r3, [pc, #92]	; (8006b70 <HAL_TIM_Base_Start+0xcc>)
 8006b12:	4013      	ands	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2b06      	cmp	r3, #6
 8006b1a:	d015      	beq.n	8006b48 <HAL_TIM_Base_Start+0xa4>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b22:	d011      	beq.n	8006b48 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0201 	orr.w	r2, r2, #1
 8006b32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b34:	e008      	b.n	8006b48 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f042 0201 	orr.w	r2, r2, #1
 8006b44:	601a      	str	r2, [r3, #0]
 8006b46:	e000      	b.n	8006b4a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3714      	adds	r7, #20
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	40012c00 	.word	0x40012c00
 8006b5c:	40000400 	.word	0x40000400
 8006b60:	40000800 	.word	0x40000800
 8006b64:	40013400 	.word	0x40013400
 8006b68:	40014000 	.word	0x40014000
 8006b6c:	40015000 	.word	0x40015000
 8006b70:	00010007 	.word	0x00010007

08006b74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e049      	b.n	8006c1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d106      	bne.n	8006ba0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f841 	bl	8006c22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	3304      	adds	r3, #4
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	4610      	mov	r0, r2
 8006bb4:	f000 fc5e 	bl	8007474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b083      	sub	sp, #12
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c2a:	bf00      	nop
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
	...

08006c38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d109      	bne.n	8006c5c <HAL_TIM_PWM_Start+0x24>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	bf14      	ite	ne
 8006c54:	2301      	movne	r3, #1
 8006c56:	2300      	moveq	r3, #0
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	e03c      	b.n	8006cd6 <HAL_TIM_PWM_Start+0x9e>
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	2b04      	cmp	r3, #4
 8006c60:	d109      	bne.n	8006c76 <HAL_TIM_PWM_Start+0x3e>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	bf14      	ite	ne
 8006c6e:	2301      	movne	r3, #1
 8006c70:	2300      	moveq	r3, #0
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	e02f      	b.n	8006cd6 <HAL_TIM_PWM_Start+0x9e>
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b08      	cmp	r3, #8
 8006c7a:	d109      	bne.n	8006c90 <HAL_TIM_PWM_Start+0x58>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	bf14      	ite	ne
 8006c88:	2301      	movne	r3, #1
 8006c8a:	2300      	moveq	r3, #0
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	e022      	b.n	8006cd6 <HAL_TIM_PWM_Start+0x9e>
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	2b0c      	cmp	r3, #12
 8006c94:	d109      	bne.n	8006caa <HAL_TIM_PWM_Start+0x72>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	bf14      	ite	ne
 8006ca2:	2301      	movne	r3, #1
 8006ca4:	2300      	moveq	r3, #0
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	e015      	b.n	8006cd6 <HAL_TIM_PWM_Start+0x9e>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b10      	cmp	r3, #16
 8006cae:	d109      	bne.n	8006cc4 <HAL_TIM_PWM_Start+0x8c>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	bf14      	ite	ne
 8006cbc:	2301      	movne	r3, #1
 8006cbe:	2300      	moveq	r3, #0
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	e008      	b.n	8006cd6 <HAL_TIM_PWM_Start+0x9e>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	bf14      	ite	ne
 8006cd0:	2301      	movne	r3, #1
 8006cd2:	2300      	moveq	r3, #0
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e0a1      	b.n	8006e22 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d104      	bne.n	8006cee <HAL_TIM_PWM_Start+0xb6>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cec:	e023      	b.n	8006d36 <HAL_TIM_PWM_Start+0xfe>
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d104      	bne.n	8006cfe <HAL_TIM_PWM_Start+0xc6>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cfc:	e01b      	b.n	8006d36 <HAL_TIM_PWM_Start+0xfe>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b08      	cmp	r3, #8
 8006d02:	d104      	bne.n	8006d0e <HAL_TIM_PWM_Start+0xd6>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d0c:	e013      	b.n	8006d36 <HAL_TIM_PWM_Start+0xfe>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b0c      	cmp	r3, #12
 8006d12:	d104      	bne.n	8006d1e <HAL_TIM_PWM_Start+0xe6>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d1c:	e00b      	b.n	8006d36 <HAL_TIM_PWM_Start+0xfe>
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b10      	cmp	r3, #16
 8006d22:	d104      	bne.n	8006d2e <HAL_TIM_PWM_Start+0xf6>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2202      	movs	r2, #2
 8006d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d2c:	e003      	b.n	8006d36 <HAL_TIM_PWM_Start+0xfe>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2202      	movs	r2, #2
 8006d32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	6839      	ldr	r1, [r7, #0]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 ffd6 	bl	8007cf0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a38      	ldr	r2, [pc, #224]	; (8006e2c <HAL_TIM_PWM_Start+0x1f4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d018      	beq.n	8006d80 <HAL_TIM_PWM_Start+0x148>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a37      	ldr	r2, [pc, #220]	; (8006e30 <HAL_TIM_PWM_Start+0x1f8>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d013      	beq.n	8006d80 <HAL_TIM_PWM_Start+0x148>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a35      	ldr	r2, [pc, #212]	; (8006e34 <HAL_TIM_PWM_Start+0x1fc>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d00e      	beq.n	8006d80 <HAL_TIM_PWM_Start+0x148>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a34      	ldr	r2, [pc, #208]	; (8006e38 <HAL_TIM_PWM_Start+0x200>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d009      	beq.n	8006d80 <HAL_TIM_PWM_Start+0x148>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a32      	ldr	r2, [pc, #200]	; (8006e3c <HAL_TIM_PWM_Start+0x204>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d004      	beq.n	8006d80 <HAL_TIM_PWM_Start+0x148>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a31      	ldr	r2, [pc, #196]	; (8006e40 <HAL_TIM_PWM_Start+0x208>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d101      	bne.n	8006d84 <HAL_TIM_PWM_Start+0x14c>
 8006d80:	2301      	movs	r3, #1
 8006d82:	e000      	b.n	8006d86 <HAL_TIM_PWM_Start+0x14e>
 8006d84:	2300      	movs	r3, #0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d007      	beq.n	8006d9a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a23      	ldr	r2, [pc, #140]	; (8006e2c <HAL_TIM_PWM_Start+0x1f4>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d01d      	beq.n	8006de0 <HAL_TIM_PWM_Start+0x1a8>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dac:	d018      	beq.n	8006de0 <HAL_TIM_PWM_Start+0x1a8>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a24      	ldr	r2, [pc, #144]	; (8006e44 <HAL_TIM_PWM_Start+0x20c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d013      	beq.n	8006de0 <HAL_TIM_PWM_Start+0x1a8>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a22      	ldr	r2, [pc, #136]	; (8006e48 <HAL_TIM_PWM_Start+0x210>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d00e      	beq.n	8006de0 <HAL_TIM_PWM_Start+0x1a8>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a1a      	ldr	r2, [pc, #104]	; (8006e30 <HAL_TIM_PWM_Start+0x1f8>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d009      	beq.n	8006de0 <HAL_TIM_PWM_Start+0x1a8>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a18      	ldr	r2, [pc, #96]	; (8006e34 <HAL_TIM_PWM_Start+0x1fc>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d004      	beq.n	8006de0 <HAL_TIM_PWM_Start+0x1a8>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a19      	ldr	r2, [pc, #100]	; (8006e40 <HAL_TIM_PWM_Start+0x208>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d115      	bne.n	8006e0c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689a      	ldr	r2, [r3, #8]
 8006de6:	4b19      	ldr	r3, [pc, #100]	; (8006e4c <HAL_TIM_PWM_Start+0x214>)
 8006de8:	4013      	ands	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2b06      	cmp	r3, #6
 8006df0:	d015      	beq.n	8006e1e <HAL_TIM_PWM_Start+0x1e6>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df8:	d011      	beq.n	8006e1e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f042 0201 	orr.w	r2, r2, #1
 8006e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e0a:	e008      	b.n	8006e1e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f042 0201 	orr.w	r2, r2, #1
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	e000      	b.n	8006e20 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	40012c00 	.word	0x40012c00
 8006e30:	40013400 	.word	0x40013400
 8006e34:	40014000 	.word	0x40014000
 8006e38:	40014400 	.word	0x40014400
 8006e3c:	40014800 	.word	0x40014800
 8006e40:	40015000 	.word	0x40015000
 8006e44:	40000400 	.word	0x40000400
 8006e48:	40000800 	.word	0x40000800
 8006e4c:	00010007 	.word	0x00010007

08006e50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d122      	bne.n	8006eac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f003 0302 	and.w	r3, r3, #2
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d11b      	bne.n	8006eac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f06f 0202 	mvn.w	r2, #2
 8006e7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	f003 0303 	and.w	r3, r3, #3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 facf 	bl	8007436 <HAL_TIM_IC_CaptureCallback>
 8006e98:	e005      	b.n	8006ea6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fac1 	bl	8007422 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fad2 	bl	800744a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	f003 0304 	and.w	r3, r3, #4
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	d122      	bne.n	8006f00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b04      	cmp	r3, #4
 8006ec6:	d11b      	bne.n	8006f00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f06f 0204 	mvn.w	r2, #4
 8006ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2202      	movs	r2, #2
 8006ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 faa5 	bl	8007436 <HAL_TIM_IC_CaptureCallback>
 8006eec:	e005      	b.n	8006efa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fa97 	bl	8007422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 faa8 	bl	800744a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	f003 0308 	and.w	r3, r3, #8
 8006f0a:	2b08      	cmp	r3, #8
 8006f0c:	d122      	bne.n	8006f54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f003 0308 	and.w	r3, r3, #8
 8006f18:	2b08      	cmp	r3, #8
 8006f1a:	d11b      	bne.n	8006f54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f06f 0208 	mvn.w	r2, #8
 8006f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2204      	movs	r2, #4
 8006f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	f003 0303 	and.w	r3, r3, #3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fa7b 	bl	8007436 <HAL_TIM_IC_CaptureCallback>
 8006f40:	e005      	b.n	8006f4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fa6d 	bl	8007422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fa7e 	bl	800744a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	f003 0310 	and.w	r3, r3, #16
 8006f5e:	2b10      	cmp	r3, #16
 8006f60:	d122      	bne.n	8006fa8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	f003 0310 	and.w	r3, r3, #16
 8006f6c:	2b10      	cmp	r3, #16
 8006f6e:	d11b      	bne.n	8006fa8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f06f 0210 	mvn.w	r2, #16
 8006f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2208      	movs	r2, #8
 8006f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fa51 	bl	8007436 <HAL_TIM_IC_CaptureCallback>
 8006f94:	e005      	b.n	8006fa2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fa43 	bl	8007422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fa54 	bl	800744a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d10e      	bne.n	8006fd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d107      	bne.n	8006fd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f06f 0201 	mvn.w	r2, #1
 8006fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7fa fa36 	bl	8001440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fde:	2b80      	cmp	r3, #128	; 0x80
 8006fe0:	d10e      	bne.n	8007000 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fec:	2b80      	cmp	r3, #128	; 0x80
 8006fee:	d107      	bne.n	8007000 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 ff34 	bl	8007e68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800700a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800700e:	d10e      	bne.n	800702e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701a:	2b80      	cmp	r3, #128	; 0x80
 800701c:	d107      	bne.n	800702e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 ff27 	bl	8007e7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007038:	2b40      	cmp	r3, #64	; 0x40
 800703a:	d10e      	bne.n	800705a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007046:	2b40      	cmp	r3, #64	; 0x40
 8007048:	d107      	bne.n	800705a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fa02 	bl	800745e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	f003 0320 	and.w	r3, r3, #32
 8007064:	2b20      	cmp	r3, #32
 8007066:	d10e      	bne.n	8007086 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b20      	cmp	r3, #32
 8007074:	d107      	bne.n	8007086 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f06f 0220 	mvn.w	r2, #32
 800707e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fee7 	bl	8007e54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007086:	bf00      	nop
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
	...

08007090 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d101      	bne.n	80070aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80070a6:	2302      	movs	r3, #2
 80070a8:	e0fd      	b.n	80072a6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b14      	cmp	r3, #20
 80070b6:	f200 80f0 	bhi.w	800729a <HAL_TIM_PWM_ConfigChannel+0x20a>
 80070ba:	a201      	add	r2, pc, #4	; (adr r2, 80070c0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80070bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c0:	08007115 	.word	0x08007115
 80070c4:	0800729b 	.word	0x0800729b
 80070c8:	0800729b 	.word	0x0800729b
 80070cc:	0800729b 	.word	0x0800729b
 80070d0:	08007155 	.word	0x08007155
 80070d4:	0800729b 	.word	0x0800729b
 80070d8:	0800729b 	.word	0x0800729b
 80070dc:	0800729b 	.word	0x0800729b
 80070e0:	08007197 	.word	0x08007197
 80070e4:	0800729b 	.word	0x0800729b
 80070e8:	0800729b 	.word	0x0800729b
 80070ec:	0800729b 	.word	0x0800729b
 80070f0:	080071d7 	.word	0x080071d7
 80070f4:	0800729b 	.word	0x0800729b
 80070f8:	0800729b 	.word	0x0800729b
 80070fc:	0800729b 	.word	0x0800729b
 8007100:	08007219 	.word	0x08007219
 8007104:	0800729b 	.word	0x0800729b
 8007108:	0800729b 	.word	0x0800729b
 800710c:	0800729b 	.word	0x0800729b
 8007110:	08007259 	.word	0x08007259
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68b9      	ldr	r1, [r7, #8]
 800711a:	4618      	mov	r0, r3
 800711c:	f000 fa48 	bl	80075b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	699a      	ldr	r2, [r3, #24]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f042 0208 	orr.w	r2, r2, #8
 800712e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	699a      	ldr	r2, [r3, #24]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 0204 	bic.w	r2, r2, #4
 800713e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6999      	ldr	r1, [r3, #24]
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	691a      	ldr	r2, [r3, #16]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	619a      	str	r2, [r3, #24]
      break;
 8007152:	e0a3      	b.n	800729c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68b9      	ldr	r1, [r7, #8]
 800715a:	4618      	mov	r0, r3
 800715c:	f000 fac2 	bl	80076e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	699a      	ldr	r2, [r3, #24]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800716e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	699a      	ldr	r2, [r3, #24]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800717e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6999      	ldr	r1, [r3, #24]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	021a      	lsls	r2, r3, #8
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	619a      	str	r2, [r3, #24]
      break;
 8007194:	e082      	b.n	800729c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68b9      	ldr	r1, [r7, #8]
 800719c:	4618      	mov	r0, r3
 800719e:	f000 fb35 	bl	800780c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	69da      	ldr	r2, [r3, #28]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f042 0208 	orr.w	r2, r2, #8
 80071b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	69da      	ldr	r2, [r3, #28]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 0204 	bic.w	r2, r2, #4
 80071c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	69d9      	ldr	r1, [r3, #28]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	691a      	ldr	r2, [r3, #16]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	61da      	str	r2, [r3, #28]
      break;
 80071d4:	e062      	b.n	800729c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68b9      	ldr	r1, [r7, #8]
 80071dc:	4618      	mov	r0, r3
 80071de:	f000 fba7 	bl	8007930 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	69da      	ldr	r2, [r3, #28]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	69da      	ldr	r2, [r3, #28]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	69d9      	ldr	r1, [r3, #28]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	021a      	lsls	r2, r3, #8
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	61da      	str	r2, [r3, #28]
      break;
 8007216:	e041      	b.n	800729c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68b9      	ldr	r1, [r7, #8]
 800721e:	4618      	mov	r0, r3
 8007220:	f000 fbf6 	bl	8007a10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f042 0208 	orr.w	r2, r2, #8
 8007232:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 0204 	bic.w	r2, r2, #4
 8007242:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	691a      	ldr	r2, [r3, #16]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007256:	e021      	b.n	800729c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68b9      	ldr	r1, [r7, #8]
 800725e:	4618      	mov	r0, r3
 8007260:	f000 fc40 	bl	8007ae4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007272:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007282:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	021a      	lsls	r2, r3, #8
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	430a      	orrs	r2, r1
 8007296:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007298:	e000      	b.n	800729c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 800729a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop

080072b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d101      	bne.n	80072c8 <HAL_TIM_ConfigClockSource+0x18>
 80072c4:	2302      	movs	r3, #2
 80072c6:	e0a8      	b.n	800741a <HAL_TIM_ConfigClockSource+0x16a>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2202      	movs	r2, #2
 80072d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b40      	cmp	r3, #64	; 0x40
 8007302:	d067      	beq.n	80073d4 <HAL_TIM_ConfigClockSource+0x124>
 8007304:	2b40      	cmp	r3, #64	; 0x40
 8007306:	d80b      	bhi.n	8007320 <HAL_TIM_ConfigClockSource+0x70>
 8007308:	2b10      	cmp	r3, #16
 800730a:	d073      	beq.n	80073f4 <HAL_TIM_ConfigClockSource+0x144>
 800730c:	2b10      	cmp	r3, #16
 800730e:	d802      	bhi.n	8007316 <HAL_TIM_ConfigClockSource+0x66>
 8007310:	2b00      	cmp	r3, #0
 8007312:	d06f      	beq.n	80073f4 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007314:	e078      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007316:	2b20      	cmp	r3, #32
 8007318:	d06c      	beq.n	80073f4 <HAL_TIM_ConfigClockSource+0x144>
 800731a:	2b30      	cmp	r3, #48	; 0x30
 800731c:	d06a      	beq.n	80073f4 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800731e:	e073      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007320:	2b70      	cmp	r3, #112	; 0x70
 8007322:	d00d      	beq.n	8007340 <HAL_TIM_ConfigClockSource+0x90>
 8007324:	2b70      	cmp	r3, #112	; 0x70
 8007326:	d804      	bhi.n	8007332 <HAL_TIM_ConfigClockSource+0x82>
 8007328:	2b50      	cmp	r3, #80	; 0x50
 800732a:	d033      	beq.n	8007394 <HAL_TIM_ConfigClockSource+0xe4>
 800732c:	2b60      	cmp	r3, #96	; 0x60
 800732e:	d041      	beq.n	80073b4 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8007330:	e06a      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007336:	d066      	beq.n	8007406 <HAL_TIM_ConfigClockSource+0x156>
 8007338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800733c:	d017      	beq.n	800736e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800733e:	e063      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6818      	ldr	r0, [r3, #0]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	6899      	ldr	r1, [r3, #8]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	685a      	ldr	r2, [r3, #4]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	f000 fcae 	bl	8007cb0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007362:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	609a      	str	r2, [r3, #8]
      break;
 800736c:	e04c      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6818      	ldr	r0, [r3, #0]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	6899      	ldr	r1, [r3, #8]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	f000 fc97 	bl	8007cb0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007390:	609a      	str	r2, [r3, #8]
      break;
 8007392:	e039      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6818      	ldr	r0, [r3, #0]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	6859      	ldr	r1, [r3, #4]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	461a      	mov	r2, r3
 80073a2:	f000 fc0b 	bl	8007bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2150      	movs	r1, #80	; 0x50
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 fc64 	bl	8007c7a <TIM_ITRx_SetConfig>
      break;
 80073b2:	e029      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6818      	ldr	r0, [r3, #0]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	6859      	ldr	r1, [r3, #4]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	461a      	mov	r2, r3
 80073c2:	f000 fc2a 	bl	8007c1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2160      	movs	r1, #96	; 0x60
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 fc54 	bl	8007c7a <TIM_ITRx_SetConfig>
      break;
 80073d2:	e019      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6818      	ldr	r0, [r3, #0]
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	6859      	ldr	r1, [r3, #4]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	461a      	mov	r2, r3
 80073e2:	f000 fbeb 	bl	8007bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2140      	movs	r1, #64	; 0x40
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 fc44 	bl	8007c7a <TIM_ITRx_SetConfig>
      break;
 80073f2:	e009      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4619      	mov	r1, r3
 80073fe:	4610      	mov	r0, r2
 8007400:	f000 fc3b 	bl	8007c7a <TIM_ITRx_SetConfig>
        break;
 8007404:	e000      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8007406:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007422:	b480      	push	{r7}
 8007424:	b083      	sub	sp, #12
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800742a:	bf00      	nop
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007436:	b480      	push	{r7}
 8007438:	b083      	sub	sp, #12
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800743e:	bf00      	nop
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007452:	bf00      	nop
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800745e:	b480      	push	{r7}
 8007460:	b083      	sub	sp, #12
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007466:	bf00      	nop
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
	...

08007474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a42      	ldr	r2, [pc, #264]	; (8007590 <TIM_Base_SetConfig+0x11c>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d013      	beq.n	80074b4 <TIM_Base_SetConfig+0x40>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007492:	d00f      	beq.n	80074b4 <TIM_Base_SetConfig+0x40>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a3f      	ldr	r2, [pc, #252]	; (8007594 <TIM_Base_SetConfig+0x120>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d00b      	beq.n	80074b4 <TIM_Base_SetConfig+0x40>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a3e      	ldr	r2, [pc, #248]	; (8007598 <TIM_Base_SetConfig+0x124>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d007      	beq.n	80074b4 <TIM_Base_SetConfig+0x40>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a3d      	ldr	r2, [pc, #244]	; (800759c <TIM_Base_SetConfig+0x128>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d003      	beq.n	80074b4 <TIM_Base_SetConfig+0x40>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a3c      	ldr	r2, [pc, #240]	; (80075a0 <TIM_Base_SetConfig+0x12c>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d108      	bne.n	80074c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a31      	ldr	r2, [pc, #196]	; (8007590 <TIM_Base_SetConfig+0x11c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d01f      	beq.n	800750e <TIM_Base_SetConfig+0x9a>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074d4:	d01b      	beq.n	800750e <TIM_Base_SetConfig+0x9a>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a2e      	ldr	r2, [pc, #184]	; (8007594 <TIM_Base_SetConfig+0x120>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d017      	beq.n	800750e <TIM_Base_SetConfig+0x9a>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a2d      	ldr	r2, [pc, #180]	; (8007598 <TIM_Base_SetConfig+0x124>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d013      	beq.n	800750e <TIM_Base_SetConfig+0x9a>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a2c      	ldr	r2, [pc, #176]	; (800759c <TIM_Base_SetConfig+0x128>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d00f      	beq.n	800750e <TIM_Base_SetConfig+0x9a>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a2c      	ldr	r2, [pc, #176]	; (80075a4 <TIM_Base_SetConfig+0x130>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d00b      	beq.n	800750e <TIM_Base_SetConfig+0x9a>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a2b      	ldr	r2, [pc, #172]	; (80075a8 <TIM_Base_SetConfig+0x134>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d007      	beq.n	800750e <TIM_Base_SetConfig+0x9a>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a2a      	ldr	r2, [pc, #168]	; (80075ac <TIM_Base_SetConfig+0x138>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d003      	beq.n	800750e <TIM_Base_SetConfig+0x9a>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a25      	ldr	r2, [pc, #148]	; (80075a0 <TIM_Base_SetConfig+0x12c>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d108      	bne.n	8007520 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	4313      	orrs	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	689a      	ldr	r2, [r3, #8]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a12      	ldr	r2, [pc, #72]	; (8007590 <TIM_Base_SetConfig+0x11c>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d013      	beq.n	8007574 <TIM_Base_SetConfig+0x100>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a13      	ldr	r2, [pc, #76]	; (800759c <TIM_Base_SetConfig+0x128>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d00f      	beq.n	8007574 <TIM_Base_SetConfig+0x100>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a13      	ldr	r2, [pc, #76]	; (80075a4 <TIM_Base_SetConfig+0x130>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d00b      	beq.n	8007574 <TIM_Base_SetConfig+0x100>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a12      	ldr	r2, [pc, #72]	; (80075a8 <TIM_Base_SetConfig+0x134>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d007      	beq.n	8007574 <TIM_Base_SetConfig+0x100>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a11      	ldr	r2, [pc, #68]	; (80075ac <TIM_Base_SetConfig+0x138>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d003      	beq.n	8007574 <TIM_Base_SetConfig+0x100>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a0c      	ldr	r2, [pc, #48]	; (80075a0 <TIM_Base_SetConfig+0x12c>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d103      	bne.n	800757c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	691a      	ldr	r2, [r3, #16]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	615a      	str	r2, [r3, #20]
}
 8007582:	bf00      	nop
 8007584:	3714      	adds	r7, #20
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	40012c00 	.word	0x40012c00
 8007594:	40000400 	.word	0x40000400
 8007598:	40000800 	.word	0x40000800
 800759c:	40013400 	.word	0x40013400
 80075a0:	40015000 	.word	0x40015000
 80075a4:	40014000 	.word	0x40014000
 80075a8:	40014400 	.word	0x40014400
 80075ac:	40014800 	.word	0x40014800

080075b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b087      	sub	sp, #28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	f023 0201 	bic.w	r2, r3, #1
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f023 0303 	bic.w	r3, r3, #3
 80075ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	f023 0302 	bic.w	r3, r3, #2
 80075fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	4313      	orrs	r3, r2
 8007606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a30      	ldr	r2, [pc, #192]	; (80076cc <TIM_OC1_SetConfig+0x11c>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d013      	beq.n	8007638 <TIM_OC1_SetConfig+0x88>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a2f      	ldr	r2, [pc, #188]	; (80076d0 <TIM_OC1_SetConfig+0x120>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d00f      	beq.n	8007638 <TIM_OC1_SetConfig+0x88>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a2e      	ldr	r2, [pc, #184]	; (80076d4 <TIM_OC1_SetConfig+0x124>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d00b      	beq.n	8007638 <TIM_OC1_SetConfig+0x88>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a2d      	ldr	r2, [pc, #180]	; (80076d8 <TIM_OC1_SetConfig+0x128>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d007      	beq.n	8007638 <TIM_OC1_SetConfig+0x88>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a2c      	ldr	r2, [pc, #176]	; (80076dc <TIM_OC1_SetConfig+0x12c>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d003      	beq.n	8007638 <TIM_OC1_SetConfig+0x88>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a2b      	ldr	r2, [pc, #172]	; (80076e0 <TIM_OC1_SetConfig+0x130>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d10c      	bne.n	8007652 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	f023 0308 	bic.w	r3, r3, #8
 800763e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	4313      	orrs	r3, r2
 8007648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f023 0304 	bic.w	r3, r3, #4
 8007650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a1d      	ldr	r2, [pc, #116]	; (80076cc <TIM_OC1_SetConfig+0x11c>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d013      	beq.n	8007682 <TIM_OC1_SetConfig+0xd2>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a1c      	ldr	r2, [pc, #112]	; (80076d0 <TIM_OC1_SetConfig+0x120>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d00f      	beq.n	8007682 <TIM_OC1_SetConfig+0xd2>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a1b      	ldr	r2, [pc, #108]	; (80076d4 <TIM_OC1_SetConfig+0x124>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d00b      	beq.n	8007682 <TIM_OC1_SetConfig+0xd2>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a1a      	ldr	r2, [pc, #104]	; (80076d8 <TIM_OC1_SetConfig+0x128>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d007      	beq.n	8007682 <TIM_OC1_SetConfig+0xd2>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a19      	ldr	r2, [pc, #100]	; (80076dc <TIM_OC1_SetConfig+0x12c>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d003      	beq.n	8007682 <TIM_OC1_SetConfig+0xd2>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a18      	ldr	r2, [pc, #96]	; (80076e0 <TIM_OC1_SetConfig+0x130>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d111      	bne.n	80076a6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	4313      	orrs	r3, r2
 800769a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	621a      	str	r2, [r3, #32]
}
 80076c0:	bf00      	nop
 80076c2:	371c      	adds	r7, #28
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	40012c00 	.word	0x40012c00
 80076d0:	40013400 	.word	0x40013400
 80076d4:	40014000 	.word	0x40014000
 80076d8:	40014400 	.word	0x40014400
 80076dc:	40014800 	.word	0x40014800
 80076e0:	40015000 	.word	0x40015000

080076e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b087      	sub	sp, #28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	f023 0210 	bic.w	r2, r3, #16
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800771e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	021b      	lsls	r3, r3, #8
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	4313      	orrs	r3, r2
 800772a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f023 0320 	bic.w	r3, r3, #32
 8007732:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	011b      	lsls	r3, r3, #4
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	4313      	orrs	r3, r2
 800773e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a2c      	ldr	r2, [pc, #176]	; (80077f4 <TIM_OC2_SetConfig+0x110>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d007      	beq.n	8007758 <TIM_OC2_SetConfig+0x74>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a2b      	ldr	r2, [pc, #172]	; (80077f8 <TIM_OC2_SetConfig+0x114>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d003      	beq.n	8007758 <TIM_OC2_SetConfig+0x74>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a2a      	ldr	r2, [pc, #168]	; (80077fc <TIM_OC2_SetConfig+0x118>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d10d      	bne.n	8007774 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800775e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	011b      	lsls	r3, r3, #4
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	4313      	orrs	r3, r2
 800776a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007772:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a1f      	ldr	r2, [pc, #124]	; (80077f4 <TIM_OC2_SetConfig+0x110>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d013      	beq.n	80077a4 <TIM_OC2_SetConfig+0xc0>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a1e      	ldr	r2, [pc, #120]	; (80077f8 <TIM_OC2_SetConfig+0x114>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d00f      	beq.n	80077a4 <TIM_OC2_SetConfig+0xc0>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a1e      	ldr	r2, [pc, #120]	; (8007800 <TIM_OC2_SetConfig+0x11c>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d00b      	beq.n	80077a4 <TIM_OC2_SetConfig+0xc0>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4a1d      	ldr	r2, [pc, #116]	; (8007804 <TIM_OC2_SetConfig+0x120>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d007      	beq.n	80077a4 <TIM_OC2_SetConfig+0xc0>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a1c      	ldr	r2, [pc, #112]	; (8007808 <TIM_OC2_SetConfig+0x124>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d003      	beq.n	80077a4 <TIM_OC2_SetConfig+0xc0>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a17      	ldr	r2, [pc, #92]	; (80077fc <TIM_OC2_SetConfig+0x118>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d113      	bne.n	80077cc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077aa:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077b2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	695b      	ldr	r3, [r3, #20]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	4313      	orrs	r3, r2
 80077be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	685a      	ldr	r2, [r3, #4]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	621a      	str	r2, [r3, #32]
}
 80077e6:	bf00      	nop
 80077e8:	371c      	adds	r7, #28
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	40012c00 	.word	0x40012c00
 80077f8:	40013400 	.word	0x40013400
 80077fc:	40015000 	.word	0x40015000
 8007800:	40014000 	.word	0x40014000
 8007804:	40014400 	.word	0x40014400
 8007808:	40014800 	.word	0x40014800

0800780c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800780c:	b480      	push	{r7}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a1b      	ldr	r3, [r3, #32]
 800781a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a1b      	ldr	r3, [r3, #32]
 8007826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	69db      	ldr	r3, [r3, #28]
 8007832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800783a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800783e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f023 0303 	bic.w	r3, r3, #3
 8007846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	4313      	orrs	r3, r2
 8007850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	021b      	lsls	r3, r3, #8
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	4313      	orrs	r3, r2
 8007864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a2b      	ldr	r2, [pc, #172]	; (8007918 <TIM_OC3_SetConfig+0x10c>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d007      	beq.n	800787e <TIM_OC3_SetConfig+0x72>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a2a      	ldr	r2, [pc, #168]	; (800791c <TIM_OC3_SetConfig+0x110>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d003      	beq.n	800787e <TIM_OC3_SetConfig+0x72>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a29      	ldr	r2, [pc, #164]	; (8007920 <TIM_OC3_SetConfig+0x114>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d10d      	bne.n	800789a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	021b      	lsls	r3, r3, #8
 800788c:	697a      	ldr	r2, [r7, #20]
 800788e:	4313      	orrs	r3, r2
 8007890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007898:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a1e      	ldr	r2, [pc, #120]	; (8007918 <TIM_OC3_SetConfig+0x10c>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d013      	beq.n	80078ca <TIM_OC3_SetConfig+0xbe>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a1d      	ldr	r2, [pc, #116]	; (800791c <TIM_OC3_SetConfig+0x110>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d00f      	beq.n	80078ca <TIM_OC3_SetConfig+0xbe>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a1d      	ldr	r2, [pc, #116]	; (8007924 <TIM_OC3_SetConfig+0x118>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d00b      	beq.n	80078ca <TIM_OC3_SetConfig+0xbe>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a1c      	ldr	r2, [pc, #112]	; (8007928 <TIM_OC3_SetConfig+0x11c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d007      	beq.n	80078ca <TIM_OC3_SetConfig+0xbe>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a1b      	ldr	r2, [pc, #108]	; (800792c <TIM_OC3_SetConfig+0x120>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d003      	beq.n	80078ca <TIM_OC3_SetConfig+0xbe>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a16      	ldr	r2, [pc, #88]	; (8007920 <TIM_OC3_SetConfig+0x114>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d113      	bne.n	80078f2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	011b      	lsls	r3, r3, #4
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	699b      	ldr	r3, [r3, #24]
 80078ea:	011b      	lsls	r3, r3, #4
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	685a      	ldr	r2, [r3, #4]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	621a      	str	r2, [r3, #32]
}
 800790c:	bf00      	nop
 800790e:	371c      	adds	r7, #28
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	40012c00 	.word	0x40012c00
 800791c:	40013400 	.word	0x40013400
 8007920:	40015000 	.word	0x40015000
 8007924:	40014000 	.word	0x40014000
 8007928:	40014400 	.word	0x40014400
 800792c:	40014800 	.word	0x40014800

08007930 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007930:	b480      	push	{r7}
 8007932:	b087      	sub	sp, #28
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a1b      	ldr	r3, [r3, #32]
 800793e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800795e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800796a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	021b      	lsls	r3, r3, #8
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	4313      	orrs	r3, r2
 8007976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800797e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	031b      	lsls	r3, r3, #12
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	4313      	orrs	r3, r2
 800798a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a1a      	ldr	r2, [pc, #104]	; (80079f8 <TIM_OC4_SetConfig+0xc8>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d013      	beq.n	80079bc <TIM_OC4_SetConfig+0x8c>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a19      	ldr	r2, [pc, #100]	; (80079fc <TIM_OC4_SetConfig+0xcc>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d00f      	beq.n	80079bc <TIM_OC4_SetConfig+0x8c>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a18      	ldr	r2, [pc, #96]	; (8007a00 <TIM_OC4_SetConfig+0xd0>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d00b      	beq.n	80079bc <TIM_OC4_SetConfig+0x8c>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a17      	ldr	r2, [pc, #92]	; (8007a04 <TIM_OC4_SetConfig+0xd4>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d007      	beq.n	80079bc <TIM_OC4_SetConfig+0x8c>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a16      	ldr	r2, [pc, #88]	; (8007a08 <TIM_OC4_SetConfig+0xd8>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d003      	beq.n	80079bc <TIM_OC4_SetConfig+0x8c>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a15      	ldr	r2, [pc, #84]	; (8007a0c <TIM_OC4_SetConfig+0xdc>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d109      	bne.n	80079d0 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	019b      	lsls	r3, r3, #6
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685a      	ldr	r2, [r3, #4]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	621a      	str	r2, [r3, #32]
}
 80079ea:	bf00      	nop
 80079ec:	371c      	adds	r7, #28
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	40012c00 	.word	0x40012c00
 80079fc:	40013400 	.word	0x40013400
 8007a00:	40014000 	.word	0x40014000
 8007a04:	40014400 	.word	0x40014400
 8007a08:	40014800 	.word	0x40014800
 8007a0c:	40015000 	.word	0x40015000

08007a10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b087      	sub	sp, #28
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007a54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	041b      	lsls	r3, r3, #16
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a19      	ldr	r2, [pc, #100]	; (8007acc <TIM_OC5_SetConfig+0xbc>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d013      	beq.n	8007a92 <TIM_OC5_SetConfig+0x82>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a18      	ldr	r2, [pc, #96]	; (8007ad0 <TIM_OC5_SetConfig+0xc0>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d00f      	beq.n	8007a92 <TIM_OC5_SetConfig+0x82>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a17      	ldr	r2, [pc, #92]	; (8007ad4 <TIM_OC5_SetConfig+0xc4>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d00b      	beq.n	8007a92 <TIM_OC5_SetConfig+0x82>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a16      	ldr	r2, [pc, #88]	; (8007ad8 <TIM_OC5_SetConfig+0xc8>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d007      	beq.n	8007a92 <TIM_OC5_SetConfig+0x82>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a15      	ldr	r2, [pc, #84]	; (8007adc <TIM_OC5_SetConfig+0xcc>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d003      	beq.n	8007a92 <TIM_OC5_SetConfig+0x82>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a14      	ldr	r2, [pc, #80]	; (8007ae0 <TIM_OC5_SetConfig+0xd0>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d109      	bne.n	8007aa6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	021b      	lsls	r3, r3, #8
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	621a      	str	r2, [r3, #32]
}
 8007ac0:	bf00      	nop
 8007ac2:	371c      	adds	r7, #28
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	40012c00 	.word	0x40012c00
 8007ad0:	40013400 	.word	0x40013400
 8007ad4:	40014000 	.word	0x40014000
 8007ad8:	40014400 	.word	0x40014400
 8007adc:	40014800 	.word	0x40014800
 8007ae0:	40015000 	.word	0x40015000

08007ae4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	021b      	lsls	r3, r3, #8
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	051b      	lsls	r3, r3, #20
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a1a      	ldr	r2, [pc, #104]	; (8007ba4 <TIM_OC6_SetConfig+0xc0>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d013      	beq.n	8007b68 <TIM_OC6_SetConfig+0x84>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a19      	ldr	r2, [pc, #100]	; (8007ba8 <TIM_OC6_SetConfig+0xc4>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d00f      	beq.n	8007b68 <TIM_OC6_SetConfig+0x84>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a18      	ldr	r2, [pc, #96]	; (8007bac <TIM_OC6_SetConfig+0xc8>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d00b      	beq.n	8007b68 <TIM_OC6_SetConfig+0x84>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a17      	ldr	r2, [pc, #92]	; (8007bb0 <TIM_OC6_SetConfig+0xcc>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d007      	beq.n	8007b68 <TIM_OC6_SetConfig+0x84>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a16      	ldr	r2, [pc, #88]	; (8007bb4 <TIM_OC6_SetConfig+0xd0>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d003      	beq.n	8007b68 <TIM_OC6_SetConfig+0x84>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a15      	ldr	r2, [pc, #84]	; (8007bb8 <TIM_OC6_SetConfig+0xd4>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d109      	bne.n	8007b7c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	029b      	lsls	r3, r3, #10
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	685a      	ldr	r2, [r3, #4]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	621a      	str	r2, [r3, #32]
}
 8007b96:	bf00      	nop
 8007b98:	371c      	adds	r7, #28
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	40012c00 	.word	0x40012c00
 8007ba8:	40013400 	.word	0x40013400
 8007bac:	40014000 	.word	0x40014000
 8007bb0:	40014400 	.word	0x40014400
 8007bb4:	40014800 	.word	0x40014800
 8007bb8:	40015000 	.word	0x40015000

08007bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b087      	sub	sp, #28
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	f023 0201 	bic.w	r2, r3, #1
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	011b      	lsls	r3, r3, #4
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f023 030a 	bic.w	r3, r3, #10
 8007bf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	621a      	str	r2, [r3, #32]
}
 8007c0e:	bf00      	nop
 8007c10:	371c      	adds	r7, #28
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b087      	sub	sp, #28
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	60f8      	str	r0, [r7, #12]
 8007c22:	60b9      	str	r1, [r7, #8]
 8007c24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	f023 0210 	bic.w	r2, r3, #16
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6a1b      	ldr	r3, [r3, #32]
 8007c3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	031b      	lsls	r3, r3, #12
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	011b      	lsls	r3, r3, #4
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	693a      	ldr	r2, [r7, #16]
 8007c6c:	621a      	str	r2, [r3, #32]
}
 8007c6e:	bf00      	nop
 8007c70:	371c      	adds	r7, #28
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b085      	sub	sp, #20
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	f043 0307 	orr.w	r3, r3, #7
 8007c9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	609a      	str	r2, [r3, #8]
}
 8007ca4:	bf00      	nop
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b087      	sub	sp, #28
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
 8007cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	021a      	lsls	r2, r3, #8
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	431a      	orrs	r2, r3
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	697a      	ldr	r2, [r7, #20]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	609a      	str	r2, [r3, #8]
}
 8007ce4:	bf00      	nop
 8007ce6:	371c      	adds	r7, #28
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f003 031f 	and.w	r3, r3, #31
 8007d02:	2201      	movs	r2, #1
 8007d04:	fa02 f303 	lsl.w	r3, r2, r3
 8007d08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6a1a      	ldr	r2, [r3, #32]
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	43db      	mvns	r3, r3
 8007d12:	401a      	ands	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6a1a      	ldr	r2, [r3, #32]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	f003 031f 	and.w	r3, r3, #31
 8007d22:	6879      	ldr	r1, [r7, #4]
 8007d24:	fa01 f303 	lsl.w	r3, r1, r3
 8007d28:	431a      	orrs	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	621a      	str	r2, [r3, #32]
}
 8007d2e:	bf00      	nop
 8007d30:	371c      	adds	r7, #28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
	...

08007d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d101      	bne.n	8007d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d50:	2302      	movs	r3, #2
 8007d52:	e06d      	b.n	8007e30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2202      	movs	r2, #2
 8007d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a30      	ldr	r2, [pc, #192]	; (8007e3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d009      	beq.n	8007d92 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a2f      	ldr	r2, [pc, #188]	; (8007e40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d004      	beq.n	8007d92 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a2d      	ldr	r2, [pc, #180]	; (8007e44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d108      	bne.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007d98:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007daa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a1e      	ldr	r2, [pc, #120]	; (8007e3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d01d      	beq.n	8007e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dd0:	d018      	beq.n	8007e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a1c      	ldr	r2, [pc, #112]	; (8007e48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d013      	beq.n	8007e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a1a      	ldr	r2, [pc, #104]	; (8007e4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d00e      	beq.n	8007e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a15      	ldr	r2, [pc, #84]	; (8007e40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d009      	beq.n	8007e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a16      	ldr	r2, [pc, #88]	; (8007e50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d004      	beq.n	8007e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a11      	ldr	r2, [pc, #68]	; (8007e44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d10c      	bne.n	8007e1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	40012c00 	.word	0x40012c00
 8007e40:	40013400 	.word	0x40013400
 8007e44:	40015000 	.word	0x40015000
 8007e48:	40000400 	.word	0x40000400
 8007e4c:	40000800 	.word	0x40000800
 8007e50:	40014000 	.word	0x40014000

08007e54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e84:	bf00      	nop
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e040      	b.n	8007f24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d106      	bne.n	8007eb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7fa faac 	bl	8002410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2224      	movs	r2, #36	; 0x24
 8007ebc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f022 0201 	bic.w	r2, r2, #1
 8007ecc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f992 	bl	80081f8 <UART_SetConfig>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d101      	bne.n	8007ede <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e022      	b.n	8007f24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d002      	beq.n	8007eec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fb5a 	bl	80085a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007efa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689a      	ldr	r2, [r3, #8]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f042 0201 	orr.w	r2, r2, #1
 8007f1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fbe1 	bl	80086e4 <UART_CheckIdleState>
 8007f22:	4603      	mov	r3, r0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b08a      	sub	sp, #40	; 0x28
 8007f30:	af02      	add	r7, sp, #8
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	603b      	str	r3, [r7, #0]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f40:	2b20      	cmp	r3, #32
 8007f42:	f040 8082 	bne.w	800804a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d002      	beq.n	8007f52 <HAL_UART_Transmit+0x26>
 8007f4c:	88fb      	ldrh	r3, [r7, #6]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e07a      	b.n	800804c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d101      	bne.n	8007f64 <HAL_UART_Transmit+0x38>
 8007f60:	2302      	movs	r3, #2
 8007f62:	e073      	b.n	800804c <HAL_UART_Transmit+0x120>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2221      	movs	r2, #33	; 0x21
 8007f78:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f7a:	f7fa fbd3 	bl	8002724 <HAL_GetTick>
 8007f7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	88fa      	ldrh	r2, [r7, #6]
 8007f84:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	88fa      	ldrh	r2, [r7, #6]
 8007f8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f98:	d108      	bne.n	8007fac <HAL_UART_Transmit+0x80>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d104      	bne.n	8007fac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	61bb      	str	r3, [r7, #24]
 8007faa:	e003      	b.n	8007fb4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007fbc:	e02d      	b.n	800801a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	2180      	movs	r1, #128	; 0x80
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f000 fbd4 	bl	8008776 <UART_WaitOnFlagUntilTimeout>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e039      	b.n	800804c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10b      	bne.n	8007ff6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	881a      	ldrh	r2, [r3, #0]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fea:	b292      	uxth	r2, r2
 8007fec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	3302      	adds	r3, #2
 8007ff2:	61bb      	str	r3, [r7, #24]
 8007ff4:	e008      	b.n	8008008 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	781a      	ldrb	r2, [r3, #0]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	b292      	uxth	r2, r2
 8008000:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	3301      	adds	r3, #1
 8008006:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800800e:	b29b      	uxth	r3, r3
 8008010:	3b01      	subs	r3, #1
 8008012:	b29a      	uxth	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008020:	b29b      	uxth	r3, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1cb      	bne.n	8007fbe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	2200      	movs	r2, #0
 800802e:	2140      	movs	r1, #64	; 0x40
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f000 fba0 	bl	8008776 <UART_WaitOnFlagUntilTimeout>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d001      	beq.n	8008040 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800803c:	2303      	movs	r3, #3
 800803e:	e005      	b.n	800804c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2220      	movs	r2, #32
 8008044:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	e000      	b.n	800804c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800804a:	2302      	movs	r3, #2
  }
}
 800804c:	4618      	mov	r0, r3
 800804e:	3720      	adds	r7, #32
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b08a      	sub	sp, #40	; 0x28
 8008058:	af02      	add	r7, sp, #8
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	603b      	str	r3, [r7, #0]
 8008060:	4613      	mov	r3, r2
 8008062:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008068:	2b20      	cmp	r3, #32
 800806a:	f040 80bf 	bne.w	80081ec <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d002      	beq.n	800807a <HAL_UART_Receive+0x26>
 8008074:	88fb      	ldrh	r3, [r7, #6]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d101      	bne.n	800807e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e0b7      	b.n	80081ee <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008084:	2b01      	cmp	r3, #1
 8008086:	d101      	bne.n	800808c <HAL_UART_Receive+0x38>
 8008088:	2302      	movs	r3, #2
 800808a:	e0b0      	b.n	80081ee <HAL_UART_Receive+0x19a>
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2222      	movs	r2, #34	; 0x22
 80080a0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80080a8:	f7fa fb3c 	bl	8002724 <HAL_GetTick>
 80080ac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	88fa      	ldrh	r2, [r7, #6]
 80080b2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	88fa      	ldrh	r2, [r7, #6]
 80080ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080c6:	d10e      	bne.n	80080e6 <HAL_UART_Receive+0x92>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d105      	bne.n	80080dc <HAL_UART_Receive+0x88>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80080d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080da:	e02d      	b.n	8008138 <HAL_UART_Receive+0xe4>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	22ff      	movs	r2, #255	; 0xff
 80080e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080e4:	e028      	b.n	8008138 <HAL_UART_Receive+0xe4>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10d      	bne.n	800810a <HAL_UART_Receive+0xb6>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d104      	bne.n	8008100 <HAL_UART_Receive+0xac>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	22ff      	movs	r2, #255	; 0xff
 80080fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080fe:	e01b      	b.n	8008138 <HAL_UART_Receive+0xe4>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	227f      	movs	r2, #127	; 0x7f
 8008104:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008108:	e016      	b.n	8008138 <HAL_UART_Receive+0xe4>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008112:	d10d      	bne.n	8008130 <HAL_UART_Receive+0xdc>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d104      	bne.n	8008126 <HAL_UART_Receive+0xd2>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	227f      	movs	r2, #127	; 0x7f
 8008120:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008124:	e008      	b.n	8008138 <HAL_UART_Receive+0xe4>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	223f      	movs	r2, #63	; 0x3f
 800812a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800812e:	e003      	b.n	8008138 <HAL_UART_Receive+0xe4>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800813e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008148:	d108      	bne.n	800815c <HAL_UART_Receive+0x108>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d104      	bne.n	800815c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8008152:	2300      	movs	r3, #0
 8008154:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	61bb      	str	r3, [r7, #24]
 800815a:	e003      	b.n	8008164 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008160:	2300      	movs	r3, #0
 8008162:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800816c:	e033      	b.n	80081d6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	2200      	movs	r2, #0
 8008176:	2120      	movs	r1, #32
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f000 fafc 	bl	8008776 <UART_WaitOnFlagUntilTimeout>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d001      	beq.n	8008188 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8008184:	2303      	movs	r3, #3
 8008186:	e032      	b.n	80081ee <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10c      	bne.n	80081a8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008194:	b29a      	uxth	r2, r3
 8008196:	8a7b      	ldrh	r3, [r7, #18]
 8008198:	4013      	ands	r3, r2
 800819a:	b29a      	uxth	r2, r3
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	3302      	adds	r3, #2
 80081a4:	61bb      	str	r3, [r7, #24]
 80081a6:	e00d      	b.n	80081c4 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	8a7b      	ldrh	r3, [r7, #18]
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	4013      	ands	r3, r2
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	3301      	adds	r3, #1
 80081c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	3b01      	subs	r3, #1
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081dc:	b29b      	uxth	r3, r3
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1c5      	bne.n	800816e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2220      	movs	r2, #32
 80081e6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80081e8:	2300      	movs	r3, #0
 80081ea:	e000      	b.n	80081ee <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80081ec:	2302      	movs	r3, #2
  }
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3720      	adds	r7, #32
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
	...

080081f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b088      	sub	sp, #32
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	689a      	ldr	r2, [r3, #8]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	431a      	orrs	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	695b      	ldr	r3, [r3, #20]
 8008212:	431a      	orrs	r2, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	69db      	ldr	r3, [r3, #28]
 8008218:	4313      	orrs	r3, r2
 800821a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	4baa      	ldr	r3, [pc, #680]	; (80084cc <UART_SetConfig+0x2d4>)
 8008224:	4013      	ands	r3, r2
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	6812      	ldr	r2, [r2, #0]
 800822a:	6979      	ldr	r1, [r7, #20]
 800822c:	430b      	orrs	r3, r1
 800822e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68da      	ldr	r2, [r3, #12]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	430a      	orrs	r2, r1
 8008244:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a1b      	ldr	r3, [r3, #32]
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	4313      	orrs	r3, r2
 8008254:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	697a      	ldr	r2, [r7, #20]
 8008266:	430a      	orrs	r2, r1
 8008268:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a98      	ldr	r2, [pc, #608]	; (80084d0 <UART_SetConfig+0x2d8>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d121      	bne.n	80082b8 <UART_SetConfig+0xc0>
 8008274:	4b97      	ldr	r3, [pc, #604]	; (80084d4 <UART_SetConfig+0x2dc>)
 8008276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008278:	f003 0303 	and.w	r3, r3, #3
 800827c:	2b03      	cmp	r3, #3
 800827e:	d817      	bhi.n	80082b0 <UART_SetConfig+0xb8>
 8008280:	a201      	add	r2, pc, #4	; (adr r2, 8008288 <UART_SetConfig+0x90>)
 8008282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008286:	bf00      	nop
 8008288:	08008299 	.word	0x08008299
 800828c:	080082a5 	.word	0x080082a5
 8008290:	080082ab 	.word	0x080082ab
 8008294:	0800829f 	.word	0x0800829f
 8008298:	2301      	movs	r3, #1
 800829a:	77fb      	strb	r3, [r7, #31]
 800829c:	e0b2      	b.n	8008404 <UART_SetConfig+0x20c>
 800829e:	2302      	movs	r3, #2
 80082a0:	77fb      	strb	r3, [r7, #31]
 80082a2:	e0af      	b.n	8008404 <UART_SetConfig+0x20c>
 80082a4:	2304      	movs	r3, #4
 80082a6:	77fb      	strb	r3, [r7, #31]
 80082a8:	e0ac      	b.n	8008404 <UART_SetConfig+0x20c>
 80082aa:	2308      	movs	r3, #8
 80082ac:	77fb      	strb	r3, [r7, #31]
 80082ae:	e0a9      	b.n	8008404 <UART_SetConfig+0x20c>
 80082b0:	2310      	movs	r3, #16
 80082b2:	77fb      	strb	r3, [r7, #31]
 80082b4:	bf00      	nop
 80082b6:	e0a5      	b.n	8008404 <UART_SetConfig+0x20c>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a86      	ldr	r2, [pc, #536]	; (80084d8 <UART_SetConfig+0x2e0>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d123      	bne.n	800830a <UART_SetConfig+0x112>
 80082c2:	4b84      	ldr	r3, [pc, #528]	; (80084d4 <UART_SetConfig+0x2dc>)
 80082c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80082ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082ce:	d012      	beq.n	80082f6 <UART_SetConfig+0xfe>
 80082d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082d4:	d802      	bhi.n	80082dc <UART_SetConfig+0xe4>
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d007      	beq.n	80082ea <UART_SetConfig+0xf2>
 80082da:	e012      	b.n	8008302 <UART_SetConfig+0x10a>
 80082dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082e0:	d00c      	beq.n	80082fc <UART_SetConfig+0x104>
 80082e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80082e6:	d003      	beq.n	80082f0 <UART_SetConfig+0xf8>
 80082e8:	e00b      	b.n	8008302 <UART_SetConfig+0x10a>
 80082ea:	2300      	movs	r3, #0
 80082ec:	77fb      	strb	r3, [r7, #31]
 80082ee:	e089      	b.n	8008404 <UART_SetConfig+0x20c>
 80082f0:	2302      	movs	r3, #2
 80082f2:	77fb      	strb	r3, [r7, #31]
 80082f4:	e086      	b.n	8008404 <UART_SetConfig+0x20c>
 80082f6:	2304      	movs	r3, #4
 80082f8:	77fb      	strb	r3, [r7, #31]
 80082fa:	e083      	b.n	8008404 <UART_SetConfig+0x20c>
 80082fc:	2308      	movs	r3, #8
 80082fe:	77fb      	strb	r3, [r7, #31]
 8008300:	e080      	b.n	8008404 <UART_SetConfig+0x20c>
 8008302:	2310      	movs	r3, #16
 8008304:	77fb      	strb	r3, [r7, #31]
 8008306:	bf00      	nop
 8008308:	e07c      	b.n	8008404 <UART_SetConfig+0x20c>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a73      	ldr	r2, [pc, #460]	; (80084dc <UART_SetConfig+0x2e4>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d123      	bne.n	800835c <UART_SetConfig+0x164>
 8008314:	4b6f      	ldr	r3, [pc, #444]	; (80084d4 <UART_SetConfig+0x2dc>)
 8008316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008318:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800831c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008320:	d012      	beq.n	8008348 <UART_SetConfig+0x150>
 8008322:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008326:	d802      	bhi.n	800832e <UART_SetConfig+0x136>
 8008328:	2b00      	cmp	r3, #0
 800832a:	d007      	beq.n	800833c <UART_SetConfig+0x144>
 800832c:	e012      	b.n	8008354 <UART_SetConfig+0x15c>
 800832e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008332:	d00c      	beq.n	800834e <UART_SetConfig+0x156>
 8008334:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008338:	d003      	beq.n	8008342 <UART_SetConfig+0x14a>
 800833a:	e00b      	b.n	8008354 <UART_SetConfig+0x15c>
 800833c:	2300      	movs	r3, #0
 800833e:	77fb      	strb	r3, [r7, #31]
 8008340:	e060      	b.n	8008404 <UART_SetConfig+0x20c>
 8008342:	2302      	movs	r3, #2
 8008344:	77fb      	strb	r3, [r7, #31]
 8008346:	e05d      	b.n	8008404 <UART_SetConfig+0x20c>
 8008348:	2304      	movs	r3, #4
 800834a:	77fb      	strb	r3, [r7, #31]
 800834c:	e05a      	b.n	8008404 <UART_SetConfig+0x20c>
 800834e:	2308      	movs	r3, #8
 8008350:	77fb      	strb	r3, [r7, #31]
 8008352:	e057      	b.n	8008404 <UART_SetConfig+0x20c>
 8008354:	2310      	movs	r3, #16
 8008356:	77fb      	strb	r3, [r7, #31]
 8008358:	bf00      	nop
 800835a:	e053      	b.n	8008404 <UART_SetConfig+0x20c>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a5f      	ldr	r2, [pc, #380]	; (80084e0 <UART_SetConfig+0x2e8>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d123      	bne.n	80083ae <UART_SetConfig+0x1b6>
 8008366:	4b5b      	ldr	r3, [pc, #364]	; (80084d4 <UART_SetConfig+0x2dc>)
 8008368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800836a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800836e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008372:	d012      	beq.n	800839a <UART_SetConfig+0x1a2>
 8008374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008378:	d802      	bhi.n	8008380 <UART_SetConfig+0x188>
 800837a:	2b00      	cmp	r3, #0
 800837c:	d007      	beq.n	800838e <UART_SetConfig+0x196>
 800837e:	e012      	b.n	80083a6 <UART_SetConfig+0x1ae>
 8008380:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008384:	d00c      	beq.n	80083a0 <UART_SetConfig+0x1a8>
 8008386:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800838a:	d003      	beq.n	8008394 <UART_SetConfig+0x19c>
 800838c:	e00b      	b.n	80083a6 <UART_SetConfig+0x1ae>
 800838e:	2300      	movs	r3, #0
 8008390:	77fb      	strb	r3, [r7, #31]
 8008392:	e037      	b.n	8008404 <UART_SetConfig+0x20c>
 8008394:	2302      	movs	r3, #2
 8008396:	77fb      	strb	r3, [r7, #31]
 8008398:	e034      	b.n	8008404 <UART_SetConfig+0x20c>
 800839a:	2304      	movs	r3, #4
 800839c:	77fb      	strb	r3, [r7, #31]
 800839e:	e031      	b.n	8008404 <UART_SetConfig+0x20c>
 80083a0:	2308      	movs	r3, #8
 80083a2:	77fb      	strb	r3, [r7, #31]
 80083a4:	e02e      	b.n	8008404 <UART_SetConfig+0x20c>
 80083a6:	2310      	movs	r3, #16
 80083a8:	77fb      	strb	r3, [r7, #31]
 80083aa:	bf00      	nop
 80083ac:	e02a      	b.n	8008404 <UART_SetConfig+0x20c>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a4c      	ldr	r2, [pc, #304]	; (80084e4 <UART_SetConfig+0x2ec>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d123      	bne.n	8008400 <UART_SetConfig+0x208>
 80083b8:	4b46      	ldr	r3, [pc, #280]	; (80084d4 <UART_SetConfig+0x2dc>)
 80083ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083bc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80083c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083c4:	d012      	beq.n	80083ec <UART_SetConfig+0x1f4>
 80083c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083ca:	d802      	bhi.n	80083d2 <UART_SetConfig+0x1da>
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d007      	beq.n	80083e0 <UART_SetConfig+0x1e8>
 80083d0:	e012      	b.n	80083f8 <UART_SetConfig+0x200>
 80083d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083d6:	d00c      	beq.n	80083f2 <UART_SetConfig+0x1fa>
 80083d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80083dc:	d003      	beq.n	80083e6 <UART_SetConfig+0x1ee>
 80083de:	e00b      	b.n	80083f8 <UART_SetConfig+0x200>
 80083e0:	2300      	movs	r3, #0
 80083e2:	77fb      	strb	r3, [r7, #31]
 80083e4:	e00e      	b.n	8008404 <UART_SetConfig+0x20c>
 80083e6:	2302      	movs	r3, #2
 80083e8:	77fb      	strb	r3, [r7, #31]
 80083ea:	e00b      	b.n	8008404 <UART_SetConfig+0x20c>
 80083ec:	2304      	movs	r3, #4
 80083ee:	77fb      	strb	r3, [r7, #31]
 80083f0:	e008      	b.n	8008404 <UART_SetConfig+0x20c>
 80083f2:	2308      	movs	r3, #8
 80083f4:	77fb      	strb	r3, [r7, #31]
 80083f6:	e005      	b.n	8008404 <UART_SetConfig+0x20c>
 80083f8:	2310      	movs	r3, #16
 80083fa:	77fb      	strb	r3, [r7, #31]
 80083fc:	bf00      	nop
 80083fe:	e001      	b.n	8008404 <UART_SetConfig+0x20c>
 8008400:	2310      	movs	r3, #16
 8008402:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	69db      	ldr	r3, [r3, #28]
 8008408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800840c:	d16e      	bne.n	80084ec <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800840e:	7ffb      	ldrb	r3, [r7, #31]
 8008410:	2b08      	cmp	r3, #8
 8008412:	d828      	bhi.n	8008466 <UART_SetConfig+0x26e>
 8008414:	a201      	add	r2, pc, #4	; (adr r2, 800841c <UART_SetConfig+0x224>)
 8008416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841a:	bf00      	nop
 800841c:	08008441 	.word	0x08008441
 8008420:	08008449 	.word	0x08008449
 8008424:	08008451 	.word	0x08008451
 8008428:	08008467 	.word	0x08008467
 800842c:	08008457 	.word	0x08008457
 8008430:	08008467 	.word	0x08008467
 8008434:	08008467 	.word	0x08008467
 8008438:	08008467 	.word	0x08008467
 800843c:	0800845f 	.word	0x0800845f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008440:	f7fe f876 	bl	8006530 <HAL_RCC_GetPCLK1Freq>
 8008444:	61b8      	str	r0, [r7, #24]
        break;
 8008446:	e013      	b.n	8008470 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008448:	f7fe f894 	bl	8006574 <HAL_RCC_GetPCLK2Freq>
 800844c:	61b8      	str	r0, [r7, #24]
        break;
 800844e:	e00f      	b.n	8008470 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008450:	4b25      	ldr	r3, [pc, #148]	; (80084e8 <UART_SetConfig+0x2f0>)
 8008452:	61bb      	str	r3, [r7, #24]
        break;
 8008454:	e00c      	b.n	8008470 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008456:	f7fd fff5 	bl	8006444 <HAL_RCC_GetSysClockFreq>
 800845a:	61b8      	str	r0, [r7, #24]
        break;
 800845c:	e008      	b.n	8008470 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800845e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008462:	61bb      	str	r3, [r7, #24]
        break;
 8008464:	e004      	b.n	8008470 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8008466:	2300      	movs	r3, #0
 8008468:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	77bb      	strb	r3, [r7, #30]
        break;
 800846e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 8086 	beq.w	8008584 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	005a      	lsls	r2, r3, #1
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	085b      	lsrs	r3, r3, #1
 8008482:	441a      	add	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	fbb2 f3f3 	udiv	r3, r2, r3
 800848c:	b29b      	uxth	r3, r3
 800848e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	2b0f      	cmp	r3, #15
 8008494:	d916      	bls.n	80084c4 <UART_SetConfig+0x2cc>
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800849c:	d212      	bcs.n	80084c4 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	f023 030f 	bic.w	r3, r3, #15
 80084a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	085b      	lsrs	r3, r3, #1
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	f003 0307 	and.w	r3, r3, #7
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	89fb      	ldrh	r3, [r7, #14]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	89fa      	ldrh	r2, [r7, #14]
 80084c0:	60da      	str	r2, [r3, #12]
 80084c2:	e05f      	b.n	8008584 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	77bb      	strb	r3, [r7, #30]
 80084c8:	e05c      	b.n	8008584 <UART_SetConfig+0x38c>
 80084ca:	bf00      	nop
 80084cc:	efff69f3 	.word	0xefff69f3
 80084d0:	40013800 	.word	0x40013800
 80084d4:	40021000 	.word	0x40021000
 80084d8:	40004400 	.word	0x40004400
 80084dc:	40004800 	.word	0x40004800
 80084e0:	40004c00 	.word	0x40004c00
 80084e4:	40005000 	.word	0x40005000
 80084e8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 80084ec:	7ffb      	ldrb	r3, [r7, #31]
 80084ee:	2b08      	cmp	r3, #8
 80084f0:	d827      	bhi.n	8008542 <UART_SetConfig+0x34a>
 80084f2:	a201      	add	r2, pc, #4	; (adr r2, 80084f8 <UART_SetConfig+0x300>)
 80084f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f8:	0800851d 	.word	0x0800851d
 80084fc:	08008525 	.word	0x08008525
 8008500:	0800852d 	.word	0x0800852d
 8008504:	08008543 	.word	0x08008543
 8008508:	08008533 	.word	0x08008533
 800850c:	08008543 	.word	0x08008543
 8008510:	08008543 	.word	0x08008543
 8008514:	08008543 	.word	0x08008543
 8008518:	0800853b 	.word	0x0800853b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800851c:	f7fe f808 	bl	8006530 <HAL_RCC_GetPCLK1Freq>
 8008520:	61b8      	str	r0, [r7, #24]
        break;
 8008522:	e013      	b.n	800854c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008524:	f7fe f826 	bl	8006574 <HAL_RCC_GetPCLK2Freq>
 8008528:	61b8      	str	r0, [r7, #24]
        break;
 800852a:	e00f      	b.n	800854c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800852c:	4b1b      	ldr	r3, [pc, #108]	; (800859c <UART_SetConfig+0x3a4>)
 800852e:	61bb      	str	r3, [r7, #24]
        break;
 8008530:	e00c      	b.n	800854c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008532:	f7fd ff87 	bl	8006444 <HAL_RCC_GetSysClockFreq>
 8008536:	61b8      	str	r0, [r7, #24]
        break;
 8008538:	e008      	b.n	800854c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800853a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800853e:	61bb      	str	r3, [r7, #24]
        break;
 8008540:	e004      	b.n	800854c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8008542:	2300      	movs	r3, #0
 8008544:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	77bb      	strb	r3, [r7, #30]
        break;
 800854a:	bf00      	nop
    }

    if (pclk != 0U)
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d018      	beq.n	8008584 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	085a      	lsrs	r2, r3, #1
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	441a      	add	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	fbb2 f3f3 	udiv	r3, r2, r3
 8008564:	b29b      	uxth	r3, r3
 8008566:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	2b0f      	cmp	r3, #15
 800856c:	d908      	bls.n	8008580 <UART_SetConfig+0x388>
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008574:	d204      	bcs.n	8008580 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	60da      	str	r2, [r3, #12]
 800857e:	e001      	b.n	8008584 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008590:	7fbb      	ldrb	r3, [r7, #30]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3720      	adds	r7, #32
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	007a1200 	.word	0x007a1200

080085a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ac:	f003 0301 	and.w	r3, r3, #1
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00a      	beq.n	80085ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	430a      	orrs	r2, r1
 80085c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ce:	f003 0302 	and.w	r3, r3, #2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00a      	beq.n	80085ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	430a      	orrs	r2, r1
 80085ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f0:	f003 0304 	and.w	r3, r3, #4
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00a      	beq.n	800860e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	430a      	orrs	r2, r1
 800860c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008612:	f003 0308 	and.w	r3, r3, #8
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00a      	beq.n	8008630 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	430a      	orrs	r2, r1
 800862e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008634:	f003 0310 	and.w	r3, r3, #16
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00a      	beq.n	8008652 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	430a      	orrs	r2, r1
 8008650:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008656:	f003 0320 	and.w	r3, r3, #32
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00a      	beq.n	8008674 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	430a      	orrs	r2, r1
 8008672:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800867c:	2b00      	cmp	r3, #0
 800867e:	d01a      	beq.n	80086b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	430a      	orrs	r2, r1
 8008694:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800869e:	d10a      	bne.n	80086b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	430a      	orrs	r2, r1
 80086b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00a      	beq.n	80086d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	430a      	orrs	r2, r1
 80086d6:	605a      	str	r2, [r3, #4]
  }
}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af02      	add	r7, sp, #8
 80086ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086f4:	f7fa f816 	bl	8002724 <HAL_GetTick>
 80086f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 0308 	and.w	r3, r3, #8
 8008704:	2b08      	cmp	r3, #8
 8008706:	d10e      	bne.n	8008726 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008708:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800870c:	9300      	str	r3, [sp, #0]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f82d 	bl	8008776 <UART_WaitOnFlagUntilTimeout>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d001      	beq.n	8008726 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e023      	b.n	800876e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 0304 	and.w	r3, r3, #4
 8008730:	2b04      	cmp	r3, #4
 8008732:	d10e      	bne.n	8008752 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008734:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2200      	movs	r2, #0
 800873e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 f817 	bl	8008776 <UART_WaitOnFlagUntilTimeout>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e00d      	b.n	800876e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2220      	movs	r2, #32
 8008756:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2220      	movs	r2, #32
 800875c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	603b      	str	r3, [r7, #0]
 8008782:	4613      	mov	r3, r2
 8008784:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008786:	e05e      	b.n	8008846 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878e:	d05a      	beq.n	8008846 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008790:	f7f9 ffc8 	bl	8002724 <HAL_GetTick>
 8008794:	4602      	mov	r2, r0
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	69ba      	ldr	r2, [r7, #24]
 800879c:	429a      	cmp	r2, r3
 800879e:	d302      	bcc.n	80087a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d11b      	bne.n	80087de <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80087b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	689a      	ldr	r2, [r3, #8]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f022 0201 	bic.w	r2, r2, #1
 80087c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2220      	movs	r2, #32
 80087ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2220      	movs	r2, #32
 80087d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e043      	b.n	8008866 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0304 	and.w	r3, r3, #4
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d02c      	beq.n	8008846 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	69db      	ldr	r3, [r3, #28]
 80087f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087fa:	d124      	bne.n	8008846 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008804:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008814:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	689a      	ldr	r2, [r3, #8]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f022 0201 	bic.w	r2, r2, #1
 8008824:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2220      	movs	r2, #32
 800882a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2220      	movs	r2, #32
 8008830:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2220      	movs	r2, #32
 8008836:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e00f      	b.n	8008866 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	69da      	ldr	r2, [r3, #28]
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	4013      	ands	r3, r2
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	429a      	cmp	r2, r3
 8008854:	bf0c      	ite	eq
 8008856:	2301      	moveq	r3, #1
 8008858:	2300      	movne	r3, #0
 800885a:	b2db      	uxtb	r3, r3
 800885c:	461a      	mov	r2, r3
 800885e:	79fb      	ldrb	r3, [r7, #7]
 8008860:	429a      	cmp	r2, r3
 8008862:	d091      	beq.n	8008788 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
	...

08008870 <__errno>:
 8008870:	4b01      	ldr	r3, [pc, #4]	; (8008878 <__errno+0x8>)
 8008872:	6818      	ldr	r0, [r3, #0]
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	20000a24 	.word	0x20000a24

0800887c <__libc_init_array>:
 800887c:	b570      	push	{r4, r5, r6, lr}
 800887e:	4e0d      	ldr	r6, [pc, #52]	; (80088b4 <__libc_init_array+0x38>)
 8008880:	4c0d      	ldr	r4, [pc, #52]	; (80088b8 <__libc_init_array+0x3c>)
 8008882:	1ba4      	subs	r4, r4, r6
 8008884:	10a4      	asrs	r4, r4, #2
 8008886:	2500      	movs	r5, #0
 8008888:	42a5      	cmp	r5, r4
 800888a:	d109      	bne.n	80088a0 <__libc_init_array+0x24>
 800888c:	4e0b      	ldr	r6, [pc, #44]	; (80088bc <__libc_init_array+0x40>)
 800888e:	4c0c      	ldr	r4, [pc, #48]	; (80088c0 <__libc_init_array+0x44>)
 8008890:	f001 ff20 	bl	800a6d4 <_init>
 8008894:	1ba4      	subs	r4, r4, r6
 8008896:	10a4      	asrs	r4, r4, #2
 8008898:	2500      	movs	r5, #0
 800889a:	42a5      	cmp	r5, r4
 800889c:	d105      	bne.n	80088aa <__libc_init_array+0x2e>
 800889e:	bd70      	pop	{r4, r5, r6, pc}
 80088a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80088a4:	4798      	blx	r3
 80088a6:	3501      	adds	r5, #1
 80088a8:	e7ee      	b.n	8008888 <__libc_init_array+0xc>
 80088aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80088ae:	4798      	blx	r3
 80088b0:	3501      	adds	r5, #1
 80088b2:	e7f2      	b.n	800889a <__libc_init_array+0x1e>
 80088b4:	0800acc0 	.word	0x0800acc0
 80088b8:	0800acc0 	.word	0x0800acc0
 80088bc:	0800acc0 	.word	0x0800acc0
 80088c0:	0800acc4 	.word	0x0800acc4

080088c4 <__itoa>:
 80088c4:	1e93      	subs	r3, r2, #2
 80088c6:	2b22      	cmp	r3, #34	; 0x22
 80088c8:	b510      	push	{r4, lr}
 80088ca:	460c      	mov	r4, r1
 80088cc:	d904      	bls.n	80088d8 <__itoa+0x14>
 80088ce:	2300      	movs	r3, #0
 80088d0:	700b      	strb	r3, [r1, #0]
 80088d2:	461c      	mov	r4, r3
 80088d4:	4620      	mov	r0, r4
 80088d6:	bd10      	pop	{r4, pc}
 80088d8:	2a0a      	cmp	r2, #10
 80088da:	d109      	bne.n	80088f0 <__itoa+0x2c>
 80088dc:	2800      	cmp	r0, #0
 80088de:	da07      	bge.n	80088f0 <__itoa+0x2c>
 80088e0:	232d      	movs	r3, #45	; 0x2d
 80088e2:	700b      	strb	r3, [r1, #0]
 80088e4:	4240      	negs	r0, r0
 80088e6:	2101      	movs	r1, #1
 80088e8:	4421      	add	r1, r4
 80088ea:	f000 fecb 	bl	8009684 <__utoa>
 80088ee:	e7f1      	b.n	80088d4 <__itoa+0x10>
 80088f0:	2100      	movs	r1, #0
 80088f2:	e7f9      	b.n	80088e8 <__itoa+0x24>

080088f4 <itoa>:
 80088f4:	f7ff bfe6 	b.w	80088c4 <__itoa>

080088f8 <memset>:
 80088f8:	4402      	add	r2, r0
 80088fa:	4603      	mov	r3, r0
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d100      	bne.n	8008902 <memset+0xa>
 8008900:	4770      	bx	lr
 8008902:	f803 1b01 	strb.w	r1, [r3], #1
 8008906:	e7f9      	b.n	80088fc <memset+0x4>

08008908 <strcpy>:
 8008908:	4603      	mov	r3, r0
 800890a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800890e:	f803 2b01 	strb.w	r2, [r3], #1
 8008912:	2a00      	cmp	r2, #0
 8008914:	d1f9      	bne.n	800890a <strcpy+0x2>
 8008916:	4770      	bx	lr

08008918 <sulp>:
 8008918:	b570      	push	{r4, r5, r6, lr}
 800891a:	4604      	mov	r4, r0
 800891c:	460d      	mov	r5, r1
 800891e:	ec45 4b10 	vmov	d0, r4, r5
 8008922:	4616      	mov	r6, r2
 8008924:	f001 fd00 	bl	800a328 <__ulp>
 8008928:	ec51 0b10 	vmov	r0, r1, d0
 800892c:	b17e      	cbz	r6, 800894e <sulp+0x36>
 800892e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008932:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008936:	2b00      	cmp	r3, #0
 8008938:	dd09      	ble.n	800894e <sulp+0x36>
 800893a:	051b      	lsls	r3, r3, #20
 800893c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008940:	2400      	movs	r4, #0
 8008942:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008946:	4622      	mov	r2, r4
 8008948:	462b      	mov	r3, r5
 800894a:	f7f7 fe13 	bl	8000574 <__aeabi_dmul>
 800894e:	bd70      	pop	{r4, r5, r6, pc}

08008950 <_strtod_l>:
 8008950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008954:	461f      	mov	r7, r3
 8008956:	b0a1      	sub	sp, #132	; 0x84
 8008958:	2300      	movs	r3, #0
 800895a:	4681      	mov	r9, r0
 800895c:	4638      	mov	r0, r7
 800895e:	460e      	mov	r6, r1
 8008960:	9217      	str	r2, [sp, #92]	; 0x5c
 8008962:	931c      	str	r3, [sp, #112]	; 0x70
 8008964:	f001 f9f5 	bl	8009d52 <__localeconv_l>
 8008968:	4680      	mov	r8, r0
 800896a:	6800      	ldr	r0, [r0, #0]
 800896c:	f7f7 fc3e 	bl	80001ec <strlen>
 8008970:	f04f 0a00 	mov.w	sl, #0
 8008974:	4604      	mov	r4, r0
 8008976:	f04f 0b00 	mov.w	fp, #0
 800897a:	961b      	str	r6, [sp, #108]	; 0x6c
 800897c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800897e:	781a      	ldrb	r2, [r3, #0]
 8008980:	2a0d      	cmp	r2, #13
 8008982:	d832      	bhi.n	80089ea <_strtod_l+0x9a>
 8008984:	2a09      	cmp	r2, #9
 8008986:	d236      	bcs.n	80089f6 <_strtod_l+0xa6>
 8008988:	2a00      	cmp	r2, #0
 800898a:	d03e      	beq.n	8008a0a <_strtod_l+0xba>
 800898c:	2300      	movs	r3, #0
 800898e:	930d      	str	r3, [sp, #52]	; 0x34
 8008990:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008992:	782b      	ldrb	r3, [r5, #0]
 8008994:	2b30      	cmp	r3, #48	; 0x30
 8008996:	f040 80ac 	bne.w	8008af2 <_strtod_l+0x1a2>
 800899a:	786b      	ldrb	r3, [r5, #1]
 800899c:	2b58      	cmp	r3, #88	; 0x58
 800899e:	d001      	beq.n	80089a4 <_strtod_l+0x54>
 80089a0:	2b78      	cmp	r3, #120	; 0x78
 80089a2:	d167      	bne.n	8008a74 <_strtod_l+0x124>
 80089a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089a6:	9301      	str	r3, [sp, #4]
 80089a8:	ab1c      	add	r3, sp, #112	; 0x70
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	9702      	str	r7, [sp, #8]
 80089ae:	ab1d      	add	r3, sp, #116	; 0x74
 80089b0:	4a88      	ldr	r2, [pc, #544]	; (8008bd4 <_strtod_l+0x284>)
 80089b2:	a91b      	add	r1, sp, #108	; 0x6c
 80089b4:	4648      	mov	r0, r9
 80089b6:	f000 fef2 	bl	800979e <__gethex>
 80089ba:	f010 0407 	ands.w	r4, r0, #7
 80089be:	4606      	mov	r6, r0
 80089c0:	d005      	beq.n	80089ce <_strtod_l+0x7e>
 80089c2:	2c06      	cmp	r4, #6
 80089c4:	d12b      	bne.n	8008a1e <_strtod_l+0xce>
 80089c6:	3501      	adds	r5, #1
 80089c8:	2300      	movs	r3, #0
 80089ca:	951b      	str	r5, [sp, #108]	; 0x6c
 80089cc:	930d      	str	r3, [sp, #52]	; 0x34
 80089ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f040 859a 	bne.w	800950a <_strtod_l+0xbba>
 80089d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089d8:	b1e3      	cbz	r3, 8008a14 <_strtod_l+0xc4>
 80089da:	4652      	mov	r2, sl
 80089dc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80089e0:	ec43 2b10 	vmov	d0, r2, r3
 80089e4:	b021      	add	sp, #132	; 0x84
 80089e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ea:	2a2b      	cmp	r2, #43	; 0x2b
 80089ec:	d015      	beq.n	8008a1a <_strtod_l+0xca>
 80089ee:	2a2d      	cmp	r2, #45	; 0x2d
 80089f0:	d004      	beq.n	80089fc <_strtod_l+0xac>
 80089f2:	2a20      	cmp	r2, #32
 80089f4:	d1ca      	bne.n	800898c <_strtod_l+0x3c>
 80089f6:	3301      	adds	r3, #1
 80089f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80089fa:	e7bf      	b.n	800897c <_strtod_l+0x2c>
 80089fc:	2201      	movs	r2, #1
 80089fe:	920d      	str	r2, [sp, #52]	; 0x34
 8008a00:	1c5a      	adds	r2, r3, #1
 8008a02:	921b      	str	r2, [sp, #108]	; 0x6c
 8008a04:	785b      	ldrb	r3, [r3, #1]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1c2      	bne.n	8008990 <_strtod_l+0x40>
 8008a0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a0c:	961b      	str	r6, [sp, #108]	; 0x6c
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f040 8579 	bne.w	8009506 <_strtod_l+0xbb6>
 8008a14:	4652      	mov	r2, sl
 8008a16:	465b      	mov	r3, fp
 8008a18:	e7e2      	b.n	80089e0 <_strtod_l+0x90>
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	e7ef      	b.n	80089fe <_strtod_l+0xae>
 8008a1e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008a20:	b13a      	cbz	r2, 8008a32 <_strtod_l+0xe2>
 8008a22:	2135      	movs	r1, #53	; 0x35
 8008a24:	a81e      	add	r0, sp, #120	; 0x78
 8008a26:	f001 fd77 	bl	800a518 <__copybits>
 8008a2a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008a2c:	4648      	mov	r0, r9
 8008a2e:	f001 f9e3 	bl	8009df8 <_Bfree>
 8008a32:	3c01      	subs	r4, #1
 8008a34:	2c04      	cmp	r4, #4
 8008a36:	d806      	bhi.n	8008a46 <_strtod_l+0xf6>
 8008a38:	e8df f004 	tbb	[pc, r4]
 8008a3c:	1714030a 	.word	0x1714030a
 8008a40:	0a          	.byte	0x0a
 8008a41:	00          	.byte	0x00
 8008a42:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8008a46:	0730      	lsls	r0, r6, #28
 8008a48:	d5c1      	bpl.n	80089ce <_strtod_l+0x7e>
 8008a4a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008a4e:	e7be      	b.n	80089ce <_strtod_l+0x7e>
 8008a50:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8008a54:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008a56:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008a5a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008a5e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008a62:	e7f0      	b.n	8008a46 <_strtod_l+0xf6>
 8008a64:	f8df b170 	ldr.w	fp, [pc, #368]	; 8008bd8 <_strtod_l+0x288>
 8008a68:	e7ed      	b.n	8008a46 <_strtod_l+0xf6>
 8008a6a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008a6e:	f04f 3aff 	mov.w	sl, #4294967295
 8008a72:	e7e8      	b.n	8008a46 <_strtod_l+0xf6>
 8008a74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008a76:	1c5a      	adds	r2, r3, #1
 8008a78:	921b      	str	r2, [sp, #108]	; 0x6c
 8008a7a:	785b      	ldrb	r3, [r3, #1]
 8008a7c:	2b30      	cmp	r3, #48	; 0x30
 8008a7e:	d0f9      	beq.n	8008a74 <_strtod_l+0x124>
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d0a4      	beq.n	80089ce <_strtod_l+0x7e>
 8008a84:	2301      	movs	r3, #1
 8008a86:	2500      	movs	r5, #0
 8008a88:	9306      	str	r3, [sp, #24]
 8008a8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008a8c:	9308      	str	r3, [sp, #32]
 8008a8e:	9507      	str	r5, [sp, #28]
 8008a90:	9505      	str	r5, [sp, #20]
 8008a92:	220a      	movs	r2, #10
 8008a94:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008a96:	7807      	ldrb	r7, [r0, #0]
 8008a98:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008a9c:	b2d9      	uxtb	r1, r3
 8008a9e:	2909      	cmp	r1, #9
 8008aa0:	d929      	bls.n	8008af6 <_strtod_l+0x1a6>
 8008aa2:	4622      	mov	r2, r4
 8008aa4:	f8d8 1000 	ldr.w	r1, [r8]
 8008aa8:	f001 fdea 	bl	800a680 <strncmp>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	d031      	beq.n	8008b14 <_strtod_l+0x1c4>
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	9c05      	ldr	r4, [sp, #20]
 8008ab4:	9004      	str	r0, [sp, #16]
 8008ab6:	463b      	mov	r3, r7
 8008ab8:	4602      	mov	r2, r0
 8008aba:	2b65      	cmp	r3, #101	; 0x65
 8008abc:	d001      	beq.n	8008ac2 <_strtod_l+0x172>
 8008abe:	2b45      	cmp	r3, #69	; 0x45
 8008ac0:	d114      	bne.n	8008aec <_strtod_l+0x19c>
 8008ac2:	b924      	cbnz	r4, 8008ace <_strtod_l+0x17e>
 8008ac4:	b910      	cbnz	r0, 8008acc <_strtod_l+0x17c>
 8008ac6:	9b06      	ldr	r3, [sp, #24]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d09e      	beq.n	8008a0a <_strtod_l+0xba>
 8008acc:	2400      	movs	r4, #0
 8008ace:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008ad0:	1c73      	adds	r3, r6, #1
 8008ad2:	931b      	str	r3, [sp, #108]	; 0x6c
 8008ad4:	7873      	ldrb	r3, [r6, #1]
 8008ad6:	2b2b      	cmp	r3, #43	; 0x2b
 8008ad8:	d078      	beq.n	8008bcc <_strtod_l+0x27c>
 8008ada:	2b2d      	cmp	r3, #45	; 0x2d
 8008adc:	d070      	beq.n	8008bc0 <_strtod_l+0x270>
 8008ade:	f04f 0c00 	mov.w	ip, #0
 8008ae2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8008ae6:	2f09      	cmp	r7, #9
 8008ae8:	d97c      	bls.n	8008be4 <_strtod_l+0x294>
 8008aea:	961b      	str	r6, [sp, #108]	; 0x6c
 8008aec:	f04f 0e00 	mov.w	lr, #0
 8008af0:	e09a      	b.n	8008c28 <_strtod_l+0x2d8>
 8008af2:	2300      	movs	r3, #0
 8008af4:	e7c7      	b.n	8008a86 <_strtod_l+0x136>
 8008af6:	9905      	ldr	r1, [sp, #20]
 8008af8:	2908      	cmp	r1, #8
 8008afa:	bfdd      	ittte	le
 8008afc:	9907      	ldrle	r1, [sp, #28]
 8008afe:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b02:	9307      	strle	r3, [sp, #28]
 8008b04:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008b08:	9b05      	ldr	r3, [sp, #20]
 8008b0a:	3001      	adds	r0, #1
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	9305      	str	r3, [sp, #20]
 8008b10:	901b      	str	r0, [sp, #108]	; 0x6c
 8008b12:	e7bf      	b.n	8008a94 <_strtod_l+0x144>
 8008b14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b16:	191a      	adds	r2, r3, r4
 8008b18:	921b      	str	r2, [sp, #108]	; 0x6c
 8008b1a:	9a05      	ldr	r2, [sp, #20]
 8008b1c:	5d1b      	ldrb	r3, [r3, r4]
 8008b1e:	2a00      	cmp	r2, #0
 8008b20:	d037      	beq.n	8008b92 <_strtod_l+0x242>
 8008b22:	9c05      	ldr	r4, [sp, #20]
 8008b24:	4602      	mov	r2, r0
 8008b26:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008b2a:	2909      	cmp	r1, #9
 8008b2c:	d913      	bls.n	8008b56 <_strtod_l+0x206>
 8008b2e:	2101      	movs	r1, #1
 8008b30:	9104      	str	r1, [sp, #16]
 8008b32:	e7c2      	b.n	8008aba <_strtod_l+0x16a>
 8008b34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b36:	1c5a      	adds	r2, r3, #1
 8008b38:	921b      	str	r2, [sp, #108]	; 0x6c
 8008b3a:	785b      	ldrb	r3, [r3, #1]
 8008b3c:	3001      	adds	r0, #1
 8008b3e:	2b30      	cmp	r3, #48	; 0x30
 8008b40:	d0f8      	beq.n	8008b34 <_strtod_l+0x1e4>
 8008b42:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008b46:	2a08      	cmp	r2, #8
 8008b48:	f200 84e4 	bhi.w	8009514 <_strtod_l+0xbc4>
 8008b4c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008b4e:	9208      	str	r2, [sp, #32]
 8008b50:	4602      	mov	r2, r0
 8008b52:	2000      	movs	r0, #0
 8008b54:	4604      	mov	r4, r0
 8008b56:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8008b5a:	f100 0101 	add.w	r1, r0, #1
 8008b5e:	d012      	beq.n	8008b86 <_strtod_l+0x236>
 8008b60:	440a      	add	r2, r1
 8008b62:	eb00 0c04 	add.w	ip, r0, r4
 8008b66:	4621      	mov	r1, r4
 8008b68:	270a      	movs	r7, #10
 8008b6a:	458c      	cmp	ip, r1
 8008b6c:	d113      	bne.n	8008b96 <_strtod_l+0x246>
 8008b6e:	1821      	adds	r1, r4, r0
 8008b70:	2908      	cmp	r1, #8
 8008b72:	f104 0401 	add.w	r4, r4, #1
 8008b76:	4404      	add	r4, r0
 8008b78:	dc19      	bgt.n	8008bae <_strtod_l+0x25e>
 8008b7a:	9b07      	ldr	r3, [sp, #28]
 8008b7c:	210a      	movs	r1, #10
 8008b7e:	fb01 e303 	mla	r3, r1, r3, lr
 8008b82:	9307      	str	r3, [sp, #28]
 8008b84:	2100      	movs	r1, #0
 8008b86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b88:	1c58      	adds	r0, r3, #1
 8008b8a:	901b      	str	r0, [sp, #108]	; 0x6c
 8008b8c:	785b      	ldrb	r3, [r3, #1]
 8008b8e:	4608      	mov	r0, r1
 8008b90:	e7c9      	b.n	8008b26 <_strtod_l+0x1d6>
 8008b92:	9805      	ldr	r0, [sp, #20]
 8008b94:	e7d3      	b.n	8008b3e <_strtod_l+0x1ee>
 8008b96:	2908      	cmp	r1, #8
 8008b98:	f101 0101 	add.w	r1, r1, #1
 8008b9c:	dc03      	bgt.n	8008ba6 <_strtod_l+0x256>
 8008b9e:	9b07      	ldr	r3, [sp, #28]
 8008ba0:	437b      	muls	r3, r7
 8008ba2:	9307      	str	r3, [sp, #28]
 8008ba4:	e7e1      	b.n	8008b6a <_strtod_l+0x21a>
 8008ba6:	2910      	cmp	r1, #16
 8008ba8:	bfd8      	it	le
 8008baa:	437d      	mulle	r5, r7
 8008bac:	e7dd      	b.n	8008b6a <_strtod_l+0x21a>
 8008bae:	2c10      	cmp	r4, #16
 8008bb0:	bfdc      	itt	le
 8008bb2:	210a      	movle	r1, #10
 8008bb4:	fb01 e505 	mlale	r5, r1, r5, lr
 8008bb8:	e7e4      	b.n	8008b84 <_strtod_l+0x234>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	9304      	str	r3, [sp, #16]
 8008bbe:	e781      	b.n	8008ac4 <_strtod_l+0x174>
 8008bc0:	f04f 0c01 	mov.w	ip, #1
 8008bc4:	1cb3      	adds	r3, r6, #2
 8008bc6:	931b      	str	r3, [sp, #108]	; 0x6c
 8008bc8:	78b3      	ldrb	r3, [r6, #2]
 8008bca:	e78a      	b.n	8008ae2 <_strtod_l+0x192>
 8008bcc:	f04f 0c00 	mov.w	ip, #0
 8008bd0:	e7f8      	b.n	8008bc4 <_strtod_l+0x274>
 8008bd2:	bf00      	nop
 8008bd4:	0800aa3c 	.word	0x0800aa3c
 8008bd8:	7ff00000 	.word	0x7ff00000
 8008bdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008bde:	1c5f      	adds	r7, r3, #1
 8008be0:	971b      	str	r7, [sp, #108]	; 0x6c
 8008be2:	785b      	ldrb	r3, [r3, #1]
 8008be4:	2b30      	cmp	r3, #48	; 0x30
 8008be6:	d0f9      	beq.n	8008bdc <_strtod_l+0x28c>
 8008be8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8008bec:	2f08      	cmp	r7, #8
 8008bee:	f63f af7d 	bhi.w	8008aec <_strtod_l+0x19c>
 8008bf2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008bf6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008bf8:	930a      	str	r3, [sp, #40]	; 0x28
 8008bfa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008bfc:	1c5f      	adds	r7, r3, #1
 8008bfe:	971b      	str	r7, [sp, #108]	; 0x6c
 8008c00:	785b      	ldrb	r3, [r3, #1]
 8008c02:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8008c06:	f1b8 0f09 	cmp.w	r8, #9
 8008c0a:	d937      	bls.n	8008c7c <_strtod_l+0x32c>
 8008c0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008c0e:	1a7f      	subs	r7, r7, r1
 8008c10:	2f08      	cmp	r7, #8
 8008c12:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008c16:	dc37      	bgt.n	8008c88 <_strtod_l+0x338>
 8008c18:	45be      	cmp	lr, r7
 8008c1a:	bfa8      	it	ge
 8008c1c:	46be      	movge	lr, r7
 8008c1e:	f1bc 0f00 	cmp.w	ip, #0
 8008c22:	d001      	beq.n	8008c28 <_strtod_l+0x2d8>
 8008c24:	f1ce 0e00 	rsb	lr, lr, #0
 8008c28:	2c00      	cmp	r4, #0
 8008c2a:	d151      	bne.n	8008cd0 <_strtod_l+0x380>
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	f47f aece 	bne.w	80089ce <_strtod_l+0x7e>
 8008c32:	9a06      	ldr	r2, [sp, #24]
 8008c34:	2a00      	cmp	r2, #0
 8008c36:	f47f aeca 	bne.w	80089ce <_strtod_l+0x7e>
 8008c3a:	9a04      	ldr	r2, [sp, #16]
 8008c3c:	2a00      	cmp	r2, #0
 8008c3e:	f47f aee4 	bne.w	8008a0a <_strtod_l+0xba>
 8008c42:	2b4e      	cmp	r3, #78	; 0x4e
 8008c44:	d027      	beq.n	8008c96 <_strtod_l+0x346>
 8008c46:	dc21      	bgt.n	8008c8c <_strtod_l+0x33c>
 8008c48:	2b49      	cmp	r3, #73	; 0x49
 8008c4a:	f47f aede 	bne.w	8008a0a <_strtod_l+0xba>
 8008c4e:	49a0      	ldr	r1, [pc, #640]	; (8008ed0 <_strtod_l+0x580>)
 8008c50:	a81b      	add	r0, sp, #108	; 0x6c
 8008c52:	f000 ffd7 	bl	8009c04 <__match>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	f43f aed7 	beq.w	8008a0a <_strtod_l+0xba>
 8008c5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c5e:	499d      	ldr	r1, [pc, #628]	; (8008ed4 <_strtod_l+0x584>)
 8008c60:	3b01      	subs	r3, #1
 8008c62:	a81b      	add	r0, sp, #108	; 0x6c
 8008c64:	931b      	str	r3, [sp, #108]	; 0x6c
 8008c66:	f000 ffcd 	bl	8009c04 <__match>
 8008c6a:	b910      	cbnz	r0, 8008c72 <_strtod_l+0x322>
 8008c6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c6e:	3301      	adds	r3, #1
 8008c70:	931b      	str	r3, [sp, #108]	; 0x6c
 8008c72:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008ee8 <_strtod_l+0x598>
 8008c76:	f04f 0a00 	mov.w	sl, #0
 8008c7a:	e6a8      	b.n	80089ce <_strtod_l+0x7e>
 8008c7c:	210a      	movs	r1, #10
 8008c7e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008c82:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008c86:	e7b8      	b.n	8008bfa <_strtod_l+0x2aa>
 8008c88:	46be      	mov	lr, r7
 8008c8a:	e7c8      	b.n	8008c1e <_strtod_l+0x2ce>
 8008c8c:	2b69      	cmp	r3, #105	; 0x69
 8008c8e:	d0de      	beq.n	8008c4e <_strtod_l+0x2fe>
 8008c90:	2b6e      	cmp	r3, #110	; 0x6e
 8008c92:	f47f aeba 	bne.w	8008a0a <_strtod_l+0xba>
 8008c96:	4990      	ldr	r1, [pc, #576]	; (8008ed8 <_strtod_l+0x588>)
 8008c98:	a81b      	add	r0, sp, #108	; 0x6c
 8008c9a:	f000 ffb3 	bl	8009c04 <__match>
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	f43f aeb3 	beq.w	8008a0a <_strtod_l+0xba>
 8008ca4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	2b28      	cmp	r3, #40	; 0x28
 8008caa:	d10e      	bne.n	8008cca <_strtod_l+0x37a>
 8008cac:	aa1e      	add	r2, sp, #120	; 0x78
 8008cae:	498b      	ldr	r1, [pc, #556]	; (8008edc <_strtod_l+0x58c>)
 8008cb0:	a81b      	add	r0, sp, #108	; 0x6c
 8008cb2:	f000 ffbb 	bl	8009c2c <__hexnan>
 8008cb6:	2805      	cmp	r0, #5
 8008cb8:	d107      	bne.n	8008cca <_strtod_l+0x37a>
 8008cba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008cbc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8008cc0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008cc4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008cc8:	e681      	b.n	80089ce <_strtod_l+0x7e>
 8008cca:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008ef0 <_strtod_l+0x5a0>
 8008cce:	e7d2      	b.n	8008c76 <_strtod_l+0x326>
 8008cd0:	ebae 0302 	sub.w	r3, lr, r2
 8008cd4:	9306      	str	r3, [sp, #24]
 8008cd6:	9b05      	ldr	r3, [sp, #20]
 8008cd8:	9807      	ldr	r0, [sp, #28]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	bf08      	it	eq
 8008cde:	4623      	moveq	r3, r4
 8008ce0:	2c10      	cmp	r4, #16
 8008ce2:	9305      	str	r3, [sp, #20]
 8008ce4:	46a0      	mov	r8, r4
 8008ce6:	bfa8      	it	ge
 8008ce8:	f04f 0810 	movge.w	r8, #16
 8008cec:	f7f7 fbc8 	bl	8000480 <__aeabi_ui2d>
 8008cf0:	2c09      	cmp	r4, #9
 8008cf2:	4682      	mov	sl, r0
 8008cf4:	468b      	mov	fp, r1
 8008cf6:	dc13      	bgt.n	8008d20 <_strtod_l+0x3d0>
 8008cf8:	9b06      	ldr	r3, [sp, #24]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f43f ae67 	beq.w	80089ce <_strtod_l+0x7e>
 8008d00:	9b06      	ldr	r3, [sp, #24]
 8008d02:	dd7a      	ble.n	8008dfa <_strtod_l+0x4aa>
 8008d04:	2b16      	cmp	r3, #22
 8008d06:	dc61      	bgt.n	8008dcc <_strtod_l+0x47c>
 8008d08:	4a75      	ldr	r2, [pc, #468]	; (8008ee0 <_strtod_l+0x590>)
 8008d0a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8008d0e:	e9de 0100 	ldrd	r0, r1, [lr]
 8008d12:	4652      	mov	r2, sl
 8008d14:	465b      	mov	r3, fp
 8008d16:	f7f7 fc2d 	bl	8000574 <__aeabi_dmul>
 8008d1a:	4682      	mov	sl, r0
 8008d1c:	468b      	mov	fp, r1
 8008d1e:	e656      	b.n	80089ce <_strtod_l+0x7e>
 8008d20:	4b6f      	ldr	r3, [pc, #444]	; (8008ee0 <_strtod_l+0x590>)
 8008d22:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008d26:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008d2a:	f7f7 fc23 	bl	8000574 <__aeabi_dmul>
 8008d2e:	4606      	mov	r6, r0
 8008d30:	4628      	mov	r0, r5
 8008d32:	460f      	mov	r7, r1
 8008d34:	f7f7 fba4 	bl	8000480 <__aeabi_ui2d>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	4630      	mov	r0, r6
 8008d3e:	4639      	mov	r1, r7
 8008d40:	f7f7 fa62 	bl	8000208 <__adddf3>
 8008d44:	2c0f      	cmp	r4, #15
 8008d46:	4682      	mov	sl, r0
 8008d48:	468b      	mov	fp, r1
 8008d4a:	ddd5      	ble.n	8008cf8 <_strtod_l+0x3a8>
 8008d4c:	9b06      	ldr	r3, [sp, #24]
 8008d4e:	eba4 0808 	sub.w	r8, r4, r8
 8008d52:	4498      	add	r8, r3
 8008d54:	f1b8 0f00 	cmp.w	r8, #0
 8008d58:	f340 8096 	ble.w	8008e88 <_strtod_l+0x538>
 8008d5c:	f018 030f 	ands.w	r3, r8, #15
 8008d60:	d00a      	beq.n	8008d78 <_strtod_l+0x428>
 8008d62:	495f      	ldr	r1, [pc, #380]	; (8008ee0 <_strtod_l+0x590>)
 8008d64:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d68:	4652      	mov	r2, sl
 8008d6a:	465b      	mov	r3, fp
 8008d6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d70:	f7f7 fc00 	bl	8000574 <__aeabi_dmul>
 8008d74:	4682      	mov	sl, r0
 8008d76:	468b      	mov	fp, r1
 8008d78:	f038 080f 	bics.w	r8, r8, #15
 8008d7c:	d073      	beq.n	8008e66 <_strtod_l+0x516>
 8008d7e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008d82:	dd47      	ble.n	8008e14 <_strtod_l+0x4c4>
 8008d84:	2400      	movs	r4, #0
 8008d86:	46a0      	mov	r8, r4
 8008d88:	9407      	str	r4, [sp, #28]
 8008d8a:	9405      	str	r4, [sp, #20]
 8008d8c:	2322      	movs	r3, #34	; 0x22
 8008d8e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008ee8 <_strtod_l+0x598>
 8008d92:	f8c9 3000 	str.w	r3, [r9]
 8008d96:	f04f 0a00 	mov.w	sl, #0
 8008d9a:	9b07      	ldr	r3, [sp, #28]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f43f ae16 	beq.w	80089ce <_strtod_l+0x7e>
 8008da2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008da4:	4648      	mov	r0, r9
 8008da6:	f001 f827 	bl	8009df8 <_Bfree>
 8008daa:	9905      	ldr	r1, [sp, #20]
 8008dac:	4648      	mov	r0, r9
 8008dae:	f001 f823 	bl	8009df8 <_Bfree>
 8008db2:	4641      	mov	r1, r8
 8008db4:	4648      	mov	r0, r9
 8008db6:	f001 f81f 	bl	8009df8 <_Bfree>
 8008dba:	9907      	ldr	r1, [sp, #28]
 8008dbc:	4648      	mov	r0, r9
 8008dbe:	f001 f81b 	bl	8009df8 <_Bfree>
 8008dc2:	4621      	mov	r1, r4
 8008dc4:	4648      	mov	r0, r9
 8008dc6:	f001 f817 	bl	8009df8 <_Bfree>
 8008dca:	e600      	b.n	80089ce <_strtod_l+0x7e>
 8008dcc:	9a06      	ldr	r2, [sp, #24]
 8008dce:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	dbba      	blt.n	8008d4c <_strtod_l+0x3fc>
 8008dd6:	4d42      	ldr	r5, [pc, #264]	; (8008ee0 <_strtod_l+0x590>)
 8008dd8:	f1c4 040f 	rsb	r4, r4, #15
 8008ddc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008de0:	4652      	mov	r2, sl
 8008de2:	465b      	mov	r3, fp
 8008de4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008de8:	f7f7 fbc4 	bl	8000574 <__aeabi_dmul>
 8008dec:	9b06      	ldr	r3, [sp, #24]
 8008dee:	1b1c      	subs	r4, r3, r4
 8008df0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008df4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008df8:	e78d      	b.n	8008d16 <_strtod_l+0x3c6>
 8008dfa:	f113 0f16 	cmn.w	r3, #22
 8008dfe:	dba5      	blt.n	8008d4c <_strtod_l+0x3fc>
 8008e00:	4a37      	ldr	r2, [pc, #220]	; (8008ee0 <_strtod_l+0x590>)
 8008e02:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8008e06:	e9d2 2300 	ldrd	r2, r3, [r2]
 8008e0a:	4650      	mov	r0, sl
 8008e0c:	4659      	mov	r1, fp
 8008e0e:	f7f7 fcdb 	bl	80007c8 <__aeabi_ddiv>
 8008e12:	e782      	b.n	8008d1a <_strtod_l+0x3ca>
 8008e14:	2300      	movs	r3, #0
 8008e16:	4e33      	ldr	r6, [pc, #204]	; (8008ee4 <_strtod_l+0x594>)
 8008e18:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008e1c:	4650      	mov	r0, sl
 8008e1e:	4659      	mov	r1, fp
 8008e20:	461d      	mov	r5, r3
 8008e22:	f1b8 0f01 	cmp.w	r8, #1
 8008e26:	dc21      	bgt.n	8008e6c <_strtod_l+0x51c>
 8008e28:	b10b      	cbz	r3, 8008e2e <_strtod_l+0x4de>
 8008e2a:	4682      	mov	sl, r0
 8008e2c:	468b      	mov	fp, r1
 8008e2e:	4b2d      	ldr	r3, [pc, #180]	; (8008ee4 <_strtod_l+0x594>)
 8008e30:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008e34:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008e38:	4652      	mov	r2, sl
 8008e3a:	465b      	mov	r3, fp
 8008e3c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008e40:	f7f7 fb98 	bl	8000574 <__aeabi_dmul>
 8008e44:	4b28      	ldr	r3, [pc, #160]	; (8008ee8 <_strtod_l+0x598>)
 8008e46:	460a      	mov	r2, r1
 8008e48:	400b      	ands	r3, r1
 8008e4a:	4928      	ldr	r1, [pc, #160]	; (8008eec <_strtod_l+0x59c>)
 8008e4c:	428b      	cmp	r3, r1
 8008e4e:	4682      	mov	sl, r0
 8008e50:	d898      	bhi.n	8008d84 <_strtod_l+0x434>
 8008e52:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008e56:	428b      	cmp	r3, r1
 8008e58:	bf86      	itte	hi
 8008e5a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008ef4 <_strtod_l+0x5a4>
 8008e5e:	f04f 3aff 	movhi.w	sl, #4294967295
 8008e62:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008e66:	2300      	movs	r3, #0
 8008e68:	9304      	str	r3, [sp, #16]
 8008e6a:	e077      	b.n	8008f5c <_strtod_l+0x60c>
 8008e6c:	f018 0f01 	tst.w	r8, #1
 8008e70:	d006      	beq.n	8008e80 <_strtod_l+0x530>
 8008e72:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8008e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7a:	f7f7 fb7b 	bl	8000574 <__aeabi_dmul>
 8008e7e:	2301      	movs	r3, #1
 8008e80:	3501      	adds	r5, #1
 8008e82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008e86:	e7cc      	b.n	8008e22 <_strtod_l+0x4d2>
 8008e88:	d0ed      	beq.n	8008e66 <_strtod_l+0x516>
 8008e8a:	f1c8 0800 	rsb	r8, r8, #0
 8008e8e:	f018 020f 	ands.w	r2, r8, #15
 8008e92:	d00a      	beq.n	8008eaa <_strtod_l+0x55a>
 8008e94:	4b12      	ldr	r3, [pc, #72]	; (8008ee0 <_strtod_l+0x590>)
 8008e96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e9a:	4650      	mov	r0, sl
 8008e9c:	4659      	mov	r1, fp
 8008e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea2:	f7f7 fc91 	bl	80007c8 <__aeabi_ddiv>
 8008ea6:	4682      	mov	sl, r0
 8008ea8:	468b      	mov	fp, r1
 8008eaa:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008eae:	d0da      	beq.n	8008e66 <_strtod_l+0x516>
 8008eb0:	f1b8 0f1f 	cmp.w	r8, #31
 8008eb4:	dd20      	ble.n	8008ef8 <_strtod_l+0x5a8>
 8008eb6:	2400      	movs	r4, #0
 8008eb8:	46a0      	mov	r8, r4
 8008eba:	9407      	str	r4, [sp, #28]
 8008ebc:	9405      	str	r4, [sp, #20]
 8008ebe:	2322      	movs	r3, #34	; 0x22
 8008ec0:	f04f 0a00 	mov.w	sl, #0
 8008ec4:	f04f 0b00 	mov.w	fp, #0
 8008ec8:	f8c9 3000 	str.w	r3, [r9]
 8008ecc:	e765      	b.n	8008d9a <_strtod_l+0x44a>
 8008ece:	bf00      	nop
 8008ed0:	0800aa30 	.word	0x0800aa30
 8008ed4:	0800aa33 	.word	0x0800aa33
 8008ed8:	0800aa39 	.word	0x0800aa39
 8008edc:	0800aa50 	.word	0x0800aa50
 8008ee0:	0800aae8 	.word	0x0800aae8
 8008ee4:	0800aac0 	.word	0x0800aac0
 8008ee8:	7ff00000 	.word	0x7ff00000
 8008eec:	7ca00000 	.word	0x7ca00000
 8008ef0:	fff80000 	.word	0xfff80000
 8008ef4:	7fefffff 	.word	0x7fefffff
 8008ef8:	f018 0310 	ands.w	r3, r8, #16
 8008efc:	bf18      	it	ne
 8008efe:	236a      	movne	r3, #106	; 0x6a
 8008f00:	4da0      	ldr	r5, [pc, #640]	; (8009184 <_strtod_l+0x834>)
 8008f02:	9304      	str	r3, [sp, #16]
 8008f04:	4650      	mov	r0, sl
 8008f06:	4659      	mov	r1, fp
 8008f08:	2300      	movs	r3, #0
 8008f0a:	f1b8 0f00 	cmp.w	r8, #0
 8008f0e:	f300 810a 	bgt.w	8009126 <_strtod_l+0x7d6>
 8008f12:	b10b      	cbz	r3, 8008f18 <_strtod_l+0x5c8>
 8008f14:	4682      	mov	sl, r0
 8008f16:	468b      	mov	fp, r1
 8008f18:	9b04      	ldr	r3, [sp, #16]
 8008f1a:	b1bb      	cbz	r3, 8008f4c <_strtod_l+0x5fc>
 8008f1c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008f20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	4659      	mov	r1, fp
 8008f28:	dd10      	ble.n	8008f4c <_strtod_l+0x5fc>
 8008f2a:	2b1f      	cmp	r3, #31
 8008f2c:	f340 8107 	ble.w	800913e <_strtod_l+0x7ee>
 8008f30:	2b34      	cmp	r3, #52	; 0x34
 8008f32:	bfde      	ittt	le
 8008f34:	3b20      	suble	r3, #32
 8008f36:	f04f 32ff 	movle.w	r2, #4294967295
 8008f3a:	fa02 f303 	lslle.w	r3, r2, r3
 8008f3e:	f04f 0a00 	mov.w	sl, #0
 8008f42:	bfcc      	ite	gt
 8008f44:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008f48:	ea03 0b01 	andle.w	fp, r3, r1
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	2300      	movs	r3, #0
 8008f50:	4650      	mov	r0, sl
 8008f52:	4659      	mov	r1, fp
 8008f54:	f7f7 fd76 	bl	8000a44 <__aeabi_dcmpeq>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	d1ac      	bne.n	8008eb6 <_strtod_l+0x566>
 8008f5c:	9b07      	ldr	r3, [sp, #28]
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	9a05      	ldr	r2, [sp, #20]
 8008f62:	9908      	ldr	r1, [sp, #32]
 8008f64:	4623      	mov	r3, r4
 8008f66:	4648      	mov	r0, r9
 8008f68:	f000 ff98 	bl	8009e9c <__s2b>
 8008f6c:	9007      	str	r0, [sp, #28]
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	f43f af08 	beq.w	8008d84 <_strtod_l+0x434>
 8008f74:	9a06      	ldr	r2, [sp, #24]
 8008f76:	9b06      	ldr	r3, [sp, #24]
 8008f78:	2a00      	cmp	r2, #0
 8008f7a:	f1c3 0300 	rsb	r3, r3, #0
 8008f7e:	bfa8      	it	ge
 8008f80:	2300      	movge	r3, #0
 8008f82:	930e      	str	r3, [sp, #56]	; 0x38
 8008f84:	2400      	movs	r4, #0
 8008f86:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008f8a:	9316      	str	r3, [sp, #88]	; 0x58
 8008f8c:	46a0      	mov	r8, r4
 8008f8e:	9b07      	ldr	r3, [sp, #28]
 8008f90:	4648      	mov	r0, r9
 8008f92:	6859      	ldr	r1, [r3, #4]
 8008f94:	f000 fefc 	bl	8009d90 <_Balloc>
 8008f98:	9005      	str	r0, [sp, #20]
 8008f9a:	2800      	cmp	r0, #0
 8008f9c:	f43f aef6 	beq.w	8008d8c <_strtod_l+0x43c>
 8008fa0:	9b07      	ldr	r3, [sp, #28]
 8008fa2:	691a      	ldr	r2, [r3, #16]
 8008fa4:	3202      	adds	r2, #2
 8008fa6:	f103 010c 	add.w	r1, r3, #12
 8008faa:	0092      	lsls	r2, r2, #2
 8008fac:	300c      	adds	r0, #12
 8008fae:	f000 fee4 	bl	8009d7a <memcpy>
 8008fb2:	aa1e      	add	r2, sp, #120	; 0x78
 8008fb4:	a91d      	add	r1, sp, #116	; 0x74
 8008fb6:	ec4b ab10 	vmov	d0, sl, fp
 8008fba:	4648      	mov	r0, r9
 8008fbc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008fc0:	f001 fa28 	bl	800a414 <__d2b>
 8008fc4:	901c      	str	r0, [sp, #112]	; 0x70
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	f43f aee0 	beq.w	8008d8c <_strtod_l+0x43c>
 8008fcc:	2101      	movs	r1, #1
 8008fce:	4648      	mov	r0, r9
 8008fd0:	f000 fff0 	bl	8009fb4 <__i2b>
 8008fd4:	4680      	mov	r8, r0
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	f43f aed8 	beq.w	8008d8c <_strtod_l+0x43c>
 8008fdc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008fde:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008fe0:	2e00      	cmp	r6, #0
 8008fe2:	bfab      	itete	ge
 8008fe4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008fe6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008fe8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008fea:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8008fec:	bfac      	ite	ge
 8008fee:	18f7      	addge	r7, r6, r3
 8008ff0:	1b9d      	sublt	r5, r3, r6
 8008ff2:	9b04      	ldr	r3, [sp, #16]
 8008ff4:	1af6      	subs	r6, r6, r3
 8008ff6:	4416      	add	r6, r2
 8008ff8:	4b63      	ldr	r3, [pc, #396]	; (8009188 <_strtod_l+0x838>)
 8008ffa:	3e01      	subs	r6, #1
 8008ffc:	429e      	cmp	r6, r3
 8008ffe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009002:	f280 80af 	bge.w	8009164 <_strtod_l+0x814>
 8009006:	1b9b      	subs	r3, r3, r6
 8009008:	2b1f      	cmp	r3, #31
 800900a:	eba2 0203 	sub.w	r2, r2, r3
 800900e:	f04f 0101 	mov.w	r1, #1
 8009012:	f300 809b 	bgt.w	800914c <_strtod_l+0x7fc>
 8009016:	fa01 f303 	lsl.w	r3, r1, r3
 800901a:	930f      	str	r3, [sp, #60]	; 0x3c
 800901c:	2300      	movs	r3, #0
 800901e:	930a      	str	r3, [sp, #40]	; 0x28
 8009020:	18be      	adds	r6, r7, r2
 8009022:	9b04      	ldr	r3, [sp, #16]
 8009024:	42b7      	cmp	r7, r6
 8009026:	4415      	add	r5, r2
 8009028:	441d      	add	r5, r3
 800902a:	463b      	mov	r3, r7
 800902c:	bfa8      	it	ge
 800902e:	4633      	movge	r3, r6
 8009030:	42ab      	cmp	r3, r5
 8009032:	bfa8      	it	ge
 8009034:	462b      	movge	r3, r5
 8009036:	2b00      	cmp	r3, #0
 8009038:	bfc2      	ittt	gt
 800903a:	1af6      	subgt	r6, r6, r3
 800903c:	1aed      	subgt	r5, r5, r3
 800903e:	1aff      	subgt	r7, r7, r3
 8009040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009042:	b1bb      	cbz	r3, 8009074 <_strtod_l+0x724>
 8009044:	4641      	mov	r1, r8
 8009046:	461a      	mov	r2, r3
 8009048:	4648      	mov	r0, r9
 800904a:	f001 f853 	bl	800a0f4 <__pow5mult>
 800904e:	4680      	mov	r8, r0
 8009050:	2800      	cmp	r0, #0
 8009052:	f43f ae9b 	beq.w	8008d8c <_strtod_l+0x43c>
 8009056:	4601      	mov	r1, r0
 8009058:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800905a:	4648      	mov	r0, r9
 800905c:	f000 ffb3 	bl	8009fc6 <__multiply>
 8009060:	900c      	str	r0, [sp, #48]	; 0x30
 8009062:	2800      	cmp	r0, #0
 8009064:	f43f ae92 	beq.w	8008d8c <_strtod_l+0x43c>
 8009068:	991c      	ldr	r1, [sp, #112]	; 0x70
 800906a:	4648      	mov	r0, r9
 800906c:	f000 fec4 	bl	8009df8 <_Bfree>
 8009070:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009072:	931c      	str	r3, [sp, #112]	; 0x70
 8009074:	2e00      	cmp	r6, #0
 8009076:	dc7a      	bgt.n	800916e <_strtod_l+0x81e>
 8009078:	9b06      	ldr	r3, [sp, #24]
 800907a:	2b00      	cmp	r3, #0
 800907c:	dd08      	ble.n	8009090 <_strtod_l+0x740>
 800907e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009080:	9905      	ldr	r1, [sp, #20]
 8009082:	4648      	mov	r0, r9
 8009084:	f001 f836 	bl	800a0f4 <__pow5mult>
 8009088:	9005      	str	r0, [sp, #20]
 800908a:	2800      	cmp	r0, #0
 800908c:	f43f ae7e 	beq.w	8008d8c <_strtod_l+0x43c>
 8009090:	2d00      	cmp	r5, #0
 8009092:	dd08      	ble.n	80090a6 <_strtod_l+0x756>
 8009094:	462a      	mov	r2, r5
 8009096:	9905      	ldr	r1, [sp, #20]
 8009098:	4648      	mov	r0, r9
 800909a:	f001 f879 	bl	800a190 <__lshift>
 800909e:	9005      	str	r0, [sp, #20]
 80090a0:	2800      	cmp	r0, #0
 80090a2:	f43f ae73 	beq.w	8008d8c <_strtod_l+0x43c>
 80090a6:	2f00      	cmp	r7, #0
 80090a8:	dd08      	ble.n	80090bc <_strtod_l+0x76c>
 80090aa:	4641      	mov	r1, r8
 80090ac:	463a      	mov	r2, r7
 80090ae:	4648      	mov	r0, r9
 80090b0:	f001 f86e 	bl	800a190 <__lshift>
 80090b4:	4680      	mov	r8, r0
 80090b6:	2800      	cmp	r0, #0
 80090b8:	f43f ae68 	beq.w	8008d8c <_strtod_l+0x43c>
 80090bc:	9a05      	ldr	r2, [sp, #20]
 80090be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80090c0:	4648      	mov	r0, r9
 80090c2:	f001 f8d3 	bl	800a26c <__mdiff>
 80090c6:	4604      	mov	r4, r0
 80090c8:	2800      	cmp	r0, #0
 80090ca:	f43f ae5f 	beq.w	8008d8c <_strtod_l+0x43c>
 80090ce:	68c3      	ldr	r3, [r0, #12]
 80090d0:	930c      	str	r3, [sp, #48]	; 0x30
 80090d2:	2300      	movs	r3, #0
 80090d4:	60c3      	str	r3, [r0, #12]
 80090d6:	4641      	mov	r1, r8
 80090d8:	f001 f8ae 	bl	800a238 <__mcmp>
 80090dc:	2800      	cmp	r0, #0
 80090de:	da55      	bge.n	800918c <_strtod_l+0x83c>
 80090e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090e2:	b9e3      	cbnz	r3, 800911e <_strtod_l+0x7ce>
 80090e4:	f1ba 0f00 	cmp.w	sl, #0
 80090e8:	d119      	bne.n	800911e <_strtod_l+0x7ce>
 80090ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090ee:	b9b3      	cbnz	r3, 800911e <_strtod_l+0x7ce>
 80090f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80090f4:	0d1b      	lsrs	r3, r3, #20
 80090f6:	051b      	lsls	r3, r3, #20
 80090f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80090fc:	d90f      	bls.n	800911e <_strtod_l+0x7ce>
 80090fe:	6963      	ldr	r3, [r4, #20]
 8009100:	b913      	cbnz	r3, 8009108 <_strtod_l+0x7b8>
 8009102:	6923      	ldr	r3, [r4, #16]
 8009104:	2b01      	cmp	r3, #1
 8009106:	dd0a      	ble.n	800911e <_strtod_l+0x7ce>
 8009108:	4621      	mov	r1, r4
 800910a:	2201      	movs	r2, #1
 800910c:	4648      	mov	r0, r9
 800910e:	f001 f83f 	bl	800a190 <__lshift>
 8009112:	4641      	mov	r1, r8
 8009114:	4604      	mov	r4, r0
 8009116:	f001 f88f 	bl	800a238 <__mcmp>
 800911a:	2800      	cmp	r0, #0
 800911c:	dc67      	bgt.n	80091ee <_strtod_l+0x89e>
 800911e:	9b04      	ldr	r3, [sp, #16]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d171      	bne.n	8009208 <_strtod_l+0x8b8>
 8009124:	e63d      	b.n	8008da2 <_strtod_l+0x452>
 8009126:	f018 0f01 	tst.w	r8, #1
 800912a:	d004      	beq.n	8009136 <_strtod_l+0x7e6>
 800912c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009130:	f7f7 fa20 	bl	8000574 <__aeabi_dmul>
 8009134:	2301      	movs	r3, #1
 8009136:	ea4f 0868 	mov.w	r8, r8, asr #1
 800913a:	3508      	adds	r5, #8
 800913c:	e6e5      	b.n	8008f0a <_strtod_l+0x5ba>
 800913e:	f04f 32ff 	mov.w	r2, #4294967295
 8009142:	fa02 f303 	lsl.w	r3, r2, r3
 8009146:	ea03 0a0a 	and.w	sl, r3, sl
 800914a:	e6ff      	b.n	8008f4c <_strtod_l+0x5fc>
 800914c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009150:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009154:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009158:	36e2      	adds	r6, #226	; 0xe2
 800915a:	fa01 f306 	lsl.w	r3, r1, r6
 800915e:	930a      	str	r3, [sp, #40]	; 0x28
 8009160:	910f      	str	r1, [sp, #60]	; 0x3c
 8009162:	e75d      	b.n	8009020 <_strtod_l+0x6d0>
 8009164:	2300      	movs	r3, #0
 8009166:	930a      	str	r3, [sp, #40]	; 0x28
 8009168:	2301      	movs	r3, #1
 800916a:	930f      	str	r3, [sp, #60]	; 0x3c
 800916c:	e758      	b.n	8009020 <_strtod_l+0x6d0>
 800916e:	4632      	mov	r2, r6
 8009170:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009172:	4648      	mov	r0, r9
 8009174:	f001 f80c 	bl	800a190 <__lshift>
 8009178:	901c      	str	r0, [sp, #112]	; 0x70
 800917a:	2800      	cmp	r0, #0
 800917c:	f47f af7c 	bne.w	8009078 <_strtod_l+0x728>
 8009180:	e604      	b.n	8008d8c <_strtod_l+0x43c>
 8009182:	bf00      	nop
 8009184:	0800aa68 	.word	0x0800aa68
 8009188:	fffffc02 	.word	0xfffffc02
 800918c:	465d      	mov	r5, fp
 800918e:	f040 8086 	bne.w	800929e <_strtod_l+0x94e>
 8009192:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009194:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009198:	b32a      	cbz	r2, 80091e6 <_strtod_l+0x896>
 800919a:	4aaf      	ldr	r2, [pc, #700]	; (8009458 <_strtod_l+0xb08>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d153      	bne.n	8009248 <_strtod_l+0x8f8>
 80091a0:	9b04      	ldr	r3, [sp, #16]
 80091a2:	4650      	mov	r0, sl
 80091a4:	b1d3      	cbz	r3, 80091dc <_strtod_l+0x88c>
 80091a6:	4aad      	ldr	r2, [pc, #692]	; (800945c <_strtod_l+0xb0c>)
 80091a8:	402a      	ands	r2, r5
 80091aa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80091ae:	f04f 31ff 	mov.w	r1, #4294967295
 80091b2:	d816      	bhi.n	80091e2 <_strtod_l+0x892>
 80091b4:	0d12      	lsrs	r2, r2, #20
 80091b6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80091ba:	fa01 f303 	lsl.w	r3, r1, r3
 80091be:	4298      	cmp	r0, r3
 80091c0:	d142      	bne.n	8009248 <_strtod_l+0x8f8>
 80091c2:	4ba7      	ldr	r3, [pc, #668]	; (8009460 <_strtod_l+0xb10>)
 80091c4:	429d      	cmp	r5, r3
 80091c6:	d102      	bne.n	80091ce <_strtod_l+0x87e>
 80091c8:	3001      	adds	r0, #1
 80091ca:	f43f addf 	beq.w	8008d8c <_strtod_l+0x43c>
 80091ce:	4ba3      	ldr	r3, [pc, #652]	; (800945c <_strtod_l+0xb0c>)
 80091d0:	402b      	ands	r3, r5
 80091d2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80091d6:	f04f 0a00 	mov.w	sl, #0
 80091da:	e7a0      	b.n	800911e <_strtod_l+0x7ce>
 80091dc:	f04f 33ff 	mov.w	r3, #4294967295
 80091e0:	e7ed      	b.n	80091be <_strtod_l+0x86e>
 80091e2:	460b      	mov	r3, r1
 80091e4:	e7eb      	b.n	80091be <_strtod_l+0x86e>
 80091e6:	bb7b      	cbnz	r3, 8009248 <_strtod_l+0x8f8>
 80091e8:	f1ba 0f00 	cmp.w	sl, #0
 80091ec:	d12c      	bne.n	8009248 <_strtod_l+0x8f8>
 80091ee:	9904      	ldr	r1, [sp, #16]
 80091f0:	4a9a      	ldr	r2, [pc, #616]	; (800945c <_strtod_l+0xb0c>)
 80091f2:	465b      	mov	r3, fp
 80091f4:	b1f1      	cbz	r1, 8009234 <_strtod_l+0x8e4>
 80091f6:	ea02 010b 	and.w	r1, r2, fp
 80091fa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80091fe:	dc19      	bgt.n	8009234 <_strtod_l+0x8e4>
 8009200:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009204:	f77f ae5b 	ble.w	8008ebe <_strtod_l+0x56e>
 8009208:	4a96      	ldr	r2, [pc, #600]	; (8009464 <_strtod_l+0xb14>)
 800920a:	2300      	movs	r3, #0
 800920c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009210:	4650      	mov	r0, sl
 8009212:	4659      	mov	r1, fp
 8009214:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009218:	f7f7 f9ac 	bl	8000574 <__aeabi_dmul>
 800921c:	4682      	mov	sl, r0
 800921e:	468b      	mov	fp, r1
 8009220:	2900      	cmp	r1, #0
 8009222:	f47f adbe 	bne.w	8008da2 <_strtod_l+0x452>
 8009226:	2800      	cmp	r0, #0
 8009228:	f47f adbb 	bne.w	8008da2 <_strtod_l+0x452>
 800922c:	2322      	movs	r3, #34	; 0x22
 800922e:	f8c9 3000 	str.w	r3, [r9]
 8009232:	e5b6      	b.n	8008da2 <_strtod_l+0x452>
 8009234:	4013      	ands	r3, r2
 8009236:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800923a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800923e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009242:	f04f 3aff 	mov.w	sl, #4294967295
 8009246:	e76a      	b.n	800911e <_strtod_l+0x7ce>
 8009248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800924a:	b193      	cbz	r3, 8009272 <_strtod_l+0x922>
 800924c:	422b      	tst	r3, r5
 800924e:	f43f af66 	beq.w	800911e <_strtod_l+0x7ce>
 8009252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009254:	9a04      	ldr	r2, [sp, #16]
 8009256:	4650      	mov	r0, sl
 8009258:	4659      	mov	r1, fp
 800925a:	b173      	cbz	r3, 800927a <_strtod_l+0x92a>
 800925c:	f7ff fb5c 	bl	8008918 <sulp>
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009268:	f7f6 ffce 	bl	8000208 <__adddf3>
 800926c:	4682      	mov	sl, r0
 800926e:	468b      	mov	fp, r1
 8009270:	e755      	b.n	800911e <_strtod_l+0x7ce>
 8009272:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009274:	ea13 0f0a 	tst.w	r3, sl
 8009278:	e7e9      	b.n	800924e <_strtod_l+0x8fe>
 800927a:	f7ff fb4d 	bl	8008918 <sulp>
 800927e:	4602      	mov	r2, r0
 8009280:	460b      	mov	r3, r1
 8009282:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009286:	f7f6 ffbd 	bl	8000204 <__aeabi_dsub>
 800928a:	2200      	movs	r2, #0
 800928c:	2300      	movs	r3, #0
 800928e:	4682      	mov	sl, r0
 8009290:	468b      	mov	fp, r1
 8009292:	f7f7 fbd7 	bl	8000a44 <__aeabi_dcmpeq>
 8009296:	2800      	cmp	r0, #0
 8009298:	f47f ae11 	bne.w	8008ebe <_strtod_l+0x56e>
 800929c:	e73f      	b.n	800911e <_strtod_l+0x7ce>
 800929e:	4641      	mov	r1, r8
 80092a0:	4620      	mov	r0, r4
 80092a2:	f001 f906 	bl	800a4b2 <__ratio>
 80092a6:	ec57 6b10 	vmov	r6, r7, d0
 80092aa:	2200      	movs	r2, #0
 80092ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092b0:	ee10 0a10 	vmov	r0, s0
 80092b4:	4639      	mov	r1, r7
 80092b6:	f7f7 fbd9 	bl	8000a6c <__aeabi_dcmple>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	d077      	beq.n	80093ae <_strtod_l+0xa5e>
 80092be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d04a      	beq.n	800935a <_strtod_l+0xa0a>
 80092c4:	4b68      	ldr	r3, [pc, #416]	; (8009468 <_strtod_l+0xb18>)
 80092c6:	2200      	movs	r2, #0
 80092c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80092cc:	4f66      	ldr	r7, [pc, #408]	; (8009468 <_strtod_l+0xb18>)
 80092ce:	2600      	movs	r6, #0
 80092d0:	4b62      	ldr	r3, [pc, #392]	; (800945c <_strtod_l+0xb0c>)
 80092d2:	402b      	ands	r3, r5
 80092d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80092d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80092d8:	4b64      	ldr	r3, [pc, #400]	; (800946c <_strtod_l+0xb1c>)
 80092da:	429a      	cmp	r2, r3
 80092dc:	f040 80ce 	bne.w	800947c <_strtod_l+0xb2c>
 80092e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80092e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80092e8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80092ec:	ec4b ab10 	vmov	d0, sl, fp
 80092f0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80092f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80092f8:	f001 f816 	bl	800a328 <__ulp>
 80092fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009300:	ec53 2b10 	vmov	r2, r3, d0
 8009304:	f7f7 f936 	bl	8000574 <__aeabi_dmul>
 8009308:	4652      	mov	r2, sl
 800930a:	465b      	mov	r3, fp
 800930c:	f7f6 ff7c 	bl	8000208 <__adddf3>
 8009310:	460b      	mov	r3, r1
 8009312:	4952      	ldr	r1, [pc, #328]	; (800945c <_strtod_l+0xb0c>)
 8009314:	4a56      	ldr	r2, [pc, #344]	; (8009470 <_strtod_l+0xb20>)
 8009316:	4019      	ands	r1, r3
 8009318:	4291      	cmp	r1, r2
 800931a:	4682      	mov	sl, r0
 800931c:	d95b      	bls.n	80093d6 <_strtod_l+0xa86>
 800931e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009320:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009324:	4293      	cmp	r3, r2
 8009326:	d103      	bne.n	8009330 <_strtod_l+0x9e0>
 8009328:	9b08      	ldr	r3, [sp, #32]
 800932a:	3301      	adds	r3, #1
 800932c:	f43f ad2e 	beq.w	8008d8c <_strtod_l+0x43c>
 8009330:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009460 <_strtod_l+0xb10>
 8009334:	f04f 3aff 	mov.w	sl, #4294967295
 8009338:	991c      	ldr	r1, [sp, #112]	; 0x70
 800933a:	4648      	mov	r0, r9
 800933c:	f000 fd5c 	bl	8009df8 <_Bfree>
 8009340:	9905      	ldr	r1, [sp, #20]
 8009342:	4648      	mov	r0, r9
 8009344:	f000 fd58 	bl	8009df8 <_Bfree>
 8009348:	4641      	mov	r1, r8
 800934a:	4648      	mov	r0, r9
 800934c:	f000 fd54 	bl	8009df8 <_Bfree>
 8009350:	4621      	mov	r1, r4
 8009352:	4648      	mov	r0, r9
 8009354:	f000 fd50 	bl	8009df8 <_Bfree>
 8009358:	e619      	b.n	8008f8e <_strtod_l+0x63e>
 800935a:	f1ba 0f00 	cmp.w	sl, #0
 800935e:	d11a      	bne.n	8009396 <_strtod_l+0xa46>
 8009360:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009364:	b9eb      	cbnz	r3, 80093a2 <_strtod_l+0xa52>
 8009366:	2200      	movs	r2, #0
 8009368:	4b3f      	ldr	r3, [pc, #252]	; (8009468 <_strtod_l+0xb18>)
 800936a:	4630      	mov	r0, r6
 800936c:	4639      	mov	r1, r7
 800936e:	f7f7 fb73 	bl	8000a58 <__aeabi_dcmplt>
 8009372:	b9c8      	cbnz	r0, 80093a8 <_strtod_l+0xa58>
 8009374:	4630      	mov	r0, r6
 8009376:	4639      	mov	r1, r7
 8009378:	2200      	movs	r2, #0
 800937a:	4b3e      	ldr	r3, [pc, #248]	; (8009474 <_strtod_l+0xb24>)
 800937c:	f7f7 f8fa 	bl	8000574 <__aeabi_dmul>
 8009380:	4606      	mov	r6, r0
 8009382:	460f      	mov	r7, r1
 8009384:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009388:	9618      	str	r6, [sp, #96]	; 0x60
 800938a:	9319      	str	r3, [sp, #100]	; 0x64
 800938c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009390:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009394:	e79c      	b.n	80092d0 <_strtod_l+0x980>
 8009396:	f1ba 0f01 	cmp.w	sl, #1
 800939a:	d102      	bne.n	80093a2 <_strtod_l+0xa52>
 800939c:	2d00      	cmp	r5, #0
 800939e:	f43f ad8e 	beq.w	8008ebe <_strtod_l+0x56e>
 80093a2:	2200      	movs	r2, #0
 80093a4:	4b34      	ldr	r3, [pc, #208]	; (8009478 <_strtod_l+0xb28>)
 80093a6:	e78f      	b.n	80092c8 <_strtod_l+0x978>
 80093a8:	2600      	movs	r6, #0
 80093aa:	4f32      	ldr	r7, [pc, #200]	; (8009474 <_strtod_l+0xb24>)
 80093ac:	e7ea      	b.n	8009384 <_strtod_l+0xa34>
 80093ae:	4b31      	ldr	r3, [pc, #196]	; (8009474 <_strtod_l+0xb24>)
 80093b0:	4630      	mov	r0, r6
 80093b2:	4639      	mov	r1, r7
 80093b4:	2200      	movs	r2, #0
 80093b6:	f7f7 f8dd 	bl	8000574 <__aeabi_dmul>
 80093ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093bc:	4606      	mov	r6, r0
 80093be:	460f      	mov	r7, r1
 80093c0:	b933      	cbnz	r3, 80093d0 <_strtod_l+0xa80>
 80093c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093c6:	9010      	str	r0, [sp, #64]	; 0x40
 80093c8:	9311      	str	r3, [sp, #68]	; 0x44
 80093ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80093ce:	e7df      	b.n	8009390 <_strtod_l+0xa40>
 80093d0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80093d4:	e7f9      	b.n	80093ca <_strtod_l+0xa7a>
 80093d6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80093da:	9b04      	ldr	r3, [sp, #16]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1ab      	bne.n	8009338 <_strtod_l+0x9e8>
 80093e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80093e4:	0d1b      	lsrs	r3, r3, #20
 80093e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80093e8:	051b      	lsls	r3, r3, #20
 80093ea:	429a      	cmp	r2, r3
 80093ec:	465d      	mov	r5, fp
 80093ee:	d1a3      	bne.n	8009338 <_strtod_l+0x9e8>
 80093f0:	4639      	mov	r1, r7
 80093f2:	4630      	mov	r0, r6
 80093f4:	f7f7 fb58 	bl	8000aa8 <__aeabi_d2iz>
 80093f8:	f7f7 f852 	bl	80004a0 <__aeabi_i2d>
 80093fc:	460b      	mov	r3, r1
 80093fe:	4602      	mov	r2, r0
 8009400:	4639      	mov	r1, r7
 8009402:	4630      	mov	r0, r6
 8009404:	f7f6 fefe 	bl	8000204 <__aeabi_dsub>
 8009408:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800940a:	4606      	mov	r6, r0
 800940c:	460f      	mov	r7, r1
 800940e:	b933      	cbnz	r3, 800941e <_strtod_l+0xace>
 8009410:	f1ba 0f00 	cmp.w	sl, #0
 8009414:	d103      	bne.n	800941e <_strtod_l+0xace>
 8009416:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800941a:	2d00      	cmp	r5, #0
 800941c:	d06d      	beq.n	80094fa <_strtod_l+0xbaa>
 800941e:	a30a      	add	r3, pc, #40	; (adr r3, 8009448 <_strtod_l+0xaf8>)
 8009420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009424:	4630      	mov	r0, r6
 8009426:	4639      	mov	r1, r7
 8009428:	f7f7 fb16 	bl	8000a58 <__aeabi_dcmplt>
 800942c:	2800      	cmp	r0, #0
 800942e:	f47f acb8 	bne.w	8008da2 <_strtod_l+0x452>
 8009432:	a307      	add	r3, pc, #28	; (adr r3, 8009450 <_strtod_l+0xb00>)
 8009434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009438:	4630      	mov	r0, r6
 800943a:	4639      	mov	r1, r7
 800943c:	f7f7 fb2a 	bl	8000a94 <__aeabi_dcmpgt>
 8009440:	2800      	cmp	r0, #0
 8009442:	f43f af79 	beq.w	8009338 <_strtod_l+0x9e8>
 8009446:	e4ac      	b.n	8008da2 <_strtod_l+0x452>
 8009448:	94a03595 	.word	0x94a03595
 800944c:	3fdfffff 	.word	0x3fdfffff
 8009450:	35afe535 	.word	0x35afe535
 8009454:	3fe00000 	.word	0x3fe00000
 8009458:	000fffff 	.word	0x000fffff
 800945c:	7ff00000 	.word	0x7ff00000
 8009460:	7fefffff 	.word	0x7fefffff
 8009464:	39500000 	.word	0x39500000
 8009468:	3ff00000 	.word	0x3ff00000
 800946c:	7fe00000 	.word	0x7fe00000
 8009470:	7c9fffff 	.word	0x7c9fffff
 8009474:	3fe00000 	.word	0x3fe00000
 8009478:	bff00000 	.word	0xbff00000
 800947c:	9b04      	ldr	r3, [sp, #16]
 800947e:	b333      	cbz	r3, 80094ce <_strtod_l+0xb7e>
 8009480:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009482:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009486:	d822      	bhi.n	80094ce <_strtod_l+0xb7e>
 8009488:	a327      	add	r3, pc, #156	; (adr r3, 8009528 <_strtod_l+0xbd8>)
 800948a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948e:	4630      	mov	r0, r6
 8009490:	4639      	mov	r1, r7
 8009492:	f7f7 faeb 	bl	8000a6c <__aeabi_dcmple>
 8009496:	b1a0      	cbz	r0, 80094c2 <_strtod_l+0xb72>
 8009498:	4639      	mov	r1, r7
 800949a:	4630      	mov	r0, r6
 800949c:	f7f7 fb2c 	bl	8000af8 <__aeabi_d2uiz>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	bf08      	it	eq
 80094a4:	2001      	moveq	r0, #1
 80094a6:	f7f6 ffeb 	bl	8000480 <__aeabi_ui2d>
 80094aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094ac:	4606      	mov	r6, r0
 80094ae:	460f      	mov	r7, r1
 80094b0:	bb03      	cbnz	r3, 80094f4 <_strtod_l+0xba4>
 80094b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094b6:	9012      	str	r0, [sp, #72]	; 0x48
 80094b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80094ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80094be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80094c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80094c6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80094ca:	1a9b      	subs	r3, r3, r2
 80094cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80094ce:	ed9d 0b08 	vldr	d0, [sp, #32]
 80094d2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80094d6:	f000 ff27 	bl	800a328 <__ulp>
 80094da:	4650      	mov	r0, sl
 80094dc:	ec53 2b10 	vmov	r2, r3, d0
 80094e0:	4659      	mov	r1, fp
 80094e2:	f7f7 f847 	bl	8000574 <__aeabi_dmul>
 80094e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80094ea:	f7f6 fe8d 	bl	8000208 <__adddf3>
 80094ee:	4682      	mov	sl, r0
 80094f0:	468b      	mov	fp, r1
 80094f2:	e772      	b.n	80093da <_strtod_l+0xa8a>
 80094f4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80094f8:	e7df      	b.n	80094ba <_strtod_l+0xb6a>
 80094fa:	a30d      	add	r3, pc, #52	; (adr r3, 8009530 <_strtod_l+0xbe0>)
 80094fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009500:	f7f7 faaa 	bl	8000a58 <__aeabi_dcmplt>
 8009504:	e79c      	b.n	8009440 <_strtod_l+0xaf0>
 8009506:	2300      	movs	r3, #0
 8009508:	930d      	str	r3, [sp, #52]	; 0x34
 800950a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800950c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800950e:	6013      	str	r3, [r2, #0]
 8009510:	f7ff ba61 	b.w	80089d6 <_strtod_l+0x86>
 8009514:	2b65      	cmp	r3, #101	; 0x65
 8009516:	f04f 0200 	mov.w	r2, #0
 800951a:	f43f ab4e 	beq.w	8008bba <_strtod_l+0x26a>
 800951e:	2101      	movs	r1, #1
 8009520:	4614      	mov	r4, r2
 8009522:	9104      	str	r1, [sp, #16]
 8009524:	f7ff bacb 	b.w	8008abe <_strtod_l+0x16e>
 8009528:	ffc00000 	.word	0xffc00000
 800952c:	41dfffff 	.word	0x41dfffff
 8009530:	94a03595 	.word	0x94a03595
 8009534:	3fcfffff 	.word	0x3fcfffff

08009538 <strtod>:
 8009538:	4b07      	ldr	r3, [pc, #28]	; (8009558 <strtod+0x20>)
 800953a:	4a08      	ldr	r2, [pc, #32]	; (800955c <strtod+0x24>)
 800953c:	b410      	push	{r4}
 800953e:	681c      	ldr	r4, [r3, #0]
 8009540:	6a23      	ldr	r3, [r4, #32]
 8009542:	2b00      	cmp	r3, #0
 8009544:	bf08      	it	eq
 8009546:	4613      	moveq	r3, r2
 8009548:	460a      	mov	r2, r1
 800954a:	4601      	mov	r1, r0
 800954c:	4620      	mov	r0, r4
 800954e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009552:	f7ff b9fd 	b.w	8008950 <_strtod_l>
 8009556:	bf00      	nop
 8009558:	20000a24 	.word	0x20000a24
 800955c:	20000a88 	.word	0x20000a88

08009560 <_strtol_l.isra.0>:
 8009560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009564:	4680      	mov	r8, r0
 8009566:	4689      	mov	r9, r1
 8009568:	4692      	mov	sl, r2
 800956a:	461e      	mov	r6, r3
 800956c:	460f      	mov	r7, r1
 800956e:	463d      	mov	r5, r7
 8009570:	9808      	ldr	r0, [sp, #32]
 8009572:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009576:	f000 fbe9 	bl	8009d4c <__locale_ctype_ptr_l>
 800957a:	4420      	add	r0, r4
 800957c:	7843      	ldrb	r3, [r0, #1]
 800957e:	f013 0308 	ands.w	r3, r3, #8
 8009582:	d132      	bne.n	80095ea <_strtol_l.isra.0+0x8a>
 8009584:	2c2d      	cmp	r4, #45	; 0x2d
 8009586:	d132      	bne.n	80095ee <_strtol_l.isra.0+0x8e>
 8009588:	787c      	ldrb	r4, [r7, #1]
 800958a:	1cbd      	adds	r5, r7, #2
 800958c:	2201      	movs	r2, #1
 800958e:	2e00      	cmp	r6, #0
 8009590:	d05d      	beq.n	800964e <_strtol_l.isra.0+0xee>
 8009592:	2e10      	cmp	r6, #16
 8009594:	d109      	bne.n	80095aa <_strtol_l.isra.0+0x4a>
 8009596:	2c30      	cmp	r4, #48	; 0x30
 8009598:	d107      	bne.n	80095aa <_strtol_l.isra.0+0x4a>
 800959a:	782b      	ldrb	r3, [r5, #0]
 800959c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095a0:	2b58      	cmp	r3, #88	; 0x58
 80095a2:	d14f      	bne.n	8009644 <_strtol_l.isra.0+0xe4>
 80095a4:	786c      	ldrb	r4, [r5, #1]
 80095a6:	2610      	movs	r6, #16
 80095a8:	3502      	adds	r5, #2
 80095aa:	2a00      	cmp	r2, #0
 80095ac:	bf14      	ite	ne
 80095ae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80095b2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80095b6:	2700      	movs	r7, #0
 80095b8:	fbb1 fcf6 	udiv	ip, r1, r6
 80095bc:	4638      	mov	r0, r7
 80095be:	fb06 1e1c 	mls	lr, r6, ip, r1
 80095c2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80095c6:	2b09      	cmp	r3, #9
 80095c8:	d817      	bhi.n	80095fa <_strtol_l.isra.0+0x9a>
 80095ca:	461c      	mov	r4, r3
 80095cc:	42a6      	cmp	r6, r4
 80095ce:	dd23      	ble.n	8009618 <_strtol_l.isra.0+0xb8>
 80095d0:	1c7b      	adds	r3, r7, #1
 80095d2:	d007      	beq.n	80095e4 <_strtol_l.isra.0+0x84>
 80095d4:	4584      	cmp	ip, r0
 80095d6:	d31c      	bcc.n	8009612 <_strtol_l.isra.0+0xb2>
 80095d8:	d101      	bne.n	80095de <_strtol_l.isra.0+0x7e>
 80095da:	45a6      	cmp	lr, r4
 80095dc:	db19      	blt.n	8009612 <_strtol_l.isra.0+0xb2>
 80095de:	fb00 4006 	mla	r0, r0, r6, r4
 80095e2:	2701      	movs	r7, #1
 80095e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095e8:	e7eb      	b.n	80095c2 <_strtol_l.isra.0+0x62>
 80095ea:	462f      	mov	r7, r5
 80095ec:	e7bf      	b.n	800956e <_strtol_l.isra.0+0xe>
 80095ee:	2c2b      	cmp	r4, #43	; 0x2b
 80095f0:	bf04      	itt	eq
 80095f2:	1cbd      	addeq	r5, r7, #2
 80095f4:	787c      	ldrbeq	r4, [r7, #1]
 80095f6:	461a      	mov	r2, r3
 80095f8:	e7c9      	b.n	800958e <_strtol_l.isra.0+0x2e>
 80095fa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80095fe:	2b19      	cmp	r3, #25
 8009600:	d801      	bhi.n	8009606 <_strtol_l.isra.0+0xa6>
 8009602:	3c37      	subs	r4, #55	; 0x37
 8009604:	e7e2      	b.n	80095cc <_strtol_l.isra.0+0x6c>
 8009606:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800960a:	2b19      	cmp	r3, #25
 800960c:	d804      	bhi.n	8009618 <_strtol_l.isra.0+0xb8>
 800960e:	3c57      	subs	r4, #87	; 0x57
 8009610:	e7dc      	b.n	80095cc <_strtol_l.isra.0+0x6c>
 8009612:	f04f 37ff 	mov.w	r7, #4294967295
 8009616:	e7e5      	b.n	80095e4 <_strtol_l.isra.0+0x84>
 8009618:	1c7b      	adds	r3, r7, #1
 800961a:	d108      	bne.n	800962e <_strtol_l.isra.0+0xce>
 800961c:	2322      	movs	r3, #34	; 0x22
 800961e:	f8c8 3000 	str.w	r3, [r8]
 8009622:	4608      	mov	r0, r1
 8009624:	f1ba 0f00 	cmp.w	sl, #0
 8009628:	d107      	bne.n	800963a <_strtol_l.isra.0+0xda>
 800962a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800962e:	b102      	cbz	r2, 8009632 <_strtol_l.isra.0+0xd2>
 8009630:	4240      	negs	r0, r0
 8009632:	f1ba 0f00 	cmp.w	sl, #0
 8009636:	d0f8      	beq.n	800962a <_strtol_l.isra.0+0xca>
 8009638:	b10f      	cbz	r7, 800963e <_strtol_l.isra.0+0xde>
 800963a:	f105 39ff 	add.w	r9, r5, #4294967295
 800963e:	f8ca 9000 	str.w	r9, [sl]
 8009642:	e7f2      	b.n	800962a <_strtol_l.isra.0+0xca>
 8009644:	2430      	movs	r4, #48	; 0x30
 8009646:	2e00      	cmp	r6, #0
 8009648:	d1af      	bne.n	80095aa <_strtol_l.isra.0+0x4a>
 800964a:	2608      	movs	r6, #8
 800964c:	e7ad      	b.n	80095aa <_strtol_l.isra.0+0x4a>
 800964e:	2c30      	cmp	r4, #48	; 0x30
 8009650:	d0a3      	beq.n	800959a <_strtol_l.isra.0+0x3a>
 8009652:	260a      	movs	r6, #10
 8009654:	e7a9      	b.n	80095aa <_strtol_l.isra.0+0x4a>
	...

08009658 <strtol>:
 8009658:	4b08      	ldr	r3, [pc, #32]	; (800967c <strtol+0x24>)
 800965a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800965c:	681c      	ldr	r4, [r3, #0]
 800965e:	4d08      	ldr	r5, [pc, #32]	; (8009680 <strtol+0x28>)
 8009660:	6a23      	ldr	r3, [r4, #32]
 8009662:	2b00      	cmp	r3, #0
 8009664:	bf08      	it	eq
 8009666:	462b      	moveq	r3, r5
 8009668:	9300      	str	r3, [sp, #0]
 800966a:	4613      	mov	r3, r2
 800966c:	460a      	mov	r2, r1
 800966e:	4601      	mov	r1, r0
 8009670:	4620      	mov	r0, r4
 8009672:	f7ff ff75 	bl	8009560 <_strtol_l.isra.0>
 8009676:	b003      	add	sp, #12
 8009678:	bd30      	pop	{r4, r5, pc}
 800967a:	bf00      	nop
 800967c:	20000a24 	.word	0x20000a24
 8009680:	20000a88 	.word	0x20000a88

08009684 <__utoa>:
 8009684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009686:	4b1d      	ldr	r3, [pc, #116]	; (80096fc <__utoa+0x78>)
 8009688:	b08b      	sub	sp, #44	; 0x2c
 800968a:	4605      	mov	r5, r0
 800968c:	460c      	mov	r4, r1
 800968e:	466e      	mov	r6, sp
 8009690:	f103 0c20 	add.w	ip, r3, #32
 8009694:	6818      	ldr	r0, [r3, #0]
 8009696:	6859      	ldr	r1, [r3, #4]
 8009698:	4637      	mov	r7, r6
 800969a:	c703      	stmia	r7!, {r0, r1}
 800969c:	3308      	adds	r3, #8
 800969e:	4563      	cmp	r3, ip
 80096a0:	463e      	mov	r6, r7
 80096a2:	d1f7      	bne.n	8009694 <__utoa+0x10>
 80096a4:	6818      	ldr	r0, [r3, #0]
 80096a6:	791b      	ldrb	r3, [r3, #4]
 80096a8:	713b      	strb	r3, [r7, #4]
 80096aa:	1e93      	subs	r3, r2, #2
 80096ac:	2b22      	cmp	r3, #34	; 0x22
 80096ae:	6038      	str	r0, [r7, #0]
 80096b0:	f04f 0300 	mov.w	r3, #0
 80096b4:	d904      	bls.n	80096c0 <__utoa+0x3c>
 80096b6:	7023      	strb	r3, [r4, #0]
 80096b8:	461c      	mov	r4, r3
 80096ba:	4620      	mov	r0, r4
 80096bc:	b00b      	add	sp, #44	; 0x2c
 80096be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096c0:	1e66      	subs	r6, r4, #1
 80096c2:	fbb5 f0f2 	udiv	r0, r5, r2
 80096c6:	af0a      	add	r7, sp, #40	; 0x28
 80096c8:	fb02 5510 	mls	r5, r2, r0, r5
 80096cc:	443d      	add	r5, r7
 80096ce:	1c59      	adds	r1, r3, #1
 80096d0:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80096d4:	f806 5f01 	strb.w	r5, [r6, #1]!
 80096d8:	4605      	mov	r5, r0
 80096da:	b968      	cbnz	r0, 80096f8 <__utoa+0x74>
 80096dc:	5460      	strb	r0, [r4, r1]
 80096de:	4423      	add	r3, r4
 80096e0:	4622      	mov	r2, r4
 80096e2:	1b19      	subs	r1, r3, r4
 80096e4:	1b10      	subs	r0, r2, r4
 80096e6:	4281      	cmp	r1, r0
 80096e8:	dde7      	ble.n	80096ba <__utoa+0x36>
 80096ea:	7811      	ldrb	r1, [r2, #0]
 80096ec:	7818      	ldrb	r0, [r3, #0]
 80096ee:	f802 0b01 	strb.w	r0, [r2], #1
 80096f2:	f803 1901 	strb.w	r1, [r3], #-1
 80096f6:	e7f4      	b.n	80096e2 <__utoa+0x5e>
 80096f8:	460b      	mov	r3, r1
 80096fa:	e7e2      	b.n	80096c2 <__utoa+0x3e>
 80096fc:	0800aa90 	.word	0x0800aa90

08009700 <rshift>:
 8009700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009702:	6906      	ldr	r6, [r0, #16]
 8009704:	114b      	asrs	r3, r1, #5
 8009706:	429e      	cmp	r6, r3
 8009708:	f100 0414 	add.w	r4, r0, #20
 800970c:	dd30      	ble.n	8009770 <rshift+0x70>
 800970e:	f011 011f 	ands.w	r1, r1, #31
 8009712:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009716:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800971a:	d108      	bne.n	800972e <rshift+0x2e>
 800971c:	4621      	mov	r1, r4
 800971e:	42b2      	cmp	r2, r6
 8009720:	460b      	mov	r3, r1
 8009722:	d211      	bcs.n	8009748 <rshift+0x48>
 8009724:	f852 3b04 	ldr.w	r3, [r2], #4
 8009728:	f841 3b04 	str.w	r3, [r1], #4
 800972c:	e7f7      	b.n	800971e <rshift+0x1e>
 800972e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009732:	f1c1 0c20 	rsb	ip, r1, #32
 8009736:	40cd      	lsrs	r5, r1
 8009738:	3204      	adds	r2, #4
 800973a:	4623      	mov	r3, r4
 800973c:	42b2      	cmp	r2, r6
 800973e:	4617      	mov	r7, r2
 8009740:	d30c      	bcc.n	800975c <rshift+0x5c>
 8009742:	601d      	str	r5, [r3, #0]
 8009744:	b105      	cbz	r5, 8009748 <rshift+0x48>
 8009746:	3304      	adds	r3, #4
 8009748:	1b1a      	subs	r2, r3, r4
 800974a:	42a3      	cmp	r3, r4
 800974c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009750:	bf08      	it	eq
 8009752:	2300      	moveq	r3, #0
 8009754:	6102      	str	r2, [r0, #16]
 8009756:	bf08      	it	eq
 8009758:	6143      	streq	r3, [r0, #20]
 800975a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800975c:	683f      	ldr	r7, [r7, #0]
 800975e:	fa07 f70c 	lsl.w	r7, r7, ip
 8009762:	433d      	orrs	r5, r7
 8009764:	f843 5b04 	str.w	r5, [r3], #4
 8009768:	f852 5b04 	ldr.w	r5, [r2], #4
 800976c:	40cd      	lsrs	r5, r1
 800976e:	e7e5      	b.n	800973c <rshift+0x3c>
 8009770:	4623      	mov	r3, r4
 8009772:	e7e9      	b.n	8009748 <rshift+0x48>

08009774 <__hexdig_fun>:
 8009774:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009778:	2b09      	cmp	r3, #9
 800977a:	d802      	bhi.n	8009782 <__hexdig_fun+0xe>
 800977c:	3820      	subs	r0, #32
 800977e:	b2c0      	uxtb	r0, r0
 8009780:	4770      	bx	lr
 8009782:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009786:	2b05      	cmp	r3, #5
 8009788:	d801      	bhi.n	800978e <__hexdig_fun+0x1a>
 800978a:	3847      	subs	r0, #71	; 0x47
 800978c:	e7f7      	b.n	800977e <__hexdig_fun+0xa>
 800978e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009792:	2b05      	cmp	r3, #5
 8009794:	d801      	bhi.n	800979a <__hexdig_fun+0x26>
 8009796:	3827      	subs	r0, #39	; 0x27
 8009798:	e7f1      	b.n	800977e <__hexdig_fun+0xa>
 800979a:	2000      	movs	r0, #0
 800979c:	4770      	bx	lr

0800979e <__gethex>:
 800979e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a2:	b08b      	sub	sp, #44	; 0x2c
 80097a4:	468a      	mov	sl, r1
 80097a6:	9002      	str	r0, [sp, #8]
 80097a8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80097aa:	9306      	str	r3, [sp, #24]
 80097ac:	4690      	mov	r8, r2
 80097ae:	f000 fad0 	bl	8009d52 <__localeconv_l>
 80097b2:	6803      	ldr	r3, [r0, #0]
 80097b4:	9303      	str	r3, [sp, #12]
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7f6 fd18 	bl	80001ec <strlen>
 80097bc:	9b03      	ldr	r3, [sp, #12]
 80097be:	9001      	str	r0, [sp, #4]
 80097c0:	4403      	add	r3, r0
 80097c2:	f04f 0b00 	mov.w	fp, #0
 80097c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80097ca:	9307      	str	r3, [sp, #28]
 80097cc:	f8da 3000 	ldr.w	r3, [sl]
 80097d0:	3302      	adds	r3, #2
 80097d2:	461f      	mov	r7, r3
 80097d4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80097d8:	2830      	cmp	r0, #48	; 0x30
 80097da:	d06c      	beq.n	80098b6 <__gethex+0x118>
 80097dc:	f7ff ffca 	bl	8009774 <__hexdig_fun>
 80097e0:	4604      	mov	r4, r0
 80097e2:	2800      	cmp	r0, #0
 80097e4:	d16a      	bne.n	80098bc <__gethex+0x11e>
 80097e6:	9a01      	ldr	r2, [sp, #4]
 80097e8:	9903      	ldr	r1, [sp, #12]
 80097ea:	4638      	mov	r0, r7
 80097ec:	f000 ff48 	bl	800a680 <strncmp>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	d166      	bne.n	80098c2 <__gethex+0x124>
 80097f4:	9b01      	ldr	r3, [sp, #4]
 80097f6:	5cf8      	ldrb	r0, [r7, r3]
 80097f8:	18fe      	adds	r6, r7, r3
 80097fa:	f7ff ffbb 	bl	8009774 <__hexdig_fun>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d062      	beq.n	80098c8 <__gethex+0x12a>
 8009802:	4633      	mov	r3, r6
 8009804:	7818      	ldrb	r0, [r3, #0]
 8009806:	2830      	cmp	r0, #48	; 0x30
 8009808:	461f      	mov	r7, r3
 800980a:	f103 0301 	add.w	r3, r3, #1
 800980e:	d0f9      	beq.n	8009804 <__gethex+0x66>
 8009810:	f7ff ffb0 	bl	8009774 <__hexdig_fun>
 8009814:	fab0 f580 	clz	r5, r0
 8009818:	096d      	lsrs	r5, r5, #5
 800981a:	4634      	mov	r4, r6
 800981c:	f04f 0b01 	mov.w	fp, #1
 8009820:	463a      	mov	r2, r7
 8009822:	4616      	mov	r6, r2
 8009824:	3201      	adds	r2, #1
 8009826:	7830      	ldrb	r0, [r6, #0]
 8009828:	f7ff ffa4 	bl	8009774 <__hexdig_fun>
 800982c:	2800      	cmp	r0, #0
 800982e:	d1f8      	bne.n	8009822 <__gethex+0x84>
 8009830:	9a01      	ldr	r2, [sp, #4]
 8009832:	9903      	ldr	r1, [sp, #12]
 8009834:	4630      	mov	r0, r6
 8009836:	f000 ff23 	bl	800a680 <strncmp>
 800983a:	b950      	cbnz	r0, 8009852 <__gethex+0xb4>
 800983c:	b954      	cbnz	r4, 8009854 <__gethex+0xb6>
 800983e:	9b01      	ldr	r3, [sp, #4]
 8009840:	18f4      	adds	r4, r6, r3
 8009842:	4622      	mov	r2, r4
 8009844:	4616      	mov	r6, r2
 8009846:	3201      	adds	r2, #1
 8009848:	7830      	ldrb	r0, [r6, #0]
 800984a:	f7ff ff93 	bl	8009774 <__hexdig_fun>
 800984e:	2800      	cmp	r0, #0
 8009850:	d1f8      	bne.n	8009844 <__gethex+0xa6>
 8009852:	b10c      	cbz	r4, 8009858 <__gethex+0xba>
 8009854:	1ba4      	subs	r4, r4, r6
 8009856:	00a4      	lsls	r4, r4, #2
 8009858:	7833      	ldrb	r3, [r6, #0]
 800985a:	2b50      	cmp	r3, #80	; 0x50
 800985c:	d001      	beq.n	8009862 <__gethex+0xc4>
 800985e:	2b70      	cmp	r3, #112	; 0x70
 8009860:	d140      	bne.n	80098e4 <__gethex+0x146>
 8009862:	7873      	ldrb	r3, [r6, #1]
 8009864:	2b2b      	cmp	r3, #43	; 0x2b
 8009866:	d031      	beq.n	80098cc <__gethex+0x12e>
 8009868:	2b2d      	cmp	r3, #45	; 0x2d
 800986a:	d033      	beq.n	80098d4 <__gethex+0x136>
 800986c:	1c71      	adds	r1, r6, #1
 800986e:	f04f 0900 	mov.w	r9, #0
 8009872:	7808      	ldrb	r0, [r1, #0]
 8009874:	f7ff ff7e 	bl	8009774 <__hexdig_fun>
 8009878:	1e43      	subs	r3, r0, #1
 800987a:	b2db      	uxtb	r3, r3
 800987c:	2b18      	cmp	r3, #24
 800987e:	d831      	bhi.n	80098e4 <__gethex+0x146>
 8009880:	f1a0 0210 	sub.w	r2, r0, #16
 8009884:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009888:	f7ff ff74 	bl	8009774 <__hexdig_fun>
 800988c:	1e43      	subs	r3, r0, #1
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b18      	cmp	r3, #24
 8009892:	d922      	bls.n	80098da <__gethex+0x13c>
 8009894:	f1b9 0f00 	cmp.w	r9, #0
 8009898:	d000      	beq.n	800989c <__gethex+0xfe>
 800989a:	4252      	negs	r2, r2
 800989c:	4414      	add	r4, r2
 800989e:	f8ca 1000 	str.w	r1, [sl]
 80098a2:	b30d      	cbz	r5, 80098e8 <__gethex+0x14a>
 80098a4:	f1bb 0f00 	cmp.w	fp, #0
 80098a8:	bf0c      	ite	eq
 80098aa:	2706      	moveq	r7, #6
 80098ac:	2700      	movne	r7, #0
 80098ae:	4638      	mov	r0, r7
 80098b0:	b00b      	add	sp, #44	; 0x2c
 80098b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b6:	f10b 0b01 	add.w	fp, fp, #1
 80098ba:	e78a      	b.n	80097d2 <__gethex+0x34>
 80098bc:	2500      	movs	r5, #0
 80098be:	462c      	mov	r4, r5
 80098c0:	e7ae      	b.n	8009820 <__gethex+0x82>
 80098c2:	463e      	mov	r6, r7
 80098c4:	2501      	movs	r5, #1
 80098c6:	e7c7      	b.n	8009858 <__gethex+0xba>
 80098c8:	4604      	mov	r4, r0
 80098ca:	e7fb      	b.n	80098c4 <__gethex+0x126>
 80098cc:	f04f 0900 	mov.w	r9, #0
 80098d0:	1cb1      	adds	r1, r6, #2
 80098d2:	e7ce      	b.n	8009872 <__gethex+0xd4>
 80098d4:	f04f 0901 	mov.w	r9, #1
 80098d8:	e7fa      	b.n	80098d0 <__gethex+0x132>
 80098da:	230a      	movs	r3, #10
 80098dc:	fb03 0202 	mla	r2, r3, r2, r0
 80098e0:	3a10      	subs	r2, #16
 80098e2:	e7cf      	b.n	8009884 <__gethex+0xe6>
 80098e4:	4631      	mov	r1, r6
 80098e6:	e7da      	b.n	800989e <__gethex+0x100>
 80098e8:	1bf3      	subs	r3, r6, r7
 80098ea:	3b01      	subs	r3, #1
 80098ec:	4629      	mov	r1, r5
 80098ee:	2b07      	cmp	r3, #7
 80098f0:	dc49      	bgt.n	8009986 <__gethex+0x1e8>
 80098f2:	9802      	ldr	r0, [sp, #8]
 80098f4:	f000 fa4c 	bl	8009d90 <_Balloc>
 80098f8:	9b01      	ldr	r3, [sp, #4]
 80098fa:	f100 0914 	add.w	r9, r0, #20
 80098fe:	f04f 0b00 	mov.w	fp, #0
 8009902:	f1c3 0301 	rsb	r3, r3, #1
 8009906:	4605      	mov	r5, r0
 8009908:	f8cd 9010 	str.w	r9, [sp, #16]
 800990c:	46da      	mov	sl, fp
 800990e:	9308      	str	r3, [sp, #32]
 8009910:	42b7      	cmp	r7, r6
 8009912:	d33b      	bcc.n	800998c <__gethex+0x1ee>
 8009914:	9804      	ldr	r0, [sp, #16]
 8009916:	f840 ab04 	str.w	sl, [r0], #4
 800991a:	eba0 0009 	sub.w	r0, r0, r9
 800991e:	1080      	asrs	r0, r0, #2
 8009920:	6128      	str	r0, [r5, #16]
 8009922:	0147      	lsls	r7, r0, #5
 8009924:	4650      	mov	r0, sl
 8009926:	f000 faf7 	bl	8009f18 <__hi0bits>
 800992a:	f8d8 6000 	ldr.w	r6, [r8]
 800992e:	1a3f      	subs	r7, r7, r0
 8009930:	42b7      	cmp	r7, r6
 8009932:	dd64      	ble.n	80099fe <__gethex+0x260>
 8009934:	1bbf      	subs	r7, r7, r6
 8009936:	4639      	mov	r1, r7
 8009938:	4628      	mov	r0, r5
 800993a:	f000 fe07 	bl	800a54c <__any_on>
 800993e:	4682      	mov	sl, r0
 8009940:	b178      	cbz	r0, 8009962 <__gethex+0x1c4>
 8009942:	1e7b      	subs	r3, r7, #1
 8009944:	1159      	asrs	r1, r3, #5
 8009946:	f003 021f 	and.w	r2, r3, #31
 800994a:	f04f 0a01 	mov.w	sl, #1
 800994e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009952:	fa0a f202 	lsl.w	r2, sl, r2
 8009956:	420a      	tst	r2, r1
 8009958:	d003      	beq.n	8009962 <__gethex+0x1c4>
 800995a:	4553      	cmp	r3, sl
 800995c:	dc46      	bgt.n	80099ec <__gethex+0x24e>
 800995e:	f04f 0a02 	mov.w	sl, #2
 8009962:	4639      	mov	r1, r7
 8009964:	4628      	mov	r0, r5
 8009966:	f7ff fecb 	bl	8009700 <rshift>
 800996a:	443c      	add	r4, r7
 800996c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009970:	42a3      	cmp	r3, r4
 8009972:	da52      	bge.n	8009a1a <__gethex+0x27c>
 8009974:	4629      	mov	r1, r5
 8009976:	9802      	ldr	r0, [sp, #8]
 8009978:	f000 fa3e 	bl	8009df8 <_Bfree>
 800997c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800997e:	2300      	movs	r3, #0
 8009980:	6013      	str	r3, [r2, #0]
 8009982:	27a3      	movs	r7, #163	; 0xa3
 8009984:	e793      	b.n	80098ae <__gethex+0x110>
 8009986:	3101      	adds	r1, #1
 8009988:	105b      	asrs	r3, r3, #1
 800998a:	e7b0      	b.n	80098ee <__gethex+0x150>
 800998c:	1e73      	subs	r3, r6, #1
 800998e:	9305      	str	r3, [sp, #20]
 8009990:	9a07      	ldr	r2, [sp, #28]
 8009992:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009996:	4293      	cmp	r3, r2
 8009998:	d018      	beq.n	80099cc <__gethex+0x22e>
 800999a:	f1bb 0f20 	cmp.w	fp, #32
 800999e:	d107      	bne.n	80099b0 <__gethex+0x212>
 80099a0:	9b04      	ldr	r3, [sp, #16]
 80099a2:	f8c3 a000 	str.w	sl, [r3]
 80099a6:	3304      	adds	r3, #4
 80099a8:	f04f 0a00 	mov.w	sl, #0
 80099ac:	9304      	str	r3, [sp, #16]
 80099ae:	46d3      	mov	fp, sl
 80099b0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80099b4:	f7ff fede 	bl	8009774 <__hexdig_fun>
 80099b8:	f000 000f 	and.w	r0, r0, #15
 80099bc:	fa00 f00b 	lsl.w	r0, r0, fp
 80099c0:	ea4a 0a00 	orr.w	sl, sl, r0
 80099c4:	f10b 0b04 	add.w	fp, fp, #4
 80099c8:	9b05      	ldr	r3, [sp, #20]
 80099ca:	e00d      	b.n	80099e8 <__gethex+0x24a>
 80099cc:	9b05      	ldr	r3, [sp, #20]
 80099ce:	9a08      	ldr	r2, [sp, #32]
 80099d0:	4413      	add	r3, r2
 80099d2:	42bb      	cmp	r3, r7
 80099d4:	d3e1      	bcc.n	800999a <__gethex+0x1fc>
 80099d6:	4618      	mov	r0, r3
 80099d8:	9a01      	ldr	r2, [sp, #4]
 80099da:	9903      	ldr	r1, [sp, #12]
 80099dc:	9309      	str	r3, [sp, #36]	; 0x24
 80099de:	f000 fe4f 	bl	800a680 <strncmp>
 80099e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099e4:	2800      	cmp	r0, #0
 80099e6:	d1d8      	bne.n	800999a <__gethex+0x1fc>
 80099e8:	461e      	mov	r6, r3
 80099ea:	e791      	b.n	8009910 <__gethex+0x172>
 80099ec:	1eb9      	subs	r1, r7, #2
 80099ee:	4628      	mov	r0, r5
 80099f0:	f000 fdac 	bl	800a54c <__any_on>
 80099f4:	2800      	cmp	r0, #0
 80099f6:	d0b2      	beq.n	800995e <__gethex+0x1c0>
 80099f8:	f04f 0a03 	mov.w	sl, #3
 80099fc:	e7b1      	b.n	8009962 <__gethex+0x1c4>
 80099fe:	da09      	bge.n	8009a14 <__gethex+0x276>
 8009a00:	1bf7      	subs	r7, r6, r7
 8009a02:	4629      	mov	r1, r5
 8009a04:	463a      	mov	r2, r7
 8009a06:	9802      	ldr	r0, [sp, #8]
 8009a08:	f000 fbc2 	bl	800a190 <__lshift>
 8009a0c:	1be4      	subs	r4, r4, r7
 8009a0e:	4605      	mov	r5, r0
 8009a10:	f100 0914 	add.w	r9, r0, #20
 8009a14:	f04f 0a00 	mov.w	sl, #0
 8009a18:	e7a8      	b.n	800996c <__gethex+0x1ce>
 8009a1a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009a1e:	42a0      	cmp	r0, r4
 8009a20:	dd6a      	ble.n	8009af8 <__gethex+0x35a>
 8009a22:	1b04      	subs	r4, r0, r4
 8009a24:	42a6      	cmp	r6, r4
 8009a26:	dc2e      	bgt.n	8009a86 <__gethex+0x2e8>
 8009a28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a2c:	2b02      	cmp	r3, #2
 8009a2e:	d022      	beq.n	8009a76 <__gethex+0x2d8>
 8009a30:	2b03      	cmp	r3, #3
 8009a32:	d024      	beq.n	8009a7e <__gethex+0x2e0>
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d115      	bne.n	8009a64 <__gethex+0x2c6>
 8009a38:	42a6      	cmp	r6, r4
 8009a3a:	d113      	bne.n	8009a64 <__gethex+0x2c6>
 8009a3c:	2e01      	cmp	r6, #1
 8009a3e:	dc0b      	bgt.n	8009a58 <__gethex+0x2ba>
 8009a40:	9a06      	ldr	r2, [sp, #24]
 8009a42:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a46:	6013      	str	r3, [r2, #0]
 8009a48:	2301      	movs	r3, #1
 8009a4a:	612b      	str	r3, [r5, #16]
 8009a4c:	f8c9 3000 	str.w	r3, [r9]
 8009a50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a52:	2762      	movs	r7, #98	; 0x62
 8009a54:	601d      	str	r5, [r3, #0]
 8009a56:	e72a      	b.n	80098ae <__gethex+0x110>
 8009a58:	1e71      	subs	r1, r6, #1
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	f000 fd76 	bl	800a54c <__any_on>
 8009a60:	2800      	cmp	r0, #0
 8009a62:	d1ed      	bne.n	8009a40 <__gethex+0x2a2>
 8009a64:	4629      	mov	r1, r5
 8009a66:	9802      	ldr	r0, [sp, #8]
 8009a68:	f000 f9c6 	bl	8009df8 <_Bfree>
 8009a6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a6e:	2300      	movs	r3, #0
 8009a70:	6013      	str	r3, [r2, #0]
 8009a72:	2750      	movs	r7, #80	; 0x50
 8009a74:	e71b      	b.n	80098ae <__gethex+0x110>
 8009a76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d0e1      	beq.n	8009a40 <__gethex+0x2a2>
 8009a7c:	e7f2      	b.n	8009a64 <__gethex+0x2c6>
 8009a7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1dd      	bne.n	8009a40 <__gethex+0x2a2>
 8009a84:	e7ee      	b.n	8009a64 <__gethex+0x2c6>
 8009a86:	1e67      	subs	r7, r4, #1
 8009a88:	f1ba 0f00 	cmp.w	sl, #0
 8009a8c:	d131      	bne.n	8009af2 <__gethex+0x354>
 8009a8e:	b127      	cbz	r7, 8009a9a <__gethex+0x2fc>
 8009a90:	4639      	mov	r1, r7
 8009a92:	4628      	mov	r0, r5
 8009a94:	f000 fd5a 	bl	800a54c <__any_on>
 8009a98:	4682      	mov	sl, r0
 8009a9a:	117a      	asrs	r2, r7, #5
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	f007 071f 	and.w	r7, r7, #31
 8009aa2:	fa03 f707 	lsl.w	r7, r3, r7
 8009aa6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009aaa:	4621      	mov	r1, r4
 8009aac:	421f      	tst	r7, r3
 8009aae:	4628      	mov	r0, r5
 8009ab0:	bf18      	it	ne
 8009ab2:	f04a 0a02 	orrne.w	sl, sl, #2
 8009ab6:	1b36      	subs	r6, r6, r4
 8009ab8:	f7ff fe22 	bl	8009700 <rshift>
 8009abc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009ac0:	2702      	movs	r7, #2
 8009ac2:	f1ba 0f00 	cmp.w	sl, #0
 8009ac6:	d048      	beq.n	8009b5a <__gethex+0x3bc>
 8009ac8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	d015      	beq.n	8009afc <__gethex+0x35e>
 8009ad0:	2b03      	cmp	r3, #3
 8009ad2:	d017      	beq.n	8009b04 <__gethex+0x366>
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d109      	bne.n	8009aec <__gethex+0x34e>
 8009ad8:	f01a 0f02 	tst.w	sl, #2
 8009adc:	d006      	beq.n	8009aec <__gethex+0x34e>
 8009ade:	f8d9 3000 	ldr.w	r3, [r9]
 8009ae2:	ea4a 0a03 	orr.w	sl, sl, r3
 8009ae6:	f01a 0f01 	tst.w	sl, #1
 8009aea:	d10e      	bne.n	8009b0a <__gethex+0x36c>
 8009aec:	f047 0710 	orr.w	r7, r7, #16
 8009af0:	e033      	b.n	8009b5a <__gethex+0x3bc>
 8009af2:	f04f 0a01 	mov.w	sl, #1
 8009af6:	e7d0      	b.n	8009a9a <__gethex+0x2fc>
 8009af8:	2701      	movs	r7, #1
 8009afa:	e7e2      	b.n	8009ac2 <__gethex+0x324>
 8009afc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009afe:	f1c3 0301 	rsb	r3, r3, #1
 8009b02:	9315      	str	r3, [sp, #84]	; 0x54
 8009b04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d0f0      	beq.n	8009aec <__gethex+0x34e>
 8009b0a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009b0e:	f105 0314 	add.w	r3, r5, #20
 8009b12:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009b16:	eb03 010a 	add.w	r1, r3, sl
 8009b1a:	f04f 0c00 	mov.w	ip, #0
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b24:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009b28:	d01c      	beq.n	8009b64 <__gethex+0x3c6>
 8009b2a:	3201      	adds	r2, #1
 8009b2c:	6002      	str	r2, [r0, #0]
 8009b2e:	2f02      	cmp	r7, #2
 8009b30:	f105 0314 	add.w	r3, r5, #20
 8009b34:	d138      	bne.n	8009ba8 <__gethex+0x40a>
 8009b36:	f8d8 2000 	ldr.w	r2, [r8]
 8009b3a:	3a01      	subs	r2, #1
 8009b3c:	42b2      	cmp	r2, r6
 8009b3e:	d10a      	bne.n	8009b56 <__gethex+0x3b8>
 8009b40:	1171      	asrs	r1, r6, #5
 8009b42:	2201      	movs	r2, #1
 8009b44:	f006 061f 	and.w	r6, r6, #31
 8009b48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b4c:	fa02 f606 	lsl.w	r6, r2, r6
 8009b50:	421e      	tst	r6, r3
 8009b52:	bf18      	it	ne
 8009b54:	4617      	movne	r7, r2
 8009b56:	f047 0720 	orr.w	r7, r7, #32
 8009b5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b5c:	601d      	str	r5, [r3, #0]
 8009b5e:	9b06      	ldr	r3, [sp, #24]
 8009b60:	601c      	str	r4, [r3, #0]
 8009b62:	e6a4      	b.n	80098ae <__gethex+0x110>
 8009b64:	4299      	cmp	r1, r3
 8009b66:	f843 cc04 	str.w	ip, [r3, #-4]
 8009b6a:	d8d8      	bhi.n	8009b1e <__gethex+0x380>
 8009b6c:	68ab      	ldr	r3, [r5, #8]
 8009b6e:	4599      	cmp	r9, r3
 8009b70:	db12      	blt.n	8009b98 <__gethex+0x3fa>
 8009b72:	6869      	ldr	r1, [r5, #4]
 8009b74:	9802      	ldr	r0, [sp, #8]
 8009b76:	3101      	adds	r1, #1
 8009b78:	f000 f90a 	bl	8009d90 <_Balloc>
 8009b7c:	692a      	ldr	r2, [r5, #16]
 8009b7e:	3202      	adds	r2, #2
 8009b80:	f105 010c 	add.w	r1, r5, #12
 8009b84:	4683      	mov	fp, r0
 8009b86:	0092      	lsls	r2, r2, #2
 8009b88:	300c      	adds	r0, #12
 8009b8a:	f000 f8f6 	bl	8009d7a <memcpy>
 8009b8e:	4629      	mov	r1, r5
 8009b90:	9802      	ldr	r0, [sp, #8]
 8009b92:	f000 f931 	bl	8009df8 <_Bfree>
 8009b96:	465d      	mov	r5, fp
 8009b98:	692b      	ldr	r3, [r5, #16]
 8009b9a:	1c5a      	adds	r2, r3, #1
 8009b9c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009ba0:	612a      	str	r2, [r5, #16]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	615a      	str	r2, [r3, #20]
 8009ba6:	e7c2      	b.n	8009b2e <__gethex+0x390>
 8009ba8:	692a      	ldr	r2, [r5, #16]
 8009baa:	454a      	cmp	r2, r9
 8009bac:	dd0b      	ble.n	8009bc6 <__gethex+0x428>
 8009bae:	2101      	movs	r1, #1
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	f7ff fda5 	bl	8009700 <rshift>
 8009bb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009bba:	3401      	adds	r4, #1
 8009bbc:	42a3      	cmp	r3, r4
 8009bbe:	f6ff aed9 	blt.w	8009974 <__gethex+0x1d6>
 8009bc2:	2701      	movs	r7, #1
 8009bc4:	e7c7      	b.n	8009b56 <__gethex+0x3b8>
 8009bc6:	f016 061f 	ands.w	r6, r6, #31
 8009bca:	d0fa      	beq.n	8009bc2 <__gethex+0x424>
 8009bcc:	449a      	add	sl, r3
 8009bce:	f1c6 0620 	rsb	r6, r6, #32
 8009bd2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009bd6:	f000 f99f 	bl	8009f18 <__hi0bits>
 8009bda:	42b0      	cmp	r0, r6
 8009bdc:	dbe7      	blt.n	8009bae <__gethex+0x410>
 8009bde:	e7f0      	b.n	8009bc2 <__gethex+0x424>

08009be0 <L_shift>:
 8009be0:	f1c2 0208 	rsb	r2, r2, #8
 8009be4:	0092      	lsls	r2, r2, #2
 8009be6:	b570      	push	{r4, r5, r6, lr}
 8009be8:	f1c2 0620 	rsb	r6, r2, #32
 8009bec:	6843      	ldr	r3, [r0, #4]
 8009bee:	6804      	ldr	r4, [r0, #0]
 8009bf0:	fa03 f506 	lsl.w	r5, r3, r6
 8009bf4:	432c      	orrs	r4, r5
 8009bf6:	40d3      	lsrs	r3, r2
 8009bf8:	6004      	str	r4, [r0, #0]
 8009bfa:	f840 3f04 	str.w	r3, [r0, #4]!
 8009bfe:	4288      	cmp	r0, r1
 8009c00:	d3f4      	bcc.n	8009bec <L_shift+0xc>
 8009c02:	bd70      	pop	{r4, r5, r6, pc}

08009c04 <__match>:
 8009c04:	b530      	push	{r4, r5, lr}
 8009c06:	6803      	ldr	r3, [r0, #0]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c0e:	b914      	cbnz	r4, 8009c16 <__match+0x12>
 8009c10:	6003      	str	r3, [r0, #0]
 8009c12:	2001      	movs	r0, #1
 8009c14:	bd30      	pop	{r4, r5, pc}
 8009c16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c1a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009c1e:	2d19      	cmp	r5, #25
 8009c20:	bf98      	it	ls
 8009c22:	3220      	addls	r2, #32
 8009c24:	42a2      	cmp	r2, r4
 8009c26:	d0f0      	beq.n	8009c0a <__match+0x6>
 8009c28:	2000      	movs	r0, #0
 8009c2a:	e7f3      	b.n	8009c14 <__match+0x10>

08009c2c <__hexnan>:
 8009c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c30:	680b      	ldr	r3, [r1, #0]
 8009c32:	6801      	ldr	r1, [r0, #0]
 8009c34:	115f      	asrs	r7, r3, #5
 8009c36:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009c3a:	f013 031f 	ands.w	r3, r3, #31
 8009c3e:	b087      	sub	sp, #28
 8009c40:	bf18      	it	ne
 8009c42:	3704      	addne	r7, #4
 8009c44:	2500      	movs	r5, #0
 8009c46:	1f3e      	subs	r6, r7, #4
 8009c48:	4682      	mov	sl, r0
 8009c4a:	4690      	mov	r8, r2
 8009c4c:	9301      	str	r3, [sp, #4]
 8009c4e:	f847 5c04 	str.w	r5, [r7, #-4]
 8009c52:	46b1      	mov	r9, r6
 8009c54:	4634      	mov	r4, r6
 8009c56:	9502      	str	r5, [sp, #8]
 8009c58:	46ab      	mov	fp, r5
 8009c5a:	784a      	ldrb	r2, [r1, #1]
 8009c5c:	1c4b      	adds	r3, r1, #1
 8009c5e:	9303      	str	r3, [sp, #12]
 8009c60:	b342      	cbz	r2, 8009cb4 <__hexnan+0x88>
 8009c62:	4610      	mov	r0, r2
 8009c64:	9105      	str	r1, [sp, #20]
 8009c66:	9204      	str	r2, [sp, #16]
 8009c68:	f7ff fd84 	bl	8009774 <__hexdig_fun>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d143      	bne.n	8009cf8 <__hexnan+0xcc>
 8009c70:	9a04      	ldr	r2, [sp, #16]
 8009c72:	9905      	ldr	r1, [sp, #20]
 8009c74:	2a20      	cmp	r2, #32
 8009c76:	d818      	bhi.n	8009caa <__hexnan+0x7e>
 8009c78:	9b02      	ldr	r3, [sp, #8]
 8009c7a:	459b      	cmp	fp, r3
 8009c7c:	dd13      	ble.n	8009ca6 <__hexnan+0x7a>
 8009c7e:	454c      	cmp	r4, r9
 8009c80:	d206      	bcs.n	8009c90 <__hexnan+0x64>
 8009c82:	2d07      	cmp	r5, #7
 8009c84:	dc04      	bgt.n	8009c90 <__hexnan+0x64>
 8009c86:	462a      	mov	r2, r5
 8009c88:	4649      	mov	r1, r9
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	f7ff ffa8 	bl	8009be0 <L_shift>
 8009c90:	4544      	cmp	r4, r8
 8009c92:	d944      	bls.n	8009d1e <__hexnan+0xf2>
 8009c94:	2300      	movs	r3, #0
 8009c96:	f1a4 0904 	sub.w	r9, r4, #4
 8009c9a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c9e:	f8cd b008 	str.w	fp, [sp, #8]
 8009ca2:	464c      	mov	r4, r9
 8009ca4:	461d      	mov	r5, r3
 8009ca6:	9903      	ldr	r1, [sp, #12]
 8009ca8:	e7d7      	b.n	8009c5a <__hexnan+0x2e>
 8009caa:	2a29      	cmp	r2, #41	; 0x29
 8009cac:	d14a      	bne.n	8009d44 <__hexnan+0x118>
 8009cae:	3102      	adds	r1, #2
 8009cb0:	f8ca 1000 	str.w	r1, [sl]
 8009cb4:	f1bb 0f00 	cmp.w	fp, #0
 8009cb8:	d044      	beq.n	8009d44 <__hexnan+0x118>
 8009cba:	454c      	cmp	r4, r9
 8009cbc:	d206      	bcs.n	8009ccc <__hexnan+0xa0>
 8009cbe:	2d07      	cmp	r5, #7
 8009cc0:	dc04      	bgt.n	8009ccc <__hexnan+0xa0>
 8009cc2:	462a      	mov	r2, r5
 8009cc4:	4649      	mov	r1, r9
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f7ff ff8a 	bl	8009be0 <L_shift>
 8009ccc:	4544      	cmp	r4, r8
 8009cce:	d928      	bls.n	8009d22 <__hexnan+0xf6>
 8009cd0:	4643      	mov	r3, r8
 8009cd2:	f854 2b04 	ldr.w	r2, [r4], #4
 8009cd6:	f843 2b04 	str.w	r2, [r3], #4
 8009cda:	42a6      	cmp	r6, r4
 8009cdc:	d2f9      	bcs.n	8009cd2 <__hexnan+0xa6>
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f843 2b04 	str.w	r2, [r3], #4
 8009ce4:	429e      	cmp	r6, r3
 8009ce6:	d2fb      	bcs.n	8009ce0 <__hexnan+0xb4>
 8009ce8:	6833      	ldr	r3, [r6, #0]
 8009cea:	b91b      	cbnz	r3, 8009cf4 <__hexnan+0xc8>
 8009cec:	4546      	cmp	r6, r8
 8009cee:	d127      	bne.n	8009d40 <__hexnan+0x114>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	6033      	str	r3, [r6, #0]
 8009cf4:	2005      	movs	r0, #5
 8009cf6:	e026      	b.n	8009d46 <__hexnan+0x11a>
 8009cf8:	3501      	adds	r5, #1
 8009cfa:	2d08      	cmp	r5, #8
 8009cfc:	f10b 0b01 	add.w	fp, fp, #1
 8009d00:	dd06      	ble.n	8009d10 <__hexnan+0xe4>
 8009d02:	4544      	cmp	r4, r8
 8009d04:	d9cf      	bls.n	8009ca6 <__hexnan+0x7a>
 8009d06:	2300      	movs	r3, #0
 8009d08:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d0c:	2501      	movs	r5, #1
 8009d0e:	3c04      	subs	r4, #4
 8009d10:	6822      	ldr	r2, [r4, #0]
 8009d12:	f000 000f 	and.w	r0, r0, #15
 8009d16:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009d1a:	6020      	str	r0, [r4, #0]
 8009d1c:	e7c3      	b.n	8009ca6 <__hexnan+0x7a>
 8009d1e:	2508      	movs	r5, #8
 8009d20:	e7c1      	b.n	8009ca6 <__hexnan+0x7a>
 8009d22:	9b01      	ldr	r3, [sp, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d0df      	beq.n	8009ce8 <__hexnan+0xbc>
 8009d28:	f04f 32ff 	mov.w	r2, #4294967295
 8009d2c:	f1c3 0320 	rsb	r3, r3, #32
 8009d30:	fa22 f303 	lsr.w	r3, r2, r3
 8009d34:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009d38:	401a      	ands	r2, r3
 8009d3a:	f847 2c04 	str.w	r2, [r7, #-4]
 8009d3e:	e7d3      	b.n	8009ce8 <__hexnan+0xbc>
 8009d40:	3e04      	subs	r6, #4
 8009d42:	e7d1      	b.n	8009ce8 <__hexnan+0xbc>
 8009d44:	2004      	movs	r0, #4
 8009d46:	b007      	add	sp, #28
 8009d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d4c <__locale_ctype_ptr_l>:
 8009d4c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009d50:	4770      	bx	lr

08009d52 <__localeconv_l>:
 8009d52:	30f0      	adds	r0, #240	; 0xf0
 8009d54:	4770      	bx	lr

08009d56 <__ascii_mbtowc>:
 8009d56:	b082      	sub	sp, #8
 8009d58:	b901      	cbnz	r1, 8009d5c <__ascii_mbtowc+0x6>
 8009d5a:	a901      	add	r1, sp, #4
 8009d5c:	b142      	cbz	r2, 8009d70 <__ascii_mbtowc+0x1a>
 8009d5e:	b14b      	cbz	r3, 8009d74 <__ascii_mbtowc+0x1e>
 8009d60:	7813      	ldrb	r3, [r2, #0]
 8009d62:	600b      	str	r3, [r1, #0]
 8009d64:	7812      	ldrb	r2, [r2, #0]
 8009d66:	1c10      	adds	r0, r2, #0
 8009d68:	bf18      	it	ne
 8009d6a:	2001      	movne	r0, #1
 8009d6c:	b002      	add	sp, #8
 8009d6e:	4770      	bx	lr
 8009d70:	4610      	mov	r0, r2
 8009d72:	e7fb      	b.n	8009d6c <__ascii_mbtowc+0x16>
 8009d74:	f06f 0001 	mvn.w	r0, #1
 8009d78:	e7f8      	b.n	8009d6c <__ascii_mbtowc+0x16>

08009d7a <memcpy>:
 8009d7a:	b510      	push	{r4, lr}
 8009d7c:	1e43      	subs	r3, r0, #1
 8009d7e:	440a      	add	r2, r1
 8009d80:	4291      	cmp	r1, r2
 8009d82:	d100      	bne.n	8009d86 <memcpy+0xc>
 8009d84:	bd10      	pop	{r4, pc}
 8009d86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d8e:	e7f7      	b.n	8009d80 <memcpy+0x6>

08009d90 <_Balloc>:
 8009d90:	b570      	push	{r4, r5, r6, lr}
 8009d92:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009d94:	4604      	mov	r4, r0
 8009d96:	460e      	mov	r6, r1
 8009d98:	b93d      	cbnz	r5, 8009daa <_Balloc+0x1a>
 8009d9a:	2010      	movs	r0, #16
 8009d9c:	f000 fc90 	bl	800a6c0 <malloc>
 8009da0:	6260      	str	r0, [r4, #36]	; 0x24
 8009da2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009da6:	6005      	str	r5, [r0, #0]
 8009da8:	60c5      	str	r5, [r0, #12]
 8009daa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009dac:	68eb      	ldr	r3, [r5, #12]
 8009dae:	b183      	cbz	r3, 8009dd2 <_Balloc+0x42>
 8009db0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009db8:	b9b8      	cbnz	r0, 8009dea <_Balloc+0x5a>
 8009dba:	2101      	movs	r1, #1
 8009dbc:	fa01 f506 	lsl.w	r5, r1, r6
 8009dc0:	1d6a      	adds	r2, r5, #5
 8009dc2:	0092      	lsls	r2, r2, #2
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f000 fbe2 	bl	800a58e <_calloc_r>
 8009dca:	b160      	cbz	r0, 8009de6 <_Balloc+0x56>
 8009dcc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009dd0:	e00e      	b.n	8009df0 <_Balloc+0x60>
 8009dd2:	2221      	movs	r2, #33	; 0x21
 8009dd4:	2104      	movs	r1, #4
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f000 fbd9 	bl	800a58e <_calloc_r>
 8009ddc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dde:	60e8      	str	r0, [r5, #12]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d1e4      	bne.n	8009db0 <_Balloc+0x20>
 8009de6:	2000      	movs	r0, #0
 8009de8:	bd70      	pop	{r4, r5, r6, pc}
 8009dea:	6802      	ldr	r2, [r0, #0]
 8009dec:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009df0:	2300      	movs	r3, #0
 8009df2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009df6:	e7f7      	b.n	8009de8 <_Balloc+0x58>

08009df8 <_Bfree>:
 8009df8:	b570      	push	{r4, r5, r6, lr}
 8009dfa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009dfc:	4606      	mov	r6, r0
 8009dfe:	460d      	mov	r5, r1
 8009e00:	b93c      	cbnz	r4, 8009e12 <_Bfree+0x1a>
 8009e02:	2010      	movs	r0, #16
 8009e04:	f000 fc5c 	bl	800a6c0 <malloc>
 8009e08:	6270      	str	r0, [r6, #36]	; 0x24
 8009e0a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e0e:	6004      	str	r4, [r0, #0]
 8009e10:	60c4      	str	r4, [r0, #12]
 8009e12:	b13d      	cbz	r5, 8009e24 <_Bfree+0x2c>
 8009e14:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009e16:	686a      	ldr	r2, [r5, #4]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e1e:	6029      	str	r1, [r5, #0]
 8009e20:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009e24:	bd70      	pop	{r4, r5, r6, pc}

08009e26 <__multadd>:
 8009e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2a:	690d      	ldr	r5, [r1, #16]
 8009e2c:	461f      	mov	r7, r3
 8009e2e:	4606      	mov	r6, r0
 8009e30:	460c      	mov	r4, r1
 8009e32:	f101 0c14 	add.w	ip, r1, #20
 8009e36:	2300      	movs	r3, #0
 8009e38:	f8dc 0000 	ldr.w	r0, [ip]
 8009e3c:	b281      	uxth	r1, r0
 8009e3e:	fb02 7101 	mla	r1, r2, r1, r7
 8009e42:	0c0f      	lsrs	r7, r1, #16
 8009e44:	0c00      	lsrs	r0, r0, #16
 8009e46:	fb02 7000 	mla	r0, r2, r0, r7
 8009e4a:	b289      	uxth	r1, r1
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009e52:	429d      	cmp	r5, r3
 8009e54:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009e58:	f84c 1b04 	str.w	r1, [ip], #4
 8009e5c:	dcec      	bgt.n	8009e38 <__multadd+0x12>
 8009e5e:	b1d7      	cbz	r7, 8009e96 <__multadd+0x70>
 8009e60:	68a3      	ldr	r3, [r4, #8]
 8009e62:	42ab      	cmp	r3, r5
 8009e64:	dc12      	bgt.n	8009e8c <__multadd+0x66>
 8009e66:	6861      	ldr	r1, [r4, #4]
 8009e68:	4630      	mov	r0, r6
 8009e6a:	3101      	adds	r1, #1
 8009e6c:	f7ff ff90 	bl	8009d90 <_Balloc>
 8009e70:	6922      	ldr	r2, [r4, #16]
 8009e72:	3202      	adds	r2, #2
 8009e74:	f104 010c 	add.w	r1, r4, #12
 8009e78:	4680      	mov	r8, r0
 8009e7a:	0092      	lsls	r2, r2, #2
 8009e7c:	300c      	adds	r0, #12
 8009e7e:	f7ff ff7c 	bl	8009d7a <memcpy>
 8009e82:	4621      	mov	r1, r4
 8009e84:	4630      	mov	r0, r6
 8009e86:	f7ff ffb7 	bl	8009df8 <_Bfree>
 8009e8a:	4644      	mov	r4, r8
 8009e8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e90:	3501      	adds	r5, #1
 8009e92:	615f      	str	r7, [r3, #20]
 8009e94:	6125      	str	r5, [r4, #16]
 8009e96:	4620      	mov	r0, r4
 8009e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009e9c <__s2b>:
 8009e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ea0:	460c      	mov	r4, r1
 8009ea2:	4615      	mov	r5, r2
 8009ea4:	461f      	mov	r7, r3
 8009ea6:	2209      	movs	r2, #9
 8009ea8:	3308      	adds	r3, #8
 8009eaa:	4606      	mov	r6, r0
 8009eac:	fb93 f3f2 	sdiv	r3, r3, r2
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	db20      	blt.n	8009efa <__s2b+0x5e>
 8009eb8:	4630      	mov	r0, r6
 8009eba:	f7ff ff69 	bl	8009d90 <_Balloc>
 8009ebe:	9b08      	ldr	r3, [sp, #32]
 8009ec0:	6143      	str	r3, [r0, #20]
 8009ec2:	2d09      	cmp	r5, #9
 8009ec4:	f04f 0301 	mov.w	r3, #1
 8009ec8:	6103      	str	r3, [r0, #16]
 8009eca:	dd19      	ble.n	8009f00 <__s2b+0x64>
 8009ecc:	f104 0809 	add.w	r8, r4, #9
 8009ed0:	46c1      	mov	r9, r8
 8009ed2:	442c      	add	r4, r5
 8009ed4:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009ed8:	4601      	mov	r1, r0
 8009eda:	3b30      	subs	r3, #48	; 0x30
 8009edc:	220a      	movs	r2, #10
 8009ede:	4630      	mov	r0, r6
 8009ee0:	f7ff ffa1 	bl	8009e26 <__multadd>
 8009ee4:	45a1      	cmp	r9, r4
 8009ee6:	d1f5      	bne.n	8009ed4 <__s2b+0x38>
 8009ee8:	eb08 0405 	add.w	r4, r8, r5
 8009eec:	3c08      	subs	r4, #8
 8009eee:	1b2d      	subs	r5, r5, r4
 8009ef0:	1963      	adds	r3, r4, r5
 8009ef2:	42bb      	cmp	r3, r7
 8009ef4:	db07      	blt.n	8009f06 <__s2b+0x6a>
 8009ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009efa:	0052      	lsls	r2, r2, #1
 8009efc:	3101      	adds	r1, #1
 8009efe:	e7d9      	b.n	8009eb4 <__s2b+0x18>
 8009f00:	340a      	adds	r4, #10
 8009f02:	2509      	movs	r5, #9
 8009f04:	e7f3      	b.n	8009eee <__s2b+0x52>
 8009f06:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f0a:	4601      	mov	r1, r0
 8009f0c:	3b30      	subs	r3, #48	; 0x30
 8009f0e:	220a      	movs	r2, #10
 8009f10:	4630      	mov	r0, r6
 8009f12:	f7ff ff88 	bl	8009e26 <__multadd>
 8009f16:	e7eb      	b.n	8009ef0 <__s2b+0x54>

08009f18 <__hi0bits>:
 8009f18:	0c02      	lsrs	r2, r0, #16
 8009f1a:	0412      	lsls	r2, r2, #16
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	b9b2      	cbnz	r2, 8009f4e <__hi0bits+0x36>
 8009f20:	0403      	lsls	r3, r0, #16
 8009f22:	2010      	movs	r0, #16
 8009f24:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009f28:	bf04      	itt	eq
 8009f2a:	021b      	lsleq	r3, r3, #8
 8009f2c:	3008      	addeq	r0, #8
 8009f2e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009f32:	bf04      	itt	eq
 8009f34:	011b      	lsleq	r3, r3, #4
 8009f36:	3004      	addeq	r0, #4
 8009f38:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009f3c:	bf04      	itt	eq
 8009f3e:	009b      	lsleq	r3, r3, #2
 8009f40:	3002      	addeq	r0, #2
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	db06      	blt.n	8009f54 <__hi0bits+0x3c>
 8009f46:	005b      	lsls	r3, r3, #1
 8009f48:	d503      	bpl.n	8009f52 <__hi0bits+0x3a>
 8009f4a:	3001      	adds	r0, #1
 8009f4c:	4770      	bx	lr
 8009f4e:	2000      	movs	r0, #0
 8009f50:	e7e8      	b.n	8009f24 <__hi0bits+0xc>
 8009f52:	2020      	movs	r0, #32
 8009f54:	4770      	bx	lr

08009f56 <__lo0bits>:
 8009f56:	6803      	ldr	r3, [r0, #0]
 8009f58:	f013 0207 	ands.w	r2, r3, #7
 8009f5c:	4601      	mov	r1, r0
 8009f5e:	d00b      	beq.n	8009f78 <__lo0bits+0x22>
 8009f60:	07da      	lsls	r2, r3, #31
 8009f62:	d423      	bmi.n	8009fac <__lo0bits+0x56>
 8009f64:	0798      	lsls	r0, r3, #30
 8009f66:	bf49      	itett	mi
 8009f68:	085b      	lsrmi	r3, r3, #1
 8009f6a:	089b      	lsrpl	r3, r3, #2
 8009f6c:	2001      	movmi	r0, #1
 8009f6e:	600b      	strmi	r3, [r1, #0]
 8009f70:	bf5c      	itt	pl
 8009f72:	600b      	strpl	r3, [r1, #0]
 8009f74:	2002      	movpl	r0, #2
 8009f76:	4770      	bx	lr
 8009f78:	b298      	uxth	r0, r3
 8009f7a:	b9a8      	cbnz	r0, 8009fa8 <__lo0bits+0x52>
 8009f7c:	0c1b      	lsrs	r3, r3, #16
 8009f7e:	2010      	movs	r0, #16
 8009f80:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009f84:	bf04      	itt	eq
 8009f86:	0a1b      	lsreq	r3, r3, #8
 8009f88:	3008      	addeq	r0, #8
 8009f8a:	071a      	lsls	r2, r3, #28
 8009f8c:	bf04      	itt	eq
 8009f8e:	091b      	lsreq	r3, r3, #4
 8009f90:	3004      	addeq	r0, #4
 8009f92:	079a      	lsls	r2, r3, #30
 8009f94:	bf04      	itt	eq
 8009f96:	089b      	lsreq	r3, r3, #2
 8009f98:	3002      	addeq	r0, #2
 8009f9a:	07da      	lsls	r2, r3, #31
 8009f9c:	d402      	bmi.n	8009fa4 <__lo0bits+0x4e>
 8009f9e:	085b      	lsrs	r3, r3, #1
 8009fa0:	d006      	beq.n	8009fb0 <__lo0bits+0x5a>
 8009fa2:	3001      	adds	r0, #1
 8009fa4:	600b      	str	r3, [r1, #0]
 8009fa6:	4770      	bx	lr
 8009fa8:	4610      	mov	r0, r2
 8009faa:	e7e9      	b.n	8009f80 <__lo0bits+0x2a>
 8009fac:	2000      	movs	r0, #0
 8009fae:	4770      	bx	lr
 8009fb0:	2020      	movs	r0, #32
 8009fb2:	4770      	bx	lr

08009fb4 <__i2b>:
 8009fb4:	b510      	push	{r4, lr}
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	2101      	movs	r1, #1
 8009fba:	f7ff fee9 	bl	8009d90 <_Balloc>
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	6144      	str	r4, [r0, #20]
 8009fc2:	6102      	str	r2, [r0, #16]
 8009fc4:	bd10      	pop	{r4, pc}

08009fc6 <__multiply>:
 8009fc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fca:	4614      	mov	r4, r2
 8009fcc:	690a      	ldr	r2, [r1, #16]
 8009fce:	6923      	ldr	r3, [r4, #16]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	bfb8      	it	lt
 8009fd4:	460b      	movlt	r3, r1
 8009fd6:	4688      	mov	r8, r1
 8009fd8:	bfbc      	itt	lt
 8009fda:	46a0      	movlt	r8, r4
 8009fdc:	461c      	movlt	r4, r3
 8009fde:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009fe2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009fe6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009fea:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009fee:	eb07 0609 	add.w	r6, r7, r9
 8009ff2:	42b3      	cmp	r3, r6
 8009ff4:	bfb8      	it	lt
 8009ff6:	3101      	addlt	r1, #1
 8009ff8:	f7ff feca 	bl	8009d90 <_Balloc>
 8009ffc:	f100 0514 	add.w	r5, r0, #20
 800a000:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a004:	462b      	mov	r3, r5
 800a006:	2200      	movs	r2, #0
 800a008:	4573      	cmp	r3, lr
 800a00a:	d316      	bcc.n	800a03a <__multiply+0x74>
 800a00c:	f104 0214 	add.w	r2, r4, #20
 800a010:	f108 0114 	add.w	r1, r8, #20
 800a014:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a018:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	9b00      	ldr	r3, [sp, #0]
 800a020:	9201      	str	r2, [sp, #4]
 800a022:	4293      	cmp	r3, r2
 800a024:	d80c      	bhi.n	800a040 <__multiply+0x7a>
 800a026:	2e00      	cmp	r6, #0
 800a028:	dd03      	ble.n	800a032 <__multiply+0x6c>
 800a02a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d05d      	beq.n	800a0ee <__multiply+0x128>
 800a032:	6106      	str	r6, [r0, #16]
 800a034:	b003      	add	sp, #12
 800a036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a03a:	f843 2b04 	str.w	r2, [r3], #4
 800a03e:	e7e3      	b.n	800a008 <__multiply+0x42>
 800a040:	f8b2 b000 	ldrh.w	fp, [r2]
 800a044:	f1bb 0f00 	cmp.w	fp, #0
 800a048:	d023      	beq.n	800a092 <__multiply+0xcc>
 800a04a:	4689      	mov	r9, r1
 800a04c:	46ac      	mov	ip, r5
 800a04e:	f04f 0800 	mov.w	r8, #0
 800a052:	f859 4b04 	ldr.w	r4, [r9], #4
 800a056:	f8dc a000 	ldr.w	sl, [ip]
 800a05a:	b2a3      	uxth	r3, r4
 800a05c:	fa1f fa8a 	uxth.w	sl, sl
 800a060:	fb0b a303 	mla	r3, fp, r3, sl
 800a064:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a068:	f8dc 4000 	ldr.w	r4, [ip]
 800a06c:	4443      	add	r3, r8
 800a06e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a072:	fb0b 840a 	mla	r4, fp, sl, r8
 800a076:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a07a:	46e2      	mov	sl, ip
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a082:	454f      	cmp	r7, r9
 800a084:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a088:	f84a 3b04 	str.w	r3, [sl], #4
 800a08c:	d82b      	bhi.n	800a0e6 <__multiply+0x120>
 800a08e:	f8cc 8004 	str.w	r8, [ip, #4]
 800a092:	9b01      	ldr	r3, [sp, #4]
 800a094:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a098:	3204      	adds	r2, #4
 800a09a:	f1ba 0f00 	cmp.w	sl, #0
 800a09e:	d020      	beq.n	800a0e2 <__multiply+0x11c>
 800a0a0:	682b      	ldr	r3, [r5, #0]
 800a0a2:	4689      	mov	r9, r1
 800a0a4:	46a8      	mov	r8, r5
 800a0a6:	f04f 0b00 	mov.w	fp, #0
 800a0aa:	f8b9 c000 	ldrh.w	ip, [r9]
 800a0ae:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a0b2:	fb0a 440c 	mla	r4, sl, ip, r4
 800a0b6:	445c      	add	r4, fp
 800a0b8:	46c4      	mov	ip, r8
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a0c0:	f84c 3b04 	str.w	r3, [ip], #4
 800a0c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a0c8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a0cc:	0c1b      	lsrs	r3, r3, #16
 800a0ce:	fb0a b303 	mla	r3, sl, r3, fp
 800a0d2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a0d6:	454f      	cmp	r7, r9
 800a0d8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a0dc:	d805      	bhi.n	800a0ea <__multiply+0x124>
 800a0de:	f8c8 3004 	str.w	r3, [r8, #4]
 800a0e2:	3504      	adds	r5, #4
 800a0e4:	e79b      	b.n	800a01e <__multiply+0x58>
 800a0e6:	46d4      	mov	ip, sl
 800a0e8:	e7b3      	b.n	800a052 <__multiply+0x8c>
 800a0ea:	46e0      	mov	r8, ip
 800a0ec:	e7dd      	b.n	800a0aa <__multiply+0xe4>
 800a0ee:	3e01      	subs	r6, #1
 800a0f0:	e799      	b.n	800a026 <__multiply+0x60>
	...

0800a0f4 <__pow5mult>:
 800a0f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0f8:	4615      	mov	r5, r2
 800a0fa:	f012 0203 	ands.w	r2, r2, #3
 800a0fe:	4606      	mov	r6, r0
 800a100:	460f      	mov	r7, r1
 800a102:	d007      	beq.n	800a114 <__pow5mult+0x20>
 800a104:	3a01      	subs	r2, #1
 800a106:	4c21      	ldr	r4, [pc, #132]	; (800a18c <__pow5mult+0x98>)
 800a108:	2300      	movs	r3, #0
 800a10a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a10e:	f7ff fe8a 	bl	8009e26 <__multadd>
 800a112:	4607      	mov	r7, r0
 800a114:	10ad      	asrs	r5, r5, #2
 800a116:	d035      	beq.n	800a184 <__pow5mult+0x90>
 800a118:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a11a:	b93c      	cbnz	r4, 800a12c <__pow5mult+0x38>
 800a11c:	2010      	movs	r0, #16
 800a11e:	f000 facf 	bl	800a6c0 <malloc>
 800a122:	6270      	str	r0, [r6, #36]	; 0x24
 800a124:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a128:	6004      	str	r4, [r0, #0]
 800a12a:	60c4      	str	r4, [r0, #12]
 800a12c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a130:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a134:	b94c      	cbnz	r4, 800a14a <__pow5mult+0x56>
 800a136:	f240 2171 	movw	r1, #625	; 0x271
 800a13a:	4630      	mov	r0, r6
 800a13c:	f7ff ff3a 	bl	8009fb4 <__i2b>
 800a140:	2300      	movs	r3, #0
 800a142:	f8c8 0008 	str.w	r0, [r8, #8]
 800a146:	4604      	mov	r4, r0
 800a148:	6003      	str	r3, [r0, #0]
 800a14a:	f04f 0800 	mov.w	r8, #0
 800a14e:	07eb      	lsls	r3, r5, #31
 800a150:	d50a      	bpl.n	800a168 <__pow5mult+0x74>
 800a152:	4639      	mov	r1, r7
 800a154:	4622      	mov	r2, r4
 800a156:	4630      	mov	r0, r6
 800a158:	f7ff ff35 	bl	8009fc6 <__multiply>
 800a15c:	4639      	mov	r1, r7
 800a15e:	4681      	mov	r9, r0
 800a160:	4630      	mov	r0, r6
 800a162:	f7ff fe49 	bl	8009df8 <_Bfree>
 800a166:	464f      	mov	r7, r9
 800a168:	106d      	asrs	r5, r5, #1
 800a16a:	d00b      	beq.n	800a184 <__pow5mult+0x90>
 800a16c:	6820      	ldr	r0, [r4, #0]
 800a16e:	b938      	cbnz	r0, 800a180 <__pow5mult+0x8c>
 800a170:	4622      	mov	r2, r4
 800a172:	4621      	mov	r1, r4
 800a174:	4630      	mov	r0, r6
 800a176:	f7ff ff26 	bl	8009fc6 <__multiply>
 800a17a:	6020      	str	r0, [r4, #0]
 800a17c:	f8c0 8000 	str.w	r8, [r0]
 800a180:	4604      	mov	r4, r0
 800a182:	e7e4      	b.n	800a14e <__pow5mult+0x5a>
 800a184:	4638      	mov	r0, r7
 800a186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a18a:	bf00      	nop
 800a18c:	0800abb0 	.word	0x0800abb0

0800a190 <__lshift>:
 800a190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a194:	460c      	mov	r4, r1
 800a196:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a19a:	6923      	ldr	r3, [r4, #16]
 800a19c:	6849      	ldr	r1, [r1, #4]
 800a19e:	eb0a 0903 	add.w	r9, sl, r3
 800a1a2:	68a3      	ldr	r3, [r4, #8]
 800a1a4:	4607      	mov	r7, r0
 800a1a6:	4616      	mov	r6, r2
 800a1a8:	f109 0501 	add.w	r5, r9, #1
 800a1ac:	42ab      	cmp	r3, r5
 800a1ae:	db32      	blt.n	800a216 <__lshift+0x86>
 800a1b0:	4638      	mov	r0, r7
 800a1b2:	f7ff fded 	bl	8009d90 <_Balloc>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	4680      	mov	r8, r0
 800a1ba:	f100 0114 	add.w	r1, r0, #20
 800a1be:	461a      	mov	r2, r3
 800a1c0:	4553      	cmp	r3, sl
 800a1c2:	db2b      	blt.n	800a21c <__lshift+0x8c>
 800a1c4:	6920      	ldr	r0, [r4, #16]
 800a1c6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a1ca:	f104 0314 	add.w	r3, r4, #20
 800a1ce:	f016 021f 	ands.w	r2, r6, #31
 800a1d2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a1d6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a1da:	d025      	beq.n	800a228 <__lshift+0x98>
 800a1dc:	f1c2 0e20 	rsb	lr, r2, #32
 800a1e0:	2000      	movs	r0, #0
 800a1e2:	681e      	ldr	r6, [r3, #0]
 800a1e4:	468a      	mov	sl, r1
 800a1e6:	4096      	lsls	r6, r2
 800a1e8:	4330      	orrs	r0, r6
 800a1ea:	f84a 0b04 	str.w	r0, [sl], #4
 800a1ee:	f853 0b04 	ldr.w	r0, [r3], #4
 800a1f2:	459c      	cmp	ip, r3
 800a1f4:	fa20 f00e 	lsr.w	r0, r0, lr
 800a1f8:	d814      	bhi.n	800a224 <__lshift+0x94>
 800a1fa:	6048      	str	r0, [r1, #4]
 800a1fc:	b108      	cbz	r0, 800a202 <__lshift+0x72>
 800a1fe:	f109 0502 	add.w	r5, r9, #2
 800a202:	3d01      	subs	r5, #1
 800a204:	4638      	mov	r0, r7
 800a206:	f8c8 5010 	str.w	r5, [r8, #16]
 800a20a:	4621      	mov	r1, r4
 800a20c:	f7ff fdf4 	bl	8009df8 <_Bfree>
 800a210:	4640      	mov	r0, r8
 800a212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a216:	3101      	adds	r1, #1
 800a218:	005b      	lsls	r3, r3, #1
 800a21a:	e7c7      	b.n	800a1ac <__lshift+0x1c>
 800a21c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a220:	3301      	adds	r3, #1
 800a222:	e7cd      	b.n	800a1c0 <__lshift+0x30>
 800a224:	4651      	mov	r1, sl
 800a226:	e7dc      	b.n	800a1e2 <__lshift+0x52>
 800a228:	3904      	subs	r1, #4
 800a22a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a22e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a232:	459c      	cmp	ip, r3
 800a234:	d8f9      	bhi.n	800a22a <__lshift+0x9a>
 800a236:	e7e4      	b.n	800a202 <__lshift+0x72>

0800a238 <__mcmp>:
 800a238:	6903      	ldr	r3, [r0, #16]
 800a23a:	690a      	ldr	r2, [r1, #16]
 800a23c:	1a9b      	subs	r3, r3, r2
 800a23e:	b530      	push	{r4, r5, lr}
 800a240:	d10c      	bne.n	800a25c <__mcmp+0x24>
 800a242:	0092      	lsls	r2, r2, #2
 800a244:	3014      	adds	r0, #20
 800a246:	3114      	adds	r1, #20
 800a248:	1884      	adds	r4, r0, r2
 800a24a:	4411      	add	r1, r2
 800a24c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a250:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a254:	4295      	cmp	r5, r2
 800a256:	d003      	beq.n	800a260 <__mcmp+0x28>
 800a258:	d305      	bcc.n	800a266 <__mcmp+0x2e>
 800a25a:	2301      	movs	r3, #1
 800a25c:	4618      	mov	r0, r3
 800a25e:	bd30      	pop	{r4, r5, pc}
 800a260:	42a0      	cmp	r0, r4
 800a262:	d3f3      	bcc.n	800a24c <__mcmp+0x14>
 800a264:	e7fa      	b.n	800a25c <__mcmp+0x24>
 800a266:	f04f 33ff 	mov.w	r3, #4294967295
 800a26a:	e7f7      	b.n	800a25c <__mcmp+0x24>

0800a26c <__mdiff>:
 800a26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a270:	460d      	mov	r5, r1
 800a272:	4607      	mov	r7, r0
 800a274:	4611      	mov	r1, r2
 800a276:	4628      	mov	r0, r5
 800a278:	4614      	mov	r4, r2
 800a27a:	f7ff ffdd 	bl	800a238 <__mcmp>
 800a27e:	1e06      	subs	r6, r0, #0
 800a280:	d108      	bne.n	800a294 <__mdiff+0x28>
 800a282:	4631      	mov	r1, r6
 800a284:	4638      	mov	r0, r7
 800a286:	f7ff fd83 	bl	8009d90 <_Balloc>
 800a28a:	2301      	movs	r3, #1
 800a28c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a294:	bfa4      	itt	ge
 800a296:	4623      	movge	r3, r4
 800a298:	462c      	movge	r4, r5
 800a29a:	4638      	mov	r0, r7
 800a29c:	6861      	ldr	r1, [r4, #4]
 800a29e:	bfa6      	itte	ge
 800a2a0:	461d      	movge	r5, r3
 800a2a2:	2600      	movge	r6, #0
 800a2a4:	2601      	movlt	r6, #1
 800a2a6:	f7ff fd73 	bl	8009d90 <_Balloc>
 800a2aa:	692b      	ldr	r3, [r5, #16]
 800a2ac:	60c6      	str	r6, [r0, #12]
 800a2ae:	6926      	ldr	r6, [r4, #16]
 800a2b0:	f105 0914 	add.w	r9, r5, #20
 800a2b4:	f104 0214 	add.w	r2, r4, #20
 800a2b8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a2bc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a2c0:	f100 0514 	add.w	r5, r0, #20
 800a2c4:	f04f 0e00 	mov.w	lr, #0
 800a2c8:	f852 ab04 	ldr.w	sl, [r2], #4
 800a2cc:	f859 4b04 	ldr.w	r4, [r9], #4
 800a2d0:	fa1e f18a 	uxtah	r1, lr, sl
 800a2d4:	b2a3      	uxth	r3, r4
 800a2d6:	1ac9      	subs	r1, r1, r3
 800a2d8:	0c23      	lsrs	r3, r4, #16
 800a2da:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a2de:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a2e2:	b289      	uxth	r1, r1
 800a2e4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a2e8:	45c8      	cmp	r8, r9
 800a2ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a2ee:	4694      	mov	ip, r2
 800a2f0:	f845 3b04 	str.w	r3, [r5], #4
 800a2f4:	d8e8      	bhi.n	800a2c8 <__mdiff+0x5c>
 800a2f6:	45bc      	cmp	ip, r7
 800a2f8:	d304      	bcc.n	800a304 <__mdiff+0x98>
 800a2fa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a2fe:	b183      	cbz	r3, 800a322 <__mdiff+0xb6>
 800a300:	6106      	str	r6, [r0, #16]
 800a302:	e7c5      	b.n	800a290 <__mdiff+0x24>
 800a304:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a308:	fa1e f381 	uxtah	r3, lr, r1
 800a30c:	141a      	asrs	r2, r3, #16
 800a30e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a312:	b29b      	uxth	r3, r3
 800a314:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a318:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a31c:	f845 3b04 	str.w	r3, [r5], #4
 800a320:	e7e9      	b.n	800a2f6 <__mdiff+0x8a>
 800a322:	3e01      	subs	r6, #1
 800a324:	e7e9      	b.n	800a2fa <__mdiff+0x8e>
	...

0800a328 <__ulp>:
 800a328:	4b12      	ldr	r3, [pc, #72]	; (800a374 <__ulp+0x4c>)
 800a32a:	ee10 2a90 	vmov	r2, s1
 800a32e:	401a      	ands	r2, r3
 800a330:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800a334:	2b00      	cmp	r3, #0
 800a336:	dd04      	ble.n	800a342 <__ulp+0x1a>
 800a338:	2000      	movs	r0, #0
 800a33a:	4619      	mov	r1, r3
 800a33c:	ec41 0b10 	vmov	d0, r0, r1
 800a340:	4770      	bx	lr
 800a342:	425b      	negs	r3, r3
 800a344:	151b      	asrs	r3, r3, #20
 800a346:	2b13      	cmp	r3, #19
 800a348:	f04f 0000 	mov.w	r0, #0
 800a34c:	f04f 0100 	mov.w	r1, #0
 800a350:	dc04      	bgt.n	800a35c <__ulp+0x34>
 800a352:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a356:	fa42 f103 	asr.w	r1, r2, r3
 800a35a:	e7ef      	b.n	800a33c <__ulp+0x14>
 800a35c:	3b14      	subs	r3, #20
 800a35e:	2b1e      	cmp	r3, #30
 800a360:	f04f 0201 	mov.w	r2, #1
 800a364:	bfda      	itte	le
 800a366:	f1c3 031f 	rsble	r3, r3, #31
 800a36a:	fa02 f303 	lslle.w	r3, r2, r3
 800a36e:	4613      	movgt	r3, r2
 800a370:	4618      	mov	r0, r3
 800a372:	e7e3      	b.n	800a33c <__ulp+0x14>
 800a374:	7ff00000 	.word	0x7ff00000

0800a378 <__b2d>:
 800a378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a37a:	6905      	ldr	r5, [r0, #16]
 800a37c:	f100 0714 	add.w	r7, r0, #20
 800a380:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a384:	1f2e      	subs	r6, r5, #4
 800a386:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a38a:	4620      	mov	r0, r4
 800a38c:	f7ff fdc4 	bl	8009f18 <__hi0bits>
 800a390:	f1c0 0320 	rsb	r3, r0, #32
 800a394:	280a      	cmp	r0, #10
 800a396:	600b      	str	r3, [r1, #0]
 800a398:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a410 <__b2d+0x98>
 800a39c:	dc14      	bgt.n	800a3c8 <__b2d+0x50>
 800a39e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a3a2:	fa24 f10e 	lsr.w	r1, r4, lr
 800a3a6:	42b7      	cmp	r7, r6
 800a3a8:	ea41 030c 	orr.w	r3, r1, ip
 800a3ac:	bf34      	ite	cc
 800a3ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a3b2:	2100      	movcs	r1, #0
 800a3b4:	3015      	adds	r0, #21
 800a3b6:	fa04 f000 	lsl.w	r0, r4, r0
 800a3ba:	fa21 f10e 	lsr.w	r1, r1, lr
 800a3be:	ea40 0201 	orr.w	r2, r0, r1
 800a3c2:	ec43 2b10 	vmov	d0, r2, r3
 800a3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3c8:	42b7      	cmp	r7, r6
 800a3ca:	bf3a      	itte	cc
 800a3cc:	f1a5 0608 	subcc.w	r6, r5, #8
 800a3d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a3d4:	2100      	movcs	r1, #0
 800a3d6:	380b      	subs	r0, #11
 800a3d8:	d015      	beq.n	800a406 <__b2d+0x8e>
 800a3da:	4084      	lsls	r4, r0
 800a3dc:	f1c0 0520 	rsb	r5, r0, #32
 800a3e0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800a3e4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800a3e8:	42be      	cmp	r6, r7
 800a3ea:	fa21 fc05 	lsr.w	ip, r1, r5
 800a3ee:	ea44 030c 	orr.w	r3, r4, ip
 800a3f2:	bf8c      	ite	hi
 800a3f4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a3f8:	2400      	movls	r4, #0
 800a3fa:	fa01 f000 	lsl.w	r0, r1, r0
 800a3fe:	40ec      	lsrs	r4, r5
 800a400:	ea40 0204 	orr.w	r2, r0, r4
 800a404:	e7dd      	b.n	800a3c2 <__b2d+0x4a>
 800a406:	ea44 030c 	orr.w	r3, r4, ip
 800a40a:	460a      	mov	r2, r1
 800a40c:	e7d9      	b.n	800a3c2 <__b2d+0x4a>
 800a40e:	bf00      	nop
 800a410:	3ff00000 	.word	0x3ff00000

0800a414 <__d2b>:
 800a414:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a418:	460e      	mov	r6, r1
 800a41a:	2101      	movs	r1, #1
 800a41c:	ec59 8b10 	vmov	r8, r9, d0
 800a420:	4615      	mov	r5, r2
 800a422:	f7ff fcb5 	bl	8009d90 <_Balloc>
 800a426:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a42a:	4607      	mov	r7, r0
 800a42c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a430:	bb34      	cbnz	r4, 800a480 <__d2b+0x6c>
 800a432:	9301      	str	r3, [sp, #4]
 800a434:	f1b8 0300 	subs.w	r3, r8, #0
 800a438:	d027      	beq.n	800a48a <__d2b+0x76>
 800a43a:	a802      	add	r0, sp, #8
 800a43c:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a440:	f7ff fd89 	bl	8009f56 <__lo0bits>
 800a444:	9900      	ldr	r1, [sp, #0]
 800a446:	b1f0      	cbz	r0, 800a486 <__d2b+0x72>
 800a448:	9a01      	ldr	r2, [sp, #4]
 800a44a:	f1c0 0320 	rsb	r3, r0, #32
 800a44e:	fa02 f303 	lsl.w	r3, r2, r3
 800a452:	430b      	orrs	r3, r1
 800a454:	40c2      	lsrs	r2, r0
 800a456:	617b      	str	r3, [r7, #20]
 800a458:	9201      	str	r2, [sp, #4]
 800a45a:	9b01      	ldr	r3, [sp, #4]
 800a45c:	61bb      	str	r3, [r7, #24]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	bf14      	ite	ne
 800a462:	2102      	movne	r1, #2
 800a464:	2101      	moveq	r1, #1
 800a466:	6139      	str	r1, [r7, #16]
 800a468:	b1c4      	cbz	r4, 800a49c <__d2b+0x88>
 800a46a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a46e:	4404      	add	r4, r0
 800a470:	6034      	str	r4, [r6, #0]
 800a472:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a476:	6028      	str	r0, [r5, #0]
 800a478:	4638      	mov	r0, r7
 800a47a:	b003      	add	sp, #12
 800a47c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a480:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a484:	e7d5      	b.n	800a432 <__d2b+0x1e>
 800a486:	6179      	str	r1, [r7, #20]
 800a488:	e7e7      	b.n	800a45a <__d2b+0x46>
 800a48a:	a801      	add	r0, sp, #4
 800a48c:	f7ff fd63 	bl	8009f56 <__lo0bits>
 800a490:	9b01      	ldr	r3, [sp, #4]
 800a492:	617b      	str	r3, [r7, #20]
 800a494:	2101      	movs	r1, #1
 800a496:	6139      	str	r1, [r7, #16]
 800a498:	3020      	adds	r0, #32
 800a49a:	e7e5      	b.n	800a468 <__d2b+0x54>
 800a49c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a4a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a4a4:	6030      	str	r0, [r6, #0]
 800a4a6:	6918      	ldr	r0, [r3, #16]
 800a4a8:	f7ff fd36 	bl	8009f18 <__hi0bits>
 800a4ac:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a4b0:	e7e1      	b.n	800a476 <__d2b+0x62>

0800a4b2 <__ratio>:
 800a4b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b6:	4688      	mov	r8, r1
 800a4b8:	4669      	mov	r1, sp
 800a4ba:	4681      	mov	r9, r0
 800a4bc:	f7ff ff5c 	bl	800a378 <__b2d>
 800a4c0:	a901      	add	r1, sp, #4
 800a4c2:	4640      	mov	r0, r8
 800a4c4:	ec57 6b10 	vmov	r6, r7, d0
 800a4c8:	f7ff ff56 	bl	800a378 <__b2d>
 800a4cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a4d0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a4d4:	eba3 0c02 	sub.w	ip, r3, r2
 800a4d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a4dc:	1a9b      	subs	r3, r3, r2
 800a4de:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a4e2:	ec5b ab10 	vmov	sl, fp, d0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	bfce      	itee	gt
 800a4ea:	463a      	movgt	r2, r7
 800a4ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a4f0:	465a      	movle	r2, fp
 800a4f2:	4659      	mov	r1, fp
 800a4f4:	463d      	mov	r5, r7
 800a4f6:	bfd4      	ite	le
 800a4f8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800a4fc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800a500:	4630      	mov	r0, r6
 800a502:	ee10 2a10 	vmov	r2, s0
 800a506:	460b      	mov	r3, r1
 800a508:	4629      	mov	r1, r5
 800a50a:	f7f6 f95d 	bl	80007c8 <__aeabi_ddiv>
 800a50e:	ec41 0b10 	vmov	d0, r0, r1
 800a512:	b003      	add	sp, #12
 800a514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a518 <__copybits>:
 800a518:	3901      	subs	r1, #1
 800a51a:	b510      	push	{r4, lr}
 800a51c:	1149      	asrs	r1, r1, #5
 800a51e:	6914      	ldr	r4, [r2, #16]
 800a520:	3101      	adds	r1, #1
 800a522:	f102 0314 	add.w	r3, r2, #20
 800a526:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a52a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a52e:	42a3      	cmp	r3, r4
 800a530:	4602      	mov	r2, r0
 800a532:	d303      	bcc.n	800a53c <__copybits+0x24>
 800a534:	2300      	movs	r3, #0
 800a536:	428a      	cmp	r2, r1
 800a538:	d305      	bcc.n	800a546 <__copybits+0x2e>
 800a53a:	bd10      	pop	{r4, pc}
 800a53c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a540:	f840 2b04 	str.w	r2, [r0], #4
 800a544:	e7f3      	b.n	800a52e <__copybits+0x16>
 800a546:	f842 3b04 	str.w	r3, [r2], #4
 800a54a:	e7f4      	b.n	800a536 <__copybits+0x1e>

0800a54c <__any_on>:
 800a54c:	f100 0214 	add.w	r2, r0, #20
 800a550:	6900      	ldr	r0, [r0, #16]
 800a552:	114b      	asrs	r3, r1, #5
 800a554:	4298      	cmp	r0, r3
 800a556:	b510      	push	{r4, lr}
 800a558:	db11      	blt.n	800a57e <__any_on+0x32>
 800a55a:	dd0a      	ble.n	800a572 <__any_on+0x26>
 800a55c:	f011 011f 	ands.w	r1, r1, #31
 800a560:	d007      	beq.n	800a572 <__any_on+0x26>
 800a562:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a566:	fa24 f001 	lsr.w	r0, r4, r1
 800a56a:	fa00 f101 	lsl.w	r1, r0, r1
 800a56e:	428c      	cmp	r4, r1
 800a570:	d10b      	bne.n	800a58a <__any_on+0x3e>
 800a572:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a576:	4293      	cmp	r3, r2
 800a578:	d803      	bhi.n	800a582 <__any_on+0x36>
 800a57a:	2000      	movs	r0, #0
 800a57c:	bd10      	pop	{r4, pc}
 800a57e:	4603      	mov	r3, r0
 800a580:	e7f7      	b.n	800a572 <__any_on+0x26>
 800a582:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a586:	2900      	cmp	r1, #0
 800a588:	d0f5      	beq.n	800a576 <__any_on+0x2a>
 800a58a:	2001      	movs	r0, #1
 800a58c:	e7f6      	b.n	800a57c <__any_on+0x30>

0800a58e <_calloc_r>:
 800a58e:	b538      	push	{r3, r4, r5, lr}
 800a590:	fb02 f401 	mul.w	r4, r2, r1
 800a594:	4621      	mov	r1, r4
 800a596:	f000 f809 	bl	800a5ac <_malloc_r>
 800a59a:	4605      	mov	r5, r0
 800a59c:	b118      	cbz	r0, 800a5a6 <_calloc_r+0x18>
 800a59e:	4622      	mov	r2, r4
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	f7fe f9a9 	bl	80088f8 <memset>
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a5ac <_malloc_r>:
 800a5ac:	b570      	push	{r4, r5, r6, lr}
 800a5ae:	1ccd      	adds	r5, r1, #3
 800a5b0:	f025 0503 	bic.w	r5, r5, #3
 800a5b4:	3508      	adds	r5, #8
 800a5b6:	2d0c      	cmp	r5, #12
 800a5b8:	bf38      	it	cc
 800a5ba:	250c      	movcc	r5, #12
 800a5bc:	2d00      	cmp	r5, #0
 800a5be:	4606      	mov	r6, r0
 800a5c0:	db01      	blt.n	800a5c6 <_malloc_r+0x1a>
 800a5c2:	42a9      	cmp	r1, r5
 800a5c4:	d903      	bls.n	800a5ce <_malloc_r+0x22>
 800a5c6:	230c      	movs	r3, #12
 800a5c8:	6033      	str	r3, [r6, #0]
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	bd70      	pop	{r4, r5, r6, pc}
 800a5ce:	f000 f87f 	bl	800a6d0 <__malloc_lock>
 800a5d2:	4a21      	ldr	r2, [pc, #132]	; (800a658 <_malloc_r+0xac>)
 800a5d4:	6814      	ldr	r4, [r2, #0]
 800a5d6:	4621      	mov	r1, r4
 800a5d8:	b991      	cbnz	r1, 800a600 <_malloc_r+0x54>
 800a5da:	4c20      	ldr	r4, [pc, #128]	; (800a65c <_malloc_r+0xb0>)
 800a5dc:	6823      	ldr	r3, [r4, #0]
 800a5de:	b91b      	cbnz	r3, 800a5e8 <_malloc_r+0x3c>
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	f000 f83d 	bl	800a660 <_sbrk_r>
 800a5e6:	6020      	str	r0, [r4, #0]
 800a5e8:	4629      	mov	r1, r5
 800a5ea:	4630      	mov	r0, r6
 800a5ec:	f000 f838 	bl	800a660 <_sbrk_r>
 800a5f0:	1c43      	adds	r3, r0, #1
 800a5f2:	d124      	bne.n	800a63e <_malloc_r+0x92>
 800a5f4:	230c      	movs	r3, #12
 800a5f6:	6033      	str	r3, [r6, #0]
 800a5f8:	4630      	mov	r0, r6
 800a5fa:	f000 f86a 	bl	800a6d2 <__malloc_unlock>
 800a5fe:	e7e4      	b.n	800a5ca <_malloc_r+0x1e>
 800a600:	680b      	ldr	r3, [r1, #0]
 800a602:	1b5b      	subs	r3, r3, r5
 800a604:	d418      	bmi.n	800a638 <_malloc_r+0x8c>
 800a606:	2b0b      	cmp	r3, #11
 800a608:	d90f      	bls.n	800a62a <_malloc_r+0x7e>
 800a60a:	600b      	str	r3, [r1, #0]
 800a60c:	50cd      	str	r5, [r1, r3]
 800a60e:	18cc      	adds	r4, r1, r3
 800a610:	4630      	mov	r0, r6
 800a612:	f000 f85e 	bl	800a6d2 <__malloc_unlock>
 800a616:	f104 000b 	add.w	r0, r4, #11
 800a61a:	1d23      	adds	r3, r4, #4
 800a61c:	f020 0007 	bic.w	r0, r0, #7
 800a620:	1ac3      	subs	r3, r0, r3
 800a622:	d0d3      	beq.n	800a5cc <_malloc_r+0x20>
 800a624:	425a      	negs	r2, r3
 800a626:	50e2      	str	r2, [r4, r3]
 800a628:	e7d0      	b.n	800a5cc <_malloc_r+0x20>
 800a62a:	428c      	cmp	r4, r1
 800a62c:	684b      	ldr	r3, [r1, #4]
 800a62e:	bf16      	itet	ne
 800a630:	6063      	strne	r3, [r4, #4]
 800a632:	6013      	streq	r3, [r2, #0]
 800a634:	460c      	movne	r4, r1
 800a636:	e7eb      	b.n	800a610 <_malloc_r+0x64>
 800a638:	460c      	mov	r4, r1
 800a63a:	6849      	ldr	r1, [r1, #4]
 800a63c:	e7cc      	b.n	800a5d8 <_malloc_r+0x2c>
 800a63e:	1cc4      	adds	r4, r0, #3
 800a640:	f024 0403 	bic.w	r4, r4, #3
 800a644:	42a0      	cmp	r0, r4
 800a646:	d005      	beq.n	800a654 <_malloc_r+0xa8>
 800a648:	1a21      	subs	r1, r4, r0
 800a64a:	4630      	mov	r0, r6
 800a64c:	f000 f808 	bl	800a660 <_sbrk_r>
 800a650:	3001      	adds	r0, #1
 800a652:	d0cf      	beq.n	800a5f4 <_malloc_r+0x48>
 800a654:	6025      	str	r5, [r4, #0]
 800a656:	e7db      	b.n	800a610 <_malloc_r+0x64>
 800a658:	20000c2c 	.word	0x20000c2c
 800a65c:	20000c30 	.word	0x20000c30

0800a660 <_sbrk_r>:
 800a660:	b538      	push	{r3, r4, r5, lr}
 800a662:	4c06      	ldr	r4, [pc, #24]	; (800a67c <_sbrk_r+0x1c>)
 800a664:	2300      	movs	r3, #0
 800a666:	4605      	mov	r5, r0
 800a668:	4608      	mov	r0, r1
 800a66a:	6023      	str	r3, [r4, #0]
 800a66c:	f7f7 ff8e 	bl	800258c <_sbrk>
 800a670:	1c43      	adds	r3, r0, #1
 800a672:	d102      	bne.n	800a67a <_sbrk_r+0x1a>
 800a674:	6823      	ldr	r3, [r4, #0]
 800a676:	b103      	cbz	r3, 800a67a <_sbrk_r+0x1a>
 800a678:	602b      	str	r3, [r5, #0]
 800a67a:	bd38      	pop	{r3, r4, r5, pc}
 800a67c:	2000d224 	.word	0x2000d224

0800a680 <strncmp>:
 800a680:	b510      	push	{r4, lr}
 800a682:	b16a      	cbz	r2, 800a6a0 <strncmp+0x20>
 800a684:	3901      	subs	r1, #1
 800a686:	1884      	adds	r4, r0, r2
 800a688:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a68c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a690:	4293      	cmp	r3, r2
 800a692:	d103      	bne.n	800a69c <strncmp+0x1c>
 800a694:	42a0      	cmp	r0, r4
 800a696:	d001      	beq.n	800a69c <strncmp+0x1c>
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d1f5      	bne.n	800a688 <strncmp+0x8>
 800a69c:	1a98      	subs	r0, r3, r2
 800a69e:	bd10      	pop	{r4, pc}
 800a6a0:	4610      	mov	r0, r2
 800a6a2:	e7fc      	b.n	800a69e <strncmp+0x1e>

0800a6a4 <__ascii_wctomb>:
 800a6a4:	b149      	cbz	r1, 800a6ba <__ascii_wctomb+0x16>
 800a6a6:	2aff      	cmp	r2, #255	; 0xff
 800a6a8:	bf85      	ittet	hi
 800a6aa:	238a      	movhi	r3, #138	; 0x8a
 800a6ac:	6003      	strhi	r3, [r0, #0]
 800a6ae:	700a      	strbls	r2, [r1, #0]
 800a6b0:	f04f 30ff 	movhi.w	r0, #4294967295
 800a6b4:	bf98      	it	ls
 800a6b6:	2001      	movls	r0, #1
 800a6b8:	4770      	bx	lr
 800a6ba:	4608      	mov	r0, r1
 800a6bc:	4770      	bx	lr
	...

0800a6c0 <malloc>:
 800a6c0:	4b02      	ldr	r3, [pc, #8]	; (800a6cc <malloc+0xc>)
 800a6c2:	4601      	mov	r1, r0
 800a6c4:	6818      	ldr	r0, [r3, #0]
 800a6c6:	f7ff bf71 	b.w	800a5ac <_malloc_r>
 800a6ca:	bf00      	nop
 800a6cc:	20000a24 	.word	0x20000a24

0800a6d0 <__malloc_lock>:
 800a6d0:	4770      	bx	lr

0800a6d2 <__malloc_unlock>:
 800a6d2:	4770      	bx	lr

0800a6d4 <_init>:
 800a6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d6:	bf00      	nop
 800a6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6da:	bc08      	pop	{r3}
 800a6dc:	469e      	mov	lr, r3
 800a6de:	4770      	bx	lr

0800a6e0 <_fini>:
 800a6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e2:	bf00      	nop
 800a6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6e6:	bc08      	pop	{r3}
 800a6e8:	469e      	mov	lr, r3
 800a6ea:	4770      	bx	lr
