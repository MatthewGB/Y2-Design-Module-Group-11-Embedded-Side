
First_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097bc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  08009958  08009958  00019958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ed0  08009ed0  00020bf4  2**0
                  CONTENTS
  4 .ARM          00000000  08009ed0  08009ed0  00020bf4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ed0  08009ed0  00020bf4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ed0  08009ed0  00019ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ed4  08009ed4  00019ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000bf4  20000000  08009ed8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c5e4  20000bf4  0800aacc  00020bf4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d1d8  0800aacc  0002d1d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020bf4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ca4  00000000  00000000  00020c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024f8  00000000  00000000  000338c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001110  00000000  00000000  00035dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001018  00000000  00000000  00036ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000228e7  00000000  00000000  00037ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010ed8  00000000  00000000  0005a7cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d60cf  00000000  00000000  0006b6a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00141776  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052d8  00000000  00000000  001417f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000bf4 	.word	0x20000bf4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800993c 	.word	0x0800993c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000bf8 	.word	0x20000bf8
 80001d4:	0800993c 	.word	0x0800993c

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	; 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033a:	f1a4 0401 	sub.w	r4, r4, #1
 800033e:	d1e9      	bne.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_dmul>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000582:	bf1d      	ittte	ne
 8000584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000588:	ea94 0f0c 	teqne	r4, ip
 800058c:	ea95 0f0c 	teqne	r5, ip
 8000590:	f000 f8de 	bleq	8000750 <__aeabi_dmul+0x1dc>
 8000594:	442c      	add	r4, r5
 8000596:	ea81 0603 	eor.w	r6, r1, r3
 800059a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a6:	bf18      	it	ne
 80005a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b4:	d038      	beq.n	8000628 <__aeabi_dmul+0xb4>
 80005b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ca:	f04f 0600 	mov.w	r6, #0
 80005ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d2:	f09c 0f00 	teq	ip, #0
 80005d6:	bf18      	it	ne
 80005d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e8:	d204      	bcs.n	80005f4 <__aeabi_dmul+0x80>
 80005ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ee:	416d      	adcs	r5, r5
 80005f0:	eb46 0606 	adc.w	r6, r6, r6
 80005f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000608:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800060c:	bf88      	it	hi
 800060e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000612:	d81e      	bhi.n	8000652 <__aeabi_dmul+0xde>
 8000614:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800062c:	ea46 0101 	orr.w	r1, r6, r1
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	ea81 0103 	eor.w	r1, r1, r3
 8000638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800063c:	bfc2      	ittt	gt
 800063e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000646:	bd70      	popgt	{r4, r5, r6, pc}
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f04f 0e00 	mov.w	lr, #0
 8000650:	3c01      	subs	r4, #1
 8000652:	f300 80ab 	bgt.w	80007ac <__aeabi_dmul+0x238>
 8000656:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065a:	bfde      	ittt	le
 800065c:	2000      	movle	r0, #0
 800065e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000662:	bd70      	pople	{r4, r5, r6, pc}
 8000664:	f1c4 0400 	rsb	r4, r4, #0
 8000668:	3c20      	subs	r4, #32
 800066a:	da35      	bge.n	80006d8 <__aeabi_dmul+0x164>
 800066c:	340c      	adds	r4, #12
 800066e:	dc1b      	bgt.n	80006a8 <__aeabi_dmul+0x134>
 8000670:	f104 0414 	add.w	r4, r4, #20
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f305 	lsl.w	r3, r0, r5
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	fa21 f604 	lsr.w	r6, r1, r4
 8000698:	eb42 0106 	adc.w	r1, r2, r6
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 040c 	rsb	r4, r4, #12
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f304 	lsl.w	r3, r0, r4
 80006b4:	fa20 f005 	lsr.w	r0, r0, r5
 80006b8:	fa01 f204 	lsl.w	r2, r1, r4
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	f141 0100 	adc.w	r1, r1, #0
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f205 	lsl.w	r2, r0, r5
 80006e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e4:	fa20 f304 	lsr.w	r3, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea43 0302 	orr.w	r3, r3, r2
 80006f0:	fa21 f004 	lsr.w	r0, r1, r4
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	fa21 f204 	lsr.w	r2, r1, r4
 80006fc:	ea20 0002 	bic.w	r0, r0, r2
 8000700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f094 0f00 	teq	r4, #0
 8000714:	d10f      	bne.n	8000736 <__aeabi_dmul+0x1c2>
 8000716:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071a:	0040      	lsls	r0, r0, #1
 800071c:	eb41 0101 	adc.w	r1, r1, r1
 8000720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3c01      	subeq	r4, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1a6>
 800072a:	ea41 0106 	orr.w	r1, r1, r6
 800072e:	f095 0f00 	teq	r5, #0
 8000732:	bf18      	it	ne
 8000734:	4770      	bxne	lr
 8000736:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	eb43 0303 	adc.w	r3, r3, r3
 8000740:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000744:	bf08      	it	eq
 8000746:	3d01      	subeq	r5, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1c6>
 800074a:	ea43 0306 	orr.w	r3, r3, r6
 800074e:	4770      	bx	lr
 8000750:	ea94 0f0c 	teq	r4, ip
 8000754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000758:	bf18      	it	ne
 800075a:	ea95 0f0c 	teqne	r5, ip
 800075e:	d00c      	beq.n	800077a <__aeabi_dmul+0x206>
 8000760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076a:	d1d1      	bne.n	8000710 <__aeabi_dmul+0x19c>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077e:	bf06      	itte	eq
 8000780:	4610      	moveq	r0, r2
 8000782:	4619      	moveq	r1, r3
 8000784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000788:	d019      	beq.n	80007be <__aeabi_dmul+0x24a>
 800078a:	ea94 0f0c 	teq	r4, ip
 800078e:	d102      	bne.n	8000796 <__aeabi_dmul+0x222>
 8000790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000794:	d113      	bne.n	80007be <__aeabi_dmul+0x24a>
 8000796:	ea95 0f0c 	teq	r5, ip
 800079a:	d105      	bne.n	80007a8 <__aeabi_dmul+0x234>
 800079c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a0:	bf1c      	itt	ne
 80007a2:	4610      	movne	r0, r2
 80007a4:	4619      	movne	r1, r3
 80007a6:	d10a      	bne.n	80007be <__aeabi_dmul+0x24a>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__aeabi_ddiv>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d6:	bf1d      	ittte	ne
 80007d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007dc:	ea94 0f0c 	teqne	r4, ip
 80007e0:	ea95 0f0c 	teqne	r5, ip
 80007e4:	f000 f8a7 	bleq	8000936 <__aeabi_ddiv+0x16e>
 80007e8:	eba4 0405 	sub.w	r4, r4, r5
 80007ec:	ea81 0e03 	eor.w	lr, r1, r3
 80007f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f8:	f000 8088 	beq.w	800090c <__aeabi_ddiv+0x144>
 80007fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000800:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800080c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000818:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800081c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000820:	429d      	cmp	r5, r3
 8000822:	bf08      	it	eq
 8000824:	4296      	cmpeq	r6, r2
 8000826:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082e:	d202      	bcs.n	8000836 <__aeabi_ddiv+0x6e>
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	1ab6      	subs	r6, r6, r2
 8000838:	eb65 0503 	sbc.w	r5, r5, r3
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000846:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 000c 	orrcs.w	r0, r0, ip
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a8:	d018      	beq.n	80008dc <__aeabi_ddiv+0x114>
 80008aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c6:	d1c0      	bne.n	800084a <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	d10b      	bne.n	80008e6 <__aeabi_ddiv+0x11e>
 80008ce:	ea41 0100 	orr.w	r1, r1, r0
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008da:	e7b6      	b.n	800084a <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	bf04      	itt	eq
 80008e2:	4301      	orreq	r1, r0
 80008e4:	2000      	moveq	r0, #0
 80008e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ea:	bf88      	it	hi
 80008ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f0:	f63f aeaf 	bhi.w	8000652 <__aeabi_dmul+0xde>
 80008f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f8:	bf04      	itt	eq
 80008fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000918:	bfc2      	ittt	gt
 800091a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000922:	bd70      	popgt	{r4, r5, r6, pc}
 8000924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000928:	f04f 0e00 	mov.w	lr, #0
 800092c:	3c01      	subs	r4, #1
 800092e:	e690      	b.n	8000652 <__aeabi_dmul+0xde>
 8000930:	ea45 0e06 	orr.w	lr, r5, r6
 8000934:	e68d      	b.n	8000652 <__aeabi_dmul+0xde>
 8000936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093a:	ea94 0f0c 	teq	r4, ip
 800093e:	bf08      	it	eq
 8000940:	ea95 0f0c 	teqeq	r5, ip
 8000944:	f43f af3b 	beq.w	80007be <__aeabi_dmul+0x24a>
 8000948:	ea94 0f0c 	teq	r4, ip
 800094c:	d10a      	bne.n	8000964 <__aeabi_ddiv+0x19c>
 800094e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000952:	f47f af34 	bne.w	80007be <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	f47f af25 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e72c      	b.n	80007be <__aeabi_dmul+0x24a>
 8000964:	ea95 0f0c 	teq	r5, ip
 8000968:	d106      	bne.n	8000978 <__aeabi_ddiv+0x1b0>
 800096a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096e:	f43f aefd 	beq.w	800076c <__aeabi_dmul+0x1f8>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e722      	b.n	80007be <__aeabi_dmul+0x24a>
 8000978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000982:	f47f aec5 	bne.w	8000710 <__aeabi_dmul+0x19c>
 8000986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098a:	f47f af0d 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800098e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000992:	f47f aeeb 	bne.w	800076c <__aeabi_dmul+0x1f8>
 8000996:	e712      	b.n	80007be <__aeabi_dmul+0x24a>

08000998 <__gedf2>:
 8000998:	f04f 3cff 	mov.w	ip, #4294967295
 800099c:	e006      	b.n	80009ac <__cmpdf2+0x4>
 800099e:	bf00      	nop

080009a0 <__ledf2>:
 80009a0:	f04f 0c01 	mov.w	ip, #1
 80009a4:	e002      	b.n	80009ac <__cmpdf2+0x4>
 80009a6:	bf00      	nop

080009a8 <__cmpdf2>:
 80009a8:	f04f 0c01 	mov.w	ip, #1
 80009ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009bc:	bf18      	it	ne
 80009be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c2:	d01b      	beq.n	80009fc <__cmpdf2+0x54>
 80009c4:	b001      	add	sp, #4
 80009c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ca:	bf0c      	ite	eq
 80009cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d0:	ea91 0f03 	teqne	r1, r3
 80009d4:	bf02      	ittt	eq
 80009d6:	ea90 0f02 	teqeq	r0, r2
 80009da:	2000      	moveq	r0, #0
 80009dc:	4770      	bxeq	lr
 80009de:	f110 0f00 	cmn.w	r0, #0
 80009e2:	ea91 0f03 	teq	r1, r3
 80009e6:	bf58      	it	pl
 80009e8:	4299      	cmppl	r1, r3
 80009ea:	bf08      	it	eq
 80009ec:	4290      	cmpeq	r0, r2
 80009ee:	bf2c      	ite	cs
 80009f0:	17d8      	asrcs	r0, r3, #31
 80009f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009f6:	f040 0001 	orr.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__cmpdf2+0x64>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d107      	bne.n	8000a1c <__cmpdf2+0x74>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d1d6      	bne.n	80009c4 <__cmpdf2+0x1c>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d0d3      	beq.n	80009c4 <__cmpdf2+0x1c>
 8000a1c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdrcmple>:
 8000a24:	4684      	mov	ip, r0
 8000a26:	4610      	mov	r0, r2
 8000a28:	4662      	mov	r2, ip
 8000a2a:	468c      	mov	ip, r1
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4663      	mov	r3, ip
 8000a30:	e000      	b.n	8000a34 <__aeabi_cdcmpeq>
 8000a32:	bf00      	nop

08000a34 <__aeabi_cdcmpeq>:
 8000a34:	b501      	push	{r0, lr}
 8000a36:	f7ff ffb7 	bl	80009a8 <__cmpdf2>
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	bf48      	it	mi
 8000a3e:	f110 0f00 	cmnmi.w	r0, #0
 8000a42:	bd01      	pop	{r0, pc}

08000a44 <__aeabi_dcmpeq>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff fff4 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a4c:	bf0c      	ite	eq
 8000a4e:	2001      	moveq	r0, #1
 8000a50:	2000      	movne	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmplt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffea 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmple>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffe0 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpge>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffce 	bl	8000a24 <__aeabi_cdrcmple>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpgt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffc4 	bl	8000a24 <__aeabi_cdrcmple>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2uiz>:
 8000af8:	004a      	lsls	r2, r1, #1
 8000afa:	d211      	bcs.n	8000b20 <__aeabi_d2uiz+0x28>
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d211      	bcs.n	8000b26 <__aeabi_d2uiz+0x2e>
 8000b02:	d50d      	bpl.n	8000b20 <__aeabi_d2uiz+0x28>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d40e      	bmi.n	8000b2c <__aeabi_d2uiz+0x34>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d102      	bne.n	8000b32 <__aeabi_d2uiz+0x3a>
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	4770      	bx	lr
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	4770      	bx	lr

08000b38 <serialOut>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void serialOut(UART_HandleTypeDef *huart, char _out[], uint32_t len){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(huart, (uint8_t *) _out, len, 100);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	2364      	movs	r3, #100	; 0x64
 8000b4a:	68b9      	ldr	r1, [r7, #8]
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	f006 fb1f 	bl	8007190 <HAL_UART_Transmit>
}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <printStr>:

void printStr(char str[])
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	serialOut(&huart2, str, strlen(str));
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff fb41 	bl	80001ec <strlen>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	4803      	ldr	r0, [pc, #12]	; (8000b80 <printStr+0x24>)
 8000b72:	f7ff ffe1 	bl	8000b38 <serialOut>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000d108 	.word	0x2000d108

08000b84 <printChar>:

void printChar(char chr)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	char str1[2] = {chr , '\0'};
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	753b      	strb	r3, [r7, #20]
 8000b92:	2300      	movs	r3, #0
 8000b94:	757b      	strb	r3, [r7, #21]
	char str2[5] = "";
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	743b      	strb	r3, [r7, #16]
	strcpy(str2,str1);
 8000b9e:	f107 0214 	add.w	r2, r7, #20
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f006 ffdf 	bl	8007b6c <strcpy>
	serialOut(&huart2, str2, strlen(str2));
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fb1a 	bl	80001ec <strlen>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <printChar+0x4c>)
 8000bc2:	f7ff ffb9 	bl	8000b38 <serialOut>
}
 8000bc6:	bf00      	nop
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000d108 	.word	0x2000d108

08000bd4 <printInt>:

void printInt(int i)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	char str[5];
	itoa(i, str, 10);
 8000bdc:	f107 0308 	add.w	r3, r7, #8
 8000be0:	220a      	movs	r2, #10
 8000be2:	4619      	mov	r1, r3
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f006 ffb7 	bl	8007b58 <itoa>
	serialOut(&huart2, str, strlen(str));
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fafc 	bl	80001ec <strlen>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4803      	ldr	r0, [pc, #12]	; (8000c0c <printInt+0x38>)
 8000bfe:	f7ff ff9b 	bl	8000b38 <serialOut>
}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	2000d108 	.word	0x2000d108

08000c10 <printStrLn>:

/**
 * Print string and go to next line (currently broken)
 */
void printStrLn(char str[])
{
 8000c10:	b5b0      	push	{r4, r5, r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	466b      	mov	r3, sp
 8000c1a:	461d      	mov	r5, r3
	char newstr[strlen(str)+5];
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff fae5 	bl	80001ec <strlen>
 8000c22:	4603      	mov	r3, r0
 8000c24:	1d58      	adds	r0, r3, #5
 8000c26:	4603      	mov	r3, r0
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	4601      	mov	r1, r0
 8000c2e:	f04f 0200 	mov.w	r2, #0
 8000c32:	f04f 0300 	mov.w	r3, #0
 8000c36:	f04f 0400 	mov.w	r4, #0
 8000c3a:	00d4      	lsls	r4, r2, #3
 8000c3c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000c40:	00cb      	lsls	r3, r1, #3
 8000c42:	4601      	mov	r1, r0
 8000c44:	f04f 0200 	mov.w	r2, #0
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	f04f 0400 	mov.w	r4, #0
 8000c50:	00d4      	lsls	r4, r2, #3
 8000c52:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000c56:	00cb      	lsls	r3, r1, #3
 8000c58:	1dc3      	adds	r3, r0, #7
 8000c5a:	08db      	lsrs	r3, r3, #3
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	ebad 0d03 	sub.w	sp, sp, r3
 8000c62:	466b      	mov	r3, sp
 8000c64:	3300      	adds	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
	strcpy(newstr, str);
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f006 ff7d 	bl	8007b6c <strcpy>
	strcat(newstr, "\r\n");
 8000c72:	68bc      	ldr	r4, [r7, #8]
 8000c74:	4620      	mov	r0, r4
 8000c76:	f7ff fab9 	bl	80001ec <strlen>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4423      	add	r3, r4
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <printStrLn+0x98>)
 8000c80:	8811      	ldrh	r1, [r2, #0]
 8000c82:	7892      	ldrb	r2, [r2, #2]
 8000c84:	8019      	strh	r1, [r3, #0]
 8000c86:	709a      	strb	r2, [r3, #2]
	serialOut(&huart2, str, strlen(newstr));
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff faae 	bl	80001ec <strlen>
 8000c90:	4603      	mov	r3, r0
 8000c92:	461a      	mov	r2, r3
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <printStrLn+0x9c>)
 8000c98:	f7ff ff4e 	bl	8000b38 <serialOut>
 8000c9c:	46ad      	mov	sp, r5
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	08009958 	.word	0x08009958
 8000cac:	2000d108 	.word	0x2000d108

08000cb0 <printWaveform>:

void printWaveform(short data[], int size)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
	for(int i = 0; i<size; i++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	e00e      	b.n	8000cde <printWaveform+0x2e>
	{
		printStr("|");
 8000cc0:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <printWaveform+0x40>)
 8000cc2:	f7ff ff4b 	bl	8000b5c <printStr>
		printInt(data[i]);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff7e 	bl	8000bd4 <printInt>
	for(int i = 0; i<size; i++)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	dbec      	blt.n	8000cc0 <printWaveform+0x10>
	}
}
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	0800995c 	.word	0x0800995c

08000cf4 <readSerial>:
 * Read "readsize" number of characters from serial port, and outputs to outputString
 * Returns 1 if timed out, else 0
 * printchar echoes the typed character back to the PC
 */
int readSerial(char* outputString, int readsize, int timeout, int printchar)
{
 8000cf4:	b5b0      	push	{r4, r5, r7, lr}
 8000cf6:	b08c      	sub	sp, #48	; 0x30
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	466b      	mov	r3, sp
 8000d04:	461d      	mov	r5, r3
	int starttime = HAL_GetTick();
 8000d06:	f001 fbe1 	bl	80024cc <HAL_GetTick>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	61fb      	str	r3, [r7, #28]
	char rxedString[readsize+1];
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	1c58      	adds	r0, r3, #1
 8000d12:	1e43      	subs	r3, r0, #1
 8000d14:	61bb      	str	r3, [r7, #24]
 8000d16:	4603      	mov	r3, r0
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f04f 0200 	mov.w	r2, #0
 8000d1e:	f04f 0300 	mov.w	r3, #0
 8000d22:	f04f 0400 	mov.w	r4, #0
 8000d26:	00d4      	lsls	r4, r2, #3
 8000d28:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000d2c:	00cb      	lsls	r3, r1, #3
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4619      	mov	r1, r3
 8000d32:	f04f 0200 	mov.w	r2, #0
 8000d36:	f04f 0300 	mov.w	r3, #0
 8000d3a:	f04f 0400 	mov.w	r4, #0
 8000d3e:	00d4      	lsls	r4, r2, #3
 8000d40:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000d44:	00cb      	lsls	r3, r1, #3
 8000d46:	4603      	mov	r3, r0
 8000d48:	3307      	adds	r3, #7
 8000d4a:	08db      	lsrs	r3, r3, #3
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	ebad 0d03 	sub.w	sp, sp, r3
 8000d52:	466b      	mov	r3, sp
 8000d54:	3300      	adds	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
	for(int i = 0; i<readsize; i++)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d5c:	e007      	b.n	8000d6e <readSerial+0x7a>
	{
		rxedString[i] = '#';
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	4413      	add	r3, r2
 8000d64:	2223      	movs	r2, #35	; 0x23
 8000d66:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<readsize; i++)
 8000d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	dbf3      	blt.n	8000d5e <readSerial+0x6a>
	}
	char rxedChar[1] = "#";
 8000d76:	2323      	movs	r3, #35	; 0x23
 8000d78:	743b      	strb	r3, [r7, #16]
	int charnum = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
	while (1)
	{
		  HAL_UART_Receive(&huart2, (uint8_t *)rxedChar, 1, 100);
 8000d7e:	f107 0110 	add.w	r1, r7, #16
 8000d82:	2364      	movs	r3, #100	; 0x64
 8000d84:	2201      	movs	r2, #1
 8000d86:	482a      	ldr	r0, [pc, #168]	; (8000e30 <readSerial+0x13c>)
 8000d88:	f006 fa96 	bl	80072b8 <HAL_UART_Receive>

		  if (rxedChar[0] == '\n' || rxedChar[0] == '\r') {
 8000d8c:	7c3b      	ldrb	r3, [r7, #16]
 8000d8e:	2b0a      	cmp	r3, #10
 8000d90:	d028      	beq.n	8000de4 <readSerial+0xf0>
 8000d92:	7c3b      	ldrb	r3, [r7, #16]
 8000d94:	2b0d      	cmp	r3, #13
 8000d96:	d025      	beq.n	8000de4 <readSerial+0xf0>
			  break;
		  }

		  if(rxedChar[0] != '#')
 8000d98:	7c3b      	ldrb	r3, [r7, #16]
 8000d9a:	2b23      	cmp	r3, #35	; 0x23
 8000d9c:	d011      	beq.n	8000dc2 <readSerial+0xce>
		  {
			  rxedString[charnum] = rxedChar[0];
 8000d9e:	7c39      	ldrb	r1, [r7, #16]
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da4:	4413      	add	r3, r2
 8000da6:	460a      	mov	r2, r1
 8000da8:	701a      	strb	r2, [r3, #0]
			  charnum += 1;
 8000daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dac:	3301      	adds	r3, #1
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
			  if(printchar == 1)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d103      	bne.n	8000dbe <readSerial+0xca>
			  {
				  printChar(rxedChar[0]);
 8000db6:	7c3b      	ldrb	r3, [r7, #16]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fee3 	bl	8000b84 <printChar>
			  }
			  rxedChar[0] = '#';
 8000dbe:	2323      	movs	r3, #35	; 0x23
 8000dc0:	743b      	strb	r3, [r7, #16]
		  }

		  if(rxedString[readsize-1] != '#')
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	5cd3      	ldrb	r3, [r2, r3]
 8000dca:	2b23      	cmp	r3, #35	; 0x23
 8000dcc:	d109      	bne.n	8000de2 <readSerial+0xee>
		  {
			  break; //String is full
		  }

		  if(HAL_GetTick()-starttime > timeout)
 8000dce:	f001 fb7d 	bl	80024cc <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	1ad2      	subs	r2, r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d9cf      	bls.n	8000d7e <readSerial+0x8a>
		  {
			  return 1;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e020      	b.n	8000e24 <readSerial+0x130>
			  break; //String is full
 8000de2:	bf00      	nop
		  }
	}

	int truesize = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i<readsize; i++)
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
 8000dec:	e00b      	b.n	8000e06 <readSerial+0x112>
	{
		if(rxedString[i] != '#')
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	6a3b      	ldr	r3, [r7, #32]
 8000df2:	4413      	add	r3, r2
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b23      	cmp	r3, #35	; 0x23
 8000df8:	d002      	beq.n	8000e00 <readSerial+0x10c>
		{
			truesize += 1;
 8000dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i<readsize; i++)
 8000e00:	6a3b      	ldr	r3, [r7, #32]
 8000e02:	3301      	adds	r3, #1
 8000e04:	623b      	str	r3, [r7, #32]
 8000e06:	6a3a      	ldr	r2, [r7, #32]
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	dbef      	blt.n	8000dee <readSerial+0xfa>
		}
	}
	rxedString[truesize] = 0; //Terminates string correctly
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e12:	4413      	add	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]

	strcpy(outputString, rxedString);
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	68f8      	ldr	r0, [r7, #12]
 8000e1e:	f006 fea5 	bl	8007b6c <strcpy>
	return 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	46ad      	mov	sp, r5
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3730      	adds	r7, #48	; 0x30
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	2000d108 	.word	0x2000d108

08000e34 <compressWaveform>:

/**
 * Either extrapolates between samples to fit resolution_x or uses multiple samples per pixel
 */
void compressWaveform(short* data, short *newdata, int samples_taken, int resolution_x, int output_offset)
{
 8000e34:	b5b0      	push	{r4, r5, r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
 8000e40:	603b      	str	r3, [r7, #0]
	if(debug)
 8000e42:	4b25      	ldr	r3, [pc, #148]	; (8000ed8 <compressWaveform+0xa4>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d002      	beq.n	8000e50 <compressWaveform+0x1c>
	{
		printStrLn("Compressing waveform...");
 8000e4a:	4824      	ldr	r0, [pc, #144]	; (8000edc <compressWaveform+0xa8>)
 8000e4c:	f7ff fee0 	bl	8000c10 <printStrLn>
	}
	for(int current_pixel = 0; current_pixel<resolution_x; current_pixel++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	e030      	b.n	8000eb8 <compressWaveform+0x84>
	{
		newdata[current_pixel+output_offset] = data[(int)(((double)current_pixel/resolution_x)*samples_taken)];
 8000e56:	6978      	ldr	r0, [r7, #20]
 8000e58:	f7ff fb22 	bl	80004a0 <__aeabi_i2d>
 8000e5c:	4604      	mov	r4, r0
 8000e5e:	460d      	mov	r5, r1
 8000e60:	6838      	ldr	r0, [r7, #0]
 8000e62:	f7ff fb1d 	bl	80004a0 <__aeabi_i2d>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	4629      	mov	r1, r5
 8000e6e:	f7ff fcab 	bl	80007c8 <__aeabi_ddiv>
 8000e72:	4603      	mov	r3, r0
 8000e74:	460c      	mov	r4, r1
 8000e76:	4625      	mov	r5, r4
 8000e78:	461c      	mov	r4, r3
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff fb10 	bl	80004a0 <__aeabi_i2d>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4620      	mov	r0, r4
 8000e86:	4629      	mov	r1, r5
 8000e88:	f7ff fb74 	bl	8000574 <__aeabi_dmul>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	460c      	mov	r4, r1
 8000e90:	4618      	mov	r0, r3
 8000e92:	4621      	mov	r1, r4
 8000e94:	f7ff fe08 	bl	8000aa8 <__aeabi_d2iz>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	441a      	add	r2, r3
 8000ea0:	6979      	ldr	r1, [r7, #20]
 8000ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea4:	440b      	add	r3, r1
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	68b9      	ldr	r1, [r7, #8]
 8000eaa:	440b      	add	r3, r1
 8000eac:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000eb0:	801a      	strh	r2, [r3, #0]
	for(int current_pixel = 0; current_pixel<resolution_x; current_pixel++)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dbca      	blt.n	8000e56 <compressWaveform+0x22>
	}
	if(debug)
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <compressWaveform+0xa4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d002      	beq.n	8000ece <compressWaveform+0x9a>
	{
		printStrLn("Compression complete \n\r");
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <compressWaveform+0xac>)
 8000eca:	f7ff fea1 	bl	8000c10 <printStrLn>
			current_pixel++;
		}
		newdata[current_pixel] += data[current_sample];
		current_sample++;
	}*/
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000c10 	.word	0x20000c10
 8000edc:	08009960 	.word	0x08009960
 8000ee0:	08009978 	.word	0x08009978

08000ee4 <getDataAndWait>:

void getDataAndWait(short* data, int samples)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	sample_completed = 0;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <getDataAndWait+0x38>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)data, samples);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	4809      	ldr	r0, [pc, #36]	; (8000f20 <getDataAndWait+0x3c>)
 8000efc:	f001 ff50 	bl	8002da0 <HAL_ADC_Start_DMA>
	while(sample_completed == 0)
 8000f00:	e001      	b.n	8000f06 <getDataAndWait+0x22>
	{
		int a = 1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	60fb      	str	r3, [r7, #12]
	while(sample_completed == 0)
 8000f06:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <getDataAndWait+0x38>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0f9      	beq.n	8000f02 <getDataAndWait+0x1e>
	}
	HAL_ADC_Stop_DMA(&hadc1);
 8000f0e:	4804      	ldr	r0, [pc, #16]	; (8000f20 <getDataAndWait+0x3c>)
 8000f10:	f002 f862 	bl	8002fd8 <HAL_ADC_Stop_DMA>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000c1c 	.word	0x20000c1c
 8000f20:	20000cd8 	.word	0x20000cd8

08000f24 <getTriggeredWaveform>:

void getTriggeredWaveform(short* data_out, int resolution_x, double sample_time)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	ed87 0b00 	vstr	d0, [r7]

	int triggered = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
	HAL_ADC_Start(&hadc1);
 8000f36:	4817      	ldr	r0, [pc, #92]	; (8000f94 <getTriggeredWaveform+0x70>)
 8000f38:	f001 fcec 	bl	8002914 <HAL_ADC_Start>
	while(1)
	{
		HAL_ADC_PollForConversion(&hadc1, 10);
 8000f3c:	210a      	movs	r1, #10
 8000f3e:	4815      	ldr	r0, [pc, #84]	; (8000f94 <getTriggeredWaveform+0x70>)
 8000f40:	f001 fe34 	bl	8002bac <HAL_ADC_PollForConversion>
		uint32_t value = HAL_ADC_GetValue(&hadc1);
 8000f44:	4813      	ldr	r0, [pc, #76]	; (8000f94 <getTriggeredWaveform+0x70>)
 8000f46:	f002 f8a9 	bl	800309c <HAL_ADC_GetValue>
 8000f4a:	6138      	str	r0, [r7, #16]
		if(trigger_rising == 1)
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <getTriggeredWaveform+0x74>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d109      	bne.n	8000f68 <getTriggeredWaveform+0x44>
		{
			if(value > trigger_level)
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <getTriggeredWaveform+0x78>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d9ed      	bls.n	8000f3c <getTriggeredWaveform+0x18>
			{
				HAL_ADC_Stop(&hadc1);
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <getTriggeredWaveform+0x70>)
 8000f62:	f001 fded 	bl	8002b40 <HAL_ADC_Stop>
				break;
 8000f66:	e008      	b.n	8000f7a <getTriggeredWaveform+0x56>
			}
		}
		else
		{
			if(value < trigger_level)
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <getTriggeredWaveform+0x78>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d2e3      	bcs.n	8000f3c <getTriggeredWaveform+0x18>
			{
				HAL_ADC_Stop(&hadc1);
 8000f74:	4807      	ldr	r0, [pc, #28]	; (8000f94 <getTriggeredWaveform+0x70>)
 8000f76:	f001 fde3 	bl	8002b40 <HAL_ADC_Stop>
			/*
		printInt(readADC());
		printStr("\n\r");
		triggered++;*/
	}
	printStr("triggered");
 8000f7a:	4809      	ldr	r0, [pc, #36]	; (8000fa0 <getTriggeredWaveform+0x7c>)
 8000f7c:	f7ff fdee 	bl	8000b5c <printStr>
	getWaveform(data_out, resolution_x, sample_time);
 8000f80:	ed97 0b00 	vldr	d0, [r7]
 8000f84:	68b9      	ldr	r1, [r7, #8]
 8000f86:	68f8      	ldr	r0, [r7, #12]
 8000f88:	f000 f80e 	bl	8000fa8 <getWaveform>
}
 8000f8c:	bf00      	nop
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000cd8 	.word	0x20000cd8
 8000f98:	20000a14 	.word	0x20000a14
 8000f9c:	20000a10 	.word	0x20000a10
 8000fa0:	08009990 	.word	0x08009990
 8000fa4:	00000000 	.word	0x00000000

08000fa8 <getWaveform>:

/**
 * Get the set amount of samples in the timeframe, and store in data
 */
void getWaveform(short* data_out, int resolution_x, double sample_time)
{
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b090      	sub	sp, #64	; 0x40
 8000fac:	af02      	add	r7, sp, #8
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	ed87 0b00 	vstr	d0, [r7]

	//samples_needed = 220000*timeframe*0.001;
	//printInt(samples_needed);
	//int samples_needed = (double)samples_per_ms*timeframe;

	int samples_needed = (sample_time/25.1)*MAX_SAMPLES; //At 61.5 cycles per reading, 25000 samples are taken in 25.1ms
 8000fb6:	a396      	add	r3, pc, #600	; (adr r3, 8001210 <getWaveform+0x268>)
 8000fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fc0:	f7ff fc02 	bl	80007c8 <__aeabi_ddiv>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	460c      	mov	r4, r1
 8000fc8:	4625      	mov	r5, r4
 8000fca:	461c      	mov	r4, r3
 8000fcc:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fa65 	bl	80004a0 <__aeabi_i2d>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4620      	mov	r0, r4
 8000fdc:	4629      	mov	r1, r5
 8000fde:	f7ff fac9 	bl	8000574 <__aeabi_dmul>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	460c      	mov	r4, r1
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	4621      	mov	r1, r4
 8000fea:	f7ff fd5d 	bl	8000aa8 <__aeabi_d2iz>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	633b      	str	r3, [r7, #48]	; 0x30
	if(samples_needed < MAX_SAMPLES)
 8000ff2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	da3b      	bge.n	8001074 <getWaveform+0xcc>
	{
		if(debug)
 8000ffc:	4b7a      	ldr	r3, [pc, #488]	; (80011e8 <getWaveform+0x240>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d008      	beq.n	8001016 <getWaveform+0x6e>
		{
			printStr("High sample rate mode\n\r");
 8001004:	4879      	ldr	r0, [pc, #484]	; (80011ec <getWaveform+0x244>)
 8001006:	f7ff fda9 	bl	8000b5c <printStr>
			printInt(samples_needed);
 800100a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800100c:	f7ff fde2 	bl	8000bd4 <printInt>
			printStr(" samples needed\n\r");
 8001010:	4877      	ldr	r0, [pc, #476]	; (80011f0 <getWaveform+0x248>)
 8001012:	f7ff fda3 	bl	8000b5c <printStr>
		}
		sample_completed = 0;
 8001016:	4b77      	ldr	r3, [pc, #476]	; (80011f4 <getWaveform+0x24c>)
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)data, samples_needed);
 800101c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800101e:	461a      	mov	r2, r3
 8001020:	4975      	ldr	r1, [pc, #468]	; (80011f8 <getWaveform+0x250>)
 8001022:	4876      	ldr	r0, [pc, #472]	; (80011fc <getWaveform+0x254>)
 8001024:	f001 febc 	bl	8002da0 <HAL_ADC_Start_DMA>
		unsigned long t1 = DWT->CYCCNT; //32400
 8001028:	4b75      	ldr	r3, [pc, #468]	; (8001200 <getWaveform+0x258>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	61fb      	str	r3, [r7, #28]
		while(sample_completed == 0)
 800102e:	e001      	b.n	8001034 <getWaveform+0x8c>
		{
			int a = 1;
 8001030:	2301      	movs	r3, #1
 8001032:	617b      	str	r3, [r7, #20]
		while(sample_completed == 0)
 8001034:	4b6f      	ldr	r3, [pc, #444]	; (80011f4 <getWaveform+0x24c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0f9      	beq.n	8001030 <getWaveform+0x88>
		}
		unsigned long time2 = (DWT->CYCCNT);
 800103c:	4b70      	ldr	r3, [pc, #448]	; (8001200 <getWaveform+0x258>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	61bb      	str	r3, [r7, #24]
		HAL_ADC_Stop_DMA(&hadc1);
 8001042:	486e      	ldr	r0, [pc, #440]	; (80011fc <getWaveform+0x254>)
 8001044:	f001 ffc8 	bl	8002fd8 <HAL_ADC_Stop_DMA>
		//printStr("Time:");
		//printInt(time2);
		/*
		printStr("Time2:");
		printInt(t1);*/
		if(debug)
 8001048:	4b67      	ldr	r3, [pc, #412]	; (80011e8 <getWaveform+0x240>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d008      	beq.n	8001062 <getWaveform+0xba>
		{
			printStr("time delta:");
 8001050:	486c      	ldr	r0, [pc, #432]	; (8001204 <getWaveform+0x25c>)
 8001052:	f7ff fd83 	bl	8000b5c <printStr>
			printInt(time2-t1);
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fdb9 	bl	8000bd4 <printInt>

		//HAL_ADC_Start_IT(&hadc1);
		//printStr("Data:");
		//printInt(data[0]);

		compressWaveform(data, data_out, samples_needed, resolution_x, 0);
 8001062:	2300      	movs	r3, #0
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800106a:	68f9      	ldr	r1, [r7, #12]
 800106c:	4862      	ldr	r0, [pc, #392]	; (80011f8 <getWaveform+0x250>)
 800106e:	f7ff fee1 	bl	8000e34 <compressWaveform>
			printInt(datasets_done);
			printStr(" out of ");
			printInt(datasets_needed);*/
		}
	}
}
 8001072:	e0b4      	b.n	80011de <getWaveform+0x236>
		if(debug)
 8001074:	4b5c      	ldr	r3, [pc, #368]	; (80011e8 <getWaveform+0x240>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d008      	beq.n	800108e <getWaveform+0xe6>
			printStr("mode 2\n\r");
 800107c:	4862      	ldr	r0, [pc, #392]	; (8001208 <getWaveform+0x260>)
 800107e:	f7ff fd6d 	bl	8000b5c <printStr>
			printInt(samples_needed);
 8001082:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001084:	f7ff fda6 	bl	8000bd4 <printInt>
			printStr(" samples needed\n\r");
 8001088:	4859      	ldr	r0, [pc, #356]	; (80011f0 <getWaveform+0x248>)
 800108a:	f7ff fd67 	bl	8000b5c <printStr>
		double datasets_needed = (double)samples_needed/MAX_SAMPLES;
 800108e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001090:	f7ff fa06 	bl	80004a0 <__aeabi_i2d>
 8001094:	4604      	mov	r4, r0
 8001096:	460d      	mov	r5, r1
 8001098:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff f9ff 	bl	80004a0 <__aeabi_i2d>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4620      	mov	r0, r4
 80010a8:	4629      	mov	r1, r5
 80010aa:	f7ff fb8d 	bl	80007c8 <__aeabi_ddiv>
 80010ae:	4603      	mov	r3, r0
 80010b0:	460c      	mov	r4, r1
 80010b2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		int datasets_done = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	637b      	str	r3, [r7, #52]	; 0x34
		int samples_per_dataset = ((double)MAX_SAMPLES/samples_needed)*resolution_x;
 80010ba:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff f9ee 	bl	80004a0 <__aeabi_i2d>
 80010c4:	4604      	mov	r4, r0
 80010c6:	460d      	mov	r5, r1
 80010c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010ca:	f7ff f9e9 	bl	80004a0 <__aeabi_i2d>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4620      	mov	r0, r4
 80010d4:	4629      	mov	r1, r5
 80010d6:	f7ff fb77 	bl	80007c8 <__aeabi_ddiv>
 80010da:	4603      	mov	r3, r0
 80010dc:	460c      	mov	r4, r1
 80010de:	4625      	mov	r5, r4
 80010e0:	461c      	mov	r4, r3
 80010e2:	68b8      	ldr	r0, [r7, #8]
 80010e4:	f7ff f9dc 	bl	80004a0 <__aeabi_i2d>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4620      	mov	r0, r4
 80010ee:	4629      	mov	r1, r5
 80010f0:	f7ff fa40 	bl	8000574 <__aeabi_dmul>
 80010f4:	4603      	mov	r3, r0
 80010f6:	460c      	mov	r4, r1
 80010f8:	4618      	mov	r0, r3
 80010fa:	4621      	mov	r1, r4
 80010fc:	f7ff fcd4 	bl	8000aa8 <__aeabi_d2iz>
 8001100:	4603      	mov	r3, r0
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
		while(datasets_done < datasets_needed)
 8001104:	e05d      	b.n	80011c2 <getWaveform+0x21a>
			sample_completed = 0;
 8001106:	4b3b      	ldr	r3, [pc, #236]	; (80011f4 <getWaveform+0x24c>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
			if(datasets_needed - datasets_done > 1)
 800110c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800110e:	f7ff f9c7 	bl	80004a0 <__aeabi_i2d>
 8001112:	4603      	mov	r3, r0
 8001114:	460c      	mov	r4, r1
 8001116:	461a      	mov	r2, r3
 8001118:	4623      	mov	r3, r4
 800111a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800111e:	f7ff f871 	bl	8000204 <__aeabi_dsub>
 8001122:	4603      	mov	r3, r0
 8001124:	460c      	mov	r4, r1
 8001126:	4618      	mov	r0, r3
 8001128:	4621      	mov	r1, r4
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	4b37      	ldr	r3, [pc, #220]	; (800120c <getWaveform+0x264>)
 8001130:	f7ff fcb0 	bl	8000a94 <__aeabi_dcmpgt>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d013      	beq.n	8001162 <getWaveform+0x1ba>
				getDataAndWait(data, MAX_SAMPLES);
 800113a:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800113e:	4619      	mov	r1, r3
 8001140:	482d      	ldr	r0, [pc, #180]	; (80011f8 <getWaveform+0x250>)
 8001142:	f7ff fecf 	bl	8000ee4 <getDataAndWait>
				compressWaveform(data, data_out, MAX_SAMPLES, samples_per_dataset, datasets_done * samples_per_dataset);
 8001146:	f246 11a8 	movw	r1, #25000	; 0x61a8
 800114a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800114c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800114e:	fb02 f303 	mul.w	r3, r2, r3
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	460a      	mov	r2, r1
 8001158:	68f9      	ldr	r1, [r7, #12]
 800115a:	4827      	ldr	r0, [pc, #156]	; (80011f8 <getWaveform+0x250>)
 800115c:	f7ff fe6a 	bl	8000e34 <compressWaveform>
 8001160:	e02c      	b.n	80011bc <getWaveform+0x214>
				int samples_current_dataset = MAX_SAMPLES*(datasets_needed - datasets_done);
 8001162:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f99a 	bl	80004a0 <__aeabi_i2d>
 800116c:	4604      	mov	r4, r0
 800116e:	460d      	mov	r5, r1
 8001170:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001172:	f7ff f995 	bl	80004a0 <__aeabi_i2d>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800117e:	f7ff f841 	bl	8000204 <__aeabi_dsub>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4620      	mov	r0, r4
 8001188:	4629      	mov	r1, r5
 800118a:	f7ff f9f3 	bl	8000574 <__aeabi_dmul>
 800118e:	4603      	mov	r3, r0
 8001190:	460c      	mov	r4, r1
 8001192:	4618      	mov	r0, r3
 8001194:	4621      	mov	r1, r4
 8001196:	f7ff fc87 	bl	8000aa8 <__aeabi_d2iz>
 800119a:	4603      	mov	r3, r0
 800119c:	623b      	str	r3, [r7, #32]
				getDataAndWait(data, samples_current_dataset);
 800119e:	6a39      	ldr	r1, [r7, #32]
 80011a0:	4815      	ldr	r0, [pc, #84]	; (80011f8 <getWaveform+0x250>)
 80011a2:	f7ff fe9f 	bl	8000ee4 <getDataAndWait>
				compressWaveform(data, data_out, samples_current_dataset, samples_per_dataset, datasets_done * samples_per_dataset);
 80011a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011aa:	fb02 f303 	mul.w	r3, r2, r3
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	6a3a      	ldr	r2, [r7, #32]
 80011b4:	68f9      	ldr	r1, [r7, #12]
 80011b6:	4810      	ldr	r0, [pc, #64]	; (80011f8 <getWaveform+0x250>)
 80011b8:	f7ff fe3c 	bl	8000e34 <compressWaveform>
			datasets_done++;
 80011bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011be:	3301      	adds	r3, #1
 80011c0:	637b      	str	r3, [r7, #52]	; 0x34
		while(datasets_done < datasets_needed)
 80011c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80011c4:	f7ff f96c 	bl	80004a0 <__aeabi_i2d>
 80011c8:	4603      	mov	r3, r0
 80011ca:	460c      	mov	r4, r1
 80011cc:	461a      	mov	r2, r3
 80011ce:	4623      	mov	r3, r4
 80011d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80011d4:	f7ff fc5e 	bl	8000a94 <__aeabi_dcmpgt>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d193      	bne.n	8001106 <getWaveform+0x15e>
}
 80011de:	bf00      	nop
 80011e0:	3738      	adds	r7, #56	; 0x38
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bdb0      	pop	{r4, r5, r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000c10 	.word	0x20000c10
 80011ec:	0800999c 	.word	0x0800999c
 80011f0:	080099b4 	.word	0x080099b4
 80011f4:	20000c1c 	.word	0x20000c1c
 80011f8:	20000d6c 	.word	0x20000d6c
 80011fc:	20000cd8 	.word	0x20000cd8
 8001200:	e0001000 	.word	0xe0001000
 8001204:	080099c8 	.word	0x080099c8
 8001208:	080099d4 	.word	0x080099d4
 800120c:	3ff00000 	.word	0x3ff00000
 8001210:	9999999a 	.word	0x9999999a
 8001214:	40391999 	.word	0x40391999

08001218 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	sample_completed = 1;
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001222:	2201      	movs	r2, #1
 8001224:	601a      	str	r2, [r3, #0]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000c1c 	.word	0x20000c1c

08001238 <afgAmplitudeAdjustment>:
{
    HAL_ADC_IRQHandler(&hadc1);
}

void afgAmplitudeAdjustment(int new_amplitude)
{
 8001238:	b480      	push	{r7}
 800123a:	b087      	sub	sp, #28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	AFG_Amplitude = new_amplitude;
 8001240:	4a2a      	ldr	r2, [pc, #168]	; (80012ec <afgAmplitudeAdjustment+0xb4>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]
	float ratio = AFG_Amplitude/3300.0f;
 8001246:	4b29      	ldr	r3, [pc, #164]	; (80012ec <afgAmplitudeAdjustment+0xb4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	ee07 3a90 	vmov	s15, r3
 800124e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001252:	eddf 6a27 	vldr	s13, [pc, #156]	; 80012f0 <afgAmplitudeAdjustment+0xb8>
 8001256:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800125a:	edc7 7a04 	vstr	s15, [r7, #16]
	for(int i = 0; i<128; i++)
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	e03a      	b.n	80012da <afgAmplitudeAdjustment+0xa2>
	{
		int previous_amplitude = LUT_CurrentWave[i];
 8001264:	4a23      	ldr	r2, [pc, #140]	; (80012f4 <afgAmplitudeAdjustment+0xbc>)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126c:	60fb      	str	r3, [r7, #12]
		if(previous_amplitude > 2048)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001274:	dd17      	ble.n	80012a6 <afgAmplitudeAdjustment+0x6e>
		{
			LUT_CurrentWave[i] = 2048+((previous_amplitude-2048)*ratio);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001284:	edd7 7a04 	vldr	s15, [r7, #16]
 8001288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800128c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80012f8 <afgAmplitudeAdjustment+0xc0>
 8001290:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001298:	ee17 1a90 	vmov	r1, s15
 800129c:	4a15      	ldr	r2, [pc, #84]	; (80012f4 <afgAmplitudeAdjustment+0xbc>)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80012a4:	e016      	b.n	80012d4 <afgAmplitudeAdjustment+0x9c>
		}
		else
		{
			LUT_CurrentWave[i] = 2048-((2048-previous_amplitude)*ratio);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80012ac:	ee07 3a90 	vmov	s15, r3
 80012b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012bc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80012f8 <afgAmplitudeAdjustment+0xc0>
 80012c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012c8:	ee17 1a90 	vmov	r1, s15
 80012cc:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <afgAmplitudeAdjustment+0xbc>)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<128; i++)
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3301      	adds	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	2b7f      	cmp	r3, #127	; 0x7f
 80012de:	ddc1      	ble.n	8001264 <afgAmplitudeAdjustment+0x2c>
		}
	}
}
 80012e0:	bf00      	nop
 80012e2:	371c      	adds	r7, #28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	20000c18 	.word	0x20000c18
 80012f0:	454e4000 	.word	0x454e4000
 80012f4:	20000800 	.word	0x20000800
 80012f8:	45000000 	.word	0x45000000

080012fc <changeAFGWaveform>:

void changeAFGWaveform(char* name)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	if(strcmp(name, "square") == 0)
 8001304:	4935      	ldr	r1, [pc, #212]	; (80013dc <changeAFGWaveform+0xe0>)
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7fe ff66 	bl	80001d8 <strcmp>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d111      	bne.n	8001336 <changeAFGWaveform+0x3a>
	{
		for(int i = 0; i<128; i++)
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	e00a      	b.n	800132e <changeAFGWaveform+0x32>
		{
			LUT_CurrentWave[i] = LUT_SquareWave[i];
 8001318:	4a31      	ldr	r2, [pc, #196]	; (80013e0 <changeAFGWaveform+0xe4>)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001320:	4930      	ldr	r1, [pc, #192]	; (80013e4 <changeAFGWaveform+0xe8>)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i<128; i++)
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	3301      	adds	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	2b7f      	cmp	r3, #127	; 0x7f
 8001332:	ddf1      	ble.n	8001318 <changeAFGWaveform+0x1c>
	}
	else
	{
		printStr("Invalid waveform name");
	}
}
 8001334:	e04d      	b.n	80013d2 <changeAFGWaveform+0xd6>
	else if(strcmp(name, "sine") == 0)
 8001336:	492c      	ldr	r1, [pc, #176]	; (80013e8 <changeAFGWaveform+0xec>)
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7fe ff4d 	bl	80001d8 <strcmp>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d111      	bne.n	8001368 <changeAFGWaveform+0x6c>
		for(int i = 0; i<128; i++)
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	e00a      	b.n	8001360 <changeAFGWaveform+0x64>
			LUT_CurrentWave[i] = LUT_SineWave[i];
 800134a:	4a28      	ldr	r2, [pc, #160]	; (80013ec <changeAFGWaveform+0xf0>)
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001352:	4924      	ldr	r1, [pc, #144]	; (80013e4 <changeAFGWaveform+0xe8>)
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i<128; i++)
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	3301      	adds	r3, #1
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	2b7f      	cmp	r3, #127	; 0x7f
 8001364:	ddf1      	ble.n	800134a <changeAFGWaveform+0x4e>
}
 8001366:	e034      	b.n	80013d2 <changeAFGWaveform+0xd6>
	else if(strcmp(name, "sawtooth") == 0)
 8001368:	4921      	ldr	r1, [pc, #132]	; (80013f0 <changeAFGWaveform+0xf4>)
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7fe ff34 	bl	80001d8 <strcmp>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d111      	bne.n	800139a <changeAFGWaveform+0x9e>
		for(int i = 0; i<128; i++)
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	e00a      	b.n	8001392 <changeAFGWaveform+0x96>
			LUT_CurrentWave[i] = LUT_SawtoothWave[i];
 800137c:	4a1d      	ldr	r2, [pc, #116]	; (80013f4 <changeAFGWaveform+0xf8>)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001384:	4917      	ldr	r1, [pc, #92]	; (80013e4 <changeAFGWaveform+0xe8>)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i<128; i++)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	3301      	adds	r3, #1
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2b7f      	cmp	r3, #127	; 0x7f
 8001396:	ddf1      	ble.n	800137c <changeAFGWaveform+0x80>
}
 8001398:	e01b      	b.n	80013d2 <changeAFGWaveform+0xd6>
	else if(strcmp(name, "noise") == 0)
 800139a:	4917      	ldr	r1, [pc, #92]	; (80013f8 <changeAFGWaveform+0xfc>)
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7fe ff1b 	bl	80001d8 <strcmp>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d111      	bne.n	80013cc <changeAFGWaveform+0xd0>
		for(int i = 0; i<128; i++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	e00a      	b.n	80013c4 <changeAFGWaveform+0xc8>
			LUT_CurrentWave[i] = LUT_Noise[i];
 80013ae:	4a13      	ldr	r2, [pc, #76]	; (80013fc <changeAFGWaveform+0x100>)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013b6:	490b      	ldr	r1, [pc, #44]	; (80013e4 <changeAFGWaveform+0xe8>)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i<128; i++)
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	3301      	adds	r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	2b7f      	cmp	r3, #127	; 0x7f
 80013c8:	ddf1      	ble.n	80013ae <changeAFGWaveform+0xb2>
}
 80013ca:	e002      	b.n	80013d2 <changeAFGWaveform+0xd6>
		printStr("Invalid waveform name");
 80013cc:	480c      	ldr	r0, [pc, #48]	; (8001400 <changeAFGWaveform+0x104>)
 80013ce:	f7ff fbc5 	bl	8000b5c <printStr>
}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	080099e0 	.word	0x080099e0
 80013e0:	20000200 	.word	0x20000200
 80013e4:	20000800 	.word	0x20000800
 80013e8:	080099e8 	.word	0x080099e8
 80013ec:	20000000 	.word	0x20000000
 80013f0:	080099f0 	.word	0x080099f0
 80013f4:	20000400 	.word	0x20000400
 80013f8:	080099fc 	.word	0x080099fc
 80013fc:	20000600 	.word	0x20000600
 8001400:	08009a04 	.word	0x08009a04

08001404 <startAFG>:

void startAFG()
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af02      	add	r7, sp, #8
    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)LUT_CurrentWave, 128, DAC_ALIGN_12B_R);
 800140a:	2300      	movs	r3, #0
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	4a05      	ldr	r2, [pc, #20]	; (8001428 <startAFG+0x24>)
 8001412:	2100      	movs	r1, #0
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <startAFG+0x28>)
 8001416:	f003 f8df 	bl	80045d8 <HAL_DAC_Start_DMA>
    HAL_TIM_Base_Start(&htim2);
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <startAFG+0x2c>)
 800141c:	f005 fa16 	bl	800684c <HAL_TIM_Base_Start>
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000800 	.word	0x20000800
 800142c:	20000c30 	.word	0x20000c30
 8001430:	2000d0bc 	.word	0x2000d0bc

08001434 <stopAFG>:

void stopAFG()
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001438:	2100      	movs	r1, #0
 800143a:	4802      	ldr	r0, [pc, #8]	; (8001444 <stopAFG+0x10>)
 800143c:	f003 f853 	bl	80044e6 <HAL_DAC_Stop_DMA>
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000c30 	.word	0x20000c30

08001448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	b0a6      	sub	sp, #152	; 0x98
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144e:	f000 ffe3 	bl	8002418 <HAL_Init>

  /* USER CODE BEGIN Init */

  //Enable clock cycle counter
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001452:	4bca      	ldr	r3, [pc, #808]	; (800177c <main+0x334>)
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	4ac9      	ldr	r2, [pc, #804]	; (800177c <main+0x334>)
 8001458:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800145c:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 800145e:	4bc8      	ldr	r3, [pc, #800]	; (8001780 <main+0x338>)
 8001460:	2200      	movs	r2, #0
 8001462:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001464:	4bc6      	ldr	r3, [pc, #792]	; (8001780 <main+0x338>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4ac5      	ldr	r2, [pc, #788]	; (8001780 <main+0x338>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6013      	str	r3, [r2, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001470:	f000 fa76 	bl	8001960 <SystemClock_Config>
  // RCC->APB1ENR |= RCC_APB1ENR_DAC1EN;

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001474:	f000 fc8a 	bl	8001d8c <MX_GPIO_Init>
  MX_DMA_Init();
 8001478:	f000 fc4e 	bl	8001d18 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800147c:	f000 fc1c 	bl	8001cb8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001480:	f000 fad4 	bl	8001a2c <MX_ADC1_Init>
  MX_DAC1_Init();
 8001484:	f000 fba0 	bl	8001bc8 <MX_DAC1_Init>
  MX_TIM2_Init();
 8001488:	f000 fbc8 	bl	8001c1c <MX_TIM2_Init>
  MX_ADC2_Init();
 800148c:	f000 fb3e 	bl	8001b0c <MX_ADC2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  if(debug) { printStr("Ready\n\r"); }
 8001490:	4bbc      	ldr	r3, [pc, #752]	; (8001784 <main+0x33c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <main+0x56>
 8001498:	48bb      	ldr	r0, [pc, #748]	; (8001788 <main+0x340>)
 800149a:	f7ff fb5f 	bl	8000b5c <printStr>

  while(1)
  {
	  printStr(">");
 800149e:	48bb      	ldr	r0, [pc, #748]	; (800178c <main+0x344>)
 80014a0:	f7ff fb5c 	bl	8000b5c <printStr>
	  char input[2];
	  while(readSerial(input, 1, 100000, debug) == 1)
 80014a4:	e002      	b.n	80014ac <main+0x64>
	  {
		  printStr(">");
 80014a6:	48b9      	ldr	r0, [pc, #740]	; (800178c <main+0x344>)
 80014a8:	f7ff fb58 	bl	8000b5c <printStr>
	  while(readSerial(input, 1, 100000, debug) == 1)
 80014ac:	4bb5      	ldr	r3, [pc, #724]	; (8001784 <main+0x33c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80014b4:	4ab6      	ldr	r2, [pc, #728]	; (8001790 <main+0x348>)
 80014b6:	2101      	movs	r1, #1
 80014b8:	f7ff fc1c 	bl	8000cf4 <readSerial>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d0f1      	beq.n	80014a6 <main+0x5e>
	  }

	  if(input[0] == 'A') //Acquire data
 80014c2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80014c6:	2b41      	cmp	r3, #65	; 0x41
 80014c8:	d159      	bne.n	800157e <main+0x136>
	  {
 80014ca:	466b      	mov	r3, sp
 80014cc:	461d      	mov	r5, r3
		  short newdata[resolution_x];
 80014ce:	4bb1      	ldr	r3, [pc, #708]	; (8001794 <main+0x34c>)
 80014d0:	6818      	ldr	r0, [r3, #0]
 80014d2:	1e43      	subs	r3, r0, #1
 80014d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80014d8:	4603      	mov	r3, r0
 80014da:	4619      	mov	r1, r3
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	f04f 0400 	mov.w	r4, #0
 80014e8:	0114      	lsls	r4, r2, #4
 80014ea:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80014ee:	010b      	lsls	r3, r1, #4
 80014f0:	4603      	mov	r3, r0
 80014f2:	4619      	mov	r1, r3
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	f04f 0400 	mov.w	r4, #0
 8001500:	0114      	lsls	r4, r2, #4
 8001502:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8001506:	010b      	lsls	r3, r1, #4
 8001508:	4603      	mov	r3, r0
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	3301      	adds	r3, #1
 800150e:	3307      	adds	r3, #7
 8001510:	08db      	lsrs	r3, r3, #3
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	ebad 0d03 	sub.w	sp, sp, r3
 8001518:	466b      	mov	r3, sp
 800151a:	3301      	adds	r3, #1
 800151c:	085b      	lsrs	r3, r3, #1
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		  for(int i = 0; i<resolution_x; i++)
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800152a:	e00b      	b.n	8001544 <main+0xfc>
		  {
			  newdata[i] = 0;
 800152c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001530:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001534:	2100      	movs	r1, #0
 8001536:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  for(int i = 0; i<resolution_x; i++)
 800153a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800153e:	3301      	adds	r3, #1
 8001540:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001544:	4b93      	ldr	r3, [pc, #588]	; (8001794 <main+0x34c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800154c:	429a      	cmp	r2, r3
 800154e:	dbed      	blt.n	800152c <main+0xe4>
		  }
		  getWaveform(newdata, resolution_x, sample_time);
 8001550:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001554:	4b8f      	ldr	r3, [pc, #572]	; (8001794 <main+0x34c>)
 8001556:	6819      	ldr	r1, [r3, #0]
 8001558:	4b8f      	ldr	r3, [pc, #572]	; (8001798 <main+0x350>)
 800155a:	ed93 7b00 	vldr	d7, [r3]
 800155e:	eeb0 0a47 	vmov.f32	s0, s14
 8001562:	eef0 0a67 	vmov.f32	s1, s15
 8001566:	4610      	mov	r0, r2
 8001568:	f7ff fd1e 	bl	8000fa8 <getWaveform>
		  printWaveform(newdata, resolution_x);
 800156c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001570:	4b88      	ldr	r3, [pc, #544]	; (8001794 <main+0x34c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	4610      	mov	r0, r2
 8001578:	f7ff fb9a 	bl	8000cb0 <printWaveform>
 800157c:	46ad      	mov	sp, r5
		  //printInt(measureFrequency(newdata, 1920, sample_time, 3000));
	  }
	  if(input[0] == 'T') //Acquire data on trigger
 800157e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001582:	2b54      	cmp	r3, #84	; 0x54
 8001584:	d155      	bne.n	8001632 <main+0x1ea>
	  {
 8001586:	466b      	mov	r3, sp
 8001588:	461d      	mov	r5, r3
		  short newdata[resolution_x];
 800158a:	4b82      	ldr	r3, [pc, #520]	; (8001794 <main+0x34c>)
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	1e43      	subs	r3, r0, #1
 8001590:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001592:	4603      	mov	r3, r0
 8001594:	4619      	mov	r1, r3
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	f04f 0400 	mov.w	r4, #0
 80015a2:	0114      	lsls	r4, r2, #4
 80015a4:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80015a8:	010b      	lsls	r3, r1, #4
 80015aa:	4603      	mov	r3, r0
 80015ac:	4619      	mov	r1, r3
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	f04f 0400 	mov.w	r4, #0
 80015ba:	0114      	lsls	r4, r2, #4
 80015bc:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80015c0:	010b      	lsls	r3, r1, #4
 80015c2:	4603      	mov	r3, r0
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	3301      	adds	r3, #1
 80015c8:	3307      	adds	r3, #7
 80015ca:	08db      	lsrs	r3, r3, #3
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	ebad 0d03 	sub.w	sp, sp, r3
 80015d2:	466b      	mov	r3, sp
 80015d4:	3301      	adds	r3, #1
 80015d6:	085b      	lsrs	r3, r3, #1
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	65bb      	str	r3, [r7, #88]	; 0x58
		  for(int i = 0; i<resolution_x; i++)
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80015e2:	e00a      	b.n	80015fa <main+0x1b2>
		  {
			  newdata[i] = 0;
 80015e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80015ea:	2100      	movs	r1, #0
 80015ec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  for(int i = 0; i<resolution_x; i++)
 80015f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80015f4:	3301      	adds	r3, #1
 80015f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80015fa:	4b66      	ldr	r3, [pc, #408]	; (8001794 <main+0x34c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001602:	429a      	cmp	r2, r3
 8001604:	dbee      	blt.n	80015e4 <main+0x19c>
		  }
		  getTriggeredWaveform(newdata, resolution_x, sample_time);
 8001606:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001608:	4b62      	ldr	r3, [pc, #392]	; (8001794 <main+0x34c>)
 800160a:	6819      	ldr	r1, [r3, #0]
 800160c:	4b62      	ldr	r3, [pc, #392]	; (8001798 <main+0x350>)
 800160e:	ed93 7b00 	vldr	d7, [r3]
 8001612:	eeb0 0a47 	vmov.f32	s0, s14
 8001616:	eef0 0a67 	vmov.f32	s1, s15
 800161a:	4610      	mov	r0, r2
 800161c:	f7ff fc82 	bl	8000f24 <getTriggeredWaveform>
		  printWaveform(newdata, resolution_x);
 8001620:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001622:	4b5c      	ldr	r3, [pc, #368]	; (8001794 <main+0x34c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4619      	mov	r1, r3
 8001628:	4610      	mov	r0, r2
 800162a:	f7ff fb41 	bl	8000cb0 <printWaveform>
 800162e:	46ad      	mov	sp, r5
 8001630:	e735      	b.n	800149e <main+0x56>
		  //printInt(measureFrequency(newdata, 1920, sample_time, 3000));
	  }
	  else if(input[0] == 'S') //Set variable
 8001632:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001636:	2b53      	cmp	r3, #83	; 0x53
 8001638:	f040 8172 	bne.w	8001920 <main+0x4d8>
	  {
		  if(debug) { printStr("SetVar"); }
 800163c:	4b51      	ldr	r3, [pc, #324]	; (8001784 <main+0x33c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <main+0x202>
 8001644:	4855      	ldr	r0, [pc, #340]	; (800179c <main+0x354>)
 8001646:	f7ff fa89 	bl	8000b5c <printStr>

		  char variable_name[21];
		  readSerial(variable_name, 20, 20000, 1);
 800164a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800164e:	2301      	movs	r3, #1
 8001650:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001654:	2114      	movs	r1, #20
 8001656:	f7ff fb4d 	bl	8000cf4 <readSerial>
		  variable_name[20] = '\0';
 800165a:	2300      	movs	r3, #0
 800165c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

		  char variable_value[21];
		  readSerial(variable_value, 20, 20000, 1);
 8001660:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001664:	2301      	movs	r3, #1
 8001666:	f644 6220 	movw	r2, #20000	; 0x4e20
 800166a:	2114      	movs	r1, #20
 800166c:	f7ff fb42 	bl	8000cf4 <readSerial>
		  variable_value[20] = '\0';
 8001670:	2300      	movs	r3, #0
 8001672:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

		  if(strcmp(variable_name, "resolution_x") == 0)
 8001676:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800167a:	4949      	ldr	r1, [pc, #292]	; (80017a0 <main+0x358>)
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe fdab 	bl	80001d8 <strcmp>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d113      	bne.n	80016b0 <main+0x268>
		  {
			  char *end;
			  int newval = strtol(variable_value, &end, 10);
 8001688:	f107 0120 	add.w	r1, r7, #32
 800168c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001690:	220a      	movs	r2, #10
 8001692:	4618      	mov	r0, r3
 8001694:	f007 f914 	bl	80088c0 <strtol>
 8001698:	6638      	str	r0, [r7, #96]	; 0x60
			  if(newval == 0)
 800169a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800169c:	2b00      	cmp	r3, #0
 800169e:	d103      	bne.n	80016a8 <main+0x260>
			  {
				  printStr("Invalid number");
 80016a0:	4840      	ldr	r0, [pc, #256]	; (80017a4 <main+0x35c>)
 80016a2:	f7ff fa5b 	bl	8000b5c <printStr>
 80016a6:	e6fa      	b.n	800149e <main+0x56>
			  }
			  else
			  {
				  resolution_x = newval;
 80016a8:	4a3a      	ldr	r2, [pc, #232]	; (8001794 <main+0x34c>)
 80016aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	e6f6      	b.n	800149e <main+0x56>
			  }
		  }
		  else if(strcmp(variable_name, "resolution_y") == 0)
 80016b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016b4:	493c      	ldr	r1, [pc, #240]	; (80017a8 <main+0x360>)
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe fd8e 	bl	80001d8 <strcmp>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d113      	bne.n	80016ea <main+0x2a2>
		  {
			  char *end;
			  int newval = strtol(variable_value, &end, 10);
 80016c2:	f107 011c 	add.w	r1, r7, #28
 80016c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ca:	220a      	movs	r2, #10
 80016cc:	4618      	mov	r0, r3
 80016ce:	f007 f8f7 	bl	80088c0 <strtol>
 80016d2:	6678      	str	r0, [r7, #100]	; 0x64
			  if(newval == 0)
 80016d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d103      	bne.n	80016e2 <main+0x29a>
			  {
				  printStr("Invalid number");
 80016da:	4832      	ldr	r0, [pc, #200]	; (80017a4 <main+0x35c>)
 80016dc:	f7ff fa3e 	bl	8000b5c <printStr>
 80016e0:	e6dd      	b.n	800149e <main+0x56>
			  }
			  else
			  {
				  resolution_y = newval;
 80016e2:	4a32      	ldr	r2, [pc, #200]	; (80017ac <main+0x364>)
 80016e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	e6d9      	b.n	800149e <main+0x56>
			  }
		  }
		  else if(strcmp(variable_name, "sample_time") == 0)
 80016ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016ee:	4930      	ldr	r1, [pc, #192]	; (80017b0 <main+0x368>)
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe fd71 	bl	80001d8 <strcmp>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d11e      	bne.n	800173a <main+0x2f2>
		  {
			  char *end;
			  double newval = strtod(variable_value, &end);
 80016fc:	f107 0218 	add.w	r2, r7, #24
 8001700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001704:	4611      	mov	r1, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f007 f84a 	bl	80087a0 <strtod>
 800170c:	ed87 0b1a 	vstr	d0, [r7, #104]	; 0x68
			  if(newval == 0)
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800171c:	f7ff f992 	bl	8000a44 <__aeabi_dcmpeq>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <main+0x2e6>
			  {
				  printStr("Invalid number");
 8001726:	481f      	ldr	r0, [pc, #124]	; (80017a4 <main+0x35c>)
 8001728:	f7ff fa18 	bl	8000b5c <printStr>
 800172c:	e6b7      	b.n	800149e <main+0x56>
			  }
			  else
			  {
				  sample_time = newval;
 800172e:	4a1a      	ldr	r2, [pc, #104]	; (8001798 <main+0x350>)
 8001730:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8001734:	e9c2 3400 	strd	r3, r4, [r2]
 8001738:	e6b1      	b.n	800149e <main+0x56>
			  }
		  }
		  else if(strcmp(variable_name, "trigger_level") == 0)
 800173a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800173e:	491d      	ldr	r1, [pc, #116]	; (80017b4 <main+0x36c>)
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fd49 	bl	80001d8 <strcmp>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d13b      	bne.n	80017c4 <main+0x37c>
		  {
			  char *endptr;
			  int newval = strtol(variable_value, &endptr, 10);
 800174c:	f107 0114 	add.w	r1, r7, #20
 8001750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001754:	220a      	movs	r2, #10
 8001756:	4618      	mov	r0, r3
 8001758:	f007 f8b2 	bl	80088c0 <strtol>
 800175c:	6778      	str	r0, [r7, #116]	; 0x74
			  if(endptr == variable_value || newval > 4097)
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001764:	429a      	cmp	r2, r3
 8001766:	d004      	beq.n	8001772 <main+0x32a>
 8001768:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800176a:	f241 0201 	movw	r2, #4097	; 0x1001
 800176e:	4293      	cmp	r3, r2
 8001770:	dd24      	ble.n	80017bc <main+0x374>
			  {
				  printStr("Invalid number, must be <= 4096");
 8001772:	4811      	ldr	r0, [pc, #68]	; (80017b8 <main+0x370>)
 8001774:	f7ff f9f2 	bl	8000b5c <printStr>
 8001778:	e0d5      	b.n	8001926 <main+0x4de>
 800177a:	bf00      	nop
 800177c:	e000edf0 	.word	0xe000edf0
 8001780:	e0001000 	.word	0xe0001000
 8001784:	20000c10 	.word	0x20000c10
 8001788:	08009a1c 	.word	0x08009a1c
 800178c:	08009a24 	.word	0x08009a24
 8001790:	000186a0 	.word	0x000186a0
 8001794:	20000a00 	.word	0x20000a00
 8001798:	20000a08 	.word	0x20000a08
 800179c:	08009a28 	.word	0x08009a28
 80017a0:	08009a30 	.word	0x08009a30
 80017a4:	08009a40 	.word	0x08009a40
 80017a8:	08009a50 	.word	0x08009a50
 80017ac:	20000a04 	.word	0x20000a04
 80017b0:	08009a60 	.word	0x08009a60
 80017b4:	08009a6c 	.word	0x08009a6c
 80017b8:	08009a7c 	.word	0x08009a7c
			  }
			  else
			  {
				  trigger_level = newval;
 80017bc:	4a5a      	ldr	r2, [pc, #360]	; (8001928 <main+0x4e0>)
 80017be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	e66c      	b.n	800149e <main+0x56>
			  }
		  }
		  else if(strcmp(variable_name, "trigger_rising") == 0)
 80017c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017c8:	4958      	ldr	r1, [pc, #352]	; (800192c <main+0x4e4>)
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fd04 	bl	80001d8 <strcmp>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d118      	bne.n	8001808 <main+0x3c0>
		  {
			  char *endptr;
			  int newval = strtol(variable_value, &endptr, 10);
 80017d6:	f107 0110 	add.w	r1, r7, #16
 80017da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017de:	220a      	movs	r2, #10
 80017e0:	4618      	mov	r0, r3
 80017e2:	f007 f86d 	bl	80088c0 <strtol>
 80017e6:	67b8      	str	r0, [r7, #120]	; 0x78
			  if(endptr == variable_value || newval > 1)
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d002      	beq.n	80017f8 <main+0x3b0>
 80017f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	dd03      	ble.n	8001800 <main+0x3b8>
			  {
				  printStr("Invalid number, must be 1 for rising or 0 for falling edge");
 80017f8:	484d      	ldr	r0, [pc, #308]	; (8001930 <main+0x4e8>)
 80017fa:	f7ff f9af 	bl	8000b5c <printStr>
 80017fe:	e092      	b.n	8001926 <main+0x4de>
			  }
			  else
			  {
				  trigger_rising = newval;
 8001800:	4a4c      	ldr	r2, [pc, #304]	; (8001934 <main+0x4ec>)
 8001802:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e64a      	b.n	800149e <main+0x56>
			  }
		  }
		  else if(strcmp(variable_name, "afg_freq") == 0)
 8001808:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800180c:	494a      	ldr	r1, [pc, #296]	; (8001938 <main+0x4f0>)
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fce2 	bl	80001d8 <strcmp>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d12e      	bne.n	8001878 <main+0x430>
		  {
			  char *endptr;
			  int newval = strtol(variable_value, &endptr, 10);
 800181a:	f107 010c 	add.w	r1, r7, #12
 800181e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001822:	220a      	movs	r2, #10
 8001824:	4618      	mov	r0, r3
 8001826:	f007 f84b 	bl	80088c0 <strtol>
 800182a:	67f8      	str	r0, [r7, #124]	; 0x7c
			  if(endptr == variable_value)
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001832:	429a      	cmp	r2, r3
 8001834:	d103      	bne.n	800183e <main+0x3f6>
			  {
				  printStr("Invalid number");
 8001836:	4841      	ldr	r0, [pc, #260]	; (800193c <main+0x4f4>)
 8001838:	f7ff f990 	bl	8000b5c <printStr>
 800183c:	e62f      	b.n	800149e <main+0x56>
			  }
			  else
			  {
				  if(newval>0)
 800183e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001840:	2b00      	cmp	r3, #0
 8001842:	dd16      	ble.n	8001872 <main+0x42a>
				  {
					  TIM2->ARR = round(TIMER_FREQ_TIMES_ARR/newval);
 8001844:	4a3e      	ldr	r2, [pc, #248]	; (8001940 <main+0x4f8>)
 8001846:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001848:	fb92 f3f3 	sdiv	r3, r2, r3
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe27 	bl	80004a0 <__aeabi_i2d>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f7ff f94b 	bl	8000af8 <__aeabi_d2uiz>
 8001862:	4603      	mov	r3, r0
 8001864:	62e3      	str	r3, [r4, #44]	; 0x2c
					  AFG_Freq = newval;
 8001866:	4a37      	ldr	r2, [pc, #220]	; (8001944 <main+0x4fc>)
 8001868:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800186a:	6013      	str	r3, [r2, #0]
					  startAFG();
 800186c:	f7ff fdca 	bl	8001404 <startAFG>
 8001870:	e615      	b.n	800149e <main+0x56>
				  }
				  else
				  {
					  stopAFG();
 8001872:	f7ff fddf 	bl	8001434 <stopAFG>
 8001876:	e612      	b.n	800149e <main+0x56>
				  }
			  }
		  }
		  else if(strcmp(variable_name, "afg_amplitude") == 0)
 8001878:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800187c:	4932      	ldr	r1, [pc, #200]	; (8001948 <main+0x500>)
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fcaa 	bl	80001d8 <strcmp>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d117      	bne.n	80018ba <main+0x472>
		  {
			  char *endptr;
			  int newval = strtol(variable_value, &endptr, 10);
 800188a:	f107 0108 	add.w	r1, r7, #8
 800188e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001892:	220a      	movs	r2, #10
 8001894:	4618      	mov	r0, r3
 8001896:	f007 f813 	bl	80088c0 <strtol>
 800189a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
			  if(endptr == variable_value)
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d103      	bne.n	80018b0 <main+0x468>
			  {
				  printStr("Invalid number");
 80018a8:	4824      	ldr	r0, [pc, #144]	; (800193c <main+0x4f4>)
 80018aa:	f7ff f957 	bl	8000b5c <printStr>
 80018ae:	e5f6      	b.n	800149e <main+0x56>
			  }
			  else
			  {
				  afgAmplitudeAdjustment(newval);
 80018b0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80018b4:	f7ff fcc0 	bl	8001238 <afgAmplitudeAdjustment>
 80018b8:	e5f1      	b.n	800149e <main+0x56>
			  }
		  }
		  else if(strcmp(variable_name, "afg_waveform") == 0)
 80018ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018be:	4923      	ldr	r1, [pc, #140]	; (800194c <main+0x504>)
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fc89 	bl	80001d8 <strcmp>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d105      	bne.n	80018d8 <main+0x490>
		  {
			  changeAFGWaveform(variable_value);
 80018cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fd13 	bl	80012fc <changeAFGWaveform>
 80018d6:	e5e2      	b.n	800149e <main+0x56>
		  }
		  else if(strcmp(variable_name, "DEBUG") == 0)
 80018d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018dc:	491c      	ldr	r1, [pc, #112]	; (8001950 <main+0x508>)
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fc7a 	bl	80001d8 <strcmp>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d116      	bne.n	8001918 <main+0x4d0>
		  {
			  char *endptr;
			  int newval = strtol(variable_value, &endptr, 10);
 80018ea:	1d39      	adds	r1, r7, #4
 80018ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f0:	220a      	movs	r2, #10
 80018f2:	4618      	mov	r0, r3
 80018f4:	f006 ffe4 	bl	80088c0 <strtol>
 80018f8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
			  if(endptr == variable_value)
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001902:	429a      	cmp	r2, r3
 8001904:	d103      	bne.n	800190e <main+0x4c6>
			  {
				  printStr("Invalid number");
 8001906:	480d      	ldr	r0, [pc, #52]	; (800193c <main+0x4f4>)
 8001908:	f7ff f928 	bl	8000b5c <printStr>
 800190c:	e5c7      	b.n	800149e <main+0x56>
			  }
			  else
			  {
				  debug = newval;
 800190e:	4a11      	ldr	r2, [pc, #68]	; (8001954 <main+0x50c>)
 8001910:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e5c2      	b.n	800149e <main+0x56>
			  }
		  }
		  else
		  {
			  printStr("Variable not found. Valid variables are resolution_x, sample_time, afg_freq, afg_waveform, afg_amplitude and DEBUG");
 8001918:	480f      	ldr	r0, [pc, #60]	; (8001958 <main+0x510>)
 800191a:	f7ff f91f 	bl	8000b5c <printStr>
 800191e:	e5be      	b.n	800149e <main+0x56>
		  }
	  }
	  else
	  {
		  printStr("Invalid command. Use A to acquire data or S to set a variable");
 8001920:	480e      	ldr	r0, [pc, #56]	; (800195c <main+0x514>)
 8001922:	f7ff f91b 	bl	8000b5c <printStr>
  {
 8001926:	e5ba      	b.n	800149e <main+0x56>
 8001928:	20000a10 	.word	0x20000a10
 800192c:	08009a9c 	.word	0x08009a9c
 8001930:	08009aac 	.word	0x08009aac
 8001934:	20000a14 	.word	0x20000a14
 8001938:	08009ae8 	.word	0x08009ae8
 800193c:	08009a40 	.word	0x08009a40
 8001940:	00088b80 	.word	0x00088b80
 8001944:	20000c14 	.word	0x20000c14
 8001948:	08009af4 	.word	0x08009af4
 800194c:	08009b04 	.word	0x08009b04
 8001950:	08009b14 	.word	0x08009b14
 8001954:	20000c10 	.word	0x20000c10
 8001958:	08009b1c 	.word	0x08009b1c
 800195c:	08009b90 	.word	0x08009b90

08001960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b0a6      	sub	sp, #152	; 0x98
 8001964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001966:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800196a:	2228      	movs	r2, #40	; 0x28
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f006 f8f4 	bl	8007b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001974:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	2258      	movs	r2, #88	; 0x58
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f006 f8e6 	bl	8007b5c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001990:	2302      	movs	r3, #2
 8001992:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001994:	2301      	movs	r3, #1
 8001996:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001998:	2310      	movs	r3, #16
 800199a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800199e:	2302      	movs	r3, #2
 80019a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019be:	4618      	mov	r0, r3
 80019c0:	f003 fb82 	bl	80050c8 <HAL_RCC_OscConfig>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80019ca:	f000 fa47 	bl	8001e5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ce:	230f      	movs	r3, #15
 80019d0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d2:	2302      	movs	r3, #2
 80019d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d6:	2300      	movs	r3, #0
 80019d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019e0:	2300      	movs	r3, #0
 80019e2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80019e8:	2102      	movs	r1, #2
 80019ea:	4618      	mov	r0, r3
 80019ec:	f004 fa82 	bl	8005ef4 <HAL_RCC_ClockConfig>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80019f6:	f000 fa31 	bl	8001e5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <SystemClock_Config+0xc8>)
 80019fc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001a02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f004 fca6 	bl	8006360 <HAL_RCCEx_PeriphCLKConfig>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001a1a:	f000 fa1f 	bl	8001e5c <Error_Handler>
  }
}
 8001a1e:	bf00      	nop
 8001a20:	3798      	adds	r7, #152	; 0x98
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	00100082 	.word	0x00100082

08001a2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001a32:	f107 031c 	add.w	r3, r7, #28
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
 8001a4c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a4e:	4b2e      	ldr	r3, [pc, #184]	; (8001b08 <MX_ADC1_Init+0xdc>)
 8001a50:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001a54:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a56:	4b2c      	ldr	r3, [pc, #176]	; (8001b08 <MX_ADC1_Init+0xdc>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a5c:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <MX_ADC1_Init+0xdc>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a62:	4b29      	ldr	r3, [pc, #164]	; (8001b08 <MX_ADC1_Init+0xdc>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a68:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <MX_ADC1_Init+0xdc>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a6e:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <MX_ADC1_Init+0xdc>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a76:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <MX_ADC1_Init+0xdc>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a7c:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <MX_ADC1_Init+0xdc>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a82:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <MX_ADC1_Init+0xdc>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a88:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <MX_ADC1_Init+0xdc>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001a8e:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <MX_ADC1_Init+0xdc>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a96:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <MX_ADC1_Init+0xdc>)
 8001a98:	2204      	movs	r2, #4
 8001a9a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <MX_ADC1_Init+0xdc>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001aa2:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <MX_ADC1_Init+0xdc>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001aa8:	4817      	ldr	r0, [pc, #92]	; (8001b08 <MX_ADC1_Init+0xdc>)
 8001aaa:	f000 fd39 	bl	8002520 <HAL_ADC_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001ab4:	f000 f9d2 	bl	8001e5c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4811      	ldr	r0, [pc, #68]	; (8001b08 <MX_ADC1_Init+0xdc>)
 8001ac4:	f002 f918 	bl	8003cf8 <HAL_ADCEx_MultiModeConfigChannel>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001ace:	f000 f9c5 	bl	8001e5c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8001ade:	2305      	movs	r3, #5
 8001ae0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	4619      	mov	r1, r3
 8001aee:	4806      	ldr	r0, [pc, #24]	; (8001b08 <MX_ADC1_Init+0xdc>)
 8001af0:	f001 fe16 	bl	8003720 <HAL_ADC_ConfigChannel>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001afa:	f000 f9af 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	3728      	adds	r7, #40	; 0x28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000cd8 	.word	0x20000cd8

08001b0c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b12:	463b      	mov	r3, r7
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
 8001b20:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001b22:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <MX_ADC2_Init+0xb4>)
 8001b24:	4a27      	ldr	r2, [pc, #156]	; (8001bc4 <MX_ADC2_Init+0xb8>)
 8001b26:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001b28:	4b25      	ldr	r3, [pc, #148]	; (8001bc0 <MX_ADC2_Init+0xb4>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <MX_ADC2_Init+0xb4>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b34:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <MX_ADC2_Init+0xb4>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001b3a:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <MX_ADC2_Init+0xb4>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001b40:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <MX_ADC2_Init+0xb4>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b48:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <MX_ADC2_Init+0xb4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b4e:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <MX_ADC2_Init+0xb4>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b54:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <MX_ADC2_Init+0xb4>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001b5a:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <MX_ADC2_Init+0xb4>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001b60:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <MX_ADC2_Init+0xb4>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <MX_ADC2_Init+0xb4>)
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001b6e:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <MX_ADC2_Init+0xb4>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <MX_ADC2_Init+0xb4>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001b7a:	4811      	ldr	r0, [pc, #68]	; (8001bc0 <MX_ADC2_Init+0xb4>)
 8001b7c:	f000 fcd0 	bl	8002520 <HAL_ADC_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001b86:	f000 f969 	bl	8001e5c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4806      	ldr	r0, [pc, #24]	; (8001bc0 <MX_ADC2_Init+0xb4>)
 8001ba8:	f001 fdba 	bl	8003720 <HAL_ADC_ConfigChannel>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8001bb2:	f000 f953 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000c44 	.word	0x20000c44
 8001bc4:	50000100 	.word	0x50000100

08001bc8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MX_DAC1_Init+0x4c>)
 8001bda:	4a0f      	ldr	r2, [pc, #60]	; (8001c18 <MX_DAC1_Init+0x50>)
 8001bdc:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001bde:	480d      	ldr	r0, [pc, #52]	; (8001c14 <MX_DAC1_Init+0x4c>)
 8001be0:	f002 fc5f 	bl	80044a2 <HAL_DAC_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8001bea:	f000 f937 	bl	8001e5c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001bee:	2324      	movs	r3, #36	; 0x24
 8001bf0:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_DAC1_Init+0x4c>)
 8001bfe:	f002 fdf3 	bl	80047e8 <HAL_DAC_ConfigChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8001c08:	f000 f928 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000c30 	.word	0x20000c30
 8001c18:	40007400 	.word	0x40007400

08001c1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c22:	f107 0310 	add.w	r3, r7, #16
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <MX_TIM2_Init+0x98>)
 8001c3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c42:	4b1c      	ldr	r3, [pc, #112]	; (8001cb4 <MX_TIM2_Init+0x98>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c48:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <MX_TIM2_Init+0x98>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 8001c4e:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <MX_TIM2_Init+0x98>)
 8001c50:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001c54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <MX_TIM2_Init+0x98>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <MX_TIM2_Init+0x98>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c62:	4814      	ldr	r0, [pc, #80]	; (8001cb4 <MX_TIM2_Init+0x98>)
 8001c64:	f004 fd9a 	bl	800679c <HAL_TIM_Base_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c6e:	f000 f8f5 	bl	8001e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c78:	f107 0310 	add.w	r3, r7, #16
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <MX_TIM2_Init+0x98>)
 8001c80:	f004 ff6b 	bl	8006b5a <HAL_TIM_ConfigClockSource>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001c8a:	f000 f8e7 	bl	8001e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c8e:	2320      	movs	r3, #32
 8001c90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4806      	ldr	r0, [pc, #24]	; (8001cb4 <MX_TIM2_Init+0x98>)
 8001c9c:	f005 f980 	bl	8006fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001ca6:	f000 f8d9 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001caa:	bf00      	nop
 8001cac:	3720      	adds	r7, #32
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2000d0bc 	.word	0x2000d0bc

08001cb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cbc:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <MX_USART2_UART_Init+0x58>)
 8001cbe:	4a15      	ldr	r2, [pc, #84]	; (8001d14 <MX_USART2_UART_Init+0x5c>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1843200;
 8001cc2:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <MX_USART2_UART_Init+0x58>)
 8001cc4:	f44f 12e1 	mov.w	r2, #1843200	; 0x1c2000
 8001cc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <MX_USART2_UART_Init+0x58>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <MX_USART2_UART_Init+0x58>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <MX_USART2_UART_Init+0x58>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <MX_USART2_UART_Init+0x58>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <MX_USART2_UART_Init+0x58>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_USART2_UART_Init+0x58>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <MX_USART2_UART_Init+0x58>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <MX_USART2_UART_Init+0x58>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <MX_USART2_UART_Init+0x58>)
 8001cfc:	f005 f9fa 	bl	80070f4 <HAL_UART_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d06:	f000 f8a9 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	2000d108 	.word	0x2000d108
 8001d14:	40004400 	.word	0x40004400

08001d18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <MX_DMA_Init+0x70>)
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	4a19      	ldr	r2, [pc, #100]	; (8001d88 <MX_DMA_Init+0x70>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6153      	str	r3, [r2, #20]
 8001d2a:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <MX_DMA_Init+0x70>)
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d36:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <MX_DMA_Init+0x70>)
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	4a13      	ldr	r2, [pc, #76]	; (8001d88 <MX_DMA_Init+0x70>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	6153      	str	r3, [r2, #20]
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <MX_DMA_Init+0x70>)
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2100      	movs	r1, #0
 8001d52:	200b      	movs	r0, #11
 8001d54:	f002 fb6f 	bl	8004436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d58:	200b      	movs	r0, #11
 8001d5a:	f002 fb88 	bl	800446e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2100      	movs	r1, #0
 8001d62:	200d      	movs	r0, #13
 8001d64:	f002 fb67 	bl	8004436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001d68:	200d      	movs	r0, #13
 8001d6a:	f002 fb80 	bl	800446e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2100      	movs	r1, #0
 8001d72:	2038      	movs	r0, #56	; 0x38
 8001d74:	f002 fb5f 	bl	8004436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001d78:	2038      	movs	r0, #56	; 0x38
 8001d7a:	f002 fb78 	bl	800446e <HAL_NVIC_EnableIRQ>

}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000

08001d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da2:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <MX_GPIO_Init+0xc4>)
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	4a2a      	ldr	r2, [pc, #168]	; (8001e50 <MX_GPIO_Init+0xc4>)
 8001da8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001dac:	6153      	str	r3, [r2, #20]
 8001dae:	4b28      	ldr	r3, [pc, #160]	; (8001e50 <MX_GPIO_Init+0xc4>)
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dba:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <MX_GPIO_Init+0xc4>)
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	4a24      	ldr	r2, [pc, #144]	; (8001e50 <MX_GPIO_Init+0xc4>)
 8001dc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dc4:	6153      	str	r3, [r2, #20]
 8001dc6:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <MX_GPIO_Init+0xc4>)
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	4b1f      	ldr	r3, [pc, #124]	; (8001e50 <MX_GPIO_Init+0xc4>)
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	4a1e      	ldr	r2, [pc, #120]	; (8001e50 <MX_GPIO_Init+0xc4>)
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ddc:	6153      	str	r3, [r2, #20]
 8001dde:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <MX_GPIO_Init+0xc4>)
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dea:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <MX_GPIO_Init+0xc4>)
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	4a18      	ldr	r2, [pc, #96]	; (8001e50 <MX_GPIO_Init+0xc4>)
 8001df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df4:	6153      	str	r3, [r2, #20]
 8001df6:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <MX_GPIO_Init+0xc4>)
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2120      	movs	r1, #32
 8001e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e0a:	f003 f945 	bl	8005098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e14:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <MX_GPIO_Init+0xc8>)
 8001e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	4619      	mov	r1, r3
 8001e22:	480d      	ldr	r0, [pc, #52]	; (8001e58 <MX_GPIO_Init+0xcc>)
 8001e24:	f002 ffae 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e28:	2320      	movs	r3, #32
 8001e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e42:	f002 ff9f 	bl	8004d84 <HAL_GPIO_Init>

}
 8001e46:	bf00      	nop
 8001e48:	3728      	adds	r7, #40	; 0x28
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000
 8001e54:	10210000 	.word	0x10210000
 8001e58:	48000800 	.word	0x48000800

08001e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e60:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e62:	e7fe      	b.n	8001e62 <Error_Handler+0x6>

08001e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <HAL_MspInit+0x44>)
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ea8 <HAL_MspInit+0x44>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6193      	str	r3, [r2, #24]
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <HAL_MspInit+0x44>)
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_MspInit+0x44>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4a08      	ldr	r2, [pc, #32]	; (8001ea8 <HAL_MspInit+0x44>)
 8001e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	61d3      	str	r3, [r2, #28]
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_MspInit+0x44>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e9a:	2007      	movs	r0, #7
 8001e9c:	f002 fac0 	bl	8004420 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000

08001eac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08c      	sub	sp, #48	; 0x30
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 031c 	add.w	r3, r7, #28
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ecc:	d15e      	bne.n	8001f8c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ece:	4b63      	ldr	r3, [pc, #396]	; (800205c <HAL_ADC_MspInit+0x1b0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	4a61      	ldr	r2, [pc, #388]	; (800205c <HAL_ADC_MspInit+0x1b0>)
 8001ed6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001ed8:	4b60      	ldr	r3, [pc, #384]	; (800205c <HAL_ADC_MspInit+0x1b0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d10b      	bne.n	8001ef8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001ee0:	4b5f      	ldr	r3, [pc, #380]	; (8002060 <HAL_ADC_MspInit+0x1b4>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4a5e      	ldr	r2, [pc, #376]	; (8002060 <HAL_ADC_MspInit+0x1b4>)
 8001ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eea:	6153      	str	r3, [r2, #20]
 8001eec:	4b5c      	ldr	r3, [pc, #368]	; (8002060 <HAL_ADC_MspInit+0x1b4>)
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef8:	4b59      	ldr	r3, [pc, #356]	; (8002060 <HAL_ADC_MspInit+0x1b4>)
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	4a58      	ldr	r2, [pc, #352]	; (8002060 <HAL_ADC_MspInit+0x1b4>)
 8001efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f02:	6153      	str	r3, [r2, #20]
 8001f04:	4b56      	ldr	r3, [pc, #344]	; (8002060 <HAL_ADC_MspInit+0x1b4>)
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f10:	2301      	movs	r3, #1
 8001f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f14:	2303      	movs	r3, #3
 8001f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1c:	f107 031c 	add.w	r3, r7, #28
 8001f20:	4619      	mov	r1, r3
 8001f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f26:	f002 ff2d 	bl	8004d84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001f2a:	4b4e      	ldr	r3, [pc, #312]	; (8002064 <HAL_ADC_MspInit+0x1b8>)
 8001f2c:	4a4e      	ldr	r2, [pc, #312]	; (8002068 <HAL_ADC_MspInit+0x1bc>)
 8001f2e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f30:	4b4c      	ldr	r3, [pc, #304]	; (8002064 <HAL_ADC_MspInit+0x1b8>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f36:	4b4b      	ldr	r3, [pc, #300]	; (8002064 <HAL_ADC_MspInit+0x1b8>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f3c:	4b49      	ldr	r3, [pc, #292]	; (8002064 <HAL_ADC_MspInit+0x1b8>)
 8001f3e:	2280      	movs	r2, #128	; 0x80
 8001f40:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f42:	4b48      	ldr	r3, [pc, #288]	; (8002064 <HAL_ADC_MspInit+0x1b8>)
 8001f44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f48:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f4a:	4b46      	ldr	r3, [pc, #280]	; (8002064 <HAL_ADC_MspInit+0x1b8>)
 8001f4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f50:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f52:	4b44      	ldr	r3, [pc, #272]	; (8002064 <HAL_ADC_MspInit+0x1b8>)
 8001f54:	2220      	movs	r2, #32
 8001f56:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f58:	4b42      	ldr	r3, [pc, #264]	; (8002064 <HAL_ADC_MspInit+0x1b8>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f5e:	4841      	ldr	r0, [pc, #260]	; (8002064 <HAL_ADC_MspInit+0x1b8>)
 8001f60:	f002 fd23 	bl	80049aa <HAL_DMA_Init>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8001f6a:	f7ff ff77 	bl	8001e5c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a3c      	ldr	r2, [pc, #240]	; (8002064 <HAL_ADC_MspInit+0x1b8>)
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38
 8001f74:	4a3b      	ldr	r2, [pc, #236]	; (8002064 <HAL_ADC_MspInit+0x1b8>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2012      	movs	r0, #18
 8001f80:	f002 fa59 	bl	8004436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001f84:	2012      	movs	r0, #18
 8001f86:	f002 fa72 	bl	800446e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001f8a:	e062      	b.n	8002052 <HAL_ADC_MspInit+0x1a6>
  else if(hadc->Instance==ADC2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a36      	ldr	r2, [pc, #216]	; (800206c <HAL_ADC_MspInit+0x1c0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d15d      	bne.n	8002052 <HAL_ADC_MspInit+0x1a6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f96:	4b31      	ldr	r3, [pc, #196]	; (800205c <HAL_ADC_MspInit+0x1b0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	4a2f      	ldr	r2, [pc, #188]	; (800205c <HAL_ADC_MspInit+0x1b0>)
 8001f9e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	; (800205c <HAL_ADC_MspInit+0x1b0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d10b      	bne.n	8001fc0 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_ADC_MspInit+0x1b4>)
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	4a2c      	ldr	r2, [pc, #176]	; (8002060 <HAL_ADC_MspInit+0x1b4>)
 8001fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	6153      	str	r3, [r2, #20]
 8001fb4:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <HAL_ADC_MspInit+0x1b4>)
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc0:	4b27      	ldr	r3, [pc, #156]	; (8002060 <HAL_ADC_MspInit+0x1b4>)
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	4a26      	ldr	r2, [pc, #152]	; (8002060 <HAL_ADC_MspInit+0x1b4>)
 8001fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fca:	6153      	str	r3, [r2, #20]
 8001fcc:	4b24      	ldr	r3, [pc, #144]	; (8002060 <HAL_ADC_MspInit+0x1b4>)
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fd8:	2340      	movs	r3, #64	; 0x40
 8001fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe4:	f107 031c 	add.w	r3, r7, #28
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fee:	f002 fec9 	bl	8004d84 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8001ff2:	4b1f      	ldr	r3, [pc, #124]	; (8002070 <HAL_ADC_MspInit+0x1c4>)
 8001ff4:	4a1f      	ldr	r2, [pc, #124]	; (8002074 <HAL_ADC_MspInit+0x1c8>)
 8001ff6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_ADC_MspInit+0x1c4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <HAL_ADC_MspInit+0x1c4>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <HAL_ADC_MspInit+0x1c4>)
 8002006:	2280      	movs	r2, #128	; 0x80
 8002008:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800200a:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_ADC_MspInit+0x1c4>)
 800200c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002010:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002012:	4b17      	ldr	r3, [pc, #92]	; (8002070 <HAL_ADC_MspInit+0x1c4>)
 8002014:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002018:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <HAL_ADC_MspInit+0x1c4>)
 800201c:	2220      	movs	r2, #32
 800201e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002020:	4b13      	ldr	r3, [pc, #76]	; (8002070 <HAL_ADC_MspInit+0x1c4>)
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002026:	4812      	ldr	r0, [pc, #72]	; (8002070 <HAL_ADC_MspInit+0x1c4>)
 8002028:	f002 fcbf 	bl	80049aa <HAL_DMA_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_ADC_MspInit+0x18a>
      Error_Handler();
 8002032:	f7ff ff13 	bl	8001e5c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a0d      	ldr	r2, [pc, #52]	; (8002070 <HAL_ADC_MspInit+0x1c4>)
 800203a:	639a      	str	r2, [r3, #56]	; 0x38
 800203c:	4a0c      	ldr	r2, [pc, #48]	; (8002070 <HAL_ADC_MspInit+0x1c4>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002042:	2200      	movs	r2, #0
 8002044:	2100      	movs	r1, #0
 8002046:	2012      	movs	r0, #18
 8002048:	f002 f9f5 	bl	8004436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800204c:	2012      	movs	r0, #18
 800204e:	f002 fa0e 	bl	800446e <HAL_NVIC_EnableIRQ>
}
 8002052:	bf00      	nop
 8002054:	3730      	adds	r7, #48	; 0x30
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000c20 	.word	0x20000c20
 8002060:	40021000 	.word	0x40021000
 8002064:	20000d28 	.word	0x20000d28
 8002068:	40020008 	.word	0x40020008
 800206c:	50000100 	.word	0x50000100
 8002070:	2000d18c 	.word	0x2000d18c
 8002074:	40020408 	.word	0x40020408

08002078 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	; 0x28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a31      	ldr	r2, [pc, #196]	; (800215c <HAL_DAC_MspInit+0xe4>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d15b      	bne.n	8002152 <HAL_DAC_MspInit+0xda>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800209a:	4b31      	ldr	r3, [pc, #196]	; (8002160 <HAL_DAC_MspInit+0xe8>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	4a30      	ldr	r2, [pc, #192]	; (8002160 <HAL_DAC_MspInit+0xe8>)
 80020a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020a4:	61d3      	str	r3, [r2, #28]
 80020a6:	4b2e      	ldr	r3, [pc, #184]	; (8002160 <HAL_DAC_MspInit+0xe8>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	4b2b      	ldr	r3, [pc, #172]	; (8002160 <HAL_DAC_MspInit+0xe8>)
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	4a2a      	ldr	r2, [pc, #168]	; (8002160 <HAL_DAC_MspInit+0xe8>)
 80020b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020bc:	6153      	str	r3, [r2, #20]
 80020be:	4b28      	ldr	r3, [pc, #160]	; (8002160 <HAL_DAC_MspInit+0xe8>)
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020ca:	2310      	movs	r3, #16
 80020cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ce:	2303      	movs	r3, #3
 80020d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	4619      	mov	r1, r3
 80020dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e0:	f002 fe50 	bl	8004d84 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 80020e4:	4b1f      	ldr	r3, [pc, #124]	; (8002164 <HAL_DAC_MspInit+0xec>)
 80020e6:	4a20      	ldr	r2, [pc, #128]	; (8002168 <HAL_DAC_MspInit+0xf0>)
 80020e8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020ea:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <HAL_DAC_MspInit+0xec>)
 80020ec:	2210      	movs	r2, #16
 80020ee:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020f0:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <HAL_DAC_MspInit+0xec>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80020f6:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <HAL_DAC_MspInit+0xec>)
 80020f8:	2280      	movs	r2, #128	; 0x80
 80020fa:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020fc:	4b19      	ldr	r3, [pc, #100]	; (8002164 <HAL_DAC_MspInit+0xec>)
 80020fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002102:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002104:	4b17      	ldr	r3, [pc, #92]	; (8002164 <HAL_DAC_MspInit+0xec>)
 8002106:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800210a:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800210c:	4b15      	ldr	r3, [pc, #84]	; (8002164 <HAL_DAC_MspInit+0xec>)
 800210e:	2220      	movs	r2, #32
 8002110:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <HAL_DAC_MspInit+0xec>)
 8002114:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002118:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800211a:	4812      	ldr	r0, [pc, #72]	; (8002164 <HAL_DAC_MspInit+0xec>)
 800211c:	f002 fc45 	bl	80049aa <HAL_DMA_Init>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8002126:	f7ff fe99 	bl	8001e5c <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <HAL_DAC_MspInit+0xf4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a0f      	ldr	r2, [pc, #60]	; (800216c <HAL_DAC_MspInit+0xf4>)
 8002130:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002134:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <HAL_DAC_MspInit+0xec>)
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	4a09      	ldr	r2, [pc, #36]	; (8002164 <HAL_DAC_MspInit+0xec>)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6253      	str	r3, [r2, #36]	; 0x24

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	2100      	movs	r1, #0
 8002146:	2036      	movs	r0, #54	; 0x36
 8002148:	f002 f975 	bl	8004436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800214c:	2036      	movs	r0, #54	; 0x36
 800214e:	f002 f98e 	bl	800446e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002152:	bf00      	nop
 8002154:	3728      	adds	r7, #40	; 0x28
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40007400 	.word	0x40007400
 8002160:	40021000 	.word	0x40021000
 8002164:	20000c94 	.word	0x20000c94
 8002168:	40020030 	.word	0x40020030
 800216c:	40010000 	.word	0x40010000

08002170 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002180:	d113      	bne.n	80021aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <HAL_TIM_Base_MspInit+0x44>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	4a0b      	ldr	r2, [pc, #44]	; (80021b4 <HAL_TIM_Base_MspInit+0x44>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	61d3      	str	r3, [r2, #28]
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_TIM_Base_MspInit+0x44>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800219a:	2200      	movs	r2, #0
 800219c:	2100      	movs	r1, #0
 800219e:	201c      	movs	r0, #28
 80021a0:	f002 f949 	bl	8004436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021a4:	201c      	movs	r0, #28
 80021a6:	f002 f962 	bl	800446e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000

080021b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a17      	ldr	r2, [pc, #92]	; (8002234 <HAL_UART_MspInit+0x7c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d128      	bne.n	800222c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021da:	4b17      	ldr	r3, [pc, #92]	; (8002238 <HAL_UART_MspInit+0x80>)
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	4a16      	ldr	r2, [pc, #88]	; (8002238 <HAL_UART_MspInit+0x80>)
 80021e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e4:	61d3      	str	r3, [r2, #28]
 80021e6:	4b14      	ldr	r3, [pc, #80]	; (8002238 <HAL_UART_MspInit+0x80>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f2:	4b11      	ldr	r3, [pc, #68]	; (8002238 <HAL_UART_MspInit+0x80>)
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	4a10      	ldr	r2, [pc, #64]	; (8002238 <HAL_UART_MspInit+0x80>)
 80021f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021fc:	6153      	str	r3, [r2, #20]
 80021fe:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <HAL_UART_MspInit+0x80>)
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800220a:	230c      	movs	r3, #12
 800220c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800221a:	2307      	movs	r3, #7
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221e:	f107 0314 	add.w	r3, r7, #20
 8002222:	4619      	mov	r1, r3
 8002224:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002228:	f002 fdac 	bl	8004d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800222c:	bf00      	nop
 800222e:	3728      	adds	r7, #40	; 0x28
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40004400 	.word	0x40004400
 8002238:	40021000 	.word	0x40021000

0800223c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002240:	e7fe      	b.n	8002240 <NMI_Handler+0x4>
	...

08002244 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printStr("Error: Hard fault");
 8002248:	4801      	ldr	r0, [pc, #4]	; (8002250 <HardFault_Handler+0xc>)
 800224a:	f7fe fc87 	bl	8000b5c <printStr>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800224e:	e7fe      	b.n	800224e <HardFault_Handler+0xa>
 8002250:	08009bd0 	.word	0x08009bd0

08002254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002258:	e7fe      	b.n	8002258 <MemManage_Handler+0x4>
	...

0800225c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  printStr("Error: Bus fault");
 8002260:	4801      	ldr	r0, [pc, #4]	; (8002268 <BusFault_Handler+0xc>)
 8002262:	f7fe fc7b 	bl	8000b5c <printStr>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002266:	e7fe      	b.n	8002266 <BusFault_Handler+0xa>
 8002268:	08009be4 	.word	0x08009be4

0800226c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  printStr("Error: Usage fault");
 8002270:	4801      	ldr	r0, [pc, #4]	; (8002278 <UsageFault_Handler+0xc>)
 8002272:	f7fe fc73 	bl	8000b5c <printStr>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002276:	e7fe      	b.n	8002276 <UsageFault_Handler+0xa>
 8002278:	08009bf8 	.word	0x08009bf8

0800227c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022aa:	f000 f8fb 	bl	80024a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022b8:	4802      	ldr	r0, [pc, #8]	; (80022c4 <DMA1_Channel1_IRQHandler+0x10>)
 80022ba:	f002 fc55 	bl	8004b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000d28 	.word	0x20000d28

080022c8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <DMA1_Channel3_IRQHandler+0x10>)
 80022ce:	f002 fc4b 	bl	8004b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000c94 	.word	0x20000c94

080022dc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80022e0:	4803      	ldr	r0, [pc, #12]	; (80022f0 <ADC1_2_IRQHandler+0x14>)
 80022e2:	f000 fee9 	bl	80030b8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80022e6:	4803      	ldr	r0, [pc, #12]	; (80022f4 <ADC1_2_IRQHandler+0x18>)
 80022e8:	f000 fee6 	bl	80030b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000cd8 	.word	0x20000cd8
 80022f4:	20000c44 	.word	0x20000c44

080022f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022fc:	4802      	ldr	r0, [pc, #8]	; (8002308 <TIM2_IRQHandler+0x10>)
 80022fe:	f004 fb0d 	bl	800691c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	2000d0bc 	.word	0x2000d0bc

0800230c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <TIM6_DAC_IRQHandler+0x10>)
 8002312:	f002 fa0f 	bl	8004734 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000c30 	.word	0x20000c30

08002320 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <DMA2_Channel1_IRQHandler+0x10>)
 8002326:	f002 fc1f 	bl	8004b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	2000d18c 	.word	0x2000d18c

08002334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800233c:	4a14      	ldr	r2, [pc, #80]	; (8002390 <_sbrk+0x5c>)
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <_sbrk+0x60>)
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002348:	4b13      	ldr	r3, [pc, #76]	; (8002398 <_sbrk+0x64>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d102      	bne.n	8002356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <_sbrk+0x64>)
 8002352:	4a12      	ldr	r2, [pc, #72]	; (800239c <_sbrk+0x68>)
 8002354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <_sbrk+0x64>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	429a      	cmp	r2, r3
 8002362:	d207      	bcs.n	8002374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002364:	f005 fbb6 	bl	8007ad4 <__errno>
 8002368:	4602      	mov	r2, r0
 800236a:	230c      	movs	r3, #12
 800236c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800236e:	f04f 33ff 	mov.w	r3, #4294967295
 8002372:	e009      	b.n	8002388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002374:	4b08      	ldr	r3, [pc, #32]	; (8002398 <_sbrk+0x64>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800237a:	4b07      	ldr	r3, [pc, #28]	; (8002398 <_sbrk+0x64>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4413      	add	r3, r2
 8002382:	4a05      	ldr	r2, [pc, #20]	; (8002398 <_sbrk+0x64>)
 8002384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002386:	68fb      	ldr	r3, [r7, #12]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20010000 	.word	0x20010000
 8002394:	00000400 	.word	0x00000400
 8002398:	20000c24 	.word	0x20000c24
 800239c:	2000d1d8 	.word	0x2000d1d8

080023a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <SystemInit+0x20>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <SystemInit+0x20>)
 80023ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023fc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023c8:	480d      	ldr	r0, [pc, #52]	; (8002400 <LoopForever+0x6>)
  ldr r1, =_edata
 80023ca:	490e      	ldr	r1, [pc, #56]	; (8002404 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023cc:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <LoopForever+0xe>)
  movs r3, #0
 80023ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d0:	e002      	b.n	80023d8 <LoopCopyDataInit>

080023d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d6:	3304      	adds	r3, #4

080023d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023dc:	d3f9      	bcc.n	80023d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023de:	4a0b      	ldr	r2, [pc, #44]	; (800240c <LoopForever+0x12>)
  ldr r4, =_ebss
 80023e0:	4c0b      	ldr	r4, [pc, #44]	; (8002410 <LoopForever+0x16>)
  movs r3, #0
 80023e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e4:	e001      	b.n	80023ea <LoopFillZerobss>

080023e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e8:	3204      	adds	r2, #4

080023ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023ec:	d3fb      	bcc.n	80023e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023ee:	f7ff ffd7 	bl	80023a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023f2:	f005 fb75 	bl	8007ae0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023f6:	f7ff f827 	bl	8001448 <main>

080023fa <LoopForever>:

LoopForever:
    b LoopForever
 80023fa:	e7fe      	b.n	80023fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002404:	20000bf4 	.word	0x20000bf4
  ldr r2, =_sidata
 8002408:	08009ed8 	.word	0x08009ed8
  ldr r2, =_sbss
 800240c:	20000bf4 	.word	0x20000bf4
  ldr r4, =_ebss
 8002410:	2000d1d8 	.word	0x2000d1d8

08002414 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002414:	e7fe      	b.n	8002414 <ADC3_IRQHandler>
	...

08002418 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <HAL_Init+0x28>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a07      	ldr	r2, [pc, #28]	; (8002440 <HAL_Init+0x28>)
 8002422:	f043 0310 	orr.w	r3, r3, #16
 8002426:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002428:	2003      	movs	r0, #3
 800242a:	f001 fff9 	bl	8004420 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800242e:	2000      	movs	r0, #0
 8002430:	f000 f808 	bl	8002444 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002434:	f7ff fd16 	bl	8001e64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40022000 	.word	0x40022000

08002444 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800244c:	4b12      	ldr	r3, [pc, #72]	; (8002498 <HAL_InitTick+0x54>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <HAL_InitTick+0x58>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	4619      	mov	r1, r3
 8002456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800245a:	fbb3 f3f1 	udiv	r3, r3, r1
 800245e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002462:	4618      	mov	r0, r3
 8002464:	f002 f811 	bl	800448a <HAL_SYSTICK_Config>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e00e      	b.n	8002490 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b0f      	cmp	r3, #15
 8002476:	d80a      	bhi.n	800248e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002478:	2200      	movs	r2, #0
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	f04f 30ff 	mov.w	r0, #4294967295
 8002480:	f001 ffd9 	bl	8004436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002484:	4a06      	ldr	r2, [pc, #24]	; (80024a0 <HAL_InitTick+0x5c>)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	e000      	b.n	8002490 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
}
 8002490:	4618      	mov	r0, r3
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20000a18 	.word	0x20000a18
 800249c:	20000a20 	.word	0x20000a20
 80024a0:	20000a1c 	.word	0x20000a1c

080024a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024a8:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_IncTick+0x20>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_IncTick+0x24>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4413      	add	r3, r2
 80024b4:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <HAL_IncTick+0x24>)
 80024b6:	6013      	str	r3, [r2, #0]
}
 80024b8:	bf00      	nop
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	20000a20 	.word	0x20000a20
 80024c8:	2000d1d0 	.word	0x2000d1d0

080024cc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return uwTick;  
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <HAL_GetTick+0x14>)
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	2000d1d0 	.word	0x2000d1d0

080024e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b09a      	sub	sp, #104	; 0x68
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e1e3      	b.n	8002908 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b00      	cmp	r3, #0
 8002550:	d176      	bne.n	8002640 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	d152      	bne.n	8002600 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff fc99 	bl	8001eac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d13b      	bne.n	8002600 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f001 fd6b 	bl	8004064 <ADC_Disable>
 800258e:	4603      	mov	r3, r0
 8002590:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	2b00      	cmp	r3, #0
 800259e:	d12f      	bne.n	8002600 <HAL_ADC_Init+0xe0>
 80025a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d12b      	bne.n	8002600 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025b0:	f023 0302 	bic.w	r3, r3, #2
 80025b4:	f043 0202 	orr.w	r2, r3, #2
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025ca:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025da:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025dc:	4b92      	ldr	r3, [pc, #584]	; (8002828 <HAL_ADC_Init+0x308>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a92      	ldr	r2, [pc, #584]	; (800282c <HAL_ADC_Init+0x30c>)
 80025e2:	fba2 2303 	umull	r2, r3, r2, r3
 80025e6:	0c9a      	lsrs	r2, r3, #18
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025f2:	e002      	b.n	80025fa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f9      	bne.n	80025f4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d007      	beq.n	800261e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800261c:	d110      	bne.n	8002640 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f023 0312 	bic.w	r3, r3, #18
 8002626:	f043 0210 	orr.w	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	f043 0201 	orr.w	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	f003 0310 	and.w	r3, r3, #16
 8002648:	2b00      	cmp	r3, #0
 800264a:	f040 8150 	bne.w	80028ee <HAL_ADC_Init+0x3ce>
 800264e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002652:	2b00      	cmp	r3, #0
 8002654:	f040 814b 	bne.w	80028ee <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002662:	2b00      	cmp	r3, #0
 8002664:	f040 8143 	bne.w	80028ee <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002670:	f043 0202 	orr.w	r2, r3, #2
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002680:	d004      	beq.n	800268c <HAL_ADC_Init+0x16c>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a6a      	ldr	r2, [pc, #424]	; (8002830 <HAL_ADC_Init+0x310>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d101      	bne.n	8002690 <HAL_ADC_Init+0x170>
 800268c:	4b69      	ldr	r3, [pc, #420]	; (8002834 <HAL_ADC_Init+0x314>)
 800268e:	e000      	b.n	8002692 <HAL_ADC_Init+0x172>
 8002690:	4b69      	ldr	r3, [pc, #420]	; (8002838 <HAL_ADC_Init+0x318>)
 8002692:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800269c:	d102      	bne.n	80026a4 <HAL_ADC_Init+0x184>
 800269e:	4b64      	ldr	r3, [pc, #400]	; (8002830 <HAL_ADC_Init+0x310>)
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	e01a      	b.n	80026da <HAL_ADC_Init+0x1ba>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a61      	ldr	r2, [pc, #388]	; (8002830 <HAL_ADC_Init+0x310>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d103      	bne.n	80026b6 <HAL_ADC_Init+0x196>
 80026ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	e011      	b.n	80026da <HAL_ADC_Init+0x1ba>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a60      	ldr	r2, [pc, #384]	; (800283c <HAL_ADC_Init+0x31c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d102      	bne.n	80026c6 <HAL_ADC_Init+0x1a6>
 80026c0:	4b5f      	ldr	r3, [pc, #380]	; (8002840 <HAL_ADC_Init+0x320>)
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	e009      	b.n	80026da <HAL_ADC_Init+0x1ba>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a5d      	ldr	r2, [pc, #372]	; (8002840 <HAL_ADC_Init+0x320>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d102      	bne.n	80026d6 <HAL_ADC_Init+0x1b6>
 80026d0:	4b5a      	ldr	r3, [pc, #360]	; (800283c <HAL_ADC_Init+0x31c>)
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	e001      	b.n	80026da <HAL_ADC_Init+0x1ba>
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d108      	bne.n	80026fa <HAL_ADC_Init+0x1da>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_ADC_Init+0x1da>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <HAL_ADC_Init+0x1dc>
 80026fa:	2300      	movs	r3, #0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d11c      	bne.n	800273a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002700:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002702:	2b00      	cmp	r3, #0
 8002704:	d010      	beq.n	8002728 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b01      	cmp	r3, #1
 8002710:	d107      	bne.n	8002722 <HAL_ADC_Init+0x202>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_ADC_Init+0x202>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <HAL_ADC_Init+0x204>
 8002722:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002724:	2b00      	cmp	r3, #0
 8002726:	d108      	bne.n	800273a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	431a      	orrs	r2, r3
 8002736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002738:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	7e5b      	ldrb	r3, [r3, #25]
 800273e:	035b      	lsls	r3, r3, #13
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002744:	2a01      	cmp	r2, #1
 8002746:	d002      	beq.n	800274e <HAL_ADC_Init+0x22e>
 8002748:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800274c:	e000      	b.n	8002750 <HAL_ADC_Init+0x230>
 800274e:	2200      	movs	r2, #0
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	4313      	orrs	r3, r2
 800275e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002760:	4313      	orrs	r3, r2
 8002762:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3020 	ldrb.w	r3, [r3, #32]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d11b      	bne.n	80027a6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	7e5b      	ldrb	r3, [r3, #25]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	3b01      	subs	r3, #1
 800277c:	045a      	lsls	r2, r3, #17
 800277e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002780:	4313      	orrs	r3, r2
 8002782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002786:	663b      	str	r3, [r7, #96]	; 0x60
 8002788:	e00d      	b.n	80027a6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002792:	f043 0220 	orr.w	r2, r3, #32
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	f043 0201 	orr.w	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d054      	beq.n	8002858 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a22      	ldr	r2, [pc, #136]	; (800283c <HAL_ADC_Init+0x31c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d004      	beq.n	80027c2 <HAL_ADC_Init+0x2a2>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a20      	ldr	r2, [pc, #128]	; (8002840 <HAL_ADC_Init+0x320>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d140      	bne.n	8002844 <HAL_ADC_Init+0x324>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80027ca:	d02a      	beq.n	8002822 <HAL_ADC_Init+0x302>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027d4:	d022      	beq.n	800281c <HAL_ADC_Init+0x2fc>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027da:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80027de:	d01a      	beq.n	8002816 <HAL_ADC_Init+0x2f6>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80027e8:	d012      	beq.n	8002810 <HAL_ADC_Init+0x2f0>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80027f2:	d00a      	beq.n	800280a <HAL_ADC_Init+0x2ea>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80027fc:	d002      	beq.n	8002804 <HAL_ADC_Init+0x2e4>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002802:	e023      	b.n	800284c <HAL_ADC_Init+0x32c>
 8002804:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002808:	e020      	b.n	800284c <HAL_ADC_Init+0x32c>
 800280a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800280e:	e01d      	b.n	800284c <HAL_ADC_Init+0x32c>
 8002810:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002814:	e01a      	b.n	800284c <HAL_ADC_Init+0x32c>
 8002816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800281a:	e017      	b.n	800284c <HAL_ADC_Init+0x32c>
 800281c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002820:	e014      	b.n	800284c <HAL_ADC_Init+0x32c>
 8002822:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002826:	e011      	b.n	800284c <HAL_ADC_Init+0x32c>
 8002828:	20000a18 	.word	0x20000a18
 800282c:	431bde83 	.word	0x431bde83
 8002830:	50000100 	.word	0x50000100
 8002834:	50000300 	.word	0x50000300
 8002838:	50000700 	.word	0x50000700
 800283c:	50000400 	.word	0x50000400
 8002840:	50000500 	.word	0x50000500
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002848:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002850:	4313      	orrs	r3, r2
 8002852:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002854:	4313      	orrs	r3, r2
 8002856:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	2b00      	cmp	r3, #0
 8002864:	d114      	bne.n	8002890 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002874:	f023 0302 	bic.w	r3, r3, #2
 8002878:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	7e1b      	ldrb	r3, [r3, #24]
 800287e:	039a      	lsls	r2, r3, #14
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	4313      	orrs	r3, r2
 800288a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800288c:	4313      	orrs	r3, r2
 800288e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	4b1e      	ldr	r3, [pc, #120]	; (8002910 <HAL_ADC_Init+0x3f0>)
 8002898:	4013      	ands	r3, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80028a0:	430b      	orrs	r3, r1
 80028a2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d10c      	bne.n	80028c6 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	f023 010f 	bic.w	r1, r3, #15
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	1e5a      	subs	r2, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
 80028c4:	e007      	b.n	80028d6 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 020f 	bic.w	r2, r2, #15
 80028d4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f023 0303 	bic.w	r3, r3, #3
 80028e4:	f043 0201 	orr.w	r2, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	641a      	str	r2, [r3, #64]	; 0x40
 80028ec:	e00a      	b.n	8002904 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f023 0312 	bic.w	r3, r3, #18
 80028f6:	f043 0210 	orr.w	r2, r3, #16
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80028fe:	2301      	movs	r3, #1
 8002900:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002904:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002908:	4618      	mov	r0, r3
 800290a:	3768      	adds	r7, #104	; 0x68
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	fff0c007 	.word	0xfff0c007

08002914 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	f040 80f9 	bne.w	8002b22 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_ADC_Start+0x2a>
 800293a:	2302      	movs	r3, #2
 800293c:	e0f4      	b.n	8002b28 <HAL_ADC_Start+0x214>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f001 fb2e 	bl	8003fa8 <ADC_Enable>
 800294c:	4603      	mov	r3, r0
 800294e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002950:	7bfb      	ldrb	r3, [r7, #15]
 8002952:	2b00      	cmp	r3, #0
 8002954:	f040 80e0 	bne.w	8002b18 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002960:	f023 0301 	bic.w	r3, r3, #1
 8002964:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002974:	d004      	beq.n	8002980 <HAL_ADC_Start+0x6c>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a6d      	ldr	r2, [pc, #436]	; (8002b30 <HAL_ADC_Start+0x21c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d106      	bne.n	800298e <HAL_ADC_Start+0x7a>
 8002980:	4b6c      	ldr	r3, [pc, #432]	; (8002b34 <HAL_ADC_Start+0x220>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	2b00      	cmp	r3, #0
 800298a:	d010      	beq.n	80029ae <HAL_ADC_Start+0x9a>
 800298c:	e005      	b.n	800299a <HAL_ADC_Start+0x86>
 800298e:	4b6a      	ldr	r3, [pc, #424]	; (8002b38 <HAL_ADC_Start+0x224>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 031f 	and.w	r3, r3, #31
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_ADC_Start+0x9a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029a2:	d004      	beq.n	80029ae <HAL_ADC_Start+0x9a>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a64      	ldr	r2, [pc, #400]	; (8002b3c <HAL_ADC_Start+0x228>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d115      	bne.n	80029da <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d036      	beq.n	8002a36 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80029d8:	e02d      	b.n	8002a36 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029ee:	d004      	beq.n	80029fa <HAL_ADC_Start+0xe6>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a4e      	ldr	r2, [pc, #312]	; (8002b30 <HAL_ADC_Start+0x21c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d10a      	bne.n	8002a10 <HAL_ADC_Start+0xfc>
 80029fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	bf14      	ite	ne
 8002a08:	2301      	movne	r3, #1
 8002a0a:	2300      	moveq	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	e008      	b.n	8002a22 <HAL_ADC_Start+0x10e>
 8002a10:	4b4a      	ldr	r3, [pc, #296]	; (8002b3c <HAL_ADC_Start+0x228>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf14      	ite	ne
 8002a1c:	2301      	movne	r3, #1
 8002a1e:	2300      	moveq	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a42:	d106      	bne.n	8002a52 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a48:	f023 0206 	bic.w	r2, r3, #6
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	645a      	str	r2, [r3, #68]	; 0x44
 8002a50:	e002      	b.n	8002a58 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	221c      	movs	r2, #28
 8002a66:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a70:	d004      	beq.n	8002a7c <HAL_ADC_Start+0x168>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a2e      	ldr	r2, [pc, #184]	; (8002b30 <HAL_ADC_Start+0x21c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d106      	bne.n	8002a8a <HAL_ADC_Start+0x176>
 8002a7c:	4b2d      	ldr	r3, [pc, #180]	; (8002b34 <HAL_ADC_Start+0x220>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d03e      	beq.n	8002b06 <HAL_ADC_Start+0x1f2>
 8002a88:	e005      	b.n	8002a96 <HAL_ADC_Start+0x182>
 8002a8a:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <HAL_ADC_Start+0x224>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 031f 	and.w	r3, r3, #31
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d037      	beq.n	8002b06 <HAL_ADC_Start+0x1f2>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a9e:	d004      	beq.n	8002aaa <HAL_ADC_Start+0x196>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a22      	ldr	r2, [pc, #136]	; (8002b30 <HAL_ADC_Start+0x21c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d106      	bne.n	8002ab8 <HAL_ADC_Start+0x1a4>
 8002aaa:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <HAL_ADC_Start+0x220>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 031f 	and.w	r3, r3, #31
 8002ab2:	2b05      	cmp	r3, #5
 8002ab4:	d027      	beq.n	8002b06 <HAL_ADC_Start+0x1f2>
 8002ab6:	e005      	b.n	8002ac4 <HAL_ADC_Start+0x1b0>
 8002ab8:	4b1f      	ldr	r3, [pc, #124]	; (8002b38 <HAL_ADC_Start+0x224>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	2b05      	cmp	r3, #5
 8002ac2:	d020      	beq.n	8002b06 <HAL_ADC_Start+0x1f2>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002acc:	d004      	beq.n	8002ad8 <HAL_ADC_Start+0x1c4>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a17      	ldr	r2, [pc, #92]	; (8002b30 <HAL_ADC_Start+0x21c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d106      	bne.n	8002ae6 <HAL_ADC_Start+0x1d2>
 8002ad8:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <HAL_ADC_Start+0x220>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	2b09      	cmp	r3, #9
 8002ae2:	d010      	beq.n	8002b06 <HAL_ADC_Start+0x1f2>
 8002ae4:	e005      	b.n	8002af2 <HAL_ADC_Start+0x1de>
 8002ae6:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <HAL_ADC_Start+0x224>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 031f 	and.w	r3, r3, #31
 8002aee:	2b09      	cmp	r3, #9
 8002af0:	d009      	beq.n	8002b06 <HAL_ADC_Start+0x1f2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002afa:	d004      	beq.n	8002b06 <HAL_ADC_Start+0x1f2>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a0e      	ldr	r2, [pc, #56]	; (8002b3c <HAL_ADC_Start+0x228>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d10f      	bne.n	8002b26 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0204 	orr.w	r2, r2, #4
 8002b14:	609a      	str	r2, [r3, #8]
 8002b16:	e006      	b.n	8002b26 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b20:	e001      	b.n	8002b26 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b22:	2302      	movs	r3, #2
 8002b24:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	50000100 	.word	0x50000100
 8002b34:	50000300 	.word	0x50000300
 8002b38:	50000700 	.word	0x50000700
 8002b3c:	50000400 	.word	0x50000400

08002b40 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_ADC_Stop+0x1a>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e023      	b.n	8002ba2 <HAL_ADC_Stop+0x62>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002b62:	216c      	movs	r1, #108	; 0x6c
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f001 fadd 	bl	8004124 <ADC_ConversionStop>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d111      	bne.n	8002b98 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f001 fa75 	bl	8004064 <ADC_Disable>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d109      	bne.n	8002b98 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d102      	bne.n	8002bc8 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002bc2:	2308      	movs	r3, #8
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	e03a      	b.n	8002c3e <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bd0:	d004      	beq.n	8002bdc <HAL_ADC_PollForConversion+0x30>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a6e      	ldr	r2, [pc, #440]	; (8002d90 <HAL_ADC_PollForConversion+0x1e4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d101      	bne.n	8002be0 <HAL_ADC_PollForConversion+0x34>
 8002bdc:	4b6d      	ldr	r3, [pc, #436]	; (8002d94 <HAL_ADC_PollForConversion+0x1e8>)
 8002bde:	e000      	b.n	8002be2 <HAL_ADC_PollForConversion+0x36>
 8002be0:	4b6d      	ldr	r3, [pc, #436]	; (8002d98 <HAL_ADC_PollForConversion+0x1ec>)
 8002be2:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d112      	bne.n	8002c16 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d11d      	bne.n	8002c3a <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f043 0220 	orr.w	r2, r3, #32
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e0b8      	b.n	8002d88 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00b      	beq.n	8002c3a <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f043 0220 	orr.w	r2, r3, #32
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e0a6      	b.n	8002d88 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002c3a:	230c      	movs	r3, #12
 8002c3c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c46:	d004      	beq.n	8002c52 <HAL_ADC_PollForConversion+0xa6>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a50      	ldr	r2, [pc, #320]	; (8002d90 <HAL_ADC_PollForConversion+0x1e4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d106      	bne.n	8002c60 <HAL_ADC_PollForConversion+0xb4>
 8002c52:	4b50      	ldr	r3, [pc, #320]	; (8002d94 <HAL_ADC_PollForConversion+0x1e8>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 031f 	and.w	r3, r3, #31
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d010      	beq.n	8002c80 <HAL_ADC_PollForConversion+0xd4>
 8002c5e:	e005      	b.n	8002c6c <HAL_ADC_PollForConversion+0xc0>
 8002c60:	4b4d      	ldr	r3, [pc, #308]	; (8002d98 <HAL_ADC_PollForConversion+0x1ec>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 031f 	and.w	r3, r3, #31
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d009      	beq.n	8002c80 <HAL_ADC_PollForConversion+0xd4>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c74:	d004      	beq.n	8002c80 <HAL_ADC_PollForConversion+0xd4>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a48      	ldr	r2, [pc, #288]	; (8002d9c <HAL_ADC_PollForConversion+0x1f0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d104      	bne.n	8002c8a <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	e00f      	b.n	8002caa <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c92:	d004      	beq.n	8002c9e <HAL_ADC_PollForConversion+0xf2>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a3d      	ldr	r2, [pc, #244]	; (8002d90 <HAL_ADC_PollForConversion+0x1e4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d102      	bne.n	8002ca4 <HAL_ADC_PollForConversion+0xf8>
 8002c9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ca2:	e000      	b.n	8002ca6 <HAL_ADC_PollForConversion+0xfa>
 8002ca4:	4b3d      	ldr	r3, [pc, #244]	; (8002d9c <HAL_ADC_PollForConversion+0x1f0>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002caa:	f7ff fc0f 	bl	80024cc <HAL_GetTick>
 8002cae:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002cb0:	e01a      	b.n	8002ce8 <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb8:	d016      	beq.n	8002ce8 <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d007      	beq.n	8002cd0 <HAL_ADC_PollForConversion+0x124>
 8002cc0:	f7ff fc04 	bl	80024cc <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d20b      	bcs.n	8002ce8 <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	f043 0204 	orr.w	r2, r3, #4
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e04f      	b.n	8002d88 <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0dd      	beq.n	8002cb2 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d131      	bne.n	8002d74 <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d12c      	bne.n	8002d74 <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d125      	bne.n	8002d74 <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d112      	bne.n	8002d5c <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d112      	bne.n	8002d74 <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f043 0201 	orr.w	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	641a      	str	r2, [r3, #64]	; 0x40
 8002d5a:	e00b      	b.n	8002d74 <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	f043 0220 	orr.w	r2, r3, #32
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6c:	f043 0201 	orr.w	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d103      	bne.n	8002d86 <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	50000100 	.word	0x50000100
 8002d94:	50000300 	.word	0x50000300
 8002d98:	50000700 	.word	0x50000700
 8002d9c:	50000400 	.word	0x50000400

08002da0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f040 80f7 	bne.w	8002fae <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_ADC_Start_DMA+0x2e>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e0f2      	b.n	8002fb4 <HAL_ADC_Start_DMA+0x214>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dde:	d004      	beq.n	8002dea <HAL_ADC_Start_DMA+0x4a>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a75      	ldr	r2, [pc, #468]	; (8002fbc <HAL_ADC_Start_DMA+0x21c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d109      	bne.n	8002dfe <HAL_ADC_Start_DMA+0x5e>
 8002dea:	4b75      	ldr	r3, [pc, #468]	; (8002fc0 <HAL_ADC_Start_DMA+0x220>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 031f 	and.w	r3, r3, #31
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	bf0c      	ite	eq
 8002df6:	2301      	moveq	r3, #1
 8002df8:	2300      	movne	r3, #0
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	e008      	b.n	8002e10 <HAL_ADC_Start_DMA+0x70>
 8002dfe:	4b71      	ldr	r3, [pc, #452]	; (8002fc4 <HAL_ADC_Start_DMA+0x224>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 031f 	and.w	r3, r3, #31
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	bf0c      	ite	eq
 8002e0a:	2301      	moveq	r3, #1
 8002e0c:	2300      	movne	r3, #0
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80c5 	beq.w	8002fa0 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f001 f8c6 	bl	8003fa8 <ADC_Enable>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002e20:	7dfb      	ldrb	r3, [r7, #23]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f040 80b7 	bne.w	8002f96 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e30:	f023 0301 	bic.w	r3, r3, #1
 8002e34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e44:	d004      	beq.n	8002e50 <HAL_ADC_Start_DMA+0xb0>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a5c      	ldr	r2, [pc, #368]	; (8002fbc <HAL_ADC_Start_DMA+0x21c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d106      	bne.n	8002e5e <HAL_ADC_Start_DMA+0xbe>
 8002e50:	4b5b      	ldr	r3, [pc, #364]	; (8002fc0 <HAL_ADC_Start_DMA+0x220>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d010      	beq.n	8002e7e <HAL_ADC_Start_DMA+0xde>
 8002e5c:	e005      	b.n	8002e6a <HAL_ADC_Start_DMA+0xca>
 8002e5e:	4b59      	ldr	r3, [pc, #356]	; (8002fc4 <HAL_ADC_Start_DMA+0x224>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 031f 	and.w	r3, r3, #31
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d009      	beq.n	8002e7e <HAL_ADC_Start_DMA+0xde>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e72:	d004      	beq.n	8002e7e <HAL_ADC_Start_DMA+0xde>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a53      	ldr	r2, [pc, #332]	; (8002fc8 <HAL_ADC_Start_DMA+0x228>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d115      	bne.n	8002eaa <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d036      	beq.n	8002f06 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ea0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002ea8:	e02d      	b.n	8002f06 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ebe:	d004      	beq.n	8002eca <HAL_ADC_Start_DMA+0x12a>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a3d      	ldr	r2, [pc, #244]	; (8002fbc <HAL_ADC_Start_DMA+0x21c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d10a      	bne.n	8002ee0 <HAL_ADC_Start_DMA+0x140>
 8002eca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf14      	ite	ne
 8002ed8:	2301      	movne	r3, #1
 8002eda:	2300      	moveq	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	e008      	b.n	8002ef2 <HAL_ADC_Start_DMA+0x152>
 8002ee0:	4b39      	ldr	r3, [pc, #228]	; (8002fc8 <HAL_ADC_Start_DMA+0x228>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	bf14      	ite	ne
 8002eec:	2301      	movne	r3, #1
 8002eee:	2300      	moveq	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d007      	beq.n	8002f06 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002efe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f12:	d106      	bne.n	8002f22 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f18:	f023 0206 	bic.w	r2, r3, #6
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	645a      	str	r2, [r3, #68]	; 0x44
 8002f20:	e002      	b.n	8002f28 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f34:	4a25      	ldr	r2, [pc, #148]	; (8002fcc <HAL_ADC_Start_DMA+0x22c>)
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	4a24      	ldr	r2, [pc, #144]	; (8002fd0 <HAL_ADC_Start_DMA+0x230>)
 8002f3e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f44:	4a23      	ldr	r2, [pc, #140]	; (8002fd4 <HAL_ADC_Start_DMA+0x234>)
 8002f46:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	221c      	movs	r2, #28
 8002f4e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0210 	orr.w	r2, r2, #16
 8002f5e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	3340      	adds	r3, #64	; 0x40
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f001 fd5a 	bl	8004a38 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0204 	orr.w	r2, r2, #4
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	e00d      	b.n	8002fb2 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f9e:	e008      	b.n	8002fb2 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002fac:	e001      	b.n	8002fb2 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	50000100 	.word	0x50000100
 8002fc0:	50000300 	.word	0x50000300
 8002fc4:	50000700 	.word	0x50000700
 8002fc8:	50000400 	.word	0x50000400
 8002fcc:	08003edd 	.word	0x08003edd
 8002fd0:	08003f57 	.word	0x08003f57
 8002fd4:	08003f73 	.word	0x08003f73

08002fd8 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_ADC_Stop_DMA+0x1a>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e050      	b.n	8003094 <HAL_ADC_Stop_DMA+0xbc>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002ffa:	216c      	movs	r1, #108	; 0x6c
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f001 f891 	bl	8004124 <ADC_ConversionStop>
 8003002:	4603      	mov	r3, r0
 8003004:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003006:	7bfb      	ldrb	r3, [r7, #15]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d13e      	bne.n	800308a <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0201 	bic.w	r2, r2, #1
 800301a:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003020:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003024:	2b02      	cmp	r3, #2
 8003026:	d10f      	bne.n	8003048 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302c:	4618      	mov	r0, r3
 800302e:	f001 fd62 	bl	8004af6 <HAL_DMA_Abort>
 8003032:	4603      	mov	r3, r0
 8003034:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003036:	7bfb      	ldrb	r3, [r7, #15]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0210 	bic.w	r2, r2, #16
 8003056:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8003058:	7bfb      	ldrb	r3, [r7, #15]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d105      	bne.n	800306a <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f001 f800 	bl	8004064 <ADC_Disable>
 8003064:	4603      	mov	r3, r0
 8003066:	73fb      	strb	r3, [r7, #15]
 8003068:	e002      	b.n	8003070 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fffa 	bl	8004064 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800307e:	f023 0301 	bic.w	r3, r3, #1
 8003082:	f043 0201 	orr.w	r2, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003092:	7bfb      	ldrb	r3, [r7, #15]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d106      	bne.n	80030e8 <HAL_ADC_IRQHandler+0x30>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d00f      	beq.n	8003108 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	f040 80c0 	bne.w	8003278 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b08      	cmp	r3, #8
 8003104:	f040 80b8 	bne.w	8003278 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	f003 0310 	and.w	r3, r3, #16
 8003110:	2b00      	cmp	r3, #0
 8003112:	d105      	bne.n	8003120 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003128:	d004      	beq.n	8003134 <HAL_ADC_IRQHandler+0x7c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a95      	ldr	r2, [pc, #596]	; (8003384 <HAL_ADC_IRQHandler+0x2cc>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d106      	bne.n	8003142 <HAL_ADC_IRQHandler+0x8a>
 8003134:	4b94      	ldr	r3, [pc, #592]	; (8003388 <HAL_ADC_IRQHandler+0x2d0>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	2b00      	cmp	r3, #0
 800313e:	d03e      	beq.n	80031be <HAL_ADC_IRQHandler+0x106>
 8003140:	e005      	b.n	800314e <HAL_ADC_IRQHandler+0x96>
 8003142:	4b92      	ldr	r3, [pc, #584]	; (800338c <HAL_ADC_IRQHandler+0x2d4>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 031f 	and.w	r3, r3, #31
 800314a:	2b00      	cmp	r3, #0
 800314c:	d037      	beq.n	80031be <HAL_ADC_IRQHandler+0x106>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003156:	d004      	beq.n	8003162 <HAL_ADC_IRQHandler+0xaa>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a89      	ldr	r2, [pc, #548]	; (8003384 <HAL_ADC_IRQHandler+0x2cc>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d106      	bne.n	8003170 <HAL_ADC_IRQHandler+0xb8>
 8003162:	4b89      	ldr	r3, [pc, #548]	; (8003388 <HAL_ADC_IRQHandler+0x2d0>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 031f 	and.w	r3, r3, #31
 800316a:	2b05      	cmp	r3, #5
 800316c:	d027      	beq.n	80031be <HAL_ADC_IRQHandler+0x106>
 800316e:	e005      	b.n	800317c <HAL_ADC_IRQHandler+0xc4>
 8003170:	4b86      	ldr	r3, [pc, #536]	; (800338c <HAL_ADC_IRQHandler+0x2d4>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	2b05      	cmp	r3, #5
 800317a:	d020      	beq.n	80031be <HAL_ADC_IRQHandler+0x106>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003184:	d004      	beq.n	8003190 <HAL_ADC_IRQHandler+0xd8>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a7e      	ldr	r2, [pc, #504]	; (8003384 <HAL_ADC_IRQHandler+0x2cc>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d106      	bne.n	800319e <HAL_ADC_IRQHandler+0xe6>
 8003190:	4b7d      	ldr	r3, [pc, #500]	; (8003388 <HAL_ADC_IRQHandler+0x2d0>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	2b09      	cmp	r3, #9
 800319a:	d010      	beq.n	80031be <HAL_ADC_IRQHandler+0x106>
 800319c:	e005      	b.n	80031aa <HAL_ADC_IRQHandler+0xf2>
 800319e:	4b7b      	ldr	r3, [pc, #492]	; (800338c <HAL_ADC_IRQHandler+0x2d4>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 031f 	and.w	r3, r3, #31
 80031a6:	2b09      	cmp	r3, #9
 80031a8:	d009      	beq.n	80031be <HAL_ADC_IRQHandler+0x106>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031b2:	d004      	beq.n	80031be <HAL_ADC_IRQHandler+0x106>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a75      	ldr	r2, [pc, #468]	; (8003390 <HAL_ADC_IRQHandler+0x2d8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d104      	bne.n	80031c8 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	e00f      	b.n	80031e8 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031d0:	d004      	beq.n	80031dc <HAL_ADC_IRQHandler+0x124>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a6b      	ldr	r2, [pc, #428]	; (8003384 <HAL_ADC_IRQHandler+0x2cc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d102      	bne.n	80031e2 <HAL_ADC_IRQHandler+0x12a>
 80031dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031e0:	e000      	b.n	80031e4 <HAL_ADC_IRQHandler+0x12c>
 80031e2:	4b6b      	ldr	r3, [pc, #428]	; (8003390 <HAL_ADC_IRQHandler+0x2d8>)
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d139      	bne.n	800326a <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d134      	bne.n	800326a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b08      	cmp	r3, #8
 800320c:	d12d      	bne.n	800326a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d11a      	bne.n	8003252 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 020c 	bic.w	r2, r2, #12
 800322a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d112      	bne.n	800326a <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	f043 0201 	orr.w	r2, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	641a      	str	r2, [r3, #64]	; 0x40
 8003250:	e00b      	b.n	800326a <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f043 0210 	orr.w	r2, r3, #16
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	f043 0201 	orr.w	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fd ffd4 	bl	8001218 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	220c      	movs	r2, #12
 8003276:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b20      	cmp	r3, #32
 8003284:	d106      	bne.n	8003294 <HAL_ADC_IRQHandler+0x1dc>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 0320 	and.w	r3, r3, #32
 8003290:	2b20      	cmp	r3, #32
 8003292:	d00f      	beq.n	80032b4 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800329e:	2b40      	cmp	r3, #64	; 0x40
 80032a0:	f040 813c 	bne.w	800351c <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ae:	2b40      	cmp	r3, #64	; 0x40
 80032b0:	f040 8134 	bne.w	800351c <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032c8:	d004      	beq.n	80032d4 <HAL_ADC_IRQHandler+0x21c>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a2d      	ldr	r2, [pc, #180]	; (8003384 <HAL_ADC_IRQHandler+0x2cc>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d106      	bne.n	80032e2 <HAL_ADC_IRQHandler+0x22a>
 80032d4:	4b2c      	ldr	r3, [pc, #176]	; (8003388 <HAL_ADC_IRQHandler+0x2d0>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d03e      	beq.n	800335e <HAL_ADC_IRQHandler+0x2a6>
 80032e0:	e005      	b.n	80032ee <HAL_ADC_IRQHandler+0x236>
 80032e2:	4b2a      	ldr	r3, [pc, #168]	; (800338c <HAL_ADC_IRQHandler+0x2d4>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 031f 	and.w	r3, r3, #31
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d037      	beq.n	800335e <HAL_ADC_IRQHandler+0x2a6>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032f6:	d004      	beq.n	8003302 <HAL_ADC_IRQHandler+0x24a>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a21      	ldr	r2, [pc, #132]	; (8003384 <HAL_ADC_IRQHandler+0x2cc>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d106      	bne.n	8003310 <HAL_ADC_IRQHandler+0x258>
 8003302:	4b21      	ldr	r3, [pc, #132]	; (8003388 <HAL_ADC_IRQHandler+0x2d0>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	2b05      	cmp	r3, #5
 800330c:	d027      	beq.n	800335e <HAL_ADC_IRQHandler+0x2a6>
 800330e:	e005      	b.n	800331c <HAL_ADC_IRQHandler+0x264>
 8003310:	4b1e      	ldr	r3, [pc, #120]	; (800338c <HAL_ADC_IRQHandler+0x2d4>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	2b05      	cmp	r3, #5
 800331a:	d020      	beq.n	800335e <HAL_ADC_IRQHandler+0x2a6>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003324:	d004      	beq.n	8003330 <HAL_ADC_IRQHandler+0x278>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a16      	ldr	r2, [pc, #88]	; (8003384 <HAL_ADC_IRQHandler+0x2cc>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d106      	bne.n	800333e <HAL_ADC_IRQHandler+0x286>
 8003330:	4b15      	ldr	r3, [pc, #84]	; (8003388 <HAL_ADC_IRQHandler+0x2d0>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	2b09      	cmp	r3, #9
 800333a:	d010      	beq.n	800335e <HAL_ADC_IRQHandler+0x2a6>
 800333c:	e005      	b.n	800334a <HAL_ADC_IRQHandler+0x292>
 800333e:	4b13      	ldr	r3, [pc, #76]	; (800338c <HAL_ADC_IRQHandler+0x2d4>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 031f 	and.w	r3, r3, #31
 8003346:	2b09      	cmp	r3, #9
 8003348:	d009      	beq.n	800335e <HAL_ADC_IRQHandler+0x2a6>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003352:	d004      	beq.n	800335e <HAL_ADC_IRQHandler+0x2a6>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a0d      	ldr	r2, [pc, #52]	; (8003390 <HAL_ADC_IRQHandler+0x2d8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d104      	bne.n	8003368 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	e018      	b.n	800339a <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003370:	d004      	beq.n	800337c <HAL_ADC_IRQHandler+0x2c4>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a03      	ldr	r2, [pc, #12]	; (8003384 <HAL_ADC_IRQHandler+0x2cc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d10b      	bne.n	8003394 <HAL_ADC_IRQHandler+0x2dc>
 800337c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003380:	e009      	b.n	8003396 <HAL_ADC_IRQHandler+0x2de>
 8003382:	bf00      	nop
 8003384:	50000100 	.word	0x50000100
 8003388:	50000300 	.word	0x50000300
 800338c:	50000700 	.word	0x50000700
 8003390:	50000400 	.word	0x50000400
 8003394:	4b9d      	ldr	r3, [pc, #628]	; (800360c <HAL_ADC_IRQHandler+0x554>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f040 80b2 	bne.w	800350e <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00d      	beq.n	80033d0 <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f040 80a5 	bne.w	800350e <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f040 809f 	bne.w	800350e <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033da:	2b40      	cmp	r3, #64	; 0x40
 80033dc:	f040 8097 	bne.w	800350e <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033e8:	d004      	beq.n	80033f4 <HAL_ADC_IRQHandler+0x33c>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a88      	ldr	r2, [pc, #544]	; (8003610 <HAL_ADC_IRQHandler+0x558>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d106      	bne.n	8003402 <HAL_ADC_IRQHandler+0x34a>
 80033f4:	4b87      	ldr	r3, [pc, #540]	; (8003614 <HAL_ADC_IRQHandler+0x55c>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d03e      	beq.n	800347e <HAL_ADC_IRQHandler+0x3c6>
 8003400:	e005      	b.n	800340e <HAL_ADC_IRQHandler+0x356>
 8003402:	4b85      	ldr	r3, [pc, #532]	; (8003618 <HAL_ADC_IRQHandler+0x560>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 031f 	and.w	r3, r3, #31
 800340a:	2b00      	cmp	r3, #0
 800340c:	d037      	beq.n	800347e <HAL_ADC_IRQHandler+0x3c6>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003416:	d004      	beq.n	8003422 <HAL_ADC_IRQHandler+0x36a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a7c      	ldr	r2, [pc, #496]	; (8003610 <HAL_ADC_IRQHandler+0x558>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d106      	bne.n	8003430 <HAL_ADC_IRQHandler+0x378>
 8003422:	4b7c      	ldr	r3, [pc, #496]	; (8003614 <HAL_ADC_IRQHandler+0x55c>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	2b06      	cmp	r3, #6
 800342c:	d027      	beq.n	800347e <HAL_ADC_IRQHandler+0x3c6>
 800342e:	e005      	b.n	800343c <HAL_ADC_IRQHandler+0x384>
 8003430:	4b79      	ldr	r3, [pc, #484]	; (8003618 <HAL_ADC_IRQHandler+0x560>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 031f 	and.w	r3, r3, #31
 8003438:	2b06      	cmp	r3, #6
 800343a:	d020      	beq.n	800347e <HAL_ADC_IRQHandler+0x3c6>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003444:	d004      	beq.n	8003450 <HAL_ADC_IRQHandler+0x398>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a71      	ldr	r2, [pc, #452]	; (8003610 <HAL_ADC_IRQHandler+0x558>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d106      	bne.n	800345e <HAL_ADC_IRQHandler+0x3a6>
 8003450:	4b70      	ldr	r3, [pc, #448]	; (8003614 <HAL_ADC_IRQHandler+0x55c>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	2b07      	cmp	r3, #7
 800345a:	d010      	beq.n	800347e <HAL_ADC_IRQHandler+0x3c6>
 800345c:	e005      	b.n	800346a <HAL_ADC_IRQHandler+0x3b2>
 800345e:	4b6e      	ldr	r3, [pc, #440]	; (8003618 <HAL_ADC_IRQHandler+0x560>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	2b07      	cmp	r3, #7
 8003468:	d009      	beq.n	800347e <HAL_ADC_IRQHandler+0x3c6>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003472:	d004      	beq.n	800347e <HAL_ADC_IRQHandler+0x3c6>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a64      	ldr	r2, [pc, #400]	; (800360c <HAL_ADC_IRQHandler+0x554>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d104      	bne.n	8003488 <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	e00f      	b.n	80034a8 <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003490:	d004      	beq.n	800349c <HAL_ADC_IRQHandler+0x3e4>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a5e      	ldr	r2, [pc, #376]	; (8003610 <HAL_ADC_IRQHandler+0x558>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d102      	bne.n	80034a2 <HAL_ADC_IRQHandler+0x3ea>
 800349c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034a0:	e000      	b.n	80034a4 <HAL_ADC_IRQHandler+0x3ec>
 80034a2:	4b5a      	ldr	r3, [pc, #360]	; (800360c <HAL_ADC_IRQHandler+0x554>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d12d      	bne.n	800350e <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d11a      	bne.n	80034f6 <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034ce:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d112      	bne.n	800350e <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	f043 0201 	orr.w	r2, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40
 80034f4:	e00b      	b.n	800350e <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f043 0210 	orr.w	r2, r3, #16
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	f043 0201 	orr.w	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f8de 	bl	80036d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2260      	movs	r2, #96	; 0x60
 800351a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003526:	2b80      	cmp	r3, #128	; 0x80
 8003528:	d113      	bne.n	8003552 <HAL_ADC_IRQHandler+0x49a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003534:	2b80      	cmp	r3, #128	; 0x80
 8003536:	d10c      	bne.n	8003552 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7fe ffd7 	bl	80024f8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2280      	movs	r2, #128	; 0x80
 8003550:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003560:	d115      	bne.n	800358e <HAL_ADC_IRQHandler+0x4d6>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003570:	d10d      	bne.n	800358e <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f8ba 	bl	80036f8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f44f 7280 	mov.w	r2, #256	; 0x100
 800358c:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800359c:	d115      	bne.n	80035ca <HAL_ADC_IRQHandler+0x512>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ac:	d10d      	bne.n	80035ca <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f8a6 	bl	800370c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035c8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	2b10      	cmp	r3, #16
 80035d6:	d151      	bne.n	800367c <HAL_ADC_IRQHandler+0x5c4>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	2b10      	cmp	r3, #16
 80035e4:	d14a      	bne.n	800367c <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d102      	bne.n	80035f4 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 80035ee:	2301      	movs	r3, #1
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	e02d      	b.n	8003650 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035fc:	d004      	beq.n	8003608 <HAL_ADC_IRQHandler+0x550>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a03      	ldr	r2, [pc, #12]	; (8003610 <HAL_ADC_IRQHandler+0x558>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d109      	bne.n	800361c <HAL_ADC_IRQHandler+0x564>
 8003608:	4b02      	ldr	r3, [pc, #8]	; (8003614 <HAL_ADC_IRQHandler+0x55c>)
 800360a:	e008      	b.n	800361e <HAL_ADC_IRQHandler+0x566>
 800360c:	50000400 	.word	0x50000400
 8003610:	50000100 	.word	0x50000100
 8003614:	50000300 	.word	0x50000300
 8003618:	50000700 	.word	0x50000700
 800361c:	4b2b      	ldr	r3, [pc, #172]	; (80036cc <HAL_ADC_IRQHandler+0x614>)
 800361e:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 031f 	and.w	r3, r3, #31
 8003628:	2b00      	cmp	r3, #0
 800362a:	d109      	bne.n	8003640 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b01      	cmp	r3, #1
 8003638:	d10a      	bne.n	8003650 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 800363a:	2301      	movs	r3, #1
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	e007      	b.n	8003650 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 800364c:	2301      	movs	r3, #1
 800364e:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d10e      	bne.n	8003674 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003666:	f043 0202 	orr.w	r2, r3, #2
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fe ff4c 	bl	800250c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2210      	movs	r2, #16
 800367a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368a:	d11b      	bne.n	80036c4 <HAL_ADC_IRQHandler+0x60c>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369a:	d113      	bne.n	80036c4 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ac:	f043 0208 	orr.w	r2, r3, #8
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036bc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f810 	bl	80036e4 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80036c4:	bf00      	nop
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	50000700 	.word	0x50000700

080036d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003720:	b480      	push	{r7}
 8003722:	b09b      	sub	sp, #108	; 0x6c
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x22>
 800373e:	2302      	movs	r3, #2
 8003740:	e2cb      	b.n	8003cda <HAL_ADC_ConfigChannel+0x5ba>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	f040 82af 	bne.w	8003cb8 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b04      	cmp	r3, #4
 8003760:	d81c      	bhi.n	800379c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	4413      	add	r3, r2
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	461a      	mov	r2, r3
 8003776:	231f      	movs	r3, #31
 8003778:	4093      	lsls	r3, r2
 800377a:	43db      	mvns	r3, r3
 800377c:	4019      	ands	r1, r3
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	4413      	add	r3, r2
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	fa00 f203 	lsl.w	r2, r0, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	631a      	str	r2, [r3, #48]	; 0x30
 800379a:	e063      	b.n	8003864 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b09      	cmp	r3, #9
 80037a2:	d81e      	bhi.n	80037e2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	4613      	mov	r3, r2
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	4413      	add	r3, r2
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	3b1e      	subs	r3, #30
 80037b8:	221f      	movs	r2, #31
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43db      	mvns	r3, r3
 80037c0:	4019      	ands	r1, r3
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	4413      	add	r3, r2
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	3b1e      	subs	r3, #30
 80037d4:	fa00 f203 	lsl.w	r2, r0, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	635a      	str	r2, [r3, #52]	; 0x34
 80037e0:	e040      	b.n	8003864 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b0e      	cmp	r3, #14
 80037e8:	d81e      	bhi.n	8003828 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	4413      	add	r3, r2
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	3b3c      	subs	r3, #60	; 0x3c
 80037fe:	221f      	movs	r2, #31
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	4019      	ands	r1, r3
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	4413      	add	r3, r2
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	3b3c      	subs	r3, #60	; 0x3c
 800381a:	fa00 f203 	lsl.w	r2, r0, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	639a      	str	r2, [r3, #56]	; 0x38
 8003826:	e01d      	b.n	8003864 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	4413      	add	r3, r2
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	3b5a      	subs	r3, #90	; 0x5a
 800383c:	221f      	movs	r2, #31
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43db      	mvns	r3, r3
 8003844:	4019      	ands	r1, r3
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	6818      	ldr	r0, [r3, #0]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	4413      	add	r3, r2
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	3b5a      	subs	r3, #90	; 0x5a
 8003858:	fa00 f203 	lsl.w	r2, r0, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 030c 	and.w	r3, r3, #12
 800386e:	2b00      	cmp	r3, #0
 8003870:	f040 80e5 	bne.w	8003a3e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b09      	cmp	r3, #9
 800387a:	d91c      	bls.n	80038b6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6999      	ldr	r1, [r3, #24]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	4613      	mov	r3, r2
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	4413      	add	r3, r2
 800388c:	3b1e      	subs	r3, #30
 800388e:	2207      	movs	r2, #7
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	4019      	ands	r1, r3
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	6898      	ldr	r0, [r3, #8]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	4613      	mov	r3, r2
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	4413      	add	r3, r2
 80038a6:	3b1e      	subs	r3, #30
 80038a8:	fa00 f203 	lsl.w	r2, r0, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	619a      	str	r2, [r3, #24]
 80038b4:	e019      	b.n	80038ea <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6959      	ldr	r1, [r3, #20]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	4613      	mov	r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4413      	add	r3, r2
 80038c6:	2207      	movs	r2, #7
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	4019      	ands	r1, r3
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	6898      	ldr	r0, [r3, #8]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	4613      	mov	r3, r2
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	4413      	add	r3, r2
 80038de:	fa00 f203 	lsl.w	r2, r0, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	08db      	lsrs	r3, r3, #3
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	3b01      	subs	r3, #1
 8003908:	2b03      	cmp	r3, #3
 800390a:	d84f      	bhi.n	80039ac <HAL_ADC_ConfigChannel+0x28c>
 800390c:	a201      	add	r2, pc, #4	; (adr r2, 8003914 <HAL_ADC_ConfigChannel+0x1f4>)
 800390e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003912:	bf00      	nop
 8003914:	08003925 	.word	0x08003925
 8003918:	08003947 	.word	0x08003947
 800391c:	08003969 	.word	0x08003969
 8003920:	0800398b 	.word	0x0800398b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800392a:	4b9f      	ldr	r3, [pc, #636]	; (8003ba8 <HAL_ADC_ConfigChannel+0x488>)
 800392c:	4013      	ands	r3, r2
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	6812      	ldr	r2, [r2, #0]
 8003932:	0691      	lsls	r1, r2, #26
 8003934:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003936:	430a      	orrs	r2, r1
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003942:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003944:	e07e      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800394c:	4b96      	ldr	r3, [pc, #600]	; (8003ba8 <HAL_ADC_ConfigChannel+0x488>)
 800394e:	4013      	ands	r3, r2
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	0691      	lsls	r1, r2, #26
 8003956:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003958:	430a      	orrs	r2, r1
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003964:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003966:	e06d      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800396e:	4b8e      	ldr	r3, [pc, #568]	; (8003ba8 <HAL_ADC_ConfigChannel+0x488>)
 8003970:	4013      	ands	r3, r2
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	0691      	lsls	r1, r2, #26
 8003978:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800397a:	430a      	orrs	r2, r1
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003986:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003988:	e05c      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003990:	4b85      	ldr	r3, [pc, #532]	; (8003ba8 <HAL_ADC_ConfigChannel+0x488>)
 8003992:	4013      	ands	r3, r2
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	6812      	ldr	r2, [r2, #0]
 8003998:	0691      	lsls	r1, r2, #26
 800399a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800399c:	430a      	orrs	r2, r1
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80039a8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80039aa:	e04b      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	069b      	lsls	r3, r3, #26
 80039bc:	429a      	cmp	r2, r3
 80039be:	d107      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80039ce:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	069b      	lsls	r3, r3, #26
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d107      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80039f2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	069b      	lsls	r3, r3, #26
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d107      	bne.n	8003a18 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a16:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	069b      	lsls	r3, r3, #26
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d10a      	bne.n	8003a42 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a3a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003a3c:	e001      	b.n	8003a42 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003a3e:	bf00      	nop
 8003a40:	e000      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003a42:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d108      	bne.n	8003a64 <HAL_ADC_ConfigChannel+0x344>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <HAL_ADC_ConfigChannel+0x344>
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <HAL_ADC_ConfigChannel+0x346>
 8003a64:	2300      	movs	r3, #0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f040 8131 	bne.w	8003cce <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d00f      	beq.n	8003a94 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2201      	movs	r2, #1
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43da      	mvns	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	400a      	ands	r2, r1
 8003a8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003a92:	e049      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	409a      	lsls	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b09      	cmp	r3, #9
 8003ab4:	d91c      	bls.n	8003af0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6999      	ldr	r1, [r3, #24]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	4413      	add	r3, r2
 8003ac6:	3b1b      	subs	r3, #27
 8003ac8:	2207      	movs	r2, #7
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	4019      	ands	r1, r3
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6898      	ldr	r0, [r3, #8]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	4613      	mov	r3, r2
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	4413      	add	r3, r2
 8003ae0:	3b1b      	subs	r3, #27
 8003ae2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	619a      	str	r2, [r3, #24]
 8003aee:	e01b      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6959      	ldr	r1, [r3, #20]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	4613      	mov	r3, r2
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	4413      	add	r3, r2
 8003b02:	2207      	movs	r2, #7
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	4019      	ands	r1, r3
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	6898      	ldr	r0, [r3, #8]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	4613      	mov	r3, r2
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	4413      	add	r3, r2
 8003b1c:	fa00 f203 	lsl.w	r2, r0, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b30:	d004      	beq.n	8003b3c <HAL_ADC_ConfigChannel+0x41c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1d      	ldr	r2, [pc, #116]	; (8003bac <HAL_ADC_ConfigChannel+0x48c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d101      	bne.n	8003b40 <HAL_ADC_ConfigChannel+0x420>
 8003b3c:	4b1c      	ldr	r3, [pc, #112]	; (8003bb0 <HAL_ADC_ConfigChannel+0x490>)
 8003b3e:	e000      	b.n	8003b42 <HAL_ADC_ConfigChannel+0x422>
 8003b40:	4b1c      	ldr	r3, [pc, #112]	; (8003bb4 <HAL_ADC_ConfigChannel+0x494>)
 8003b42:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b10      	cmp	r3, #16
 8003b4a:	d105      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d015      	beq.n	8003b84 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003b5c:	2b11      	cmp	r3, #17
 8003b5e:	d105      	bne.n	8003b6c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00b      	beq.n	8003b84 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003b70:	2b12      	cmp	r3, #18
 8003b72:	f040 80ac 	bne.w	8003cce <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f040 80a5 	bne.w	8003cce <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b8c:	d102      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x474>
 8003b8e:	4b07      	ldr	r3, [pc, #28]	; (8003bac <HAL_ADC_ConfigChannel+0x48c>)
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	e023      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x4bc>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a04      	ldr	r2, [pc, #16]	; (8003bac <HAL_ADC_ConfigChannel+0x48c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x498>
 8003b9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	e01a      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x4bc>
 8003ba6:	bf00      	nop
 8003ba8:	83fff000 	.word	0x83fff000
 8003bac:	50000100 	.word	0x50000100
 8003bb0:	50000300 	.word	0x50000300
 8003bb4:	50000700 	.word	0x50000700
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a4a      	ldr	r2, [pc, #296]	; (8003ce8 <HAL_ADC_ConfigChannel+0x5c8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d102      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x4a8>
 8003bc2:	4b4a      	ldr	r3, [pc, #296]	; (8003cec <HAL_ADC_ConfigChannel+0x5cc>)
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	e009      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x4bc>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a47      	ldr	r2, [pc, #284]	; (8003cec <HAL_ADC_ConfigChannel+0x5cc>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d102      	bne.n	8003bd8 <HAL_ADC_ConfigChannel+0x4b8>
 8003bd2:	4b45      	ldr	r3, [pc, #276]	; (8003ce8 <HAL_ADC_ConfigChannel+0x5c8>)
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	e001      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x4bc>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d108      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x4dc>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x4dc>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e000      	b.n	8003bfe <HAL_ADC_ConfigChannel+0x4de>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d150      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003c02:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d010      	beq.n	8003c2a <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 0303 	and.w	r3, r3, #3
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d107      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x504>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x504>
 8003c20:	2301      	movs	r3, #1
 8003c22:	e000      	b.n	8003c26 <HAL_ADC_ConfigChannel+0x506>
 8003c24:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d13c      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b10      	cmp	r3, #16
 8003c30:	d11d      	bne.n	8003c6e <HAL_ADC_ConfigChannel+0x54e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c3a:	d118      	bne.n	8003c6e <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003c3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c46:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c48:	4b29      	ldr	r3, [pc, #164]	; (8003cf0 <HAL_ADC_ConfigChannel+0x5d0>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a29      	ldr	r2, [pc, #164]	; (8003cf4 <HAL_ADC_ConfigChannel+0x5d4>)
 8003c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c52:	0c9a      	lsrs	r2, r3, #18
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c5e:	e002      	b.n	8003c66 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1f9      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003c6c:	e02e      	b.n	8003ccc <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b11      	cmp	r3, #17
 8003c74:	d10b      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0x56e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c7e:	d106      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c8a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003c8c:	e01e      	b.n	8003ccc <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b12      	cmp	r3, #18
 8003c94:	d11a      	bne.n	8003ccc <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ca0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003ca2:	e013      	b.n	8003ccc <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	f043 0220 	orr.w	r2, r3, #32
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003cb6:	e00a      	b.n	8003cce <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	f043 0220 	orr.w	r2, r3, #32
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003cca:	e000      	b.n	8003cce <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003ccc:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003cd6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	376c      	adds	r7, #108	; 0x6c
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	50000400 	.word	0x50000400
 8003cec:	50000500 	.word	0x50000500
 8003cf0:	20000a18 	.word	0x20000a18
 8003cf4:	431bde83 	.word	0x431bde83

08003cf8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b099      	sub	sp, #100	; 0x64
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d10:	d102      	bne.n	8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003d12:	4b6d      	ldr	r3, [pc, #436]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003d14:	60bb      	str	r3, [r7, #8]
 8003d16:	e01a      	b.n	8003d4e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a6a      	ldr	r2, [pc, #424]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d103      	bne.n	8003d2a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003d22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d26:	60bb      	str	r3, [r7, #8]
 8003d28:	e011      	b.n	8003d4e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a67      	ldr	r2, [pc, #412]	; (8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d102      	bne.n	8003d3a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d34:	4b66      	ldr	r3, [pc, #408]	; (8003ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003d36:	60bb      	str	r3, [r7, #8]
 8003d38:	e009      	b.n	8003d4e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a64      	ldr	r2, [pc, #400]	; (8003ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d102      	bne.n	8003d4a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003d44:	4b61      	ldr	r3, [pc, #388]	; (8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003d46:	60bb      	str	r3, [r7, #8]
 8003d48:	e001      	b.n	8003d4e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0b0      	b.n	8003eba <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e0a9      	b.n	8003eba <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f040 808d 	bne.w	8003e98 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f040 8086 	bne.w	8003e98 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d94:	d004      	beq.n	8003da0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a4b      	ldr	r2, [pc, #300]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d101      	bne.n	8003da4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003da0:	4b4c      	ldr	r3, [pc, #304]	; (8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003da2:	e000      	b.n	8003da6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003da4:	4b4c      	ldr	r3, [pc, #304]	; (8003ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003da6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d040      	beq.n	8003e32 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003db0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	6859      	ldr	r1, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003dc2:	035b      	lsls	r3, r3, #13
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dca:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d108      	bne.n	8003dec <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003de8:	2301      	movs	r3, #1
 8003dea:	e000      	b.n	8003dee <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003dec:	2300      	movs	r3, #0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d15c      	bne.n	8003eac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d107      	bne.n	8003e0e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003e0e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d14b      	bne.n	8003eac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003e14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e1c:	f023 030f 	bic.w	r3, r3, #15
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	6811      	ldr	r1, [r2, #0]
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	6892      	ldr	r2, [r2, #8]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e2e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e30:	e03c      	b.n	8003eac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e3c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d108      	bne.n	8003e5e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003e5e:	2300      	movs	r3, #0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d123      	bne.n	8003eac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 0303 	and.w	r3, r3, #3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d107      	bne.n	8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003e80:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d112      	bne.n	8003eac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003e86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e8e:	f023 030f 	bic.w	r3, r3, #15
 8003e92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e94:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e96:	e009      	b.n	8003eac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	f043 0220 	orr.w	r2, r3, #32
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003eaa:	e000      	b.n	8003eae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003eac:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003eb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3764      	adds	r7, #100	; 0x64
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	50000100 	.word	0x50000100
 8003ecc:	50000400 	.word	0x50000400
 8003ed0:	50000500 	.word	0x50000500
 8003ed4:	50000300 	.word	0x50000300
 8003ed8:	50000700 	.word	0x50000700

08003edc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d126      	bne.n	8003f44 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d115      	bne.n	8003f3c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d111      	bne.n	8003f3c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d105      	bne.n	8003f3c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	f043 0201 	orr.w	r2, r3, #1
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f7fd f96b 	bl	8001218 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003f42:	e004      	b.n	8003f4e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	4798      	blx	r3
}
 8003f4e:	bf00      	nop
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b084      	sub	sp, #16
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f7fe fabd 	bl	80024e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003f6a:	bf00      	nop
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b084      	sub	sp, #16
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f90:	f043 0204 	orr.w	r2, r3, #4
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f7fe fab7 	bl	800250c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f9e:	bf00      	nop
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 0303 	and.w	r3, r3, #3
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d108      	bne.n	8003fd4 <ADC_Enable+0x2c>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <ADC_Enable+0x2c>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <ADC_Enable+0x2e>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d13c      	bne.n	8004054 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	4b1f      	ldr	r3, [pc, #124]	; (8004060 <ADC_Enable+0xb8>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00d      	beq.n	8004004 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	f043 0210 	orr.w	r2, r3, #16
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff8:	f043 0201 	orr.w	r2, r3, #1
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e028      	b.n	8004056 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0201 	orr.w	r2, r2, #1
 8004012:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004014:	f7fe fa5a 	bl	80024cc <HAL_GetTick>
 8004018:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800401a:	e014      	b.n	8004046 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800401c:	f7fe fa56 	bl	80024cc <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d90d      	bls.n	8004046 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	f043 0210 	orr.w	r2, r3, #16
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	f043 0201 	orr.w	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e007      	b.n	8004056 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b01      	cmp	r3, #1
 8004052:	d1e3      	bne.n	800401c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	8000003f 	.word	0x8000003f

08004064 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	2b01      	cmp	r3, #1
 800407c:	d108      	bne.n	8004090 <ADC_Disable+0x2c>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <ADC_Disable+0x2c>
 800408c:	2301      	movs	r3, #1
 800408e:	e000      	b.n	8004092 <ADC_Disable+0x2e>
 8004090:	2300      	movs	r3, #0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d040      	beq.n	8004118 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 030d 	and.w	r3, r3, #13
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d10f      	bne.n	80040c4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0202 	orr.w	r2, r2, #2
 80040b2:	609a      	str	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2203      	movs	r2, #3
 80040ba:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80040bc:	f7fe fa06 	bl	80024cc <HAL_GetTick>
 80040c0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80040c2:	e022      	b.n	800410a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	f043 0210 	orr.w	r2, r3, #16
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d4:	f043 0201 	orr.w	r2, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e01c      	b.n	800411a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80040e0:	f7fe f9f4 	bl	80024cc <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d90d      	bls.n	800410a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	f043 0210 	orr.w	r2, r3, #16
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fe:	f043 0201 	orr.w	r2, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e007      	b.n	800411a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b01      	cmp	r3, #1
 8004116:	d0e3      	beq.n	80040e0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 030c 	and.w	r3, r3, #12
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8093 	beq.w	8004270 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004154:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004158:	d12a      	bne.n	80041b0 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800415e:	2b01      	cmp	r3, #1
 8004160:	d126      	bne.n	80041b0 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8004166:	2b01      	cmp	r3, #1
 8004168:	d122      	bne.n	80041b0 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800416a:	230c      	movs	r3, #12
 800416c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800416e:	e014      	b.n	800419a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	4a42      	ldr	r2, [pc, #264]	; (800427c <ADC_ConversionStop+0x158>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d90d      	bls.n	8004194 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	f043 0210 	orr.w	r2, r3, #16
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004188:	f043 0201 	orr.w	r2, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e06e      	b.n	8004272 <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	3301      	adds	r3, #1
 8004198:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a4:	2b40      	cmp	r3, #64	; 0x40
 80041a6:	d1e3      	bne.n	8004170 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2240      	movs	r2, #64	; 0x40
 80041ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2b60      	cmp	r3, #96	; 0x60
 80041b4:	d015      	beq.n	80041e2 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d10e      	bne.n	80041e2 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d107      	bne.n	80041e2 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f042 0210 	orr.w	r2, r2, #16
 80041e0:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b0c      	cmp	r3, #12
 80041e6:	d015      	beq.n	8004214 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d10e      	bne.n	8004214 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004200:	2b00      	cmp	r3, #0
 8004202:	d107      	bne.n	8004214 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0220 	orr.w	r2, r2, #32
 8004212:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b60      	cmp	r3, #96	; 0x60
 8004218:	d004      	beq.n	8004224 <ADC_ConversionStop+0x100>
 800421a:	2b6c      	cmp	r3, #108	; 0x6c
 800421c:	d105      	bne.n	800422a <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800421e:	230c      	movs	r3, #12
 8004220:	617b      	str	r3, [r7, #20]
        break;
 8004222:	e005      	b.n	8004230 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004224:	2308      	movs	r3, #8
 8004226:	617b      	str	r3, [r7, #20]
        break;
 8004228:	e002      	b.n	8004230 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800422a:	2304      	movs	r3, #4
 800422c:	617b      	str	r3, [r7, #20]
        break;
 800422e:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004230:	f7fe f94c 	bl	80024cc <HAL_GetTick>
 8004234:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004236:	e014      	b.n	8004262 <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004238:	f7fe f948 	bl	80024cc <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b0b      	cmp	r3, #11
 8004244:	d90d      	bls.n	8004262 <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f043 0210 	orr.w	r2, r3, #16
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004256:	f043 0201 	orr.w	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e007      	b.n	8004272 <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e3      	bne.n	8004238 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	000993ff 	.word	0x000993ff

08004280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004290:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800429c:	4013      	ands	r3, r2
 800429e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042b2:	4a04      	ldr	r2, [pc, #16]	; (80042c4 <__NVIC_SetPriorityGrouping+0x44>)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	60d3      	str	r3, [r2, #12]
}
 80042b8:	bf00      	nop
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	e000ed00 	.word	0xe000ed00

080042c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042cc:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <__NVIC_GetPriorityGrouping+0x18>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	0a1b      	lsrs	r3, r3, #8
 80042d2:	f003 0307 	and.w	r3, r3, #7
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	e000ed00 	.word	0xe000ed00

080042e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	4603      	mov	r3, r0
 80042ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	db0b      	blt.n	800430e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	f003 021f 	and.w	r2, r3, #31
 80042fc:	4907      	ldr	r1, [pc, #28]	; (800431c <__NVIC_EnableIRQ+0x38>)
 80042fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	2001      	movs	r0, #1
 8004306:	fa00 f202 	lsl.w	r2, r0, r2
 800430a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	e000e100 	.word	0xe000e100

08004320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	6039      	str	r1, [r7, #0]
 800432a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800432c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004330:	2b00      	cmp	r3, #0
 8004332:	db0a      	blt.n	800434a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	b2da      	uxtb	r2, r3
 8004338:	490c      	ldr	r1, [pc, #48]	; (800436c <__NVIC_SetPriority+0x4c>)
 800433a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433e:	0112      	lsls	r2, r2, #4
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	440b      	add	r3, r1
 8004344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004348:	e00a      	b.n	8004360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	b2da      	uxtb	r2, r3
 800434e:	4908      	ldr	r1, [pc, #32]	; (8004370 <__NVIC_SetPriority+0x50>)
 8004350:	79fb      	ldrb	r3, [r7, #7]
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	3b04      	subs	r3, #4
 8004358:	0112      	lsls	r2, r2, #4
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	440b      	add	r3, r1
 800435e:	761a      	strb	r2, [r3, #24]
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	e000e100 	.word	0xe000e100
 8004370:	e000ed00 	.word	0xe000ed00

08004374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004374:	b480      	push	{r7}
 8004376:	b089      	sub	sp, #36	; 0x24
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	f1c3 0307 	rsb	r3, r3, #7
 800438e:	2b04      	cmp	r3, #4
 8004390:	bf28      	it	cs
 8004392:	2304      	movcs	r3, #4
 8004394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	3304      	adds	r3, #4
 800439a:	2b06      	cmp	r3, #6
 800439c:	d902      	bls.n	80043a4 <NVIC_EncodePriority+0x30>
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	3b03      	subs	r3, #3
 80043a2:	e000      	b.n	80043a6 <NVIC_EncodePriority+0x32>
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a8:	f04f 32ff 	mov.w	r2, #4294967295
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	fa02 f303 	lsl.w	r3, r2, r3
 80043b2:	43da      	mvns	r2, r3
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	401a      	ands	r2, r3
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043bc:	f04f 31ff 	mov.w	r1, #4294967295
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	fa01 f303 	lsl.w	r3, r1, r3
 80043c6:	43d9      	mvns	r1, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043cc:	4313      	orrs	r3, r2
         );
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3724      	adds	r7, #36	; 0x24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
	...

080043dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043ec:	d301      	bcc.n	80043f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043ee:	2301      	movs	r3, #1
 80043f0:	e00f      	b.n	8004412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043f2:	4a0a      	ldr	r2, [pc, #40]	; (800441c <SysTick_Config+0x40>)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043fa:	210f      	movs	r1, #15
 80043fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004400:	f7ff ff8e 	bl	8004320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004404:	4b05      	ldr	r3, [pc, #20]	; (800441c <SysTick_Config+0x40>)
 8004406:	2200      	movs	r2, #0
 8004408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800440a:	4b04      	ldr	r3, [pc, #16]	; (800441c <SysTick_Config+0x40>)
 800440c:	2207      	movs	r2, #7
 800440e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	e000e010 	.word	0xe000e010

08004420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7ff ff29 	bl	8004280 <__NVIC_SetPriorityGrouping>
}
 800442e:	bf00      	nop
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b086      	sub	sp, #24
 800443a:	af00      	add	r7, sp, #0
 800443c:	4603      	mov	r3, r0
 800443e:	60b9      	str	r1, [r7, #8]
 8004440:	607a      	str	r2, [r7, #4]
 8004442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004448:	f7ff ff3e 	bl	80042c8 <__NVIC_GetPriorityGrouping>
 800444c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	68b9      	ldr	r1, [r7, #8]
 8004452:	6978      	ldr	r0, [r7, #20]
 8004454:	f7ff ff8e 	bl	8004374 <NVIC_EncodePriority>
 8004458:	4602      	mov	r2, r0
 800445a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800445e:	4611      	mov	r1, r2
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff ff5d 	bl	8004320 <__NVIC_SetPriority>
}
 8004466:	bf00      	nop
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	4603      	mov	r3, r0
 8004476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff ff31 	bl	80042e4 <__NVIC_EnableIRQ>
}
 8004482:	bf00      	nop
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff ffa2 	bl	80043dc <SysTick_Config>
 8004498:	4603      	mov	r3, r0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e014      	b.n	80044de <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	791b      	ldrb	r3, [r3, #4]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d105      	bne.n	80044ca <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7fd fdd7 	bl	8002078 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2202      	movs	r2, #2
 80044ce:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	73fb      	strb	r3, [r7, #15]
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6819      	ldr	r1, [r3, #0]
 80044fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	43da      	mvns	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	400a      	ands	r2, r1
 800450c:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6819      	ldr	r1, [r3, #0]
 8004514:	2201      	movs	r2, #1
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	43da      	mvns	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	400a      	ands	r2, r1
 8004524:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10f      	bne.n	800454c <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fae0 	bl	8004af6 <HAL_DMA_Abort>
 8004536:	4603      	mov	r3, r0
 8004538:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	e00e      	b.n	800456a <HAL_DAC_Stop_DMA+0x84>
  /* For all products including channel 2U */
  /* DAC channel 2 is available on top of DAC channel 1U */
  else /* Channel2 is used */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4618      	mov	r0, r3
 8004552:	f000 fad0 	bl	8004af6 <HAL_DMA_Abort>
 8004556:	4603      	mov	r3, r0
 8004558:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004568:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800456a:	7bfb      	ldrb	r3, [r7, #15]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <HAL_DAC_Stop_DMA+0x92>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2204      	movs	r2, #4
 8004574:	711a      	strb	r2, [r3, #4]
 8004576:	e002      	b.n	800457e <HAL_DAC_Stop_DMA+0x98>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	711a      	strb	r2, [r3, #4]
  }
  
  /* Return function status */
  return status;
 800457e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	795b      	ldrb	r3, [r3, #5]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d101      	bne.n	80045f6 <HAL_DAC_Start_DMA+0x1e>
 80045f2:	2302      	movs	r3, #2
 80045f4:	e08e      	b.n	8004714 <HAL_DAC_Start_DMA+0x13c>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2201      	movs	r2, #1
 80045fa:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2202      	movs	r2, #2
 8004600:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d12a      	bne.n	800465e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	4a43      	ldr	r2, [pc, #268]	; (800471c <HAL_DAC_Start_DMA+0x144>)
 800460e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	4a42      	ldr	r2, [pc, #264]	; (8004720 <HAL_DAC_Start_DMA+0x148>)
 8004616:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	4a41      	ldr	r2, [pc, #260]	; (8004724 <HAL_DAC_Start_DMA+0x14c>)
 800461e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800462e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	2b04      	cmp	r3, #4
 8004634:	d009      	beq.n	800464a <HAL_DAC_Start_DMA+0x72>
 8004636:	2b08      	cmp	r3, #8
 8004638:	d00c      	beq.n	8004654 <HAL_DAC_Start_DMA+0x7c>
 800463a:	2b00      	cmp	r3, #0
 800463c:	d000      	beq.n	8004640 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800463e:	e039      	b.n	80046b4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3308      	adds	r3, #8
 8004646:	617b      	str	r3, [r7, #20]
        break;
 8004648:	e034      	b.n	80046b4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	330c      	adds	r3, #12
 8004650:	617b      	str	r3, [r7, #20]
        break;
 8004652:	e02f      	b.n	80046b4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3310      	adds	r3, #16
 800465a:	617b      	str	r3, [r7, #20]
        break;
 800465c:	e02a      	b.n	80046b4 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	4a31      	ldr	r2, [pc, #196]	; (8004728 <HAL_DAC_Start_DMA+0x150>)
 8004664:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	4a30      	ldr	r2, [pc, #192]	; (800472c <HAL_DAC_Start_DMA+0x154>)
 800466c:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	4a2f      	ldr	r2, [pc, #188]	; (8004730 <HAL_DAC_Start_DMA+0x158>)
 8004674:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004684:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	2b04      	cmp	r3, #4
 800468a:	d009      	beq.n	80046a0 <HAL_DAC_Start_DMA+0xc8>
 800468c:	2b08      	cmp	r3, #8
 800468e:	d00c      	beq.n	80046aa <HAL_DAC_Start_DMA+0xd2>
 8004690:	2b00      	cmp	r3, #0
 8004692:	d000      	beq.n	8004696 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004694:	e00e      	b.n	80046b4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	3314      	adds	r3, #20
 800469c:	617b      	str	r3, [r7, #20]
        break;
 800469e:	e009      	b.n	80046b4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3318      	adds	r3, #24
 80046a6:	617b      	str	r3, [r7, #20]
        break;
 80046a8:	e004      	b.n	80046b4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	331c      	adds	r3, #28
 80046b0:	617b      	str	r3, [r7, #20]
        break;
 80046b2:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10f      	bne.n	80046da <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046c8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6898      	ldr	r0, [r3, #8]
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	f000 f9b0 	bl	8004a38 <HAL_DMA_Start_IT>
 80046d8:	e00e      	b.n	80046f8 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80046e8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	68d8      	ldr	r0, [r3, #12]
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	f000 f9a0 	bl	8004a38 <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6819      	ldr	r1, [r3, #0]
 8004704:	2201      	movs	r2, #1
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	409a      	lsls	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3718      	adds	r7, #24
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	080048d3 	.word	0x080048d3
 8004720:	080048f5 	.word	0x080048f5
 8004724:	08004911 	.word	0x08004911
 8004728:	0800493f 	.word	0x0800493f
 800472c:	08004961 	.word	0x08004961
 8004730:	0800497d 	.word	0x0800497d

08004734 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800474a:	d120      	bne.n	800478e <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800475a:	d118      	bne.n	800478e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2204      	movs	r2, #4
 8004760:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f043 0201 	orr.w	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	611a      	str	r2, [r3, #16]
          
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004776:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004786:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff ff1b 	bl	80045c4 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif
    }
  }
  
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800479c:	d120      	bne.n	80047e0 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047ac:	d118      	bne.n	80047e0 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2204      	movs	r2, #4
 80047b2:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	f043 0202 	orr.w	r2, r3, #2
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80047c8:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80047d8:	601a      	str	r2, [r3, #0]
   
      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f86f 	bl	80048be <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif
    }
  }
}
 80047e0:	bf00      	nop
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	2300      	movs	r3, #0
 80047fa:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	795b      	ldrb	r3, [r3, #5]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_DAC_ConfigChannel+0x20>
 8004804:	2302      	movs	r3, #2
 8004806:	e036      	b.n	8004876 <HAL_DAC_ConfigChannel+0x8e>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2201      	movs	r2, #1
 800480c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2202      	movs	r2, #2
 8004812:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800481c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	43db      	mvns	r3, r3
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	4013      	ands	r3, r2
 800482c:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	4313      	orrs	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6819      	ldr	r1, [r3, #0]
 8004856:	22c0      	movs	r2, #192	; 0xc0
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	43da      	mvns	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	400a      	ands	r2, r1
 8004866:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	371c      	adds	r7, #28
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f7ff fe51 	bl	8004588 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2201      	movs	r2, #1
 80048ea:	711a      	strb	r2, [r3, #4]
}
 80048ec:	bf00      	nop
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f7ff fe4a 	bl	800459c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8004908:	bf00      	nop
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f043 0204 	orr.w	r2, r3, #4
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f7ff fe40 	bl	80045b0 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2201      	movs	r2, #1
 8004934:	711a      	strb	r2, [r3, #4]
}
 8004936:	bf00      	nop
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f7ff ff98 	bl	8004882 <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	711a      	strb	r2, [r3, #4]
}
 8004958:	bf00      	nop
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f7ff ff91 	bl	8004896 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8004974:	bf00      	nop
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f043 0204 	orr.w	r2, r3, #4
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f7ff ff87 	bl	80048aa <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2201      	movs	r2, #1
 80049a0:	711a      	strb	r2, [r3, #4]
}
 80049a2:	bf00      	nop
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b084      	sub	sp, #16
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e037      	b.n	8004a30 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80049d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80049da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80049e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f97a 	bl	8004d0c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}  
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
 8004a44:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d101      	bne.n	8004a58 <HAL_DMA_Start_IT+0x20>
 8004a54:	2302      	movs	r3, #2
 8004a56:	e04a      	b.n	8004aee <HAL_DMA_Start_IT+0xb6>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d13a      	bne.n	8004ae0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0201 	bic.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	68b9      	ldr	r1, [r7, #8]
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 f90d 	bl	8004cae <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d008      	beq.n	8004aae <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 020e 	orr.w	r2, r2, #14
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	e00f      	b.n	8004ace <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f042 020a 	orr.w	r2, r2, #10
 8004abc:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0204 	bic.w	r2, r2, #4
 8004acc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f042 0201 	orr.w	r2, r2, #1
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	e005      	b.n	8004aec <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004ae8:	2302      	movs	r3, #2
 8004aea:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004aec:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d008      	beq.n	8004b1a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2204      	movs	r2, #4
 8004b0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e020      	b.n	8004b5c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 020e 	bic.w	r2, r2, #14
 8004b28:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0201 	bic.w	r2, r2, #1
 8004b38:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b42:	2101      	movs	r1, #1
 8004b44:	fa01 f202 	lsl.w	r2, r1, r2
 8004b48:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b84:	2204      	movs	r2, #4
 8004b86:	409a      	lsls	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d024      	beq.n	8004bda <HAL_DMA_IRQHandler+0x72>
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d01f      	beq.n	8004bda <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0320 	and.w	r3, r3, #32
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d107      	bne.n	8004bb8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0204 	bic.w	r2, r2, #4
 8004bb6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc0:	2104      	movs	r1, #4
 8004bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8004bc6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d06a      	beq.n	8004ca6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004bd8:	e065      	b.n	8004ca6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	2202      	movs	r2, #2
 8004be0:	409a      	lsls	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4013      	ands	r3, r2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d02c      	beq.n	8004c44 <HAL_DMA_IRQHandler+0xdc>
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d027      	beq.n	8004c44 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10b      	bne.n	8004c1a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 020a 	bic.w	r2, r2, #10
 8004c10:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c22:	2102      	movs	r1, #2
 8004c24:	fa01 f202 	lsl.w	r2, r1, r2
 8004c28:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d035      	beq.n	8004ca6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004c42:	e030      	b.n	8004ca6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c48:	2208      	movs	r2, #8
 8004c4a:	409a      	lsls	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d028      	beq.n	8004ca6 <HAL_DMA_IRQHandler+0x13e>
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d023      	beq.n	8004ca6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 020e 	bic.w	r2, r2, #14
 8004c6c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c76:	2101      	movs	r1, #1
 8004c78:	fa01 f202 	lsl.w	r2, r1, r2
 8004c7c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d004      	beq.n	8004ca6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	4798      	blx	r3
    }
  }
}  
 8004ca4:	e7ff      	b.n	8004ca6 <HAL_DMA_IRQHandler+0x13e>
 8004ca6:	bf00      	nop
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b085      	sub	sp, #20
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	60f8      	str	r0, [r7, #12]
 8004cb6:	60b9      	str	r1, [r7, #8]
 8004cb8:	607a      	str	r2, [r7, #4]
 8004cba:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8004cca:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d108      	bne.n	8004cee <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004cec:	e007      	b.n	8004cfe <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	60da      	str	r2, [r3, #12]
}
 8004cfe:	bf00      	nop
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	4b14      	ldr	r3, [pc, #80]	; (8004d6c <DMA_CalcBaseAndBitshift+0x60>)
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d80f      	bhi.n	8004d40 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	4b12      	ldr	r3, [pc, #72]	; (8004d70 <DMA_CalcBaseAndBitshift+0x64>)
 8004d28:	4413      	add	r3, r2
 8004d2a:	4a12      	ldr	r2, [pc, #72]	; (8004d74 <DMA_CalcBaseAndBitshift+0x68>)
 8004d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d30:	091b      	lsrs	r3, r3, #4
 8004d32:	009a      	lsls	r2, r3, #2
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a0f      	ldr	r2, [pc, #60]	; (8004d78 <DMA_CalcBaseAndBitshift+0x6c>)
 8004d3c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004d3e:	e00e      	b.n	8004d5e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	461a      	mov	r2, r3
 8004d46:	4b0d      	ldr	r3, [pc, #52]	; (8004d7c <DMA_CalcBaseAndBitshift+0x70>)
 8004d48:	4413      	add	r3, r2
 8004d4a:	4a0a      	ldr	r2, [pc, #40]	; (8004d74 <DMA_CalcBaseAndBitshift+0x68>)
 8004d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d50:	091b      	lsrs	r3, r3, #4
 8004d52:	009a      	lsls	r2, r3, #2
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a09      	ldr	r2, [pc, #36]	; (8004d80 <DMA_CalcBaseAndBitshift+0x74>)
 8004d5c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40020407 	.word	0x40020407
 8004d70:	bffdfff8 	.word	0xbffdfff8
 8004d74:	cccccccd 	.word	0xcccccccd
 8004d78:	40020000 	.word	0x40020000
 8004d7c:	bffdfbf8 	.word	0xbffdfbf8
 8004d80:	40020400 	.word	0x40020400

08004d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d92:	e160      	b.n	8005056 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	2101      	movs	r1, #1
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004da0:	4013      	ands	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 8152 	beq.w	8005050 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d00b      	beq.n	8004dcc <HAL_GPIO_Init+0x48>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d007      	beq.n	8004dcc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dc0:	2b11      	cmp	r3, #17
 8004dc2:	d003      	beq.n	8004dcc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b12      	cmp	r3, #18
 8004dca:	d130      	bne.n	8004e2e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	2203      	movs	r2, #3
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4013      	ands	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e02:	2201      	movs	r2, #1
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	43db      	mvns	r3, r3
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	091b      	lsrs	r3, r3, #4
 8004e18:	f003 0201 	and.w	r2, r3, #1
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	2203      	movs	r2, #3
 8004e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3e:	43db      	mvns	r3, r3
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	4013      	ands	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d003      	beq.n	8004e6e <HAL_GPIO_Init+0xea>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b12      	cmp	r3, #18
 8004e6c:	d123      	bne.n	8004eb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	08da      	lsrs	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3208      	adds	r2, #8
 8004e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	220f      	movs	r2, #15
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	691a      	ldr	r2, [r3, #16]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	08da      	lsrs	r2, r3, #3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3208      	adds	r2, #8
 8004eb0:	6939      	ldr	r1, [r7, #16]
 8004eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	2203      	movs	r2, #3
 8004ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec6:	43db      	mvns	r3, r3
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f003 0203 	and.w	r2, r3, #3
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 80ac 	beq.w	8005050 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ef8:	4b5e      	ldr	r3, [pc, #376]	; (8005074 <HAL_GPIO_Init+0x2f0>)
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	4a5d      	ldr	r2, [pc, #372]	; (8005074 <HAL_GPIO_Init+0x2f0>)
 8004efe:	f043 0301 	orr.w	r3, r3, #1
 8004f02:	6193      	str	r3, [r2, #24]
 8004f04:	4b5b      	ldr	r3, [pc, #364]	; (8005074 <HAL_GPIO_Init+0x2f0>)
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	60bb      	str	r3, [r7, #8]
 8004f0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004f10:	4a59      	ldr	r2, [pc, #356]	; (8005078 <HAL_GPIO_Init+0x2f4>)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	089b      	lsrs	r3, r3, #2
 8004f16:	3302      	adds	r3, #2
 8004f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f003 0303 	and.w	r3, r3, #3
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	220f      	movs	r2, #15
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4013      	ands	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f3a:	d025      	beq.n	8004f88 <HAL_GPIO_Init+0x204>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a4f      	ldr	r2, [pc, #316]	; (800507c <HAL_GPIO_Init+0x2f8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d01f      	beq.n	8004f84 <HAL_GPIO_Init+0x200>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a4e      	ldr	r2, [pc, #312]	; (8005080 <HAL_GPIO_Init+0x2fc>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d019      	beq.n	8004f80 <HAL_GPIO_Init+0x1fc>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a4d      	ldr	r2, [pc, #308]	; (8005084 <HAL_GPIO_Init+0x300>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d013      	beq.n	8004f7c <HAL_GPIO_Init+0x1f8>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a4c      	ldr	r2, [pc, #304]	; (8005088 <HAL_GPIO_Init+0x304>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d00d      	beq.n	8004f78 <HAL_GPIO_Init+0x1f4>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a4b      	ldr	r2, [pc, #300]	; (800508c <HAL_GPIO_Init+0x308>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d007      	beq.n	8004f74 <HAL_GPIO_Init+0x1f0>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a4a      	ldr	r2, [pc, #296]	; (8005090 <HAL_GPIO_Init+0x30c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d101      	bne.n	8004f70 <HAL_GPIO_Init+0x1ec>
 8004f6c:	2306      	movs	r3, #6
 8004f6e:	e00c      	b.n	8004f8a <HAL_GPIO_Init+0x206>
 8004f70:	2307      	movs	r3, #7
 8004f72:	e00a      	b.n	8004f8a <HAL_GPIO_Init+0x206>
 8004f74:	2305      	movs	r3, #5
 8004f76:	e008      	b.n	8004f8a <HAL_GPIO_Init+0x206>
 8004f78:	2304      	movs	r3, #4
 8004f7a:	e006      	b.n	8004f8a <HAL_GPIO_Init+0x206>
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e004      	b.n	8004f8a <HAL_GPIO_Init+0x206>
 8004f80:	2302      	movs	r3, #2
 8004f82:	e002      	b.n	8004f8a <HAL_GPIO_Init+0x206>
 8004f84:	2301      	movs	r3, #1
 8004f86:	e000      	b.n	8004f8a <HAL_GPIO_Init+0x206>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	f002 0203 	and.w	r2, r2, #3
 8004f90:	0092      	lsls	r2, r2, #2
 8004f92:	4093      	lsls	r3, r2
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f9a:	4937      	ldr	r1, [pc, #220]	; (8005078 <HAL_GPIO_Init+0x2f4>)
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	089b      	lsrs	r3, r3, #2
 8004fa0:	3302      	adds	r3, #2
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fa8:	4b3a      	ldr	r3, [pc, #232]	; (8005094 <HAL_GPIO_Init+0x310>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004fcc:	4a31      	ldr	r2, [pc, #196]	; (8005094 <HAL_GPIO_Init+0x310>)
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004fd2:	4b30      	ldr	r3, [pc, #192]	; (8005094 <HAL_GPIO_Init+0x310>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	43db      	mvns	r3, r3
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004ff6:	4a27      	ldr	r2, [pc, #156]	; (8005094 <HAL_GPIO_Init+0x310>)
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ffc:	4b25      	ldr	r3, [pc, #148]	; (8005094 <HAL_GPIO_Init+0x310>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	43db      	mvns	r3, r3
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4013      	ands	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005020:	4a1c      	ldr	r2, [pc, #112]	; (8005094 <HAL_GPIO_Init+0x310>)
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005026:	4b1b      	ldr	r3, [pc, #108]	; (8005094 <HAL_GPIO_Init+0x310>)
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	43db      	mvns	r3, r3
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4013      	ands	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4313      	orrs	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800504a:	4a12      	ldr	r2, [pc, #72]	; (8005094 <HAL_GPIO_Init+0x310>)
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	3301      	adds	r3, #1
 8005054:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	fa22 f303 	lsr.w	r3, r2, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	f47f ae97 	bne.w	8004d94 <HAL_GPIO_Init+0x10>
  }
}
 8005066:	bf00      	nop
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40021000 	.word	0x40021000
 8005078:	40010000 	.word	0x40010000
 800507c:	48000400 	.word	0x48000400
 8005080:	48000800 	.word	0x48000800
 8005084:	48000c00 	.word	0x48000c00
 8005088:	48001000 	.word	0x48001000
 800508c:	48001400 	.word	0x48001400
 8005090:	48001800 	.word	0x48001800
 8005094:	40010400 	.word	0x40010400

08005098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	460b      	mov	r3, r1
 80050a2:	807b      	strh	r3, [r7, #2]
 80050a4:	4613      	mov	r3, r2
 80050a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050a8:	787b      	ldrb	r3, [r7, #1]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050ae:	887a      	ldrh	r2, [r7, #2]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050b4:	e002      	b.n	80050bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050b6:	887a      	ldrh	r2, [r7, #2]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	1d3b      	adds	r3, r7, #4
 80050d2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050d4:	1d3b      	adds	r3, r7, #4
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d102      	bne.n	80050e2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	f000 bf01 	b.w	8005ee4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050e2:	1d3b      	adds	r3, r7, #4
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 8160 	beq.w	80053b2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80050f2:	4bae      	ldr	r3, [pc, #696]	; (80053ac <HAL_RCC_OscConfig+0x2e4>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f003 030c 	and.w	r3, r3, #12
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d00c      	beq.n	8005118 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80050fe:	4bab      	ldr	r3, [pc, #684]	; (80053ac <HAL_RCC_OscConfig+0x2e4>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f003 030c 	and.w	r3, r3, #12
 8005106:	2b08      	cmp	r3, #8
 8005108:	d159      	bne.n	80051be <HAL_RCC_OscConfig+0xf6>
 800510a:	4ba8      	ldr	r3, [pc, #672]	; (80053ac <HAL_RCC_OscConfig+0x2e4>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005116:	d152      	bne.n	80051be <HAL_RCC_OscConfig+0xf6>
 8005118:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800511c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005120:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005124:	fa93 f3a3 	rbit	r3, r3
 8005128:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800512c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005130:	fab3 f383 	clz	r3, r3
 8005134:	b2db      	uxtb	r3, r3
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	b2db      	uxtb	r3, r3
 800513a:	f043 0301 	orr.w	r3, r3, #1
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	d102      	bne.n	800514a <HAL_RCC_OscConfig+0x82>
 8005144:	4b99      	ldr	r3, [pc, #612]	; (80053ac <HAL_RCC_OscConfig+0x2e4>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	e015      	b.n	8005176 <HAL_RCC_OscConfig+0xae>
 800514a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800514e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005152:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8005156:	fa93 f3a3 	rbit	r3, r3
 800515a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800515e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005162:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005166:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800516a:	fa93 f3a3 	rbit	r3, r3
 800516e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005172:	4b8e      	ldr	r3, [pc, #568]	; (80053ac <HAL_RCC_OscConfig+0x2e4>)
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800517a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800517e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8005182:	fa92 f2a2 	rbit	r2, r2
 8005186:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800518a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800518e:	fab2 f282 	clz	r2, r2
 8005192:	b2d2      	uxtb	r2, r2
 8005194:	f042 0220 	orr.w	r2, r2, #32
 8005198:	b2d2      	uxtb	r2, r2
 800519a:	f002 021f 	and.w	r2, r2, #31
 800519e:	2101      	movs	r1, #1
 80051a0:	fa01 f202 	lsl.w	r2, r1, r2
 80051a4:	4013      	ands	r3, r2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 8102 	beq.w	80053b0 <HAL_RCC_OscConfig+0x2e8>
 80051ac:	1d3b      	adds	r3, r7, #4
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f040 80fc 	bne.w	80053b0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	f000 be93 	b.w	8005ee4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051be:	1d3b      	adds	r3, r7, #4
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c8:	d106      	bne.n	80051d8 <HAL_RCC_OscConfig+0x110>
 80051ca:	4b78      	ldr	r3, [pc, #480]	; (80053ac <HAL_RCC_OscConfig+0x2e4>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a77      	ldr	r2, [pc, #476]	; (80053ac <HAL_RCC_OscConfig+0x2e4>)
 80051d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	e030      	b.n	800523a <HAL_RCC_OscConfig+0x172>
 80051d8:	1d3b      	adds	r3, r7, #4
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10c      	bne.n	80051fc <HAL_RCC_OscConfig+0x134>
 80051e2:	4b72      	ldr	r3, [pc, #456]	; (80053ac <HAL_RCC_OscConfig+0x2e4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a71      	ldr	r2, [pc, #452]	; (80053ac <HAL_RCC_OscConfig+0x2e4>)
 80051e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	4b6f      	ldr	r3, [pc, #444]	; (80053ac <HAL_RCC_OscConfig+0x2e4>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a6e      	ldr	r2, [pc, #440]	; (80053ac <HAL_RCC_OscConfig+0x2e4>)
 80051f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051f8:	6013      	str	r3, [r2, #0]
 80051fa:	e01e      	b.n	800523a <HAL_RCC_OscConfig+0x172>
 80051fc:	1d3b      	adds	r3, r7, #4
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005206:	d10c      	bne.n	8005222 <HAL_RCC_OscConfig+0x15a>
 8005208:	4b68      	ldr	r3, [pc, #416]	; (80053ac <HAL_RCC_OscConfig+0x2e4>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a67      	ldr	r2, [pc, #412]	; (80053ac <HAL_RCC_OscConfig+0x2e4>)
 800520e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005212:	6013      	str	r3, [r2, #0]
 8005214:	4b65      	ldr	r3, [pc, #404]	; (80053ac <HAL_RCC_OscConfig+0x2e4>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a64      	ldr	r2, [pc, #400]	; (80053ac <HAL_RCC_OscConfig+0x2e4>)
 800521a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800521e:	6013      	str	r3, [r2, #0]
 8005220:	e00b      	b.n	800523a <HAL_RCC_OscConfig+0x172>
 8005222:	4b62      	ldr	r3, [pc, #392]	; (80053ac <HAL_RCC_OscConfig+0x2e4>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a61      	ldr	r2, [pc, #388]	; (80053ac <HAL_RCC_OscConfig+0x2e4>)
 8005228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	4b5f      	ldr	r3, [pc, #380]	; (80053ac <HAL_RCC_OscConfig+0x2e4>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a5e      	ldr	r2, [pc, #376]	; (80053ac <HAL_RCC_OscConfig+0x2e4>)
 8005234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005238:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800523a:	1d3b      	adds	r3, r7, #4
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d059      	beq.n	80052f8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005244:	f7fd f942 	bl	80024cc <HAL_GetTick>
 8005248:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800524c:	e00a      	b.n	8005264 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800524e:	f7fd f93d 	bl	80024cc <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b64      	cmp	r3, #100	; 0x64
 800525c:	d902      	bls.n	8005264 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	f000 be40 	b.w	8005ee4 <HAL_RCC_OscConfig+0xe1c>
 8005264:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005268:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800526c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8005270:	fa93 f3a3 	rbit	r3, r3
 8005274:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8005278:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800527c:	fab3 f383 	clz	r3, r3
 8005280:	b2db      	uxtb	r3, r3
 8005282:	095b      	lsrs	r3, r3, #5
 8005284:	b2db      	uxtb	r3, r3
 8005286:	f043 0301 	orr.w	r3, r3, #1
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b01      	cmp	r3, #1
 800528e:	d102      	bne.n	8005296 <HAL_RCC_OscConfig+0x1ce>
 8005290:	4b46      	ldr	r3, [pc, #280]	; (80053ac <HAL_RCC_OscConfig+0x2e4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	e015      	b.n	80052c2 <HAL_RCC_OscConfig+0x1fa>
 8005296:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800529a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80052a2:	fa93 f3a3 	rbit	r3, r3
 80052a6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80052aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052ae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80052b2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80052b6:	fa93 f3a3 	rbit	r3, r3
 80052ba:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80052be:	4b3b      	ldr	r3, [pc, #236]	; (80053ac <HAL_RCC_OscConfig+0x2e4>)
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80052c6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80052ca:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80052ce:	fa92 f2a2 	rbit	r2, r2
 80052d2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80052d6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80052da:	fab2 f282 	clz	r2, r2
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	f042 0220 	orr.w	r2, r2, #32
 80052e4:	b2d2      	uxtb	r2, r2
 80052e6:	f002 021f 	and.w	r2, r2, #31
 80052ea:	2101      	movs	r1, #1
 80052ec:	fa01 f202 	lsl.w	r2, r1, r2
 80052f0:	4013      	ands	r3, r2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0ab      	beq.n	800524e <HAL_RCC_OscConfig+0x186>
 80052f6:	e05c      	b.n	80053b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f8:	f7fd f8e8 	bl	80024cc <HAL_GetTick>
 80052fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005300:	e00a      	b.n	8005318 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005302:	f7fd f8e3 	bl	80024cc <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b64      	cmp	r3, #100	; 0x64
 8005310:	d902      	bls.n	8005318 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	f000 bde6 	b.w	8005ee4 <HAL_RCC_OscConfig+0xe1c>
 8005318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800531c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005320:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8005324:	fa93 f3a3 	rbit	r3, r3
 8005328:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800532c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005330:	fab3 f383 	clz	r3, r3
 8005334:	b2db      	uxtb	r3, r3
 8005336:	095b      	lsrs	r3, r3, #5
 8005338:	b2db      	uxtb	r3, r3
 800533a:	f043 0301 	orr.w	r3, r3, #1
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b01      	cmp	r3, #1
 8005342:	d102      	bne.n	800534a <HAL_RCC_OscConfig+0x282>
 8005344:	4b19      	ldr	r3, [pc, #100]	; (80053ac <HAL_RCC_OscConfig+0x2e4>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	e015      	b.n	8005376 <HAL_RCC_OscConfig+0x2ae>
 800534a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800534e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005352:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005356:	fa93 f3a3 	rbit	r3, r3
 800535a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800535e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005362:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005366:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800536a:	fa93 f3a3 	rbit	r3, r3
 800536e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005372:	4b0e      	ldr	r3, [pc, #56]	; (80053ac <HAL_RCC_OscConfig+0x2e4>)
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800537a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800537e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8005382:	fa92 f2a2 	rbit	r2, r2
 8005386:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800538a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800538e:	fab2 f282 	clz	r2, r2
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	f042 0220 	orr.w	r2, r2, #32
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	f002 021f 	and.w	r2, r2, #31
 800539e:	2101      	movs	r1, #1
 80053a0:	fa01 f202 	lsl.w	r2, r1, r2
 80053a4:	4013      	ands	r3, r2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1ab      	bne.n	8005302 <HAL_RCC_OscConfig+0x23a>
 80053aa:	e002      	b.n	80053b2 <HAL_RCC_OscConfig+0x2ea>
 80053ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053b2:	1d3b      	adds	r3, r7, #4
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 8170 	beq.w	80056a2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80053c2:	4bd0      	ldr	r3, [pc, #832]	; (8005704 <HAL_RCC_OscConfig+0x63c>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f003 030c 	and.w	r3, r3, #12
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00c      	beq.n	80053e8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80053ce:	4bcd      	ldr	r3, [pc, #820]	; (8005704 <HAL_RCC_OscConfig+0x63c>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f003 030c 	and.w	r3, r3, #12
 80053d6:	2b08      	cmp	r3, #8
 80053d8:	d16d      	bne.n	80054b6 <HAL_RCC_OscConfig+0x3ee>
 80053da:	4bca      	ldr	r3, [pc, #808]	; (8005704 <HAL_RCC_OscConfig+0x63c>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80053e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053e6:	d166      	bne.n	80054b6 <HAL_RCC_OscConfig+0x3ee>
 80053e8:	2302      	movs	r3, #2
 80053ea:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ee:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80053f2:	fa93 f3a3 	rbit	r3, r3
 80053f6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80053fa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053fe:	fab3 f383 	clz	r3, r3
 8005402:	b2db      	uxtb	r3, r3
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	b2db      	uxtb	r3, r3
 8005408:	f043 0301 	orr.w	r3, r3, #1
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b01      	cmp	r3, #1
 8005410:	d102      	bne.n	8005418 <HAL_RCC_OscConfig+0x350>
 8005412:	4bbc      	ldr	r3, [pc, #752]	; (8005704 <HAL_RCC_OscConfig+0x63c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	e013      	b.n	8005440 <HAL_RCC_OscConfig+0x378>
 8005418:	2302      	movs	r3, #2
 800541a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800541e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8005422:	fa93 f3a3 	rbit	r3, r3
 8005426:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800542a:	2302      	movs	r3, #2
 800542c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005430:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005434:	fa93 f3a3 	rbit	r3, r3
 8005438:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800543c:	4bb1      	ldr	r3, [pc, #708]	; (8005704 <HAL_RCC_OscConfig+0x63c>)
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	2202      	movs	r2, #2
 8005442:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8005446:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800544a:	fa92 f2a2 	rbit	r2, r2
 800544e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8005452:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005456:	fab2 f282 	clz	r2, r2
 800545a:	b2d2      	uxtb	r2, r2
 800545c:	f042 0220 	orr.w	r2, r2, #32
 8005460:	b2d2      	uxtb	r2, r2
 8005462:	f002 021f 	and.w	r2, r2, #31
 8005466:	2101      	movs	r1, #1
 8005468:	fa01 f202 	lsl.w	r2, r1, r2
 800546c:	4013      	ands	r3, r2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d007      	beq.n	8005482 <HAL_RCC_OscConfig+0x3ba>
 8005472:	1d3b      	adds	r3, r7, #4
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d002      	beq.n	8005482 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	f000 bd31 	b.w	8005ee4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005482:	4ba0      	ldr	r3, [pc, #640]	; (8005704 <HAL_RCC_OscConfig+0x63c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800548a:	1d3b      	adds	r3, r7, #4
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	21f8      	movs	r1, #248	; 0xf8
 8005492:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005496:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800549a:	fa91 f1a1 	rbit	r1, r1
 800549e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80054a2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80054a6:	fab1 f181 	clz	r1, r1
 80054aa:	b2c9      	uxtb	r1, r1
 80054ac:	408b      	lsls	r3, r1
 80054ae:	4995      	ldr	r1, [pc, #596]	; (8005704 <HAL_RCC_OscConfig+0x63c>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054b4:	e0f5      	b.n	80056a2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054b6:	1d3b      	adds	r3, r7, #4
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 8085 	beq.w	80055cc <HAL_RCC_OscConfig+0x504>
 80054c2:	2301      	movs	r3, #1
 80054c4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80054cc:	fa93 f3a3 	rbit	r3, r3
 80054d0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80054d4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054d8:	fab3 f383 	clz	r3, r3
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80054e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	461a      	mov	r2, r3
 80054ea:	2301      	movs	r3, #1
 80054ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ee:	f7fc ffed 	bl	80024cc <HAL_GetTick>
 80054f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f6:	e00a      	b.n	800550e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054f8:	f7fc ffe8 	bl	80024cc <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d902      	bls.n	800550e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	f000 bceb 	b.w	8005ee4 <HAL_RCC_OscConfig+0xe1c>
 800550e:	2302      	movs	r3, #2
 8005510:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005514:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005518:	fa93 f3a3 	rbit	r3, r3
 800551c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8005520:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005524:	fab3 f383 	clz	r3, r3
 8005528:	b2db      	uxtb	r3, r3
 800552a:	095b      	lsrs	r3, r3, #5
 800552c:	b2db      	uxtb	r3, r3
 800552e:	f043 0301 	orr.w	r3, r3, #1
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	d102      	bne.n	800553e <HAL_RCC_OscConfig+0x476>
 8005538:	4b72      	ldr	r3, [pc, #456]	; (8005704 <HAL_RCC_OscConfig+0x63c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	e013      	b.n	8005566 <HAL_RCC_OscConfig+0x49e>
 800553e:	2302      	movs	r3, #2
 8005540:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005544:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005548:	fa93 f3a3 	rbit	r3, r3
 800554c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005550:	2302      	movs	r3, #2
 8005552:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005556:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800555a:	fa93 f3a3 	rbit	r3, r3
 800555e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005562:	4b68      	ldr	r3, [pc, #416]	; (8005704 <HAL_RCC_OscConfig+0x63c>)
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	2202      	movs	r2, #2
 8005568:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800556c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005570:	fa92 f2a2 	rbit	r2, r2
 8005574:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8005578:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800557c:	fab2 f282 	clz	r2, r2
 8005580:	b2d2      	uxtb	r2, r2
 8005582:	f042 0220 	orr.w	r2, r2, #32
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	f002 021f 	and.w	r2, r2, #31
 800558c:	2101      	movs	r1, #1
 800558e:	fa01 f202 	lsl.w	r2, r1, r2
 8005592:	4013      	ands	r3, r2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0af      	beq.n	80054f8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005598:	4b5a      	ldr	r3, [pc, #360]	; (8005704 <HAL_RCC_OscConfig+0x63c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055a0:	1d3b      	adds	r3, r7, #4
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	21f8      	movs	r1, #248	; 0xf8
 80055a8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ac:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80055b0:	fa91 f1a1 	rbit	r1, r1
 80055b4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80055b8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80055bc:	fab1 f181 	clz	r1, r1
 80055c0:	b2c9      	uxtb	r1, r1
 80055c2:	408b      	lsls	r3, r1
 80055c4:	494f      	ldr	r1, [pc, #316]	; (8005704 <HAL_RCC_OscConfig+0x63c>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	600b      	str	r3, [r1, #0]
 80055ca:	e06a      	b.n	80056a2 <HAL_RCC_OscConfig+0x5da>
 80055cc:	2301      	movs	r3, #1
 80055ce:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80055d6:	fa93 f3a3 	rbit	r3, r3
 80055da:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80055de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055e2:	fab3 f383 	clz	r3, r3
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80055ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	461a      	mov	r2, r3
 80055f4:	2300      	movs	r3, #0
 80055f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f8:	f7fc ff68 	bl	80024cc <HAL_GetTick>
 80055fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005600:	e00a      	b.n	8005618 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005602:	f7fc ff63 	bl	80024cc <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d902      	bls.n	8005618 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	f000 bc66 	b.w	8005ee4 <HAL_RCC_OscConfig+0xe1c>
 8005618:	2302      	movs	r3, #2
 800561a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800561e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005622:	fa93 f3a3 	rbit	r3, r3
 8005626:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800562a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800562e:	fab3 f383 	clz	r3, r3
 8005632:	b2db      	uxtb	r3, r3
 8005634:	095b      	lsrs	r3, r3, #5
 8005636:	b2db      	uxtb	r3, r3
 8005638:	f043 0301 	orr.w	r3, r3, #1
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b01      	cmp	r3, #1
 8005640:	d102      	bne.n	8005648 <HAL_RCC_OscConfig+0x580>
 8005642:	4b30      	ldr	r3, [pc, #192]	; (8005704 <HAL_RCC_OscConfig+0x63c>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	e013      	b.n	8005670 <HAL_RCC_OscConfig+0x5a8>
 8005648:	2302      	movs	r3, #2
 800564a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800564e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005652:	fa93 f3a3 	rbit	r3, r3
 8005656:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800565a:	2302      	movs	r3, #2
 800565c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005660:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005664:	fa93 f3a3 	rbit	r3, r3
 8005668:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800566c:	4b25      	ldr	r3, [pc, #148]	; (8005704 <HAL_RCC_OscConfig+0x63c>)
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	2202      	movs	r2, #2
 8005672:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005676:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800567a:	fa92 f2a2 	rbit	r2, r2
 800567e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8005682:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005686:	fab2 f282 	clz	r2, r2
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	f042 0220 	orr.w	r2, r2, #32
 8005690:	b2d2      	uxtb	r2, r2
 8005692:	f002 021f 	and.w	r2, r2, #31
 8005696:	2101      	movs	r1, #1
 8005698:	fa01 f202 	lsl.w	r2, r1, r2
 800569c:	4013      	ands	r3, r2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1af      	bne.n	8005602 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056a2:	1d3b      	adds	r3, r7, #4
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 80da 	beq.w	8005866 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056b2:	1d3b      	adds	r3, r7, #4
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d069      	beq.n	8005790 <HAL_RCC_OscConfig+0x6c8>
 80056bc:	2301      	movs	r3, #1
 80056be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056c6:	fa93 f3a3 	rbit	r3, r3
 80056ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80056ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056d2:	fab3 f383 	clz	r3, r3
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	461a      	mov	r2, r3
 80056da:	4b0b      	ldr	r3, [pc, #44]	; (8005708 <HAL_RCC_OscConfig+0x640>)
 80056dc:	4413      	add	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	461a      	mov	r2, r3
 80056e2:	2301      	movs	r3, #1
 80056e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056e6:	f7fc fef1 	bl	80024cc <HAL_GetTick>
 80056ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056ee:	e00d      	b.n	800570c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056f0:	f7fc feec 	bl	80024cc <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d905      	bls.n	800570c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e3ef      	b.n	8005ee4 <HAL_RCC_OscConfig+0xe1c>
 8005704:	40021000 	.word	0x40021000
 8005708:	10908120 	.word	0x10908120
 800570c:	2302      	movs	r3, #2
 800570e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005716:	fa93 f2a3 	rbit	r2, r3
 800571a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005724:	2202      	movs	r2, #2
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	fa93 f2a3 	rbit	r2, r3
 8005732:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800573c:	2202      	movs	r2, #2
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	fa93 f2a3 	rbit	r2, r3
 800574a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800574e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005750:	4ba4      	ldr	r3, [pc, #656]	; (80059e4 <HAL_RCC_OscConfig+0x91c>)
 8005752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005754:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005758:	2102      	movs	r1, #2
 800575a:	6019      	str	r1, [r3, #0]
 800575c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	fa93 f1a3 	rbit	r1, r3
 8005766:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800576a:	6019      	str	r1, [r3, #0]
  return result;
 800576c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	fab3 f383 	clz	r3, r3
 8005776:	b2db      	uxtb	r3, r3
 8005778:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800577c:	b2db      	uxtb	r3, r3
 800577e:	f003 031f 	and.w	r3, r3, #31
 8005782:	2101      	movs	r1, #1
 8005784:	fa01 f303 	lsl.w	r3, r1, r3
 8005788:	4013      	ands	r3, r2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0b0      	beq.n	80056f0 <HAL_RCC_OscConfig+0x628>
 800578e:	e06a      	b.n	8005866 <HAL_RCC_OscConfig+0x79e>
 8005790:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005794:	2201      	movs	r2, #1
 8005796:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005798:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	fa93 f2a3 	rbit	r2, r3
 80057a2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80057a6:	601a      	str	r2, [r3, #0]
  return result;
 80057a8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80057ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057ae:	fab3 f383 	clz	r3, r3
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	461a      	mov	r2, r3
 80057b6:	4b8c      	ldr	r3, [pc, #560]	; (80059e8 <HAL_RCC_OscConfig+0x920>)
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	461a      	mov	r2, r3
 80057be:	2300      	movs	r3, #0
 80057c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057c2:	f7fc fe83 	bl	80024cc <HAL_GetTick>
 80057c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057ca:	e009      	b.n	80057e0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057cc:	f7fc fe7e 	bl	80024cc <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e381      	b.n	8005ee4 <HAL_RCC_OscConfig+0xe1c>
 80057e0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80057e4:	2202      	movs	r2, #2
 80057e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	fa93 f2a3 	rbit	r2, r3
 80057f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80057fc:	2202      	movs	r2, #2
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	fa93 f2a3 	rbit	r2, r3
 800580a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005814:	2202      	movs	r2, #2
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	fa93 f2a3 	rbit	r2, r3
 8005822:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005826:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005828:	4b6e      	ldr	r3, [pc, #440]	; (80059e4 <HAL_RCC_OscConfig+0x91c>)
 800582a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800582c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005830:	2102      	movs	r1, #2
 8005832:	6019      	str	r1, [r3, #0]
 8005834:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	fa93 f1a3 	rbit	r1, r3
 800583e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005842:	6019      	str	r1, [r3, #0]
  return result;
 8005844:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	fab3 f383 	clz	r3, r3
 800584e:	b2db      	uxtb	r3, r3
 8005850:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005854:	b2db      	uxtb	r3, r3
 8005856:	f003 031f 	and.w	r3, r3, #31
 800585a:	2101      	movs	r1, #1
 800585c:	fa01 f303 	lsl.w	r3, r1, r3
 8005860:	4013      	ands	r3, r2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1b2      	bne.n	80057cc <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005866:	1d3b      	adds	r3, r7, #4
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 8157 	beq.w	8005b24 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005876:	2300      	movs	r3, #0
 8005878:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800587c:	4b59      	ldr	r3, [pc, #356]	; (80059e4 <HAL_RCC_OscConfig+0x91c>)
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d112      	bne.n	80058ae <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005888:	4b56      	ldr	r3, [pc, #344]	; (80059e4 <HAL_RCC_OscConfig+0x91c>)
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	4a55      	ldr	r2, [pc, #340]	; (80059e4 <HAL_RCC_OscConfig+0x91c>)
 800588e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005892:	61d3      	str	r3, [r2, #28]
 8005894:	4b53      	ldr	r3, [pc, #332]	; (80059e4 <HAL_RCC_OscConfig+0x91c>)
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800589c:	f107 030c 	add.w	r3, r7, #12
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	f107 030c 	add.w	r3, r7, #12
 80058a6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80058a8:	2301      	movs	r3, #1
 80058aa:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ae:	4b4f      	ldr	r3, [pc, #316]	; (80059ec <HAL_RCC_OscConfig+0x924>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d11a      	bne.n	80058f0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058ba:	4b4c      	ldr	r3, [pc, #304]	; (80059ec <HAL_RCC_OscConfig+0x924>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a4b      	ldr	r2, [pc, #300]	; (80059ec <HAL_RCC_OscConfig+0x924>)
 80058c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058c6:	f7fc fe01 	bl	80024cc <HAL_GetTick>
 80058ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ce:	e009      	b.n	80058e4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058d0:	f7fc fdfc 	bl	80024cc <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b64      	cmp	r3, #100	; 0x64
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e2ff      	b.n	8005ee4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e4:	4b41      	ldr	r3, [pc, #260]	; (80059ec <HAL_RCC_OscConfig+0x924>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0ef      	beq.n	80058d0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058f0:	1d3b      	adds	r3, r7, #4
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d106      	bne.n	8005908 <HAL_RCC_OscConfig+0x840>
 80058fa:	4b3a      	ldr	r3, [pc, #232]	; (80059e4 <HAL_RCC_OscConfig+0x91c>)
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	4a39      	ldr	r2, [pc, #228]	; (80059e4 <HAL_RCC_OscConfig+0x91c>)
 8005900:	f043 0301 	orr.w	r3, r3, #1
 8005904:	6213      	str	r3, [r2, #32]
 8005906:	e02f      	b.n	8005968 <HAL_RCC_OscConfig+0x8a0>
 8005908:	1d3b      	adds	r3, r7, #4
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10c      	bne.n	800592c <HAL_RCC_OscConfig+0x864>
 8005912:	4b34      	ldr	r3, [pc, #208]	; (80059e4 <HAL_RCC_OscConfig+0x91c>)
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	4a33      	ldr	r2, [pc, #204]	; (80059e4 <HAL_RCC_OscConfig+0x91c>)
 8005918:	f023 0301 	bic.w	r3, r3, #1
 800591c:	6213      	str	r3, [r2, #32]
 800591e:	4b31      	ldr	r3, [pc, #196]	; (80059e4 <HAL_RCC_OscConfig+0x91c>)
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	4a30      	ldr	r2, [pc, #192]	; (80059e4 <HAL_RCC_OscConfig+0x91c>)
 8005924:	f023 0304 	bic.w	r3, r3, #4
 8005928:	6213      	str	r3, [r2, #32]
 800592a:	e01d      	b.n	8005968 <HAL_RCC_OscConfig+0x8a0>
 800592c:	1d3b      	adds	r3, r7, #4
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	2b05      	cmp	r3, #5
 8005934:	d10c      	bne.n	8005950 <HAL_RCC_OscConfig+0x888>
 8005936:	4b2b      	ldr	r3, [pc, #172]	; (80059e4 <HAL_RCC_OscConfig+0x91c>)
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	4a2a      	ldr	r2, [pc, #168]	; (80059e4 <HAL_RCC_OscConfig+0x91c>)
 800593c:	f043 0304 	orr.w	r3, r3, #4
 8005940:	6213      	str	r3, [r2, #32]
 8005942:	4b28      	ldr	r3, [pc, #160]	; (80059e4 <HAL_RCC_OscConfig+0x91c>)
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	4a27      	ldr	r2, [pc, #156]	; (80059e4 <HAL_RCC_OscConfig+0x91c>)
 8005948:	f043 0301 	orr.w	r3, r3, #1
 800594c:	6213      	str	r3, [r2, #32]
 800594e:	e00b      	b.n	8005968 <HAL_RCC_OscConfig+0x8a0>
 8005950:	4b24      	ldr	r3, [pc, #144]	; (80059e4 <HAL_RCC_OscConfig+0x91c>)
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	4a23      	ldr	r2, [pc, #140]	; (80059e4 <HAL_RCC_OscConfig+0x91c>)
 8005956:	f023 0301 	bic.w	r3, r3, #1
 800595a:	6213      	str	r3, [r2, #32]
 800595c:	4b21      	ldr	r3, [pc, #132]	; (80059e4 <HAL_RCC_OscConfig+0x91c>)
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	4a20      	ldr	r2, [pc, #128]	; (80059e4 <HAL_RCC_OscConfig+0x91c>)
 8005962:	f023 0304 	bic.w	r3, r3, #4
 8005966:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005968:	1d3b      	adds	r3, r7, #4
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d06a      	beq.n	8005a48 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005972:	f7fc fdab 	bl	80024cc <HAL_GetTick>
 8005976:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800597a:	e00b      	b.n	8005994 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800597c:	f7fc fda6 	bl	80024cc <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	f241 3288 	movw	r2, #5000	; 0x1388
 800598c:	4293      	cmp	r3, r2
 800598e:	d901      	bls.n	8005994 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e2a7      	b.n	8005ee4 <HAL_RCC_OscConfig+0xe1c>
 8005994:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005998:	2202      	movs	r2, #2
 800599a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800599c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	fa93 f2a3 	rbit	r2, r3
 80059a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80059b0:	2202      	movs	r2, #2
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	fa93 f2a3 	rbit	r2, r3
 80059be:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80059c2:	601a      	str	r2, [r3, #0]
  return result;
 80059c4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80059c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ca:	fab3 f383 	clz	r3, r3
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	095b      	lsrs	r3, r3, #5
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	f043 0302 	orr.w	r3, r3, #2
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d108      	bne.n	80059f0 <HAL_RCC_OscConfig+0x928>
 80059de:	4b01      	ldr	r3, [pc, #4]	; (80059e4 <HAL_RCC_OscConfig+0x91c>)
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	e013      	b.n	8005a0c <HAL_RCC_OscConfig+0x944>
 80059e4:	40021000 	.word	0x40021000
 80059e8:	10908120 	.word	0x10908120
 80059ec:	40007000 	.word	0x40007000
 80059f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80059f4:	2202      	movs	r2, #2
 80059f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	fa93 f2a3 	rbit	r2, r3
 8005a02:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	4bc0      	ldr	r3, [pc, #768]	; (8005d0c <HAL_RCC_OscConfig+0xc44>)
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005a10:	2102      	movs	r1, #2
 8005a12:	6011      	str	r1, [r2, #0]
 8005a14:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005a18:	6812      	ldr	r2, [r2, #0]
 8005a1a:	fa92 f1a2 	rbit	r1, r2
 8005a1e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005a22:	6011      	str	r1, [r2, #0]
  return result;
 8005a24:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005a28:	6812      	ldr	r2, [r2, #0]
 8005a2a:	fab2 f282 	clz	r2, r2
 8005a2e:	b2d2      	uxtb	r2, r2
 8005a30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	f002 021f 	and.w	r2, r2, #31
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a40:	4013      	ands	r3, r2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d09a      	beq.n	800597c <HAL_RCC_OscConfig+0x8b4>
 8005a46:	e063      	b.n	8005b10 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a48:	f7fc fd40 	bl	80024cc <HAL_GetTick>
 8005a4c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a50:	e00b      	b.n	8005a6a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a52:	f7fc fd3b 	bl	80024cc <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e23c      	b.n	8005ee4 <HAL_RCC_OscConfig+0xe1c>
 8005a6a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005a6e:	2202      	movs	r2, #2
 8005a70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a72:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	fa93 f2a3 	rbit	r2, r3
 8005a7c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005a86:	2202      	movs	r2, #2
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	fa93 f2a3 	rbit	r2, r3
 8005a94:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005a98:	601a      	str	r2, [r3, #0]
  return result;
 8005a9a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005a9e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aa0:	fab3 f383 	clz	r3, r3
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	095b      	lsrs	r3, r3, #5
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	f043 0302 	orr.w	r3, r3, #2
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d102      	bne.n	8005aba <HAL_RCC_OscConfig+0x9f2>
 8005ab4:	4b95      	ldr	r3, [pc, #596]	; (8005d0c <HAL_RCC_OscConfig+0xc44>)
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	e00d      	b.n	8005ad6 <HAL_RCC_OscConfig+0xa0e>
 8005aba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005abe:	2202      	movs	r2, #2
 8005ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	fa93 f2a3 	rbit	r2, r3
 8005acc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	4b8e      	ldr	r3, [pc, #568]	; (8005d0c <HAL_RCC_OscConfig+0xc44>)
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8005ada:	2102      	movs	r1, #2
 8005adc:	6011      	str	r1, [r2, #0]
 8005ade:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8005ae2:	6812      	ldr	r2, [r2, #0]
 8005ae4:	fa92 f1a2 	rbit	r1, r2
 8005ae8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005aec:	6011      	str	r1, [r2, #0]
  return result;
 8005aee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005af2:	6812      	ldr	r2, [r2, #0]
 8005af4:	fab2 f282 	clz	r2, r2
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	f002 021f 	and.w	r2, r2, #31
 8005b04:	2101      	movs	r1, #1
 8005b06:	fa01 f202 	lsl.w	r2, r1, r2
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1a0      	bne.n	8005a52 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005b10:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d105      	bne.n	8005b24 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b18:	4b7c      	ldr	r3, [pc, #496]	; (8005d0c <HAL_RCC_OscConfig+0xc44>)
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	4a7b      	ldr	r2, [pc, #492]	; (8005d0c <HAL_RCC_OscConfig+0xc44>)
 8005b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b22:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b24:	1d3b      	adds	r3, r7, #4
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 81d9 	beq.w	8005ee2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b30:	4b76      	ldr	r3, [pc, #472]	; (8005d0c <HAL_RCC_OscConfig+0xc44>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f003 030c 	and.w	r3, r3, #12
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	f000 81a6 	beq.w	8005e8a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b3e:	1d3b      	adds	r3, r7, #4
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	f040 811e 	bne.w	8005d86 <HAL_RCC_OscConfig+0xcbe>
 8005b4a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005b4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b54:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	fa93 f2a3 	rbit	r2, r3
 8005b5e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005b62:	601a      	str	r2, [r3, #0]
  return result;
 8005b64:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005b68:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b6a:	fab3 f383 	clz	r3, r3
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005b74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b80:	f7fc fca4 	bl	80024cc <HAL_GetTick>
 8005b84:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b88:	e009      	b.n	8005b9e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b8a:	f7fc fc9f 	bl	80024cc <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e1a2      	b.n	8005ee4 <HAL_RCC_OscConfig+0xe1c>
 8005b9e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005ba2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ba6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ba8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	fa93 f2a3 	rbit	r2, r3
 8005bb2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005bb6:	601a      	str	r2, [r3, #0]
  return result;
 8005bb8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005bbc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bbe:	fab3 f383 	clz	r3, r3
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	095b      	lsrs	r3, r3, #5
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	f043 0301 	orr.w	r3, r3, #1
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d102      	bne.n	8005bd8 <HAL_RCC_OscConfig+0xb10>
 8005bd2:	4b4e      	ldr	r3, [pc, #312]	; (8005d0c <HAL_RCC_OscConfig+0xc44>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	e01b      	b.n	8005c10 <HAL_RCC_OscConfig+0xb48>
 8005bd8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005bdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005be0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	fa93 f2a3 	rbit	r2, r3
 8005bec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005bf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	fa93 f2a3 	rbit	r2, r3
 8005c06:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	4b3f      	ldr	r3, [pc, #252]	; (8005d0c <HAL_RCC_OscConfig+0xc44>)
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005c14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005c18:	6011      	str	r1, [r2, #0]
 8005c1a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005c1e:	6812      	ldr	r2, [r2, #0]
 8005c20:	fa92 f1a2 	rbit	r1, r2
 8005c24:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005c28:	6011      	str	r1, [r2, #0]
  return result;
 8005c2a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005c2e:	6812      	ldr	r2, [r2, #0]
 8005c30:	fab2 f282 	clz	r2, r2
 8005c34:	b2d2      	uxtb	r2, r2
 8005c36:	f042 0220 	orr.w	r2, r2, #32
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	f002 021f 	and.w	r2, r2, #31
 8005c40:	2101      	movs	r1, #1
 8005c42:	fa01 f202 	lsl.w	r2, r1, r2
 8005c46:	4013      	ands	r3, r2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d19e      	bne.n	8005b8a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c4c:	4b2f      	ldr	r3, [pc, #188]	; (8005d0c <HAL_RCC_OscConfig+0xc44>)
 8005c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c50:	f023 020f 	bic.w	r2, r3, #15
 8005c54:	1d3b      	adds	r3, r7, #4
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	492c      	ldr	r1, [pc, #176]	; (8005d0c <HAL_RCC_OscConfig+0xc44>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005c60:	4b2a      	ldr	r3, [pc, #168]	; (8005d0c <HAL_RCC_OscConfig+0xc44>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8005c68:	1d3b      	adds	r3, r7, #4
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6a19      	ldr	r1, [r3, #32]
 8005c6e:	1d3b      	adds	r3, r7, #4
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	430b      	orrs	r3, r1
 8005c76:	4925      	ldr	r1, [pc, #148]	; (8005d0c <HAL_RCC_OscConfig+0xc44>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	604b      	str	r3, [r1, #4]
 8005c7c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005c80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c86:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	fa93 f2a3 	rbit	r2, r3
 8005c90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c94:	601a      	str	r2, [r3, #0]
  return result;
 8005c96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c9a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c9c:	fab3 f383 	clz	r3, r3
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005ca6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	461a      	mov	r2, r3
 8005cae:	2301      	movs	r3, #1
 8005cb0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb2:	f7fc fc0b 	bl	80024cc <HAL_GetTick>
 8005cb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005cba:	e009      	b.n	8005cd0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cbc:	f7fc fc06 	bl	80024cc <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d901      	bls.n	8005cd0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e109      	b.n	8005ee4 <HAL_RCC_OscConfig+0xe1c>
 8005cd0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005cd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	fa93 f2a3 	rbit	r2, r3
 8005ce4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005ce8:	601a      	str	r2, [r3, #0]
  return result;
 8005cea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005cee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005cf0:	fab3 f383 	clz	r3, r3
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	095b      	lsrs	r3, r3, #5
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	f043 0301 	orr.w	r3, r3, #1
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d105      	bne.n	8005d10 <HAL_RCC_OscConfig+0xc48>
 8005d04:	4b01      	ldr	r3, [pc, #4]	; (8005d0c <HAL_RCC_OscConfig+0xc44>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	e01e      	b.n	8005d48 <HAL_RCC_OscConfig+0xc80>
 8005d0a:	bf00      	nop
 8005d0c:	40021000 	.word	0x40021000
 8005d10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005d14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	fa93 f2a3 	rbit	r2, r3
 8005d24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005d2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	fa93 f2a3 	rbit	r2, r3
 8005d3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	4b6a      	ldr	r3, [pc, #424]	; (8005ef0 <HAL_RCC_OscConfig+0xe28>)
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005d4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005d50:	6011      	str	r1, [r2, #0]
 8005d52:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005d56:	6812      	ldr	r2, [r2, #0]
 8005d58:	fa92 f1a2 	rbit	r1, r2
 8005d5c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005d60:	6011      	str	r1, [r2, #0]
  return result;
 8005d62:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005d66:	6812      	ldr	r2, [r2, #0]
 8005d68:	fab2 f282 	clz	r2, r2
 8005d6c:	b2d2      	uxtb	r2, r2
 8005d6e:	f042 0220 	orr.w	r2, r2, #32
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	f002 021f 	and.w	r2, r2, #31
 8005d78:	2101      	movs	r1, #1
 8005d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8005d7e:	4013      	ands	r3, r2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d09b      	beq.n	8005cbc <HAL_RCC_OscConfig+0xbf4>
 8005d84:	e0ad      	b.n	8005ee2 <HAL_RCC_OscConfig+0xe1a>
 8005d86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005d8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	fa93 f2a3 	rbit	r2, r3
 8005d9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d9e:	601a      	str	r2, [r3, #0]
  return result;
 8005da0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005da4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005da6:	fab3 f383 	clz	r3, r3
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005db0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	461a      	mov	r2, r3
 8005db8:	2300      	movs	r3, #0
 8005dba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dbc:	f7fc fb86 	bl	80024cc <HAL_GetTick>
 8005dc0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005dc4:	e009      	b.n	8005dda <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dc6:	f7fc fb81 	bl	80024cc <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e084      	b.n	8005ee4 <HAL_RCC_OscConfig+0xe1c>
 8005dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005dde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005de2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	fa93 f2a3 	rbit	r2, r3
 8005dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005df2:	601a      	str	r2, [r3, #0]
  return result;
 8005df4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005df8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005dfa:	fab3 f383 	clz	r3, r3
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	095b      	lsrs	r3, r3, #5
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	f043 0301 	orr.w	r3, r3, #1
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d102      	bne.n	8005e14 <HAL_RCC_OscConfig+0xd4c>
 8005e0e:	4b38      	ldr	r3, [pc, #224]	; (8005ef0 <HAL_RCC_OscConfig+0xe28>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	e01b      	b.n	8005e4c <HAL_RCC_OscConfig+0xd84>
 8005e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	fa93 f2a3 	rbit	r2, r3
 8005e28:	f107 0320 	add.w	r3, r7, #32
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	f107 031c 	add.w	r3, r7, #28
 8005e32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	f107 031c 	add.w	r3, r7, #28
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	fa93 f2a3 	rbit	r2, r3
 8005e42:	f107 0318 	add.w	r3, r7, #24
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	4b29      	ldr	r3, [pc, #164]	; (8005ef0 <HAL_RCC_OscConfig+0xe28>)
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	f107 0214 	add.w	r2, r7, #20
 8005e50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005e54:	6011      	str	r1, [r2, #0]
 8005e56:	f107 0214 	add.w	r2, r7, #20
 8005e5a:	6812      	ldr	r2, [r2, #0]
 8005e5c:	fa92 f1a2 	rbit	r1, r2
 8005e60:	f107 0210 	add.w	r2, r7, #16
 8005e64:	6011      	str	r1, [r2, #0]
  return result;
 8005e66:	f107 0210 	add.w	r2, r7, #16
 8005e6a:	6812      	ldr	r2, [r2, #0]
 8005e6c:	fab2 f282 	clz	r2, r2
 8005e70:	b2d2      	uxtb	r2, r2
 8005e72:	f042 0220 	orr.w	r2, r2, #32
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	f002 021f 	and.w	r2, r2, #31
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8005e82:	4013      	ands	r3, r2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d19e      	bne.n	8005dc6 <HAL_RCC_OscConfig+0xcfe>
 8005e88:	e02b      	b.n	8005ee2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e8a:	1d3b      	adds	r3, r7, #4
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d101      	bne.n	8005e98 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e025      	b.n	8005ee4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005e98:	4b15      	ldr	r3, [pc, #84]	; (8005ef0 <HAL_RCC_OscConfig+0xe28>)
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005ea0:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <HAL_RCC_OscConfig+0xe28>)
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005ea8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005eac:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8005eb0:	1d3b      	adds	r3, r7, #4
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d111      	bne.n	8005ede <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005eba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005ebe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005ec2:	1d3b      	adds	r3, r7, #4
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d108      	bne.n	8005ede <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005ecc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ed0:	f003 020f 	and.w	r2, r3, #15
 8005ed4:	1d3b      	adds	r3, r7, #4
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d001      	beq.n	8005ee2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e000      	b.n	8005ee4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	40021000 	.word	0x40021000

08005ef4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b09e      	sub	sp, #120	; 0x78
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e162      	b.n	80061d2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f0c:	4b90      	ldr	r3, [pc, #576]	; (8006150 <HAL_RCC_ClockConfig+0x25c>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0307 	and.w	r3, r3, #7
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d910      	bls.n	8005f3c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f1a:	4b8d      	ldr	r3, [pc, #564]	; (8006150 <HAL_RCC_ClockConfig+0x25c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f023 0207 	bic.w	r2, r3, #7
 8005f22:	498b      	ldr	r1, [pc, #556]	; (8006150 <HAL_RCC_ClockConfig+0x25c>)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f2a:	4b89      	ldr	r3, [pc, #548]	; (8006150 <HAL_RCC_ClockConfig+0x25c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0307 	and.w	r3, r3, #7
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d001      	beq.n	8005f3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e14a      	b.n	80061d2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d008      	beq.n	8005f5a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f48:	4b82      	ldr	r3, [pc, #520]	; (8006154 <HAL_RCC_ClockConfig+0x260>)
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	497f      	ldr	r1, [pc, #508]	; (8006154 <HAL_RCC_ClockConfig+0x260>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 80dc 	beq.w	8006120 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d13c      	bne.n	8005fea <HAL_RCC_ClockConfig+0xf6>
 8005f70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f74:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f78:	fa93 f3a3 	rbit	r3, r3
 8005f7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f80:	fab3 f383 	clz	r3, r3
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	095b      	lsrs	r3, r3, #5
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	f043 0301 	orr.w	r3, r3, #1
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d102      	bne.n	8005f9a <HAL_RCC_ClockConfig+0xa6>
 8005f94:	4b6f      	ldr	r3, [pc, #444]	; (8006154 <HAL_RCC_ClockConfig+0x260>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	e00f      	b.n	8005fba <HAL_RCC_ClockConfig+0xc6>
 8005f9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fa2:	fa93 f3a3 	rbit	r3, r3
 8005fa6:	667b      	str	r3, [r7, #100]	; 0x64
 8005fa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005fac:	663b      	str	r3, [r7, #96]	; 0x60
 8005fae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fb0:	fa93 f3a3 	rbit	r3, r3
 8005fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fb6:	4b67      	ldr	r3, [pc, #412]	; (8006154 <HAL_RCC_ClockConfig+0x260>)
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005fbe:	65ba      	str	r2, [r7, #88]	; 0x58
 8005fc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fc2:	fa92 f2a2 	rbit	r2, r2
 8005fc6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005fc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005fca:	fab2 f282 	clz	r2, r2
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	f042 0220 	orr.w	r2, r2, #32
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	f002 021f 	and.w	r2, r2, #31
 8005fda:	2101      	movs	r1, #1
 8005fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d17b      	bne.n	80060de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e0f3      	b.n	80061d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d13c      	bne.n	800606c <HAL_RCC_ClockConfig+0x178>
 8005ff2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ff6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ffa:	fa93 f3a3 	rbit	r3, r3
 8005ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006002:	fab3 f383 	clz	r3, r3
 8006006:	b2db      	uxtb	r3, r3
 8006008:	095b      	lsrs	r3, r3, #5
 800600a:	b2db      	uxtb	r3, r3
 800600c:	f043 0301 	orr.w	r3, r3, #1
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b01      	cmp	r3, #1
 8006014:	d102      	bne.n	800601c <HAL_RCC_ClockConfig+0x128>
 8006016:	4b4f      	ldr	r3, [pc, #316]	; (8006154 <HAL_RCC_ClockConfig+0x260>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	e00f      	b.n	800603c <HAL_RCC_ClockConfig+0x148>
 800601c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006020:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006024:	fa93 f3a3 	rbit	r3, r3
 8006028:	647b      	str	r3, [r7, #68]	; 0x44
 800602a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800602e:	643b      	str	r3, [r7, #64]	; 0x40
 8006030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006032:	fa93 f3a3 	rbit	r3, r3
 8006036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006038:	4b46      	ldr	r3, [pc, #280]	; (8006154 <HAL_RCC_ClockConfig+0x260>)
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006040:	63ba      	str	r2, [r7, #56]	; 0x38
 8006042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006044:	fa92 f2a2 	rbit	r2, r2
 8006048:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800604a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800604c:	fab2 f282 	clz	r2, r2
 8006050:	b2d2      	uxtb	r2, r2
 8006052:	f042 0220 	orr.w	r2, r2, #32
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	f002 021f 	and.w	r2, r2, #31
 800605c:	2101      	movs	r1, #1
 800605e:	fa01 f202 	lsl.w	r2, r1, r2
 8006062:	4013      	ands	r3, r2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d13a      	bne.n	80060de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e0b2      	b.n	80061d2 <HAL_RCC_ClockConfig+0x2de>
 800606c:	2302      	movs	r3, #2
 800606e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006072:	fa93 f3a3 	rbit	r3, r3
 8006076:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800607a:	fab3 f383 	clz	r3, r3
 800607e:	b2db      	uxtb	r3, r3
 8006080:	095b      	lsrs	r3, r3, #5
 8006082:	b2db      	uxtb	r3, r3
 8006084:	f043 0301 	orr.w	r3, r3, #1
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b01      	cmp	r3, #1
 800608c:	d102      	bne.n	8006094 <HAL_RCC_ClockConfig+0x1a0>
 800608e:	4b31      	ldr	r3, [pc, #196]	; (8006154 <HAL_RCC_ClockConfig+0x260>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	e00d      	b.n	80060b0 <HAL_RCC_ClockConfig+0x1bc>
 8006094:	2302      	movs	r3, #2
 8006096:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	fa93 f3a3 	rbit	r3, r3
 800609e:	627b      	str	r3, [r7, #36]	; 0x24
 80060a0:	2302      	movs	r3, #2
 80060a2:	623b      	str	r3, [r7, #32]
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	fa93 f3a3 	rbit	r3, r3
 80060aa:	61fb      	str	r3, [r7, #28]
 80060ac:	4b29      	ldr	r3, [pc, #164]	; (8006154 <HAL_RCC_ClockConfig+0x260>)
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	2202      	movs	r2, #2
 80060b2:	61ba      	str	r2, [r7, #24]
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	fa92 f2a2 	rbit	r2, r2
 80060ba:	617a      	str	r2, [r7, #20]
  return result;
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	fab2 f282 	clz	r2, r2
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	f042 0220 	orr.w	r2, r2, #32
 80060c8:	b2d2      	uxtb	r2, r2
 80060ca:	f002 021f 	and.w	r2, r2, #31
 80060ce:	2101      	movs	r1, #1
 80060d0:	fa01 f202 	lsl.w	r2, r1, r2
 80060d4:	4013      	ands	r3, r2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e079      	b.n	80061d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060de:	4b1d      	ldr	r3, [pc, #116]	; (8006154 <HAL_RCC_ClockConfig+0x260>)
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f023 0203 	bic.w	r2, r3, #3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	491a      	ldr	r1, [pc, #104]	; (8006154 <HAL_RCC_ClockConfig+0x260>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060f0:	f7fc f9ec 	bl	80024cc <HAL_GetTick>
 80060f4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060f6:	e00a      	b.n	800610e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060f8:	f7fc f9e8 	bl	80024cc <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	f241 3288 	movw	r2, #5000	; 0x1388
 8006106:	4293      	cmp	r3, r2
 8006108:	d901      	bls.n	800610e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e061      	b.n	80061d2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800610e:	4b11      	ldr	r3, [pc, #68]	; (8006154 <HAL_RCC_ClockConfig+0x260>)
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f003 020c 	and.w	r2, r3, #12
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	429a      	cmp	r2, r3
 800611e:	d1eb      	bne.n	80060f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006120:	4b0b      	ldr	r3, [pc, #44]	; (8006150 <HAL_RCC_ClockConfig+0x25c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0307 	and.w	r3, r3, #7
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	429a      	cmp	r2, r3
 800612c:	d214      	bcs.n	8006158 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800612e:	4b08      	ldr	r3, [pc, #32]	; (8006150 <HAL_RCC_ClockConfig+0x25c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f023 0207 	bic.w	r2, r3, #7
 8006136:	4906      	ldr	r1, [pc, #24]	; (8006150 <HAL_RCC_ClockConfig+0x25c>)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	4313      	orrs	r3, r2
 800613c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800613e:	4b04      	ldr	r3, [pc, #16]	; (8006150 <HAL_RCC_ClockConfig+0x25c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0307 	and.w	r3, r3, #7
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	429a      	cmp	r2, r3
 800614a:	d005      	beq.n	8006158 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e040      	b.n	80061d2 <HAL_RCC_ClockConfig+0x2de>
 8006150:	40022000 	.word	0x40022000
 8006154:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	d008      	beq.n	8006176 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006164:	4b1d      	ldr	r3, [pc, #116]	; (80061dc <HAL_RCC_ClockConfig+0x2e8>)
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	491a      	ldr	r1, [pc, #104]	; (80061dc <HAL_RCC_ClockConfig+0x2e8>)
 8006172:	4313      	orrs	r3, r2
 8006174:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0308 	and.w	r3, r3, #8
 800617e:	2b00      	cmp	r3, #0
 8006180:	d009      	beq.n	8006196 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006182:	4b16      	ldr	r3, [pc, #88]	; (80061dc <HAL_RCC_ClockConfig+0x2e8>)
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	00db      	lsls	r3, r3, #3
 8006190:	4912      	ldr	r1, [pc, #72]	; (80061dc <HAL_RCC_ClockConfig+0x2e8>)
 8006192:	4313      	orrs	r3, r2
 8006194:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006196:	f000 f829 	bl	80061ec <HAL_RCC_GetSysClockFreq>
 800619a:	4601      	mov	r1, r0
 800619c:	4b0f      	ldr	r3, [pc, #60]	; (80061dc <HAL_RCC_ClockConfig+0x2e8>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061a4:	22f0      	movs	r2, #240	; 0xf0
 80061a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	fa92 f2a2 	rbit	r2, r2
 80061ae:	60fa      	str	r2, [r7, #12]
  return result;
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	fab2 f282 	clz	r2, r2
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	40d3      	lsrs	r3, r2
 80061ba:	4a09      	ldr	r2, [pc, #36]	; (80061e0 <HAL_RCC_ClockConfig+0x2ec>)
 80061bc:	5cd3      	ldrb	r3, [r2, r3]
 80061be:	fa21 f303 	lsr.w	r3, r1, r3
 80061c2:	4a08      	ldr	r2, [pc, #32]	; (80061e4 <HAL_RCC_ClockConfig+0x2f0>)
 80061c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80061c6:	4b08      	ldr	r3, [pc, #32]	; (80061e8 <HAL_RCC_ClockConfig+0x2f4>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fc f93a 	bl	8002444 <HAL_InitTick>
  
  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3778      	adds	r7, #120	; 0x78
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	40021000 	.word	0x40021000
 80061e0:	08009c0c 	.word	0x08009c0c
 80061e4:	20000a18 	.word	0x20000a18
 80061e8:	20000a1c 	.word	0x20000a1c

080061ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b08b      	sub	sp, #44	; 0x2c
 80061f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	61fb      	str	r3, [r7, #28]
 80061f6:	2300      	movs	r3, #0
 80061f8:	61bb      	str	r3, [r7, #24]
 80061fa:	2300      	movs	r3, #0
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
 80061fe:	2300      	movs	r3, #0
 8006200:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006202:	2300      	movs	r3, #0
 8006204:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006206:	4b2a      	ldr	r3, [pc, #168]	; (80062b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	f003 030c 	and.w	r3, r3, #12
 8006212:	2b04      	cmp	r3, #4
 8006214:	d002      	beq.n	800621c <HAL_RCC_GetSysClockFreq+0x30>
 8006216:	2b08      	cmp	r3, #8
 8006218:	d003      	beq.n	8006222 <HAL_RCC_GetSysClockFreq+0x36>
 800621a:	e03f      	b.n	800629c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800621c:	4b25      	ldr	r3, [pc, #148]	; (80062b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800621e:	623b      	str	r3, [r7, #32]
      break;
 8006220:	e03f      	b.n	80062a2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006228:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800622c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	fa92 f2a2 	rbit	r2, r2
 8006234:	607a      	str	r2, [r7, #4]
  return result;
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	fab2 f282 	clz	r2, r2
 800623c:	b2d2      	uxtb	r2, r2
 800623e:	40d3      	lsrs	r3, r2
 8006240:	4a1d      	ldr	r2, [pc, #116]	; (80062b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006242:	5cd3      	ldrb	r3, [r2, r3]
 8006244:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006246:	4b1a      	ldr	r3, [pc, #104]	; (80062b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	220f      	movs	r2, #15
 8006250:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	fa92 f2a2 	rbit	r2, r2
 8006258:	60fa      	str	r2, [r7, #12]
  return result;
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	fab2 f282 	clz	r2, r2
 8006260:	b2d2      	uxtb	r2, r2
 8006262:	40d3      	lsrs	r3, r2
 8006264:	4a15      	ldr	r2, [pc, #84]	; (80062bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006266:	5cd3      	ldrb	r3, [r2, r3]
 8006268:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d008      	beq.n	8006286 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006274:	4a0f      	ldr	r2, [pc, #60]	; (80062b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	fbb2 f2f3 	udiv	r2, r2, r3
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	fb02 f303 	mul.w	r3, r2, r3
 8006282:	627b      	str	r3, [r7, #36]	; 0x24
 8006284:	e007      	b.n	8006296 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006286:	4a0b      	ldr	r2, [pc, #44]	; (80062b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	fbb2 f2f3 	udiv	r2, r2, r3
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	fb02 f303 	mul.w	r3, r2, r3
 8006294:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	623b      	str	r3, [r7, #32]
      break;
 800629a:	e002      	b.n	80062a2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800629c:	4b05      	ldr	r3, [pc, #20]	; (80062b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800629e:	623b      	str	r3, [r7, #32]
      break;
 80062a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062a2:	6a3b      	ldr	r3, [r7, #32]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	372c      	adds	r7, #44	; 0x2c
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	40021000 	.word	0x40021000
 80062b4:	007a1200 	.word	0x007a1200
 80062b8:	08009c24 	.word	0x08009c24
 80062bc:	08009c34 	.word	0x08009c34

080062c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062c0:	b480      	push	{r7}
 80062c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062c4:	4b03      	ldr	r3, [pc, #12]	; (80062d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80062c6:	681b      	ldr	r3, [r3, #0]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	20000a18 	.word	0x20000a18

080062d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80062de:	f7ff ffef 	bl	80062c0 <HAL_RCC_GetHCLKFreq>
 80062e2:	4601      	mov	r1, r0
 80062e4:	4b0b      	ldr	r3, [pc, #44]	; (8006314 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062ec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80062f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	fa92 f2a2 	rbit	r2, r2
 80062f8:	603a      	str	r2, [r7, #0]
  return result;
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	fab2 f282 	clz	r2, r2
 8006300:	b2d2      	uxtb	r2, r2
 8006302:	40d3      	lsrs	r3, r2
 8006304:	4a04      	ldr	r2, [pc, #16]	; (8006318 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006306:	5cd3      	ldrb	r3, [r2, r3]
 8006308:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800630c:	4618      	mov	r0, r3
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	40021000 	.word	0x40021000
 8006318:	08009c1c 	.word	0x08009c1c

0800631c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006322:	f7ff ffcd 	bl	80062c0 <HAL_RCC_GetHCLKFreq>
 8006326:	4601      	mov	r1, r0
 8006328:	4b0b      	ldr	r3, [pc, #44]	; (8006358 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006330:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006334:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	fa92 f2a2 	rbit	r2, r2
 800633c:	603a      	str	r2, [r7, #0]
  return result;
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	fab2 f282 	clz	r2, r2
 8006344:	b2d2      	uxtb	r2, r2
 8006346:	40d3      	lsrs	r3, r2
 8006348:	4a04      	ldr	r2, [pc, #16]	; (800635c <HAL_RCC_GetPCLK2Freq+0x40>)
 800634a:	5cd3      	ldrb	r3, [r2, r3]
 800634c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006350:	4618      	mov	r0, r3
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	40021000 	.word	0x40021000
 800635c:	08009c1c 	.word	0x08009c1c

08006360 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b092      	sub	sp, #72	; 0x48
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800636c:	2300      	movs	r3, #0
 800636e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006370:	2300      	movs	r3, #0
 8006372:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 80d4 	beq.w	800652c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006384:	4b4e      	ldr	r3, [pc, #312]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10e      	bne.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006390:	4b4b      	ldr	r3, [pc, #300]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	4a4a      	ldr	r2, [pc, #296]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800639a:	61d3      	str	r3, [r2, #28]
 800639c:	4b48      	ldr	r3, [pc, #288]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063a4:	60bb      	str	r3, [r7, #8]
 80063a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063a8:	2301      	movs	r3, #1
 80063aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ae:	4b45      	ldr	r3, [pc, #276]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d118      	bne.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063ba:	4b42      	ldr	r3, [pc, #264]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a41      	ldr	r2, [pc, #260]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80063c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063c6:	f7fc f881 	bl	80024cc <HAL_GetTick>
 80063ca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063cc:	e008      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ce:	f7fc f87d 	bl	80024cc <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	2b64      	cmp	r3, #100	; 0x64
 80063da:	d901      	bls.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e1d6      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063e0:	4b38      	ldr	r3, [pc, #224]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d0f0      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80063ec:	4b34      	ldr	r3, [pc, #208]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80063f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 8084 	beq.w	8006506 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006406:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006408:	429a      	cmp	r2, r3
 800640a:	d07c      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800640c:	4b2c      	ldr	r3, [pc, #176]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006416:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800641a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800641c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641e:	fa93 f3a3 	rbit	r3, r3
 8006422:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006426:	fab3 f383 	clz	r3, r3
 800642a:	b2db      	uxtb	r3, r3
 800642c:	461a      	mov	r2, r3
 800642e:	4b26      	ldr	r3, [pc, #152]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006430:	4413      	add	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	461a      	mov	r2, r3
 8006436:	2301      	movs	r3, #1
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800643e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006442:	fa93 f3a3 	rbit	r3, r3
 8006446:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800644a:	fab3 f383 	clz	r3, r3
 800644e:	b2db      	uxtb	r3, r3
 8006450:	461a      	mov	r2, r3
 8006452:	4b1d      	ldr	r3, [pc, #116]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006454:	4413      	add	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	461a      	mov	r2, r3
 800645a:	2300      	movs	r3, #0
 800645c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800645e:	4a18      	ldr	r2, [pc, #96]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006462:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d04b      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800646e:	f7fc f82d 	bl	80024cc <HAL_GetTick>
 8006472:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006474:	e00a      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006476:	f7fc f829 	bl	80024cc <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	f241 3288 	movw	r2, #5000	; 0x1388
 8006484:	4293      	cmp	r3, r2
 8006486:	d901      	bls.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e180      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800648c:	2302      	movs	r3, #2
 800648e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006492:	fa93 f3a3 	rbit	r3, r3
 8006496:	627b      	str	r3, [r7, #36]	; 0x24
 8006498:	2302      	movs	r3, #2
 800649a:	623b      	str	r3, [r7, #32]
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	fa93 f3a3 	rbit	r3, r3
 80064a2:	61fb      	str	r3, [r7, #28]
  return result;
 80064a4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064a6:	fab3 f383 	clz	r3, r3
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	095b      	lsrs	r3, r3, #5
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	f043 0302 	orr.w	r3, r3, #2
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d108      	bne.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80064ba:	4b01      	ldr	r3, [pc, #4]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	e00d      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80064c0:	40021000 	.word	0x40021000
 80064c4:	40007000 	.word	0x40007000
 80064c8:	10908100 	.word	0x10908100
 80064cc:	2302      	movs	r3, #2
 80064ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	fa93 f3a3 	rbit	r3, r3
 80064d6:	617b      	str	r3, [r7, #20]
 80064d8:	4ba0      	ldr	r3, [pc, #640]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	2202      	movs	r2, #2
 80064de:	613a      	str	r2, [r7, #16]
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	fa92 f2a2 	rbit	r2, r2
 80064e6:	60fa      	str	r2, [r7, #12]
  return result;
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	fab2 f282 	clz	r2, r2
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064f4:	b2d2      	uxtb	r2, r2
 80064f6:	f002 021f 	and.w	r2, r2, #31
 80064fa:	2101      	movs	r1, #1
 80064fc:	fa01 f202 	lsl.w	r2, r1, r2
 8006500:	4013      	ands	r3, r2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0b7      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006506:	4b95      	ldr	r3, [pc, #596]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	4992      	ldr	r1, [pc, #584]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006514:	4313      	orrs	r3, r2
 8006516:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006518:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800651c:	2b01      	cmp	r3, #1
 800651e:	d105      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006520:	4b8e      	ldr	r3, [pc, #568]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	4a8d      	ldr	r2, [pc, #564]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006526:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800652a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d008      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006538:	4b88      	ldr	r3, [pc, #544]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653c:	f023 0203 	bic.w	r2, r3, #3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	4985      	ldr	r1, [pc, #532]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006546:	4313      	orrs	r3, r2
 8006548:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d008      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006556:	4b81      	ldr	r3, [pc, #516]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	497e      	ldr	r1, [pc, #504]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006564:	4313      	orrs	r3, r2
 8006566:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0304 	and.w	r3, r3, #4
 8006570:	2b00      	cmp	r3, #0
 8006572:	d008      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006574:	4b79      	ldr	r3, [pc, #484]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006578:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	4976      	ldr	r1, [pc, #472]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006582:	4313      	orrs	r3, r2
 8006584:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0320 	and.w	r3, r3, #32
 800658e:	2b00      	cmp	r3, #0
 8006590:	d008      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006592:	4b72      	ldr	r3, [pc, #456]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006596:	f023 0210 	bic.w	r2, r3, #16
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	496f      	ldr	r1, [pc, #444]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d008      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80065b0:	4b6a      	ldr	r3, [pc, #424]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065bc:	4967      	ldr	r1, [pc, #412]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d008      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80065ce:	4b63      	ldr	r3, [pc, #396]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80065d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d2:	f023 0220 	bic.w	r2, r3, #32
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	4960      	ldr	r1, [pc, #384]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d008      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065ec:	4b5b      	ldr	r3, [pc, #364]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80065ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	4958      	ldr	r1, [pc, #352]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0308 	and.w	r3, r3, #8
 8006606:	2b00      	cmp	r3, #0
 8006608:	d008      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800660a:	4b54      	ldr	r3, [pc, #336]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800660c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	4951      	ldr	r1, [pc, #324]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006618:	4313      	orrs	r3, r2
 800661a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0310 	and.w	r3, r3, #16
 8006624:	2b00      	cmp	r3, #0
 8006626:	d008      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006628:	4b4c      	ldr	r3, [pc, #304]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800662a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	4949      	ldr	r1, [pc, #292]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006636:	4313      	orrs	r3, r2
 8006638:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006642:	2b00      	cmp	r3, #0
 8006644:	d008      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006646:	4b45      	ldr	r3, [pc, #276]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	4942      	ldr	r1, [pc, #264]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006654:	4313      	orrs	r3, r2
 8006656:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006660:	2b00      	cmp	r3, #0
 8006662:	d008      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006664:	4b3d      	ldr	r3, [pc, #244]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006668:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006670:	493a      	ldr	r1, [pc, #232]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006672:	4313      	orrs	r3, r2
 8006674:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800667e:	2b00      	cmp	r3, #0
 8006680:	d008      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006682:	4b36      	ldr	r3, [pc, #216]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006686:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668e:	4933      	ldr	r1, [pc, #204]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006690:	4313      	orrs	r3, r2
 8006692:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d008      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80066a0:	4b2e      	ldr	r3, [pc, #184]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80066a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ac:	492b      	ldr	r1, [pc, #172]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d008      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80066be:	4b27      	ldr	r3, [pc, #156]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80066c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	4924      	ldr	r1, [pc, #144]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d008      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80066dc:	4b1f      	ldr	r3, [pc, #124]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80066de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e8:	491c      	ldr	r1, [pc, #112]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d008      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80066fa:	4b18      	ldr	r3, [pc, #96]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80066fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006706:	4915      	ldr	r1, [pc, #84]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006708:	4313      	orrs	r3, r2
 800670a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d008      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006718:	4b10      	ldr	r3, [pc, #64]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800671a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006724:	490d      	ldr	r1, [pc, #52]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006726:	4313      	orrs	r3, r2
 8006728:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d008      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8006736:	4b09      	ldr	r3, [pc, #36]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006742:	4906      	ldr	r1, [pc, #24]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006744:	4313      	orrs	r3, r2
 8006746:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00c      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006754:	4b01      	ldr	r3, [pc, #4]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006758:	e002      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800675a:	bf00      	nop
 800675c:	40021000 	.word	0x40021000
 8006760:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006768:	490b      	ldr	r1, [pc, #44]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800676a:	4313      	orrs	r3, r2
 800676c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d008      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800677a:	4b07      	ldr	r3, [pc, #28]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800677c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006786:	4904      	ldr	r1, [pc, #16]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006788:	4313      	orrs	r3, r2
 800678a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3748      	adds	r7, #72	; 0x48
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	40021000 	.word	0x40021000

0800679c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e049      	b.n	8006842 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d106      	bne.n	80067c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7fb fcd4 	bl	8002170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	3304      	adds	r3, #4
 80067d8:	4619      	mov	r1, r3
 80067da:	4610      	mov	r0, r2
 80067dc:	f000 faa8 	bl	8006d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b01      	cmp	r3, #1
 800685e:	d001      	beq.n	8006864 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e047      	b.n	80068f4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a23      	ldr	r2, [pc, #140]	; (8006900 <HAL_TIM_Base_Start+0xb4>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d01d      	beq.n	80068b2 <HAL_TIM_Base_Start+0x66>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800687e:	d018      	beq.n	80068b2 <HAL_TIM_Base_Start+0x66>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a1f      	ldr	r2, [pc, #124]	; (8006904 <HAL_TIM_Base_Start+0xb8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d013      	beq.n	80068b2 <HAL_TIM_Base_Start+0x66>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a1e      	ldr	r2, [pc, #120]	; (8006908 <HAL_TIM_Base_Start+0xbc>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d00e      	beq.n	80068b2 <HAL_TIM_Base_Start+0x66>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a1c      	ldr	r2, [pc, #112]	; (800690c <HAL_TIM_Base_Start+0xc0>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d009      	beq.n	80068b2 <HAL_TIM_Base_Start+0x66>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a1b      	ldr	r2, [pc, #108]	; (8006910 <HAL_TIM_Base_Start+0xc4>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d004      	beq.n	80068b2 <HAL_TIM_Base_Start+0x66>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a19      	ldr	r2, [pc, #100]	; (8006914 <HAL_TIM_Base_Start+0xc8>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d115      	bne.n	80068de <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	4b17      	ldr	r3, [pc, #92]	; (8006918 <HAL_TIM_Base_Start+0xcc>)
 80068ba:	4013      	ands	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b06      	cmp	r3, #6
 80068c2:	d015      	beq.n	80068f0 <HAL_TIM_Base_Start+0xa4>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ca:	d011      	beq.n	80068f0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f042 0201 	orr.w	r2, r2, #1
 80068da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068dc:	e008      	b.n	80068f0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f042 0201 	orr.w	r2, r2, #1
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	e000      	b.n	80068f2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	40012c00 	.word	0x40012c00
 8006904:	40000400 	.word	0x40000400
 8006908:	40000800 	.word	0x40000800
 800690c:	40013400 	.word	0x40013400
 8006910:	40014000 	.word	0x40014000
 8006914:	40015000 	.word	0x40015000
 8006918:	00010007 	.word	0x00010007

0800691c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b02      	cmp	r3, #2
 8006930:	d122      	bne.n	8006978 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b02      	cmp	r3, #2
 800693e:	d11b      	bne.n	8006978 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f06f 0202 	mvn.w	r2, #2
 8006948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	f003 0303 	and.w	r3, r3, #3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f9c8 	bl	8006cf4 <HAL_TIM_IC_CaptureCallback>
 8006964:	e005      	b.n	8006972 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f9ba 	bl	8006ce0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f9cb 	bl	8006d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	f003 0304 	and.w	r3, r3, #4
 8006982:	2b04      	cmp	r3, #4
 8006984:	d122      	bne.n	80069cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f003 0304 	and.w	r3, r3, #4
 8006990:	2b04      	cmp	r3, #4
 8006992:	d11b      	bne.n	80069cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f06f 0204 	mvn.w	r2, #4
 800699c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2202      	movs	r2, #2
 80069a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f99e 	bl	8006cf4 <HAL_TIM_IC_CaptureCallback>
 80069b8:	e005      	b.n	80069c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f990 	bl	8006ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f9a1 	bl	8006d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	f003 0308 	and.w	r3, r3, #8
 80069d6:	2b08      	cmp	r3, #8
 80069d8:	d122      	bne.n	8006a20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f003 0308 	and.w	r3, r3, #8
 80069e4:	2b08      	cmp	r3, #8
 80069e6:	d11b      	bne.n	8006a20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f06f 0208 	mvn.w	r2, #8
 80069f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2204      	movs	r2, #4
 80069f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	f003 0303 	and.w	r3, r3, #3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f974 	bl	8006cf4 <HAL_TIM_IC_CaptureCallback>
 8006a0c:	e005      	b.n	8006a1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f966 	bl	8006ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f977 	bl	8006d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	f003 0310 	and.w	r3, r3, #16
 8006a2a:	2b10      	cmp	r3, #16
 8006a2c:	d122      	bne.n	8006a74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	f003 0310 	and.w	r3, r3, #16
 8006a38:	2b10      	cmp	r3, #16
 8006a3a:	d11b      	bne.n	8006a74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f06f 0210 	mvn.w	r2, #16
 8006a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2208      	movs	r2, #8
 8006a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f94a 	bl	8006cf4 <HAL_TIM_IC_CaptureCallback>
 8006a60:	e005      	b.n	8006a6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f93c 	bl	8006ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f94d 	bl	8006d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d10e      	bne.n	8006aa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d107      	bne.n	8006aa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f06f 0201 	mvn.w	r2, #1
 8006a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f916 	bl	8006ccc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aaa:	2b80      	cmp	r3, #128	; 0x80
 8006aac:	d10e      	bne.n	8006acc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab8:	2b80      	cmp	r3, #128	; 0x80
 8006aba:	d107      	bne.n	8006acc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fb00 	bl	80070cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ada:	d10e      	bne.n	8006afa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae6:	2b80      	cmp	r3, #128	; 0x80
 8006ae8:	d107      	bne.n	8006afa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 faf3 	bl	80070e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b04:	2b40      	cmp	r3, #64	; 0x40
 8006b06:	d10e      	bne.n	8006b26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b12:	2b40      	cmp	r3, #64	; 0x40
 8006b14:	d107      	bne.n	8006b26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f8fb 	bl	8006d1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	f003 0320 	and.w	r3, r3, #32
 8006b30:	2b20      	cmp	r3, #32
 8006b32:	d10e      	bne.n	8006b52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	f003 0320 	and.w	r3, r3, #32
 8006b3e:	2b20      	cmp	r3, #32
 8006b40:	d107      	bne.n	8006b52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f06f 0220 	mvn.w	r2, #32
 8006b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fab3 	bl	80070b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b52:	bf00      	nop
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d101      	bne.n	8006b72 <HAL_TIM_ConfigClockSource+0x18>
 8006b6e:	2302      	movs	r3, #2
 8006b70:	e0a8      	b.n	8006cc4 <HAL_TIM_ConfigClockSource+0x16a>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2202      	movs	r2, #2
 8006b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b90:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b94:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b9c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b40      	cmp	r3, #64	; 0x40
 8006bac:	d067      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0x124>
 8006bae:	2b40      	cmp	r3, #64	; 0x40
 8006bb0:	d80b      	bhi.n	8006bca <HAL_TIM_ConfigClockSource+0x70>
 8006bb2:	2b10      	cmp	r3, #16
 8006bb4:	d073      	beq.n	8006c9e <HAL_TIM_ConfigClockSource+0x144>
 8006bb6:	2b10      	cmp	r3, #16
 8006bb8:	d802      	bhi.n	8006bc0 <HAL_TIM_ConfigClockSource+0x66>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d06f      	beq.n	8006c9e <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006bbe:	e078      	b.n	8006cb2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d06c      	beq.n	8006c9e <HAL_TIM_ConfigClockSource+0x144>
 8006bc4:	2b30      	cmp	r3, #48	; 0x30
 8006bc6:	d06a      	beq.n	8006c9e <HAL_TIM_ConfigClockSource+0x144>
      break;
 8006bc8:	e073      	b.n	8006cb2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006bca:	2b70      	cmp	r3, #112	; 0x70
 8006bcc:	d00d      	beq.n	8006bea <HAL_TIM_ConfigClockSource+0x90>
 8006bce:	2b70      	cmp	r3, #112	; 0x70
 8006bd0:	d804      	bhi.n	8006bdc <HAL_TIM_ConfigClockSource+0x82>
 8006bd2:	2b50      	cmp	r3, #80	; 0x50
 8006bd4:	d033      	beq.n	8006c3e <HAL_TIM_ConfigClockSource+0xe4>
 8006bd6:	2b60      	cmp	r3, #96	; 0x60
 8006bd8:	d041      	beq.n	8006c5e <HAL_TIM_ConfigClockSource+0x104>
      break;
 8006bda:	e06a      	b.n	8006cb2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be0:	d066      	beq.n	8006cb0 <HAL_TIM_ConfigClockSource+0x156>
 8006be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006be6:	d017      	beq.n	8006c18 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8006be8:	e063      	b.n	8006cb2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6818      	ldr	r0, [r3, #0]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	6899      	ldr	r1, [r3, #8]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	f000 f9b1 	bl	8006f60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	609a      	str	r2, [r3, #8]
      break;
 8006c16:	e04c      	b.n	8006cb2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6818      	ldr	r0, [r3, #0]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	6899      	ldr	r1, [r3, #8]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	f000 f99a 	bl	8006f60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689a      	ldr	r2, [r3, #8]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c3a:	609a      	str	r2, [r3, #8]
      break;
 8006c3c:	e039      	b.n	8006cb2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6818      	ldr	r0, [r3, #0]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	6859      	ldr	r1, [r3, #4]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	f000 f90e 	bl	8006e6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2150      	movs	r1, #80	; 0x50
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 f967 	bl	8006f2a <TIM_ITRx_SetConfig>
      break;
 8006c5c:	e029      	b.n	8006cb2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6818      	ldr	r0, [r3, #0]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	6859      	ldr	r1, [r3, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f000 f92d 	bl	8006eca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2160      	movs	r1, #96	; 0x60
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 f957 	bl	8006f2a <TIM_ITRx_SetConfig>
      break;
 8006c7c:	e019      	b.n	8006cb2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6818      	ldr	r0, [r3, #0]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	6859      	ldr	r1, [r3, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f000 f8ee 	bl	8006e6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2140      	movs	r1, #64	; 0x40
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 f947 	bl	8006f2a <TIM_ITRx_SetConfig>
      break;
 8006c9c:	e009      	b.n	8006cb2 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	4610      	mov	r0, r2
 8006caa:	f000 f93e 	bl	8006f2a <TIM_ITRx_SetConfig>
        break;
 8006cae:	e000      	b.n	8006cb2 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8006cb0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a42      	ldr	r2, [pc, #264]	; (8006e4c <TIM_Base_SetConfig+0x11c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d013      	beq.n	8006d70 <TIM_Base_SetConfig+0x40>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d4e:	d00f      	beq.n	8006d70 <TIM_Base_SetConfig+0x40>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a3f      	ldr	r2, [pc, #252]	; (8006e50 <TIM_Base_SetConfig+0x120>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d00b      	beq.n	8006d70 <TIM_Base_SetConfig+0x40>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a3e      	ldr	r2, [pc, #248]	; (8006e54 <TIM_Base_SetConfig+0x124>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d007      	beq.n	8006d70 <TIM_Base_SetConfig+0x40>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a3d      	ldr	r2, [pc, #244]	; (8006e58 <TIM_Base_SetConfig+0x128>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d003      	beq.n	8006d70 <TIM_Base_SetConfig+0x40>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a3c      	ldr	r2, [pc, #240]	; (8006e5c <TIM_Base_SetConfig+0x12c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d108      	bne.n	8006d82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a31      	ldr	r2, [pc, #196]	; (8006e4c <TIM_Base_SetConfig+0x11c>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d01f      	beq.n	8006dca <TIM_Base_SetConfig+0x9a>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d90:	d01b      	beq.n	8006dca <TIM_Base_SetConfig+0x9a>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a2e      	ldr	r2, [pc, #184]	; (8006e50 <TIM_Base_SetConfig+0x120>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d017      	beq.n	8006dca <TIM_Base_SetConfig+0x9a>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a2d      	ldr	r2, [pc, #180]	; (8006e54 <TIM_Base_SetConfig+0x124>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d013      	beq.n	8006dca <TIM_Base_SetConfig+0x9a>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a2c      	ldr	r2, [pc, #176]	; (8006e58 <TIM_Base_SetConfig+0x128>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d00f      	beq.n	8006dca <TIM_Base_SetConfig+0x9a>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a2c      	ldr	r2, [pc, #176]	; (8006e60 <TIM_Base_SetConfig+0x130>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d00b      	beq.n	8006dca <TIM_Base_SetConfig+0x9a>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a2b      	ldr	r2, [pc, #172]	; (8006e64 <TIM_Base_SetConfig+0x134>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d007      	beq.n	8006dca <TIM_Base_SetConfig+0x9a>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a2a      	ldr	r2, [pc, #168]	; (8006e68 <TIM_Base_SetConfig+0x138>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d003      	beq.n	8006dca <TIM_Base_SetConfig+0x9a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a25      	ldr	r2, [pc, #148]	; (8006e5c <TIM_Base_SetConfig+0x12c>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d108      	bne.n	8006ddc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a12      	ldr	r2, [pc, #72]	; (8006e4c <TIM_Base_SetConfig+0x11c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d013      	beq.n	8006e30 <TIM_Base_SetConfig+0x100>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a13      	ldr	r2, [pc, #76]	; (8006e58 <TIM_Base_SetConfig+0x128>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d00f      	beq.n	8006e30 <TIM_Base_SetConfig+0x100>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a13      	ldr	r2, [pc, #76]	; (8006e60 <TIM_Base_SetConfig+0x130>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d00b      	beq.n	8006e30 <TIM_Base_SetConfig+0x100>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a12      	ldr	r2, [pc, #72]	; (8006e64 <TIM_Base_SetConfig+0x134>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d007      	beq.n	8006e30 <TIM_Base_SetConfig+0x100>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a11      	ldr	r2, [pc, #68]	; (8006e68 <TIM_Base_SetConfig+0x138>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d003      	beq.n	8006e30 <TIM_Base_SetConfig+0x100>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a0c      	ldr	r2, [pc, #48]	; (8006e5c <TIM_Base_SetConfig+0x12c>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d103      	bne.n	8006e38 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	691a      	ldr	r2, [r3, #16]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	615a      	str	r2, [r3, #20]
}
 8006e3e:	bf00      	nop
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	40012c00 	.word	0x40012c00
 8006e50:	40000400 	.word	0x40000400
 8006e54:	40000800 	.word	0x40000800
 8006e58:	40013400 	.word	0x40013400
 8006e5c:	40015000 	.word	0x40015000
 8006e60:	40014000 	.word	0x40014000
 8006e64:	40014400 	.word	0x40014400
 8006e68:	40014800 	.word	0x40014800

08006e6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b087      	sub	sp, #28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	f023 0201 	bic.w	r2, r3, #1
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	011b      	lsls	r3, r3, #4
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f023 030a 	bic.w	r3, r3, #10
 8006ea8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	621a      	str	r2, [r3, #32]
}
 8006ebe:	bf00      	nop
 8006ec0:	371c      	adds	r7, #28
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b087      	sub	sp, #28
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	60b9      	str	r1, [r7, #8]
 8006ed4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	f023 0210 	bic.w	r2, r3, #16
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6a1b      	ldr	r3, [r3, #32]
 8006eec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ef4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	031b      	lsls	r3, r3, #12
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	011b      	lsls	r3, r3, #4
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	621a      	str	r2, [r3, #32]
}
 8006f1e:	bf00      	nop
 8006f20:	371c      	adds	r7, #28
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b085      	sub	sp, #20
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	f043 0307 	orr.w	r3, r3, #7
 8006f4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	609a      	str	r2, [r3, #8]
}
 8006f54:	bf00      	nop
 8006f56:	3714      	adds	r7, #20
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	021a      	lsls	r2, r3, #8
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	431a      	orrs	r2, r3
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	609a      	str	r2, [r3, #8]
}
 8006f94:	bf00      	nop
 8006f96:	371c      	adds	r7, #28
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d101      	bne.n	8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	e06d      	b.n	8007094 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a30      	ldr	r2, [pc, #192]	; (80070a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d009      	beq.n	8006ff6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a2f      	ldr	r2, [pc, #188]	; (80070a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d004      	beq.n	8006ff6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a2d      	ldr	r2, [pc, #180]	; (80070a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d108      	bne.n	8007008 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ffc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	4313      	orrs	r3, r2
 8007006:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800700e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	4313      	orrs	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a1e      	ldr	r2, [pc, #120]	; (80070a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d01d      	beq.n	8007068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007034:	d018      	beq.n	8007068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a1c      	ldr	r2, [pc, #112]	; (80070ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d013      	beq.n	8007068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a1a      	ldr	r2, [pc, #104]	; (80070b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d00e      	beq.n	8007068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a15      	ldr	r2, [pc, #84]	; (80070a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d009      	beq.n	8007068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a16      	ldr	r2, [pc, #88]	; (80070b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d004      	beq.n	8007068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a11      	ldr	r2, [pc, #68]	; (80070a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d10c      	bne.n	8007082 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800706e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	4313      	orrs	r3, r2
 8007078:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	40012c00 	.word	0x40012c00
 80070a4:	40013400 	.word	0x40013400
 80070a8:	40015000 	.word	0x40015000
 80070ac:	40000400 	.word	0x40000400
 80070b0:	40000800 	.word	0x40000800
 80070b4:	40014000 	.word	0x40014000

080070b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e040      	b.n	8007188 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800710a:	2b00      	cmp	r3, #0
 800710c:	d106      	bne.n	800711c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7fb f84e 	bl	80021b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2224      	movs	r2, #36	; 0x24
 8007120:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f022 0201 	bic.w	r2, r2, #1
 8007130:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f992 	bl	800745c <UART_SetConfig>
 8007138:	4603      	mov	r3, r0
 800713a:	2b01      	cmp	r3, #1
 800713c:	d101      	bne.n	8007142 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e022      	b.n	8007188 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	2b00      	cmp	r3, #0
 8007148:	d002      	beq.n	8007150 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fb5a 	bl	8007804 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800715e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689a      	ldr	r2, [r3, #8]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800716e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f042 0201 	orr.w	r2, r2, #1
 800717e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fbe1 	bl	8007948 <UART_CheckIdleState>
 8007186:	4603      	mov	r3, r0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b08a      	sub	sp, #40	; 0x28
 8007194:	af02      	add	r7, sp, #8
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	4613      	mov	r3, r2
 800719e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071a4:	2b20      	cmp	r3, #32
 80071a6:	f040 8082 	bne.w	80072ae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <HAL_UART_Transmit+0x26>
 80071b0:	88fb      	ldrh	r3, [r7, #6]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e07a      	b.n	80072b0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d101      	bne.n	80071c8 <HAL_UART_Transmit+0x38>
 80071c4:	2302      	movs	r3, #2
 80071c6:	e073      	b.n	80072b0 <HAL_UART_Transmit+0x120>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2221      	movs	r2, #33	; 0x21
 80071dc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071de:	f7fb f975 	bl	80024cc <HAL_GetTick>
 80071e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	88fa      	ldrh	r2, [r7, #6]
 80071e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	88fa      	ldrh	r2, [r7, #6]
 80071f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071fc:	d108      	bne.n	8007210 <HAL_UART_Transmit+0x80>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d104      	bne.n	8007210 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007206:	2300      	movs	r3, #0
 8007208:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	61bb      	str	r3, [r7, #24]
 800720e:	e003      	b.n	8007218 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007214:	2300      	movs	r3, #0
 8007216:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007220:	e02d      	b.n	800727e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2200      	movs	r2, #0
 800722a:	2180      	movs	r1, #128	; 0x80
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f000 fbd4 	bl	80079da <UART_WaitOnFlagUntilTimeout>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d001      	beq.n	800723c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e039      	b.n	80072b0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10b      	bne.n	800725a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	881a      	ldrh	r2, [r3, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800724e:	b292      	uxth	r2, r2
 8007250:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	3302      	adds	r3, #2
 8007256:	61bb      	str	r3, [r7, #24]
 8007258:	e008      	b.n	800726c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	781a      	ldrb	r2, [r3, #0]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	b292      	uxth	r2, r2
 8007264:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	3301      	adds	r3, #1
 800726a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007272:	b29b      	uxth	r3, r3
 8007274:	3b01      	subs	r3, #1
 8007276:	b29a      	uxth	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007284:	b29b      	uxth	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1cb      	bne.n	8007222 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2200      	movs	r2, #0
 8007292:	2140      	movs	r1, #64	; 0x40
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f000 fba0 	bl	80079da <UART_WaitOnFlagUntilTimeout>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d001      	beq.n	80072a4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e005      	b.n	80072b0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2220      	movs	r2, #32
 80072a8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	e000      	b.n	80072b0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80072ae:	2302      	movs	r3, #2
  }
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3720      	adds	r7, #32
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b08a      	sub	sp, #40	; 0x28
 80072bc:	af02      	add	r7, sp, #8
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	603b      	str	r3, [r7, #0]
 80072c4:	4613      	mov	r3, r2
 80072c6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072cc:	2b20      	cmp	r3, #32
 80072ce:	f040 80bf 	bne.w	8007450 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d002      	beq.n	80072de <HAL_UART_Receive+0x26>
 80072d8:	88fb      	ldrh	r3, [r7, #6]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d101      	bne.n	80072e2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e0b7      	b.n	8007452 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d101      	bne.n	80072f0 <HAL_UART_Receive+0x38>
 80072ec:	2302      	movs	r3, #2
 80072ee:	e0b0      	b.n	8007452 <HAL_UART_Receive+0x19a>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2222      	movs	r2, #34	; 0x22
 8007304:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800730c:	f7fb f8de 	bl	80024cc <HAL_GetTick>
 8007310:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	88fa      	ldrh	r2, [r7, #6]
 8007316:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	88fa      	ldrh	r2, [r7, #6]
 800731e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800732a:	d10e      	bne.n	800734a <HAL_UART_Receive+0x92>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d105      	bne.n	8007340 <HAL_UART_Receive+0x88>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f240 12ff 	movw	r2, #511	; 0x1ff
 800733a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800733e:	e02d      	b.n	800739c <HAL_UART_Receive+0xe4>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	22ff      	movs	r2, #255	; 0xff
 8007344:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007348:	e028      	b.n	800739c <HAL_UART_Receive+0xe4>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10d      	bne.n	800736e <HAL_UART_Receive+0xb6>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d104      	bne.n	8007364 <HAL_UART_Receive+0xac>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	22ff      	movs	r2, #255	; 0xff
 800735e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007362:	e01b      	b.n	800739c <HAL_UART_Receive+0xe4>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	227f      	movs	r2, #127	; 0x7f
 8007368:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800736c:	e016      	b.n	800739c <HAL_UART_Receive+0xe4>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007376:	d10d      	bne.n	8007394 <HAL_UART_Receive+0xdc>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d104      	bne.n	800738a <HAL_UART_Receive+0xd2>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	227f      	movs	r2, #127	; 0x7f
 8007384:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007388:	e008      	b.n	800739c <HAL_UART_Receive+0xe4>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	223f      	movs	r2, #63	; 0x3f
 800738e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007392:	e003      	b.n	800739c <HAL_UART_Receive+0xe4>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073a2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ac:	d108      	bne.n	80073c0 <HAL_UART_Receive+0x108>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d104      	bne.n	80073c0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	61bb      	str	r3, [r7, #24]
 80073be:	e003      	b.n	80073c8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073c4:	2300      	movs	r3, #0
 80073c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80073d0:	e033      	b.n	800743a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	2200      	movs	r2, #0
 80073da:	2120      	movs	r1, #32
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f000 fafc 	bl	80079da <UART_WaitOnFlagUntilTimeout>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e032      	b.n	8007452 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10c      	bne.n	800740c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	8a7b      	ldrh	r3, [r7, #18]
 80073fc:	4013      	ands	r3, r2
 80073fe:	b29a      	uxth	r2, r3
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	3302      	adds	r3, #2
 8007408:	61bb      	str	r3, [r7, #24]
 800740a:	e00d      	b.n	8007428 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007412:	b29b      	uxth	r3, r3
 8007414:	b2da      	uxtb	r2, r3
 8007416:	8a7b      	ldrh	r3, [r7, #18]
 8007418:	b2db      	uxtb	r3, r3
 800741a:	4013      	ands	r3, r2
 800741c:	b2da      	uxtb	r2, r3
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	3301      	adds	r3, #1
 8007426:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800742e:	b29b      	uxth	r3, r3
 8007430:	3b01      	subs	r3, #1
 8007432:	b29a      	uxth	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007440:	b29b      	uxth	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1c5      	bne.n	80073d2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2220      	movs	r2, #32
 800744a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800744c:	2300      	movs	r3, #0
 800744e:	e000      	b.n	8007452 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8007450:	2302      	movs	r3, #2
  }
}
 8007452:	4618      	mov	r0, r3
 8007454:	3720      	adds	r7, #32
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
	...

0800745c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b088      	sub	sp, #32
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007464:	2300      	movs	r3, #0
 8007466:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	431a      	orrs	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	431a      	orrs	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	4313      	orrs	r3, r2
 800747e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	4baa      	ldr	r3, [pc, #680]	; (8007730 <UART_SetConfig+0x2d4>)
 8007488:	4013      	ands	r3, r2
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	6812      	ldr	r2, [r2, #0]
 800748e:	6979      	ldr	r1, [r7, #20]
 8007490:	430b      	orrs	r3, r1
 8007492:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68da      	ldr	r2, [r3, #12]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a1b      	ldr	r3, [r3, #32]
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	430a      	orrs	r2, r1
 80074cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a98      	ldr	r2, [pc, #608]	; (8007734 <UART_SetConfig+0x2d8>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d121      	bne.n	800751c <UART_SetConfig+0xc0>
 80074d8:	4b97      	ldr	r3, [pc, #604]	; (8007738 <UART_SetConfig+0x2dc>)
 80074da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074dc:	f003 0303 	and.w	r3, r3, #3
 80074e0:	2b03      	cmp	r3, #3
 80074e2:	d817      	bhi.n	8007514 <UART_SetConfig+0xb8>
 80074e4:	a201      	add	r2, pc, #4	; (adr r2, 80074ec <UART_SetConfig+0x90>)
 80074e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ea:	bf00      	nop
 80074ec:	080074fd 	.word	0x080074fd
 80074f0:	08007509 	.word	0x08007509
 80074f4:	0800750f 	.word	0x0800750f
 80074f8:	08007503 	.word	0x08007503
 80074fc:	2301      	movs	r3, #1
 80074fe:	77fb      	strb	r3, [r7, #31]
 8007500:	e0b2      	b.n	8007668 <UART_SetConfig+0x20c>
 8007502:	2302      	movs	r3, #2
 8007504:	77fb      	strb	r3, [r7, #31]
 8007506:	e0af      	b.n	8007668 <UART_SetConfig+0x20c>
 8007508:	2304      	movs	r3, #4
 800750a:	77fb      	strb	r3, [r7, #31]
 800750c:	e0ac      	b.n	8007668 <UART_SetConfig+0x20c>
 800750e:	2308      	movs	r3, #8
 8007510:	77fb      	strb	r3, [r7, #31]
 8007512:	e0a9      	b.n	8007668 <UART_SetConfig+0x20c>
 8007514:	2310      	movs	r3, #16
 8007516:	77fb      	strb	r3, [r7, #31]
 8007518:	bf00      	nop
 800751a:	e0a5      	b.n	8007668 <UART_SetConfig+0x20c>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a86      	ldr	r2, [pc, #536]	; (800773c <UART_SetConfig+0x2e0>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d123      	bne.n	800756e <UART_SetConfig+0x112>
 8007526:	4b84      	ldr	r3, [pc, #528]	; (8007738 <UART_SetConfig+0x2dc>)
 8007528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800752e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007532:	d012      	beq.n	800755a <UART_SetConfig+0xfe>
 8007534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007538:	d802      	bhi.n	8007540 <UART_SetConfig+0xe4>
 800753a:	2b00      	cmp	r3, #0
 800753c:	d007      	beq.n	800754e <UART_SetConfig+0xf2>
 800753e:	e012      	b.n	8007566 <UART_SetConfig+0x10a>
 8007540:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007544:	d00c      	beq.n	8007560 <UART_SetConfig+0x104>
 8007546:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800754a:	d003      	beq.n	8007554 <UART_SetConfig+0xf8>
 800754c:	e00b      	b.n	8007566 <UART_SetConfig+0x10a>
 800754e:	2300      	movs	r3, #0
 8007550:	77fb      	strb	r3, [r7, #31]
 8007552:	e089      	b.n	8007668 <UART_SetConfig+0x20c>
 8007554:	2302      	movs	r3, #2
 8007556:	77fb      	strb	r3, [r7, #31]
 8007558:	e086      	b.n	8007668 <UART_SetConfig+0x20c>
 800755a:	2304      	movs	r3, #4
 800755c:	77fb      	strb	r3, [r7, #31]
 800755e:	e083      	b.n	8007668 <UART_SetConfig+0x20c>
 8007560:	2308      	movs	r3, #8
 8007562:	77fb      	strb	r3, [r7, #31]
 8007564:	e080      	b.n	8007668 <UART_SetConfig+0x20c>
 8007566:	2310      	movs	r3, #16
 8007568:	77fb      	strb	r3, [r7, #31]
 800756a:	bf00      	nop
 800756c:	e07c      	b.n	8007668 <UART_SetConfig+0x20c>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a73      	ldr	r2, [pc, #460]	; (8007740 <UART_SetConfig+0x2e4>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d123      	bne.n	80075c0 <UART_SetConfig+0x164>
 8007578:	4b6f      	ldr	r3, [pc, #444]	; (8007738 <UART_SetConfig+0x2dc>)
 800757a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007580:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007584:	d012      	beq.n	80075ac <UART_SetConfig+0x150>
 8007586:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800758a:	d802      	bhi.n	8007592 <UART_SetConfig+0x136>
 800758c:	2b00      	cmp	r3, #0
 800758e:	d007      	beq.n	80075a0 <UART_SetConfig+0x144>
 8007590:	e012      	b.n	80075b8 <UART_SetConfig+0x15c>
 8007592:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007596:	d00c      	beq.n	80075b2 <UART_SetConfig+0x156>
 8007598:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800759c:	d003      	beq.n	80075a6 <UART_SetConfig+0x14a>
 800759e:	e00b      	b.n	80075b8 <UART_SetConfig+0x15c>
 80075a0:	2300      	movs	r3, #0
 80075a2:	77fb      	strb	r3, [r7, #31]
 80075a4:	e060      	b.n	8007668 <UART_SetConfig+0x20c>
 80075a6:	2302      	movs	r3, #2
 80075a8:	77fb      	strb	r3, [r7, #31]
 80075aa:	e05d      	b.n	8007668 <UART_SetConfig+0x20c>
 80075ac:	2304      	movs	r3, #4
 80075ae:	77fb      	strb	r3, [r7, #31]
 80075b0:	e05a      	b.n	8007668 <UART_SetConfig+0x20c>
 80075b2:	2308      	movs	r3, #8
 80075b4:	77fb      	strb	r3, [r7, #31]
 80075b6:	e057      	b.n	8007668 <UART_SetConfig+0x20c>
 80075b8:	2310      	movs	r3, #16
 80075ba:	77fb      	strb	r3, [r7, #31]
 80075bc:	bf00      	nop
 80075be:	e053      	b.n	8007668 <UART_SetConfig+0x20c>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a5f      	ldr	r2, [pc, #380]	; (8007744 <UART_SetConfig+0x2e8>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d123      	bne.n	8007612 <UART_SetConfig+0x1b6>
 80075ca:	4b5b      	ldr	r3, [pc, #364]	; (8007738 <UART_SetConfig+0x2dc>)
 80075cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80075d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075d6:	d012      	beq.n	80075fe <UART_SetConfig+0x1a2>
 80075d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075dc:	d802      	bhi.n	80075e4 <UART_SetConfig+0x188>
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d007      	beq.n	80075f2 <UART_SetConfig+0x196>
 80075e2:	e012      	b.n	800760a <UART_SetConfig+0x1ae>
 80075e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075e8:	d00c      	beq.n	8007604 <UART_SetConfig+0x1a8>
 80075ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80075ee:	d003      	beq.n	80075f8 <UART_SetConfig+0x19c>
 80075f0:	e00b      	b.n	800760a <UART_SetConfig+0x1ae>
 80075f2:	2300      	movs	r3, #0
 80075f4:	77fb      	strb	r3, [r7, #31]
 80075f6:	e037      	b.n	8007668 <UART_SetConfig+0x20c>
 80075f8:	2302      	movs	r3, #2
 80075fa:	77fb      	strb	r3, [r7, #31]
 80075fc:	e034      	b.n	8007668 <UART_SetConfig+0x20c>
 80075fe:	2304      	movs	r3, #4
 8007600:	77fb      	strb	r3, [r7, #31]
 8007602:	e031      	b.n	8007668 <UART_SetConfig+0x20c>
 8007604:	2308      	movs	r3, #8
 8007606:	77fb      	strb	r3, [r7, #31]
 8007608:	e02e      	b.n	8007668 <UART_SetConfig+0x20c>
 800760a:	2310      	movs	r3, #16
 800760c:	77fb      	strb	r3, [r7, #31]
 800760e:	bf00      	nop
 8007610:	e02a      	b.n	8007668 <UART_SetConfig+0x20c>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a4c      	ldr	r2, [pc, #304]	; (8007748 <UART_SetConfig+0x2ec>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d123      	bne.n	8007664 <UART_SetConfig+0x208>
 800761c:	4b46      	ldr	r3, [pc, #280]	; (8007738 <UART_SetConfig+0x2dc>)
 800761e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007620:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007624:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007628:	d012      	beq.n	8007650 <UART_SetConfig+0x1f4>
 800762a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800762e:	d802      	bhi.n	8007636 <UART_SetConfig+0x1da>
 8007630:	2b00      	cmp	r3, #0
 8007632:	d007      	beq.n	8007644 <UART_SetConfig+0x1e8>
 8007634:	e012      	b.n	800765c <UART_SetConfig+0x200>
 8007636:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800763a:	d00c      	beq.n	8007656 <UART_SetConfig+0x1fa>
 800763c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007640:	d003      	beq.n	800764a <UART_SetConfig+0x1ee>
 8007642:	e00b      	b.n	800765c <UART_SetConfig+0x200>
 8007644:	2300      	movs	r3, #0
 8007646:	77fb      	strb	r3, [r7, #31]
 8007648:	e00e      	b.n	8007668 <UART_SetConfig+0x20c>
 800764a:	2302      	movs	r3, #2
 800764c:	77fb      	strb	r3, [r7, #31]
 800764e:	e00b      	b.n	8007668 <UART_SetConfig+0x20c>
 8007650:	2304      	movs	r3, #4
 8007652:	77fb      	strb	r3, [r7, #31]
 8007654:	e008      	b.n	8007668 <UART_SetConfig+0x20c>
 8007656:	2308      	movs	r3, #8
 8007658:	77fb      	strb	r3, [r7, #31]
 800765a:	e005      	b.n	8007668 <UART_SetConfig+0x20c>
 800765c:	2310      	movs	r3, #16
 800765e:	77fb      	strb	r3, [r7, #31]
 8007660:	bf00      	nop
 8007662:	e001      	b.n	8007668 <UART_SetConfig+0x20c>
 8007664:	2310      	movs	r3, #16
 8007666:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	69db      	ldr	r3, [r3, #28]
 800766c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007670:	d16e      	bne.n	8007750 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8007672:	7ffb      	ldrb	r3, [r7, #31]
 8007674:	2b08      	cmp	r3, #8
 8007676:	d828      	bhi.n	80076ca <UART_SetConfig+0x26e>
 8007678:	a201      	add	r2, pc, #4	; (adr r2, 8007680 <UART_SetConfig+0x224>)
 800767a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767e:	bf00      	nop
 8007680:	080076a5 	.word	0x080076a5
 8007684:	080076ad 	.word	0x080076ad
 8007688:	080076b5 	.word	0x080076b5
 800768c:	080076cb 	.word	0x080076cb
 8007690:	080076bb 	.word	0x080076bb
 8007694:	080076cb 	.word	0x080076cb
 8007698:	080076cb 	.word	0x080076cb
 800769c:	080076cb 	.word	0x080076cb
 80076a0:	080076c3 	.word	0x080076c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076a4:	f7fe fe18 	bl	80062d8 <HAL_RCC_GetPCLK1Freq>
 80076a8:	61b8      	str	r0, [r7, #24]
        break;
 80076aa:	e013      	b.n	80076d4 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076ac:	f7fe fe36 	bl	800631c <HAL_RCC_GetPCLK2Freq>
 80076b0:	61b8      	str	r0, [r7, #24]
        break;
 80076b2:	e00f      	b.n	80076d4 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076b4:	4b25      	ldr	r3, [pc, #148]	; (800774c <UART_SetConfig+0x2f0>)
 80076b6:	61bb      	str	r3, [r7, #24]
        break;
 80076b8:	e00c      	b.n	80076d4 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076ba:	f7fe fd97 	bl	80061ec <HAL_RCC_GetSysClockFreq>
 80076be:	61b8      	str	r0, [r7, #24]
        break;
 80076c0:	e008      	b.n	80076d4 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076c6:	61bb      	str	r3, [r7, #24]
        break;
 80076c8:	e004      	b.n	80076d4 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	77bb      	strb	r3, [r7, #30]
        break;
 80076d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	f000 8086 	beq.w	80077e8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	005a      	lsls	r2, r3, #1
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	085b      	lsrs	r3, r3, #1
 80076e6:	441a      	add	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	2b0f      	cmp	r3, #15
 80076f8:	d916      	bls.n	8007728 <UART_SetConfig+0x2cc>
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007700:	d212      	bcs.n	8007728 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	b29b      	uxth	r3, r3
 8007706:	f023 030f 	bic.w	r3, r3, #15
 800770a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	085b      	lsrs	r3, r3, #1
 8007710:	b29b      	uxth	r3, r3
 8007712:	f003 0307 	and.w	r3, r3, #7
 8007716:	b29a      	uxth	r2, r3
 8007718:	89fb      	ldrh	r3, [r7, #14]
 800771a:	4313      	orrs	r3, r2
 800771c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	89fa      	ldrh	r2, [r7, #14]
 8007724:	60da      	str	r2, [r3, #12]
 8007726:	e05f      	b.n	80077e8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	77bb      	strb	r3, [r7, #30]
 800772c:	e05c      	b.n	80077e8 <UART_SetConfig+0x38c>
 800772e:	bf00      	nop
 8007730:	efff69f3 	.word	0xefff69f3
 8007734:	40013800 	.word	0x40013800
 8007738:	40021000 	.word	0x40021000
 800773c:	40004400 	.word	0x40004400
 8007740:	40004800 	.word	0x40004800
 8007744:	40004c00 	.word	0x40004c00
 8007748:	40005000 	.word	0x40005000
 800774c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8007750:	7ffb      	ldrb	r3, [r7, #31]
 8007752:	2b08      	cmp	r3, #8
 8007754:	d827      	bhi.n	80077a6 <UART_SetConfig+0x34a>
 8007756:	a201      	add	r2, pc, #4	; (adr r2, 800775c <UART_SetConfig+0x300>)
 8007758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775c:	08007781 	.word	0x08007781
 8007760:	08007789 	.word	0x08007789
 8007764:	08007791 	.word	0x08007791
 8007768:	080077a7 	.word	0x080077a7
 800776c:	08007797 	.word	0x08007797
 8007770:	080077a7 	.word	0x080077a7
 8007774:	080077a7 	.word	0x080077a7
 8007778:	080077a7 	.word	0x080077a7
 800777c:	0800779f 	.word	0x0800779f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007780:	f7fe fdaa 	bl	80062d8 <HAL_RCC_GetPCLK1Freq>
 8007784:	61b8      	str	r0, [r7, #24]
        break;
 8007786:	e013      	b.n	80077b0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007788:	f7fe fdc8 	bl	800631c <HAL_RCC_GetPCLK2Freq>
 800778c:	61b8      	str	r0, [r7, #24]
        break;
 800778e:	e00f      	b.n	80077b0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007790:	4b1b      	ldr	r3, [pc, #108]	; (8007800 <UART_SetConfig+0x3a4>)
 8007792:	61bb      	str	r3, [r7, #24]
        break;
 8007794:	e00c      	b.n	80077b0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007796:	f7fe fd29 	bl	80061ec <HAL_RCC_GetSysClockFreq>
 800779a:	61b8      	str	r0, [r7, #24]
        break;
 800779c:	e008      	b.n	80077b0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800779e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077a2:	61bb      	str	r3, [r7, #24]
        break;
 80077a4:	e004      	b.n	80077b0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	77bb      	strb	r3, [r7, #30]
        break;
 80077ae:	bf00      	nop
    }

    if (pclk != 0U)
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d018      	beq.n	80077e8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	085a      	lsrs	r2, r3, #1
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	441a      	add	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	2b0f      	cmp	r3, #15
 80077d0:	d908      	bls.n	80077e4 <UART_SetConfig+0x388>
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077d8:	d204      	bcs.n	80077e4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	60da      	str	r2, [r3, #12]
 80077e2:	e001      	b.n	80077e8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80077f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3720      	adds	r7, #32
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	007a1200 	.word	0x007a1200

08007804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00a      	beq.n	800782e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	430a      	orrs	r2, r1
 800782c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007832:	f003 0302 	and.w	r3, r3, #2
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00a      	beq.n	8007850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	430a      	orrs	r2, r1
 800784e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007854:	f003 0304 	and.w	r3, r3, #4
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00a      	beq.n	8007872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	430a      	orrs	r2, r1
 8007870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007876:	f003 0308 	and.w	r3, r3, #8
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00a      	beq.n	8007894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	430a      	orrs	r2, r1
 8007892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007898:	f003 0310 	and.w	r3, r3, #16
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00a      	beq.n	80078b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	430a      	orrs	r2, r1
 80078b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	f003 0320 	and.w	r3, r3, #32
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00a      	beq.n	80078d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	430a      	orrs	r2, r1
 80078d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d01a      	beq.n	800791a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007902:	d10a      	bne.n	800791a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	430a      	orrs	r2, r1
 8007918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	605a      	str	r2, [r3, #4]
  }
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af02      	add	r7, sp, #8
 800794e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007958:	f7fa fdb8 	bl	80024cc <HAL_GetTick>
 800795c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 0308 	and.w	r3, r3, #8
 8007968:	2b08      	cmp	r3, #8
 800796a:	d10e      	bne.n	800798a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800796c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f82d 	bl	80079da <UART_WaitOnFlagUntilTimeout>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e023      	b.n	80079d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 0304 	and.w	r3, r3, #4
 8007994:	2b04      	cmp	r3, #4
 8007996:	d10e      	bne.n	80079b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007998:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f817 	bl	80079da <UART_WaitOnFlagUntilTimeout>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d001      	beq.n	80079b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e00d      	b.n	80079d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2220      	movs	r2, #32
 80079ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2220      	movs	r2, #32
 80079c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b084      	sub	sp, #16
 80079de:	af00      	add	r7, sp, #0
 80079e0:	60f8      	str	r0, [r7, #12]
 80079e2:	60b9      	str	r1, [r7, #8]
 80079e4:	603b      	str	r3, [r7, #0]
 80079e6:	4613      	mov	r3, r2
 80079e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079ea:	e05e      	b.n	8007aaa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f2:	d05a      	beq.n	8007aaa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079f4:	f7fa fd6a 	bl	80024cc <HAL_GetTick>
 80079f8:	4602      	mov	r2, r0
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d302      	bcc.n	8007a0a <UART_WaitOnFlagUntilTimeout+0x30>
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d11b      	bne.n	8007a42 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a18:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	689a      	ldr	r2, [r3, #8]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f022 0201 	bic.w	r2, r2, #1
 8007a28:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2220      	movs	r2, #32
 8007a34:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e043      	b.n	8007aca <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0304 	and.w	r3, r3, #4
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d02c      	beq.n	8007aaa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a5e:	d124      	bne.n	8007aaa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a78:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	689a      	ldr	r2, [r3, #8]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f022 0201 	bic.w	r2, r2, #1
 8007a88:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2220      	movs	r2, #32
 8007a8e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2220      	movs	r2, #32
 8007a94:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e00f      	b.n	8007aca <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	69da      	ldr	r2, [r3, #28]
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	68ba      	ldr	r2, [r7, #8]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	bf0c      	ite	eq
 8007aba:	2301      	moveq	r3, #1
 8007abc:	2300      	movne	r3, #0
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	79fb      	ldrb	r3, [r7, #7]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d091      	beq.n	80079ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
	...

08007ad4 <__errno>:
 8007ad4:	4b01      	ldr	r3, [pc, #4]	; (8007adc <__errno+0x8>)
 8007ad6:	6818      	ldr	r0, [r3, #0]
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	20000a24 	.word	0x20000a24

08007ae0 <__libc_init_array>:
 8007ae0:	b570      	push	{r4, r5, r6, lr}
 8007ae2:	4e0d      	ldr	r6, [pc, #52]	; (8007b18 <__libc_init_array+0x38>)
 8007ae4:	4c0d      	ldr	r4, [pc, #52]	; (8007b1c <__libc_init_array+0x3c>)
 8007ae6:	1ba4      	subs	r4, r4, r6
 8007ae8:	10a4      	asrs	r4, r4, #2
 8007aea:	2500      	movs	r5, #0
 8007aec:	42a5      	cmp	r5, r4
 8007aee:	d109      	bne.n	8007b04 <__libc_init_array+0x24>
 8007af0:	4e0b      	ldr	r6, [pc, #44]	; (8007b20 <__libc_init_array+0x40>)
 8007af2:	4c0c      	ldr	r4, [pc, #48]	; (8007b24 <__libc_init_array+0x44>)
 8007af4:	f001 ff22 	bl	800993c <_init>
 8007af8:	1ba4      	subs	r4, r4, r6
 8007afa:	10a4      	asrs	r4, r4, #2
 8007afc:	2500      	movs	r5, #0
 8007afe:	42a5      	cmp	r5, r4
 8007b00:	d105      	bne.n	8007b0e <__libc_init_array+0x2e>
 8007b02:	bd70      	pop	{r4, r5, r6, pc}
 8007b04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b08:	4798      	blx	r3
 8007b0a:	3501      	adds	r5, #1
 8007b0c:	e7ee      	b.n	8007aec <__libc_init_array+0xc>
 8007b0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b12:	4798      	blx	r3
 8007b14:	3501      	adds	r5, #1
 8007b16:	e7f2      	b.n	8007afe <__libc_init_array+0x1e>
 8007b18:	08009ed0 	.word	0x08009ed0
 8007b1c:	08009ed0 	.word	0x08009ed0
 8007b20:	08009ed0 	.word	0x08009ed0
 8007b24:	08009ed4 	.word	0x08009ed4

08007b28 <__itoa>:
 8007b28:	1e93      	subs	r3, r2, #2
 8007b2a:	2b22      	cmp	r3, #34	; 0x22
 8007b2c:	b510      	push	{r4, lr}
 8007b2e:	460c      	mov	r4, r1
 8007b30:	d904      	bls.n	8007b3c <__itoa+0x14>
 8007b32:	2300      	movs	r3, #0
 8007b34:	700b      	strb	r3, [r1, #0]
 8007b36:	461c      	mov	r4, r3
 8007b38:	4620      	mov	r0, r4
 8007b3a:	bd10      	pop	{r4, pc}
 8007b3c:	2a0a      	cmp	r2, #10
 8007b3e:	d109      	bne.n	8007b54 <__itoa+0x2c>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	da07      	bge.n	8007b54 <__itoa+0x2c>
 8007b44:	232d      	movs	r3, #45	; 0x2d
 8007b46:	700b      	strb	r3, [r1, #0]
 8007b48:	4240      	negs	r0, r0
 8007b4a:	2101      	movs	r1, #1
 8007b4c:	4421      	add	r1, r4
 8007b4e:	f000 fecd 	bl	80088ec <__utoa>
 8007b52:	e7f1      	b.n	8007b38 <__itoa+0x10>
 8007b54:	2100      	movs	r1, #0
 8007b56:	e7f9      	b.n	8007b4c <__itoa+0x24>

08007b58 <itoa>:
 8007b58:	f7ff bfe6 	b.w	8007b28 <__itoa>

08007b5c <memset>:
 8007b5c:	4402      	add	r2, r0
 8007b5e:	4603      	mov	r3, r0
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d100      	bne.n	8007b66 <memset+0xa>
 8007b64:	4770      	bx	lr
 8007b66:	f803 1b01 	strb.w	r1, [r3], #1
 8007b6a:	e7f9      	b.n	8007b60 <memset+0x4>

08007b6c <strcpy>:
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b72:	f803 2b01 	strb.w	r2, [r3], #1
 8007b76:	2a00      	cmp	r2, #0
 8007b78:	d1f9      	bne.n	8007b6e <strcpy+0x2>
 8007b7a:	4770      	bx	lr

08007b7c <sulp>:
 8007b7c:	b570      	push	{r4, r5, r6, lr}
 8007b7e:	4604      	mov	r4, r0
 8007b80:	460d      	mov	r5, r1
 8007b82:	ec45 4b10 	vmov	d0, r4, r5
 8007b86:	4616      	mov	r6, r2
 8007b88:	f001 fd02 	bl	8009590 <__ulp>
 8007b8c:	ec51 0b10 	vmov	r0, r1, d0
 8007b90:	b17e      	cbz	r6, 8007bb2 <sulp+0x36>
 8007b92:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007b96:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	dd09      	ble.n	8007bb2 <sulp+0x36>
 8007b9e:	051b      	lsls	r3, r3, #20
 8007ba0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007ba4:	2400      	movs	r4, #0
 8007ba6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007baa:	4622      	mov	r2, r4
 8007bac:	462b      	mov	r3, r5
 8007bae:	f7f8 fce1 	bl	8000574 <__aeabi_dmul>
 8007bb2:	bd70      	pop	{r4, r5, r6, pc}
 8007bb4:	0000      	movs	r0, r0
	...

08007bb8 <_strtod_l>:
 8007bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bbc:	461f      	mov	r7, r3
 8007bbe:	b0a1      	sub	sp, #132	; 0x84
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	4681      	mov	r9, r0
 8007bc4:	4638      	mov	r0, r7
 8007bc6:	460e      	mov	r6, r1
 8007bc8:	9217      	str	r2, [sp, #92]	; 0x5c
 8007bca:	931c      	str	r3, [sp, #112]	; 0x70
 8007bcc:	f001 f9f5 	bl	8008fba <__localeconv_l>
 8007bd0:	4680      	mov	r8, r0
 8007bd2:	6800      	ldr	r0, [r0, #0]
 8007bd4:	f7f8 fb0a 	bl	80001ec <strlen>
 8007bd8:	f04f 0a00 	mov.w	sl, #0
 8007bdc:	4604      	mov	r4, r0
 8007bde:	f04f 0b00 	mov.w	fp, #0
 8007be2:	961b      	str	r6, [sp, #108]	; 0x6c
 8007be4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007be6:	781a      	ldrb	r2, [r3, #0]
 8007be8:	2a0d      	cmp	r2, #13
 8007bea:	d832      	bhi.n	8007c52 <_strtod_l+0x9a>
 8007bec:	2a09      	cmp	r2, #9
 8007bee:	d236      	bcs.n	8007c5e <_strtod_l+0xa6>
 8007bf0:	2a00      	cmp	r2, #0
 8007bf2:	d03e      	beq.n	8007c72 <_strtod_l+0xba>
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	930d      	str	r3, [sp, #52]	; 0x34
 8007bf8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007bfa:	782b      	ldrb	r3, [r5, #0]
 8007bfc:	2b30      	cmp	r3, #48	; 0x30
 8007bfe:	f040 80ac 	bne.w	8007d5a <_strtod_l+0x1a2>
 8007c02:	786b      	ldrb	r3, [r5, #1]
 8007c04:	2b58      	cmp	r3, #88	; 0x58
 8007c06:	d001      	beq.n	8007c0c <_strtod_l+0x54>
 8007c08:	2b78      	cmp	r3, #120	; 0x78
 8007c0a:	d167      	bne.n	8007cdc <_strtod_l+0x124>
 8007c0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c0e:	9301      	str	r3, [sp, #4]
 8007c10:	ab1c      	add	r3, sp, #112	; 0x70
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	9702      	str	r7, [sp, #8]
 8007c16:	ab1d      	add	r3, sp, #116	; 0x74
 8007c18:	4a88      	ldr	r2, [pc, #544]	; (8007e3c <_strtod_l+0x284>)
 8007c1a:	a91b      	add	r1, sp, #108	; 0x6c
 8007c1c:	4648      	mov	r0, r9
 8007c1e:	f000 fef2 	bl	8008a06 <__gethex>
 8007c22:	f010 0407 	ands.w	r4, r0, #7
 8007c26:	4606      	mov	r6, r0
 8007c28:	d005      	beq.n	8007c36 <_strtod_l+0x7e>
 8007c2a:	2c06      	cmp	r4, #6
 8007c2c:	d12b      	bne.n	8007c86 <_strtod_l+0xce>
 8007c2e:	3501      	adds	r5, #1
 8007c30:	2300      	movs	r3, #0
 8007c32:	951b      	str	r5, [sp, #108]	; 0x6c
 8007c34:	930d      	str	r3, [sp, #52]	; 0x34
 8007c36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f040 859a 	bne.w	8008772 <_strtod_l+0xbba>
 8007c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c40:	b1e3      	cbz	r3, 8007c7c <_strtod_l+0xc4>
 8007c42:	4652      	mov	r2, sl
 8007c44:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007c48:	ec43 2b10 	vmov	d0, r2, r3
 8007c4c:	b021      	add	sp, #132	; 0x84
 8007c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c52:	2a2b      	cmp	r2, #43	; 0x2b
 8007c54:	d015      	beq.n	8007c82 <_strtod_l+0xca>
 8007c56:	2a2d      	cmp	r2, #45	; 0x2d
 8007c58:	d004      	beq.n	8007c64 <_strtod_l+0xac>
 8007c5a:	2a20      	cmp	r2, #32
 8007c5c:	d1ca      	bne.n	8007bf4 <_strtod_l+0x3c>
 8007c5e:	3301      	adds	r3, #1
 8007c60:	931b      	str	r3, [sp, #108]	; 0x6c
 8007c62:	e7bf      	b.n	8007be4 <_strtod_l+0x2c>
 8007c64:	2201      	movs	r2, #1
 8007c66:	920d      	str	r2, [sp, #52]	; 0x34
 8007c68:	1c5a      	adds	r2, r3, #1
 8007c6a:	921b      	str	r2, [sp, #108]	; 0x6c
 8007c6c:	785b      	ldrb	r3, [r3, #1]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1c2      	bne.n	8007bf8 <_strtod_l+0x40>
 8007c72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c74:	961b      	str	r6, [sp, #108]	; 0x6c
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f040 8579 	bne.w	800876e <_strtod_l+0xbb6>
 8007c7c:	4652      	mov	r2, sl
 8007c7e:	465b      	mov	r3, fp
 8007c80:	e7e2      	b.n	8007c48 <_strtod_l+0x90>
 8007c82:	2200      	movs	r2, #0
 8007c84:	e7ef      	b.n	8007c66 <_strtod_l+0xae>
 8007c86:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007c88:	b13a      	cbz	r2, 8007c9a <_strtod_l+0xe2>
 8007c8a:	2135      	movs	r1, #53	; 0x35
 8007c8c:	a81e      	add	r0, sp, #120	; 0x78
 8007c8e:	f001 fd77 	bl	8009780 <__copybits>
 8007c92:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007c94:	4648      	mov	r0, r9
 8007c96:	f001 f9e3 	bl	8009060 <_Bfree>
 8007c9a:	3c01      	subs	r4, #1
 8007c9c:	2c04      	cmp	r4, #4
 8007c9e:	d806      	bhi.n	8007cae <_strtod_l+0xf6>
 8007ca0:	e8df f004 	tbb	[pc, r4]
 8007ca4:	1714030a 	.word	0x1714030a
 8007ca8:	0a          	.byte	0x0a
 8007ca9:	00          	.byte	0x00
 8007caa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8007cae:	0730      	lsls	r0, r6, #28
 8007cb0:	d5c1      	bpl.n	8007c36 <_strtod_l+0x7e>
 8007cb2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007cb6:	e7be      	b.n	8007c36 <_strtod_l+0x7e>
 8007cb8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8007cbc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007cbe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007cc2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007cc6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007cca:	e7f0      	b.n	8007cae <_strtod_l+0xf6>
 8007ccc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007e40 <_strtod_l+0x288>
 8007cd0:	e7ed      	b.n	8007cae <_strtod_l+0xf6>
 8007cd2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007cd6:	f04f 3aff 	mov.w	sl, #4294967295
 8007cda:	e7e8      	b.n	8007cae <_strtod_l+0xf6>
 8007cdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cde:	1c5a      	adds	r2, r3, #1
 8007ce0:	921b      	str	r2, [sp, #108]	; 0x6c
 8007ce2:	785b      	ldrb	r3, [r3, #1]
 8007ce4:	2b30      	cmp	r3, #48	; 0x30
 8007ce6:	d0f9      	beq.n	8007cdc <_strtod_l+0x124>
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d0a4      	beq.n	8007c36 <_strtod_l+0x7e>
 8007cec:	2301      	movs	r3, #1
 8007cee:	2500      	movs	r5, #0
 8007cf0:	9306      	str	r3, [sp, #24]
 8007cf2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cf4:	9308      	str	r3, [sp, #32]
 8007cf6:	9507      	str	r5, [sp, #28]
 8007cf8:	9505      	str	r5, [sp, #20]
 8007cfa:	220a      	movs	r2, #10
 8007cfc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007cfe:	7807      	ldrb	r7, [r0, #0]
 8007d00:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007d04:	b2d9      	uxtb	r1, r3
 8007d06:	2909      	cmp	r1, #9
 8007d08:	d929      	bls.n	8007d5e <_strtod_l+0x1a6>
 8007d0a:	4622      	mov	r2, r4
 8007d0c:	f8d8 1000 	ldr.w	r1, [r8]
 8007d10:	f001 fdea 	bl	80098e8 <strncmp>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	d031      	beq.n	8007d7c <_strtod_l+0x1c4>
 8007d18:	2000      	movs	r0, #0
 8007d1a:	9c05      	ldr	r4, [sp, #20]
 8007d1c:	9004      	str	r0, [sp, #16]
 8007d1e:	463b      	mov	r3, r7
 8007d20:	4602      	mov	r2, r0
 8007d22:	2b65      	cmp	r3, #101	; 0x65
 8007d24:	d001      	beq.n	8007d2a <_strtod_l+0x172>
 8007d26:	2b45      	cmp	r3, #69	; 0x45
 8007d28:	d114      	bne.n	8007d54 <_strtod_l+0x19c>
 8007d2a:	b924      	cbnz	r4, 8007d36 <_strtod_l+0x17e>
 8007d2c:	b910      	cbnz	r0, 8007d34 <_strtod_l+0x17c>
 8007d2e:	9b06      	ldr	r3, [sp, #24]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d09e      	beq.n	8007c72 <_strtod_l+0xba>
 8007d34:	2400      	movs	r4, #0
 8007d36:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007d38:	1c73      	adds	r3, r6, #1
 8007d3a:	931b      	str	r3, [sp, #108]	; 0x6c
 8007d3c:	7873      	ldrb	r3, [r6, #1]
 8007d3e:	2b2b      	cmp	r3, #43	; 0x2b
 8007d40:	d078      	beq.n	8007e34 <_strtod_l+0x27c>
 8007d42:	2b2d      	cmp	r3, #45	; 0x2d
 8007d44:	d070      	beq.n	8007e28 <_strtod_l+0x270>
 8007d46:	f04f 0c00 	mov.w	ip, #0
 8007d4a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8007d4e:	2f09      	cmp	r7, #9
 8007d50:	d97c      	bls.n	8007e4c <_strtod_l+0x294>
 8007d52:	961b      	str	r6, [sp, #108]	; 0x6c
 8007d54:	f04f 0e00 	mov.w	lr, #0
 8007d58:	e09a      	b.n	8007e90 <_strtod_l+0x2d8>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	e7c7      	b.n	8007cee <_strtod_l+0x136>
 8007d5e:	9905      	ldr	r1, [sp, #20]
 8007d60:	2908      	cmp	r1, #8
 8007d62:	bfdd      	ittte	le
 8007d64:	9907      	ldrle	r1, [sp, #28]
 8007d66:	fb02 3301 	mlale	r3, r2, r1, r3
 8007d6a:	9307      	strle	r3, [sp, #28]
 8007d6c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007d70:	9b05      	ldr	r3, [sp, #20]
 8007d72:	3001      	adds	r0, #1
 8007d74:	3301      	adds	r3, #1
 8007d76:	9305      	str	r3, [sp, #20]
 8007d78:	901b      	str	r0, [sp, #108]	; 0x6c
 8007d7a:	e7bf      	b.n	8007cfc <_strtod_l+0x144>
 8007d7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d7e:	191a      	adds	r2, r3, r4
 8007d80:	921b      	str	r2, [sp, #108]	; 0x6c
 8007d82:	9a05      	ldr	r2, [sp, #20]
 8007d84:	5d1b      	ldrb	r3, [r3, r4]
 8007d86:	2a00      	cmp	r2, #0
 8007d88:	d037      	beq.n	8007dfa <_strtod_l+0x242>
 8007d8a:	9c05      	ldr	r4, [sp, #20]
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007d92:	2909      	cmp	r1, #9
 8007d94:	d913      	bls.n	8007dbe <_strtod_l+0x206>
 8007d96:	2101      	movs	r1, #1
 8007d98:	9104      	str	r1, [sp, #16]
 8007d9a:	e7c2      	b.n	8007d22 <_strtod_l+0x16a>
 8007d9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d9e:	1c5a      	adds	r2, r3, #1
 8007da0:	921b      	str	r2, [sp, #108]	; 0x6c
 8007da2:	785b      	ldrb	r3, [r3, #1]
 8007da4:	3001      	adds	r0, #1
 8007da6:	2b30      	cmp	r3, #48	; 0x30
 8007da8:	d0f8      	beq.n	8007d9c <_strtod_l+0x1e4>
 8007daa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007dae:	2a08      	cmp	r2, #8
 8007db0:	f200 84e4 	bhi.w	800877c <_strtod_l+0xbc4>
 8007db4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007db6:	9208      	str	r2, [sp, #32]
 8007db8:	4602      	mov	r2, r0
 8007dba:	2000      	movs	r0, #0
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007dc2:	f100 0101 	add.w	r1, r0, #1
 8007dc6:	d012      	beq.n	8007dee <_strtod_l+0x236>
 8007dc8:	440a      	add	r2, r1
 8007dca:	eb00 0c04 	add.w	ip, r0, r4
 8007dce:	4621      	mov	r1, r4
 8007dd0:	270a      	movs	r7, #10
 8007dd2:	458c      	cmp	ip, r1
 8007dd4:	d113      	bne.n	8007dfe <_strtod_l+0x246>
 8007dd6:	1821      	adds	r1, r4, r0
 8007dd8:	2908      	cmp	r1, #8
 8007dda:	f104 0401 	add.w	r4, r4, #1
 8007dde:	4404      	add	r4, r0
 8007de0:	dc19      	bgt.n	8007e16 <_strtod_l+0x25e>
 8007de2:	9b07      	ldr	r3, [sp, #28]
 8007de4:	210a      	movs	r1, #10
 8007de6:	fb01 e303 	mla	r3, r1, r3, lr
 8007dea:	9307      	str	r3, [sp, #28]
 8007dec:	2100      	movs	r1, #0
 8007dee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007df0:	1c58      	adds	r0, r3, #1
 8007df2:	901b      	str	r0, [sp, #108]	; 0x6c
 8007df4:	785b      	ldrb	r3, [r3, #1]
 8007df6:	4608      	mov	r0, r1
 8007df8:	e7c9      	b.n	8007d8e <_strtod_l+0x1d6>
 8007dfa:	9805      	ldr	r0, [sp, #20]
 8007dfc:	e7d3      	b.n	8007da6 <_strtod_l+0x1ee>
 8007dfe:	2908      	cmp	r1, #8
 8007e00:	f101 0101 	add.w	r1, r1, #1
 8007e04:	dc03      	bgt.n	8007e0e <_strtod_l+0x256>
 8007e06:	9b07      	ldr	r3, [sp, #28]
 8007e08:	437b      	muls	r3, r7
 8007e0a:	9307      	str	r3, [sp, #28]
 8007e0c:	e7e1      	b.n	8007dd2 <_strtod_l+0x21a>
 8007e0e:	2910      	cmp	r1, #16
 8007e10:	bfd8      	it	le
 8007e12:	437d      	mulle	r5, r7
 8007e14:	e7dd      	b.n	8007dd2 <_strtod_l+0x21a>
 8007e16:	2c10      	cmp	r4, #16
 8007e18:	bfdc      	itt	le
 8007e1a:	210a      	movle	r1, #10
 8007e1c:	fb01 e505 	mlale	r5, r1, r5, lr
 8007e20:	e7e4      	b.n	8007dec <_strtod_l+0x234>
 8007e22:	2301      	movs	r3, #1
 8007e24:	9304      	str	r3, [sp, #16]
 8007e26:	e781      	b.n	8007d2c <_strtod_l+0x174>
 8007e28:	f04f 0c01 	mov.w	ip, #1
 8007e2c:	1cb3      	adds	r3, r6, #2
 8007e2e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007e30:	78b3      	ldrb	r3, [r6, #2]
 8007e32:	e78a      	b.n	8007d4a <_strtod_l+0x192>
 8007e34:	f04f 0c00 	mov.w	ip, #0
 8007e38:	e7f8      	b.n	8007e2c <_strtod_l+0x274>
 8007e3a:	bf00      	nop
 8007e3c:	08009c50 	.word	0x08009c50
 8007e40:	7ff00000 	.word	0x7ff00000
 8007e44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e46:	1c5f      	adds	r7, r3, #1
 8007e48:	971b      	str	r7, [sp, #108]	; 0x6c
 8007e4a:	785b      	ldrb	r3, [r3, #1]
 8007e4c:	2b30      	cmp	r3, #48	; 0x30
 8007e4e:	d0f9      	beq.n	8007e44 <_strtod_l+0x28c>
 8007e50:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007e54:	2f08      	cmp	r7, #8
 8007e56:	f63f af7d 	bhi.w	8007d54 <_strtod_l+0x19c>
 8007e5a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007e5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e60:	930a      	str	r3, [sp, #40]	; 0x28
 8007e62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e64:	1c5f      	adds	r7, r3, #1
 8007e66:	971b      	str	r7, [sp, #108]	; 0x6c
 8007e68:	785b      	ldrb	r3, [r3, #1]
 8007e6a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8007e6e:	f1b8 0f09 	cmp.w	r8, #9
 8007e72:	d937      	bls.n	8007ee4 <_strtod_l+0x32c>
 8007e74:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007e76:	1a7f      	subs	r7, r7, r1
 8007e78:	2f08      	cmp	r7, #8
 8007e7a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007e7e:	dc37      	bgt.n	8007ef0 <_strtod_l+0x338>
 8007e80:	45be      	cmp	lr, r7
 8007e82:	bfa8      	it	ge
 8007e84:	46be      	movge	lr, r7
 8007e86:	f1bc 0f00 	cmp.w	ip, #0
 8007e8a:	d001      	beq.n	8007e90 <_strtod_l+0x2d8>
 8007e8c:	f1ce 0e00 	rsb	lr, lr, #0
 8007e90:	2c00      	cmp	r4, #0
 8007e92:	d151      	bne.n	8007f38 <_strtod_l+0x380>
 8007e94:	2800      	cmp	r0, #0
 8007e96:	f47f aece 	bne.w	8007c36 <_strtod_l+0x7e>
 8007e9a:	9a06      	ldr	r2, [sp, #24]
 8007e9c:	2a00      	cmp	r2, #0
 8007e9e:	f47f aeca 	bne.w	8007c36 <_strtod_l+0x7e>
 8007ea2:	9a04      	ldr	r2, [sp, #16]
 8007ea4:	2a00      	cmp	r2, #0
 8007ea6:	f47f aee4 	bne.w	8007c72 <_strtod_l+0xba>
 8007eaa:	2b4e      	cmp	r3, #78	; 0x4e
 8007eac:	d027      	beq.n	8007efe <_strtod_l+0x346>
 8007eae:	dc21      	bgt.n	8007ef4 <_strtod_l+0x33c>
 8007eb0:	2b49      	cmp	r3, #73	; 0x49
 8007eb2:	f47f aede 	bne.w	8007c72 <_strtod_l+0xba>
 8007eb6:	49a0      	ldr	r1, [pc, #640]	; (8008138 <_strtod_l+0x580>)
 8007eb8:	a81b      	add	r0, sp, #108	; 0x6c
 8007eba:	f000 ffd7 	bl	8008e6c <__match>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	f43f aed7 	beq.w	8007c72 <_strtod_l+0xba>
 8007ec4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ec6:	499d      	ldr	r1, [pc, #628]	; (800813c <_strtod_l+0x584>)
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	a81b      	add	r0, sp, #108	; 0x6c
 8007ecc:	931b      	str	r3, [sp, #108]	; 0x6c
 8007ece:	f000 ffcd 	bl	8008e6c <__match>
 8007ed2:	b910      	cbnz	r0, 8007eda <_strtod_l+0x322>
 8007ed4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	931b      	str	r3, [sp, #108]	; 0x6c
 8007eda:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008150 <_strtod_l+0x598>
 8007ede:	f04f 0a00 	mov.w	sl, #0
 8007ee2:	e6a8      	b.n	8007c36 <_strtod_l+0x7e>
 8007ee4:	210a      	movs	r1, #10
 8007ee6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007eea:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007eee:	e7b8      	b.n	8007e62 <_strtod_l+0x2aa>
 8007ef0:	46be      	mov	lr, r7
 8007ef2:	e7c8      	b.n	8007e86 <_strtod_l+0x2ce>
 8007ef4:	2b69      	cmp	r3, #105	; 0x69
 8007ef6:	d0de      	beq.n	8007eb6 <_strtod_l+0x2fe>
 8007ef8:	2b6e      	cmp	r3, #110	; 0x6e
 8007efa:	f47f aeba 	bne.w	8007c72 <_strtod_l+0xba>
 8007efe:	4990      	ldr	r1, [pc, #576]	; (8008140 <_strtod_l+0x588>)
 8007f00:	a81b      	add	r0, sp, #108	; 0x6c
 8007f02:	f000 ffb3 	bl	8008e6c <__match>
 8007f06:	2800      	cmp	r0, #0
 8007f08:	f43f aeb3 	beq.w	8007c72 <_strtod_l+0xba>
 8007f0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	2b28      	cmp	r3, #40	; 0x28
 8007f12:	d10e      	bne.n	8007f32 <_strtod_l+0x37a>
 8007f14:	aa1e      	add	r2, sp, #120	; 0x78
 8007f16:	498b      	ldr	r1, [pc, #556]	; (8008144 <_strtod_l+0x58c>)
 8007f18:	a81b      	add	r0, sp, #108	; 0x6c
 8007f1a:	f000 ffbb 	bl	8008e94 <__hexnan>
 8007f1e:	2805      	cmp	r0, #5
 8007f20:	d107      	bne.n	8007f32 <_strtod_l+0x37a>
 8007f22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f24:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007f28:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007f2c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007f30:	e681      	b.n	8007c36 <_strtod_l+0x7e>
 8007f32:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008158 <_strtod_l+0x5a0>
 8007f36:	e7d2      	b.n	8007ede <_strtod_l+0x326>
 8007f38:	ebae 0302 	sub.w	r3, lr, r2
 8007f3c:	9306      	str	r3, [sp, #24]
 8007f3e:	9b05      	ldr	r3, [sp, #20]
 8007f40:	9807      	ldr	r0, [sp, #28]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	bf08      	it	eq
 8007f46:	4623      	moveq	r3, r4
 8007f48:	2c10      	cmp	r4, #16
 8007f4a:	9305      	str	r3, [sp, #20]
 8007f4c:	46a0      	mov	r8, r4
 8007f4e:	bfa8      	it	ge
 8007f50:	f04f 0810 	movge.w	r8, #16
 8007f54:	f7f8 fa94 	bl	8000480 <__aeabi_ui2d>
 8007f58:	2c09      	cmp	r4, #9
 8007f5a:	4682      	mov	sl, r0
 8007f5c:	468b      	mov	fp, r1
 8007f5e:	dc13      	bgt.n	8007f88 <_strtod_l+0x3d0>
 8007f60:	9b06      	ldr	r3, [sp, #24]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f43f ae67 	beq.w	8007c36 <_strtod_l+0x7e>
 8007f68:	9b06      	ldr	r3, [sp, #24]
 8007f6a:	dd7a      	ble.n	8008062 <_strtod_l+0x4aa>
 8007f6c:	2b16      	cmp	r3, #22
 8007f6e:	dc61      	bgt.n	8008034 <_strtod_l+0x47c>
 8007f70:	4a75      	ldr	r2, [pc, #468]	; (8008148 <_strtod_l+0x590>)
 8007f72:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8007f76:	e9de 0100 	ldrd	r0, r1, [lr]
 8007f7a:	4652      	mov	r2, sl
 8007f7c:	465b      	mov	r3, fp
 8007f7e:	f7f8 faf9 	bl	8000574 <__aeabi_dmul>
 8007f82:	4682      	mov	sl, r0
 8007f84:	468b      	mov	fp, r1
 8007f86:	e656      	b.n	8007c36 <_strtod_l+0x7e>
 8007f88:	4b6f      	ldr	r3, [pc, #444]	; (8008148 <_strtod_l+0x590>)
 8007f8a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007f8e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007f92:	f7f8 faef 	bl	8000574 <__aeabi_dmul>
 8007f96:	4606      	mov	r6, r0
 8007f98:	4628      	mov	r0, r5
 8007f9a:	460f      	mov	r7, r1
 8007f9c:	f7f8 fa70 	bl	8000480 <__aeabi_ui2d>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	4639      	mov	r1, r7
 8007fa8:	f7f8 f92e 	bl	8000208 <__adddf3>
 8007fac:	2c0f      	cmp	r4, #15
 8007fae:	4682      	mov	sl, r0
 8007fb0:	468b      	mov	fp, r1
 8007fb2:	ddd5      	ble.n	8007f60 <_strtod_l+0x3a8>
 8007fb4:	9b06      	ldr	r3, [sp, #24]
 8007fb6:	eba4 0808 	sub.w	r8, r4, r8
 8007fba:	4498      	add	r8, r3
 8007fbc:	f1b8 0f00 	cmp.w	r8, #0
 8007fc0:	f340 8096 	ble.w	80080f0 <_strtod_l+0x538>
 8007fc4:	f018 030f 	ands.w	r3, r8, #15
 8007fc8:	d00a      	beq.n	8007fe0 <_strtod_l+0x428>
 8007fca:	495f      	ldr	r1, [pc, #380]	; (8008148 <_strtod_l+0x590>)
 8007fcc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007fd0:	4652      	mov	r2, sl
 8007fd2:	465b      	mov	r3, fp
 8007fd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fd8:	f7f8 facc 	bl	8000574 <__aeabi_dmul>
 8007fdc:	4682      	mov	sl, r0
 8007fde:	468b      	mov	fp, r1
 8007fe0:	f038 080f 	bics.w	r8, r8, #15
 8007fe4:	d073      	beq.n	80080ce <_strtod_l+0x516>
 8007fe6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007fea:	dd47      	ble.n	800807c <_strtod_l+0x4c4>
 8007fec:	2400      	movs	r4, #0
 8007fee:	46a0      	mov	r8, r4
 8007ff0:	9407      	str	r4, [sp, #28]
 8007ff2:	9405      	str	r4, [sp, #20]
 8007ff4:	2322      	movs	r3, #34	; 0x22
 8007ff6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008150 <_strtod_l+0x598>
 8007ffa:	f8c9 3000 	str.w	r3, [r9]
 8007ffe:	f04f 0a00 	mov.w	sl, #0
 8008002:	9b07      	ldr	r3, [sp, #28]
 8008004:	2b00      	cmp	r3, #0
 8008006:	f43f ae16 	beq.w	8007c36 <_strtod_l+0x7e>
 800800a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800800c:	4648      	mov	r0, r9
 800800e:	f001 f827 	bl	8009060 <_Bfree>
 8008012:	9905      	ldr	r1, [sp, #20]
 8008014:	4648      	mov	r0, r9
 8008016:	f001 f823 	bl	8009060 <_Bfree>
 800801a:	4641      	mov	r1, r8
 800801c:	4648      	mov	r0, r9
 800801e:	f001 f81f 	bl	8009060 <_Bfree>
 8008022:	9907      	ldr	r1, [sp, #28]
 8008024:	4648      	mov	r0, r9
 8008026:	f001 f81b 	bl	8009060 <_Bfree>
 800802a:	4621      	mov	r1, r4
 800802c:	4648      	mov	r0, r9
 800802e:	f001 f817 	bl	8009060 <_Bfree>
 8008032:	e600      	b.n	8007c36 <_strtod_l+0x7e>
 8008034:	9a06      	ldr	r2, [sp, #24]
 8008036:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800803a:	4293      	cmp	r3, r2
 800803c:	dbba      	blt.n	8007fb4 <_strtod_l+0x3fc>
 800803e:	4d42      	ldr	r5, [pc, #264]	; (8008148 <_strtod_l+0x590>)
 8008040:	f1c4 040f 	rsb	r4, r4, #15
 8008044:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008048:	4652      	mov	r2, sl
 800804a:	465b      	mov	r3, fp
 800804c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008050:	f7f8 fa90 	bl	8000574 <__aeabi_dmul>
 8008054:	9b06      	ldr	r3, [sp, #24]
 8008056:	1b1c      	subs	r4, r3, r4
 8008058:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800805c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008060:	e78d      	b.n	8007f7e <_strtod_l+0x3c6>
 8008062:	f113 0f16 	cmn.w	r3, #22
 8008066:	dba5      	blt.n	8007fb4 <_strtod_l+0x3fc>
 8008068:	4a37      	ldr	r2, [pc, #220]	; (8008148 <_strtod_l+0x590>)
 800806a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800806e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8008072:	4650      	mov	r0, sl
 8008074:	4659      	mov	r1, fp
 8008076:	f7f8 fba7 	bl	80007c8 <__aeabi_ddiv>
 800807a:	e782      	b.n	8007f82 <_strtod_l+0x3ca>
 800807c:	2300      	movs	r3, #0
 800807e:	4e33      	ldr	r6, [pc, #204]	; (800814c <_strtod_l+0x594>)
 8008080:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008084:	4650      	mov	r0, sl
 8008086:	4659      	mov	r1, fp
 8008088:	461d      	mov	r5, r3
 800808a:	f1b8 0f01 	cmp.w	r8, #1
 800808e:	dc21      	bgt.n	80080d4 <_strtod_l+0x51c>
 8008090:	b10b      	cbz	r3, 8008096 <_strtod_l+0x4de>
 8008092:	4682      	mov	sl, r0
 8008094:	468b      	mov	fp, r1
 8008096:	4b2d      	ldr	r3, [pc, #180]	; (800814c <_strtod_l+0x594>)
 8008098:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800809c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80080a0:	4652      	mov	r2, sl
 80080a2:	465b      	mov	r3, fp
 80080a4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80080a8:	f7f8 fa64 	bl	8000574 <__aeabi_dmul>
 80080ac:	4b28      	ldr	r3, [pc, #160]	; (8008150 <_strtod_l+0x598>)
 80080ae:	460a      	mov	r2, r1
 80080b0:	400b      	ands	r3, r1
 80080b2:	4928      	ldr	r1, [pc, #160]	; (8008154 <_strtod_l+0x59c>)
 80080b4:	428b      	cmp	r3, r1
 80080b6:	4682      	mov	sl, r0
 80080b8:	d898      	bhi.n	8007fec <_strtod_l+0x434>
 80080ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80080be:	428b      	cmp	r3, r1
 80080c0:	bf86      	itte	hi
 80080c2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800815c <_strtod_l+0x5a4>
 80080c6:	f04f 3aff 	movhi.w	sl, #4294967295
 80080ca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80080ce:	2300      	movs	r3, #0
 80080d0:	9304      	str	r3, [sp, #16]
 80080d2:	e077      	b.n	80081c4 <_strtod_l+0x60c>
 80080d4:	f018 0f01 	tst.w	r8, #1
 80080d8:	d006      	beq.n	80080e8 <_strtod_l+0x530>
 80080da:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80080de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e2:	f7f8 fa47 	bl	8000574 <__aeabi_dmul>
 80080e6:	2301      	movs	r3, #1
 80080e8:	3501      	adds	r5, #1
 80080ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80080ee:	e7cc      	b.n	800808a <_strtod_l+0x4d2>
 80080f0:	d0ed      	beq.n	80080ce <_strtod_l+0x516>
 80080f2:	f1c8 0800 	rsb	r8, r8, #0
 80080f6:	f018 020f 	ands.w	r2, r8, #15
 80080fa:	d00a      	beq.n	8008112 <_strtod_l+0x55a>
 80080fc:	4b12      	ldr	r3, [pc, #72]	; (8008148 <_strtod_l+0x590>)
 80080fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008102:	4650      	mov	r0, sl
 8008104:	4659      	mov	r1, fp
 8008106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810a:	f7f8 fb5d 	bl	80007c8 <__aeabi_ddiv>
 800810e:	4682      	mov	sl, r0
 8008110:	468b      	mov	fp, r1
 8008112:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008116:	d0da      	beq.n	80080ce <_strtod_l+0x516>
 8008118:	f1b8 0f1f 	cmp.w	r8, #31
 800811c:	dd20      	ble.n	8008160 <_strtod_l+0x5a8>
 800811e:	2400      	movs	r4, #0
 8008120:	46a0      	mov	r8, r4
 8008122:	9407      	str	r4, [sp, #28]
 8008124:	9405      	str	r4, [sp, #20]
 8008126:	2322      	movs	r3, #34	; 0x22
 8008128:	f04f 0a00 	mov.w	sl, #0
 800812c:	f04f 0b00 	mov.w	fp, #0
 8008130:	f8c9 3000 	str.w	r3, [r9]
 8008134:	e765      	b.n	8008002 <_strtod_l+0x44a>
 8008136:	bf00      	nop
 8008138:	08009c44 	.word	0x08009c44
 800813c:	08009c47 	.word	0x08009c47
 8008140:	08009c4d 	.word	0x08009c4d
 8008144:	08009c64 	.word	0x08009c64
 8008148:	08009cf8 	.word	0x08009cf8
 800814c:	08009cd0 	.word	0x08009cd0
 8008150:	7ff00000 	.word	0x7ff00000
 8008154:	7ca00000 	.word	0x7ca00000
 8008158:	fff80000 	.word	0xfff80000
 800815c:	7fefffff 	.word	0x7fefffff
 8008160:	f018 0310 	ands.w	r3, r8, #16
 8008164:	bf18      	it	ne
 8008166:	236a      	movne	r3, #106	; 0x6a
 8008168:	4da0      	ldr	r5, [pc, #640]	; (80083ec <_strtod_l+0x834>)
 800816a:	9304      	str	r3, [sp, #16]
 800816c:	4650      	mov	r0, sl
 800816e:	4659      	mov	r1, fp
 8008170:	2300      	movs	r3, #0
 8008172:	f1b8 0f00 	cmp.w	r8, #0
 8008176:	f300 810a 	bgt.w	800838e <_strtod_l+0x7d6>
 800817a:	b10b      	cbz	r3, 8008180 <_strtod_l+0x5c8>
 800817c:	4682      	mov	sl, r0
 800817e:	468b      	mov	fp, r1
 8008180:	9b04      	ldr	r3, [sp, #16]
 8008182:	b1bb      	cbz	r3, 80081b4 <_strtod_l+0x5fc>
 8008184:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008188:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800818c:	2b00      	cmp	r3, #0
 800818e:	4659      	mov	r1, fp
 8008190:	dd10      	ble.n	80081b4 <_strtod_l+0x5fc>
 8008192:	2b1f      	cmp	r3, #31
 8008194:	f340 8107 	ble.w	80083a6 <_strtod_l+0x7ee>
 8008198:	2b34      	cmp	r3, #52	; 0x34
 800819a:	bfde      	ittt	le
 800819c:	3b20      	suble	r3, #32
 800819e:	f04f 32ff 	movle.w	r2, #4294967295
 80081a2:	fa02 f303 	lslle.w	r3, r2, r3
 80081a6:	f04f 0a00 	mov.w	sl, #0
 80081aa:	bfcc      	ite	gt
 80081ac:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80081b0:	ea03 0b01 	andle.w	fp, r3, r1
 80081b4:	2200      	movs	r2, #0
 80081b6:	2300      	movs	r3, #0
 80081b8:	4650      	mov	r0, sl
 80081ba:	4659      	mov	r1, fp
 80081bc:	f7f8 fc42 	bl	8000a44 <__aeabi_dcmpeq>
 80081c0:	2800      	cmp	r0, #0
 80081c2:	d1ac      	bne.n	800811e <_strtod_l+0x566>
 80081c4:	9b07      	ldr	r3, [sp, #28]
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	9a05      	ldr	r2, [sp, #20]
 80081ca:	9908      	ldr	r1, [sp, #32]
 80081cc:	4623      	mov	r3, r4
 80081ce:	4648      	mov	r0, r9
 80081d0:	f000 ff98 	bl	8009104 <__s2b>
 80081d4:	9007      	str	r0, [sp, #28]
 80081d6:	2800      	cmp	r0, #0
 80081d8:	f43f af08 	beq.w	8007fec <_strtod_l+0x434>
 80081dc:	9a06      	ldr	r2, [sp, #24]
 80081de:	9b06      	ldr	r3, [sp, #24]
 80081e0:	2a00      	cmp	r2, #0
 80081e2:	f1c3 0300 	rsb	r3, r3, #0
 80081e6:	bfa8      	it	ge
 80081e8:	2300      	movge	r3, #0
 80081ea:	930e      	str	r3, [sp, #56]	; 0x38
 80081ec:	2400      	movs	r4, #0
 80081ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80081f2:	9316      	str	r3, [sp, #88]	; 0x58
 80081f4:	46a0      	mov	r8, r4
 80081f6:	9b07      	ldr	r3, [sp, #28]
 80081f8:	4648      	mov	r0, r9
 80081fa:	6859      	ldr	r1, [r3, #4]
 80081fc:	f000 fefc 	bl	8008ff8 <_Balloc>
 8008200:	9005      	str	r0, [sp, #20]
 8008202:	2800      	cmp	r0, #0
 8008204:	f43f aef6 	beq.w	8007ff4 <_strtod_l+0x43c>
 8008208:	9b07      	ldr	r3, [sp, #28]
 800820a:	691a      	ldr	r2, [r3, #16]
 800820c:	3202      	adds	r2, #2
 800820e:	f103 010c 	add.w	r1, r3, #12
 8008212:	0092      	lsls	r2, r2, #2
 8008214:	300c      	adds	r0, #12
 8008216:	f000 fee4 	bl	8008fe2 <memcpy>
 800821a:	aa1e      	add	r2, sp, #120	; 0x78
 800821c:	a91d      	add	r1, sp, #116	; 0x74
 800821e:	ec4b ab10 	vmov	d0, sl, fp
 8008222:	4648      	mov	r0, r9
 8008224:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008228:	f001 fa28 	bl	800967c <__d2b>
 800822c:	901c      	str	r0, [sp, #112]	; 0x70
 800822e:	2800      	cmp	r0, #0
 8008230:	f43f aee0 	beq.w	8007ff4 <_strtod_l+0x43c>
 8008234:	2101      	movs	r1, #1
 8008236:	4648      	mov	r0, r9
 8008238:	f000 fff0 	bl	800921c <__i2b>
 800823c:	4680      	mov	r8, r0
 800823e:	2800      	cmp	r0, #0
 8008240:	f43f aed8 	beq.w	8007ff4 <_strtod_l+0x43c>
 8008244:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008246:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008248:	2e00      	cmp	r6, #0
 800824a:	bfab      	itete	ge
 800824c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800824e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008250:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008252:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8008254:	bfac      	ite	ge
 8008256:	18f7      	addge	r7, r6, r3
 8008258:	1b9d      	sublt	r5, r3, r6
 800825a:	9b04      	ldr	r3, [sp, #16]
 800825c:	1af6      	subs	r6, r6, r3
 800825e:	4416      	add	r6, r2
 8008260:	4b63      	ldr	r3, [pc, #396]	; (80083f0 <_strtod_l+0x838>)
 8008262:	3e01      	subs	r6, #1
 8008264:	429e      	cmp	r6, r3
 8008266:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800826a:	f280 80af 	bge.w	80083cc <_strtod_l+0x814>
 800826e:	1b9b      	subs	r3, r3, r6
 8008270:	2b1f      	cmp	r3, #31
 8008272:	eba2 0203 	sub.w	r2, r2, r3
 8008276:	f04f 0101 	mov.w	r1, #1
 800827a:	f300 809b 	bgt.w	80083b4 <_strtod_l+0x7fc>
 800827e:	fa01 f303 	lsl.w	r3, r1, r3
 8008282:	930f      	str	r3, [sp, #60]	; 0x3c
 8008284:	2300      	movs	r3, #0
 8008286:	930a      	str	r3, [sp, #40]	; 0x28
 8008288:	18be      	adds	r6, r7, r2
 800828a:	9b04      	ldr	r3, [sp, #16]
 800828c:	42b7      	cmp	r7, r6
 800828e:	4415      	add	r5, r2
 8008290:	441d      	add	r5, r3
 8008292:	463b      	mov	r3, r7
 8008294:	bfa8      	it	ge
 8008296:	4633      	movge	r3, r6
 8008298:	42ab      	cmp	r3, r5
 800829a:	bfa8      	it	ge
 800829c:	462b      	movge	r3, r5
 800829e:	2b00      	cmp	r3, #0
 80082a0:	bfc2      	ittt	gt
 80082a2:	1af6      	subgt	r6, r6, r3
 80082a4:	1aed      	subgt	r5, r5, r3
 80082a6:	1aff      	subgt	r7, r7, r3
 80082a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082aa:	b1bb      	cbz	r3, 80082dc <_strtod_l+0x724>
 80082ac:	4641      	mov	r1, r8
 80082ae:	461a      	mov	r2, r3
 80082b0:	4648      	mov	r0, r9
 80082b2:	f001 f853 	bl	800935c <__pow5mult>
 80082b6:	4680      	mov	r8, r0
 80082b8:	2800      	cmp	r0, #0
 80082ba:	f43f ae9b 	beq.w	8007ff4 <_strtod_l+0x43c>
 80082be:	4601      	mov	r1, r0
 80082c0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80082c2:	4648      	mov	r0, r9
 80082c4:	f000 ffb3 	bl	800922e <__multiply>
 80082c8:	900c      	str	r0, [sp, #48]	; 0x30
 80082ca:	2800      	cmp	r0, #0
 80082cc:	f43f ae92 	beq.w	8007ff4 <_strtod_l+0x43c>
 80082d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80082d2:	4648      	mov	r0, r9
 80082d4:	f000 fec4 	bl	8009060 <_Bfree>
 80082d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082da:	931c      	str	r3, [sp, #112]	; 0x70
 80082dc:	2e00      	cmp	r6, #0
 80082de:	dc7a      	bgt.n	80083d6 <_strtod_l+0x81e>
 80082e0:	9b06      	ldr	r3, [sp, #24]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	dd08      	ble.n	80082f8 <_strtod_l+0x740>
 80082e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80082e8:	9905      	ldr	r1, [sp, #20]
 80082ea:	4648      	mov	r0, r9
 80082ec:	f001 f836 	bl	800935c <__pow5mult>
 80082f0:	9005      	str	r0, [sp, #20]
 80082f2:	2800      	cmp	r0, #0
 80082f4:	f43f ae7e 	beq.w	8007ff4 <_strtod_l+0x43c>
 80082f8:	2d00      	cmp	r5, #0
 80082fa:	dd08      	ble.n	800830e <_strtod_l+0x756>
 80082fc:	462a      	mov	r2, r5
 80082fe:	9905      	ldr	r1, [sp, #20]
 8008300:	4648      	mov	r0, r9
 8008302:	f001 f879 	bl	80093f8 <__lshift>
 8008306:	9005      	str	r0, [sp, #20]
 8008308:	2800      	cmp	r0, #0
 800830a:	f43f ae73 	beq.w	8007ff4 <_strtod_l+0x43c>
 800830e:	2f00      	cmp	r7, #0
 8008310:	dd08      	ble.n	8008324 <_strtod_l+0x76c>
 8008312:	4641      	mov	r1, r8
 8008314:	463a      	mov	r2, r7
 8008316:	4648      	mov	r0, r9
 8008318:	f001 f86e 	bl	80093f8 <__lshift>
 800831c:	4680      	mov	r8, r0
 800831e:	2800      	cmp	r0, #0
 8008320:	f43f ae68 	beq.w	8007ff4 <_strtod_l+0x43c>
 8008324:	9a05      	ldr	r2, [sp, #20]
 8008326:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008328:	4648      	mov	r0, r9
 800832a:	f001 f8d3 	bl	80094d4 <__mdiff>
 800832e:	4604      	mov	r4, r0
 8008330:	2800      	cmp	r0, #0
 8008332:	f43f ae5f 	beq.w	8007ff4 <_strtod_l+0x43c>
 8008336:	68c3      	ldr	r3, [r0, #12]
 8008338:	930c      	str	r3, [sp, #48]	; 0x30
 800833a:	2300      	movs	r3, #0
 800833c:	60c3      	str	r3, [r0, #12]
 800833e:	4641      	mov	r1, r8
 8008340:	f001 f8ae 	bl	80094a0 <__mcmp>
 8008344:	2800      	cmp	r0, #0
 8008346:	da55      	bge.n	80083f4 <_strtod_l+0x83c>
 8008348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800834a:	b9e3      	cbnz	r3, 8008386 <_strtod_l+0x7ce>
 800834c:	f1ba 0f00 	cmp.w	sl, #0
 8008350:	d119      	bne.n	8008386 <_strtod_l+0x7ce>
 8008352:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008356:	b9b3      	cbnz	r3, 8008386 <_strtod_l+0x7ce>
 8008358:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800835c:	0d1b      	lsrs	r3, r3, #20
 800835e:	051b      	lsls	r3, r3, #20
 8008360:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008364:	d90f      	bls.n	8008386 <_strtod_l+0x7ce>
 8008366:	6963      	ldr	r3, [r4, #20]
 8008368:	b913      	cbnz	r3, 8008370 <_strtod_l+0x7b8>
 800836a:	6923      	ldr	r3, [r4, #16]
 800836c:	2b01      	cmp	r3, #1
 800836e:	dd0a      	ble.n	8008386 <_strtod_l+0x7ce>
 8008370:	4621      	mov	r1, r4
 8008372:	2201      	movs	r2, #1
 8008374:	4648      	mov	r0, r9
 8008376:	f001 f83f 	bl	80093f8 <__lshift>
 800837a:	4641      	mov	r1, r8
 800837c:	4604      	mov	r4, r0
 800837e:	f001 f88f 	bl	80094a0 <__mcmp>
 8008382:	2800      	cmp	r0, #0
 8008384:	dc67      	bgt.n	8008456 <_strtod_l+0x89e>
 8008386:	9b04      	ldr	r3, [sp, #16]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d171      	bne.n	8008470 <_strtod_l+0x8b8>
 800838c:	e63d      	b.n	800800a <_strtod_l+0x452>
 800838e:	f018 0f01 	tst.w	r8, #1
 8008392:	d004      	beq.n	800839e <_strtod_l+0x7e6>
 8008394:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008398:	f7f8 f8ec 	bl	8000574 <__aeabi_dmul>
 800839c:	2301      	movs	r3, #1
 800839e:	ea4f 0868 	mov.w	r8, r8, asr #1
 80083a2:	3508      	adds	r5, #8
 80083a4:	e6e5      	b.n	8008172 <_strtod_l+0x5ba>
 80083a6:	f04f 32ff 	mov.w	r2, #4294967295
 80083aa:	fa02 f303 	lsl.w	r3, r2, r3
 80083ae:	ea03 0a0a 	and.w	sl, r3, sl
 80083b2:	e6ff      	b.n	80081b4 <_strtod_l+0x5fc>
 80083b4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80083b8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80083bc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80083c0:	36e2      	adds	r6, #226	; 0xe2
 80083c2:	fa01 f306 	lsl.w	r3, r1, r6
 80083c6:	930a      	str	r3, [sp, #40]	; 0x28
 80083c8:	910f      	str	r1, [sp, #60]	; 0x3c
 80083ca:	e75d      	b.n	8008288 <_strtod_l+0x6d0>
 80083cc:	2300      	movs	r3, #0
 80083ce:	930a      	str	r3, [sp, #40]	; 0x28
 80083d0:	2301      	movs	r3, #1
 80083d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80083d4:	e758      	b.n	8008288 <_strtod_l+0x6d0>
 80083d6:	4632      	mov	r2, r6
 80083d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80083da:	4648      	mov	r0, r9
 80083dc:	f001 f80c 	bl	80093f8 <__lshift>
 80083e0:	901c      	str	r0, [sp, #112]	; 0x70
 80083e2:	2800      	cmp	r0, #0
 80083e4:	f47f af7c 	bne.w	80082e0 <_strtod_l+0x728>
 80083e8:	e604      	b.n	8007ff4 <_strtod_l+0x43c>
 80083ea:	bf00      	nop
 80083ec:	08009c78 	.word	0x08009c78
 80083f0:	fffffc02 	.word	0xfffffc02
 80083f4:	465d      	mov	r5, fp
 80083f6:	f040 8086 	bne.w	8008506 <_strtod_l+0x94e>
 80083fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008400:	b32a      	cbz	r2, 800844e <_strtod_l+0x896>
 8008402:	4aaf      	ldr	r2, [pc, #700]	; (80086c0 <_strtod_l+0xb08>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d153      	bne.n	80084b0 <_strtod_l+0x8f8>
 8008408:	9b04      	ldr	r3, [sp, #16]
 800840a:	4650      	mov	r0, sl
 800840c:	b1d3      	cbz	r3, 8008444 <_strtod_l+0x88c>
 800840e:	4aad      	ldr	r2, [pc, #692]	; (80086c4 <_strtod_l+0xb0c>)
 8008410:	402a      	ands	r2, r5
 8008412:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008416:	f04f 31ff 	mov.w	r1, #4294967295
 800841a:	d816      	bhi.n	800844a <_strtod_l+0x892>
 800841c:	0d12      	lsrs	r2, r2, #20
 800841e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008422:	fa01 f303 	lsl.w	r3, r1, r3
 8008426:	4298      	cmp	r0, r3
 8008428:	d142      	bne.n	80084b0 <_strtod_l+0x8f8>
 800842a:	4ba7      	ldr	r3, [pc, #668]	; (80086c8 <_strtod_l+0xb10>)
 800842c:	429d      	cmp	r5, r3
 800842e:	d102      	bne.n	8008436 <_strtod_l+0x87e>
 8008430:	3001      	adds	r0, #1
 8008432:	f43f addf 	beq.w	8007ff4 <_strtod_l+0x43c>
 8008436:	4ba3      	ldr	r3, [pc, #652]	; (80086c4 <_strtod_l+0xb0c>)
 8008438:	402b      	ands	r3, r5
 800843a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800843e:	f04f 0a00 	mov.w	sl, #0
 8008442:	e7a0      	b.n	8008386 <_strtod_l+0x7ce>
 8008444:	f04f 33ff 	mov.w	r3, #4294967295
 8008448:	e7ed      	b.n	8008426 <_strtod_l+0x86e>
 800844a:	460b      	mov	r3, r1
 800844c:	e7eb      	b.n	8008426 <_strtod_l+0x86e>
 800844e:	bb7b      	cbnz	r3, 80084b0 <_strtod_l+0x8f8>
 8008450:	f1ba 0f00 	cmp.w	sl, #0
 8008454:	d12c      	bne.n	80084b0 <_strtod_l+0x8f8>
 8008456:	9904      	ldr	r1, [sp, #16]
 8008458:	4a9a      	ldr	r2, [pc, #616]	; (80086c4 <_strtod_l+0xb0c>)
 800845a:	465b      	mov	r3, fp
 800845c:	b1f1      	cbz	r1, 800849c <_strtod_l+0x8e4>
 800845e:	ea02 010b 	and.w	r1, r2, fp
 8008462:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008466:	dc19      	bgt.n	800849c <_strtod_l+0x8e4>
 8008468:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800846c:	f77f ae5b 	ble.w	8008126 <_strtod_l+0x56e>
 8008470:	4a96      	ldr	r2, [pc, #600]	; (80086cc <_strtod_l+0xb14>)
 8008472:	2300      	movs	r3, #0
 8008474:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008478:	4650      	mov	r0, sl
 800847a:	4659      	mov	r1, fp
 800847c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008480:	f7f8 f878 	bl	8000574 <__aeabi_dmul>
 8008484:	4682      	mov	sl, r0
 8008486:	468b      	mov	fp, r1
 8008488:	2900      	cmp	r1, #0
 800848a:	f47f adbe 	bne.w	800800a <_strtod_l+0x452>
 800848e:	2800      	cmp	r0, #0
 8008490:	f47f adbb 	bne.w	800800a <_strtod_l+0x452>
 8008494:	2322      	movs	r3, #34	; 0x22
 8008496:	f8c9 3000 	str.w	r3, [r9]
 800849a:	e5b6      	b.n	800800a <_strtod_l+0x452>
 800849c:	4013      	ands	r3, r2
 800849e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80084a2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80084a6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80084aa:	f04f 3aff 	mov.w	sl, #4294967295
 80084ae:	e76a      	b.n	8008386 <_strtod_l+0x7ce>
 80084b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084b2:	b193      	cbz	r3, 80084da <_strtod_l+0x922>
 80084b4:	422b      	tst	r3, r5
 80084b6:	f43f af66 	beq.w	8008386 <_strtod_l+0x7ce>
 80084ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084bc:	9a04      	ldr	r2, [sp, #16]
 80084be:	4650      	mov	r0, sl
 80084c0:	4659      	mov	r1, fp
 80084c2:	b173      	cbz	r3, 80084e2 <_strtod_l+0x92a>
 80084c4:	f7ff fb5a 	bl	8007b7c <sulp>
 80084c8:	4602      	mov	r2, r0
 80084ca:	460b      	mov	r3, r1
 80084cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80084d0:	f7f7 fe9a 	bl	8000208 <__adddf3>
 80084d4:	4682      	mov	sl, r0
 80084d6:	468b      	mov	fp, r1
 80084d8:	e755      	b.n	8008386 <_strtod_l+0x7ce>
 80084da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084dc:	ea13 0f0a 	tst.w	r3, sl
 80084e0:	e7e9      	b.n	80084b6 <_strtod_l+0x8fe>
 80084e2:	f7ff fb4b 	bl	8007b7c <sulp>
 80084e6:	4602      	mov	r2, r0
 80084e8:	460b      	mov	r3, r1
 80084ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80084ee:	f7f7 fe89 	bl	8000204 <__aeabi_dsub>
 80084f2:	2200      	movs	r2, #0
 80084f4:	2300      	movs	r3, #0
 80084f6:	4682      	mov	sl, r0
 80084f8:	468b      	mov	fp, r1
 80084fa:	f7f8 faa3 	bl	8000a44 <__aeabi_dcmpeq>
 80084fe:	2800      	cmp	r0, #0
 8008500:	f47f ae11 	bne.w	8008126 <_strtod_l+0x56e>
 8008504:	e73f      	b.n	8008386 <_strtod_l+0x7ce>
 8008506:	4641      	mov	r1, r8
 8008508:	4620      	mov	r0, r4
 800850a:	f001 f906 	bl	800971a <__ratio>
 800850e:	ec57 6b10 	vmov	r6, r7, d0
 8008512:	2200      	movs	r2, #0
 8008514:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008518:	ee10 0a10 	vmov	r0, s0
 800851c:	4639      	mov	r1, r7
 800851e:	f7f8 faa5 	bl	8000a6c <__aeabi_dcmple>
 8008522:	2800      	cmp	r0, #0
 8008524:	d077      	beq.n	8008616 <_strtod_l+0xa5e>
 8008526:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008528:	2b00      	cmp	r3, #0
 800852a:	d04a      	beq.n	80085c2 <_strtod_l+0xa0a>
 800852c:	4b68      	ldr	r3, [pc, #416]	; (80086d0 <_strtod_l+0xb18>)
 800852e:	2200      	movs	r2, #0
 8008530:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008534:	4f66      	ldr	r7, [pc, #408]	; (80086d0 <_strtod_l+0xb18>)
 8008536:	2600      	movs	r6, #0
 8008538:	4b62      	ldr	r3, [pc, #392]	; (80086c4 <_strtod_l+0xb0c>)
 800853a:	402b      	ands	r3, r5
 800853c:	930f      	str	r3, [sp, #60]	; 0x3c
 800853e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008540:	4b64      	ldr	r3, [pc, #400]	; (80086d4 <_strtod_l+0xb1c>)
 8008542:	429a      	cmp	r2, r3
 8008544:	f040 80ce 	bne.w	80086e4 <_strtod_l+0xb2c>
 8008548:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800854c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008550:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8008554:	ec4b ab10 	vmov	d0, sl, fp
 8008558:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800855c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008560:	f001 f816 	bl	8009590 <__ulp>
 8008564:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008568:	ec53 2b10 	vmov	r2, r3, d0
 800856c:	f7f8 f802 	bl	8000574 <__aeabi_dmul>
 8008570:	4652      	mov	r2, sl
 8008572:	465b      	mov	r3, fp
 8008574:	f7f7 fe48 	bl	8000208 <__adddf3>
 8008578:	460b      	mov	r3, r1
 800857a:	4952      	ldr	r1, [pc, #328]	; (80086c4 <_strtod_l+0xb0c>)
 800857c:	4a56      	ldr	r2, [pc, #344]	; (80086d8 <_strtod_l+0xb20>)
 800857e:	4019      	ands	r1, r3
 8008580:	4291      	cmp	r1, r2
 8008582:	4682      	mov	sl, r0
 8008584:	d95b      	bls.n	800863e <_strtod_l+0xa86>
 8008586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008588:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800858c:	4293      	cmp	r3, r2
 800858e:	d103      	bne.n	8008598 <_strtod_l+0x9e0>
 8008590:	9b08      	ldr	r3, [sp, #32]
 8008592:	3301      	adds	r3, #1
 8008594:	f43f ad2e 	beq.w	8007ff4 <_strtod_l+0x43c>
 8008598:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80086c8 <_strtod_l+0xb10>
 800859c:	f04f 3aff 	mov.w	sl, #4294967295
 80085a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80085a2:	4648      	mov	r0, r9
 80085a4:	f000 fd5c 	bl	8009060 <_Bfree>
 80085a8:	9905      	ldr	r1, [sp, #20]
 80085aa:	4648      	mov	r0, r9
 80085ac:	f000 fd58 	bl	8009060 <_Bfree>
 80085b0:	4641      	mov	r1, r8
 80085b2:	4648      	mov	r0, r9
 80085b4:	f000 fd54 	bl	8009060 <_Bfree>
 80085b8:	4621      	mov	r1, r4
 80085ba:	4648      	mov	r0, r9
 80085bc:	f000 fd50 	bl	8009060 <_Bfree>
 80085c0:	e619      	b.n	80081f6 <_strtod_l+0x63e>
 80085c2:	f1ba 0f00 	cmp.w	sl, #0
 80085c6:	d11a      	bne.n	80085fe <_strtod_l+0xa46>
 80085c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085cc:	b9eb      	cbnz	r3, 800860a <_strtod_l+0xa52>
 80085ce:	2200      	movs	r2, #0
 80085d0:	4b3f      	ldr	r3, [pc, #252]	; (80086d0 <_strtod_l+0xb18>)
 80085d2:	4630      	mov	r0, r6
 80085d4:	4639      	mov	r1, r7
 80085d6:	f7f8 fa3f 	bl	8000a58 <__aeabi_dcmplt>
 80085da:	b9c8      	cbnz	r0, 8008610 <_strtod_l+0xa58>
 80085dc:	4630      	mov	r0, r6
 80085de:	4639      	mov	r1, r7
 80085e0:	2200      	movs	r2, #0
 80085e2:	4b3e      	ldr	r3, [pc, #248]	; (80086dc <_strtod_l+0xb24>)
 80085e4:	f7f7 ffc6 	bl	8000574 <__aeabi_dmul>
 80085e8:	4606      	mov	r6, r0
 80085ea:	460f      	mov	r7, r1
 80085ec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80085f0:	9618      	str	r6, [sp, #96]	; 0x60
 80085f2:	9319      	str	r3, [sp, #100]	; 0x64
 80085f4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80085f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80085fc:	e79c      	b.n	8008538 <_strtod_l+0x980>
 80085fe:	f1ba 0f01 	cmp.w	sl, #1
 8008602:	d102      	bne.n	800860a <_strtod_l+0xa52>
 8008604:	2d00      	cmp	r5, #0
 8008606:	f43f ad8e 	beq.w	8008126 <_strtod_l+0x56e>
 800860a:	2200      	movs	r2, #0
 800860c:	4b34      	ldr	r3, [pc, #208]	; (80086e0 <_strtod_l+0xb28>)
 800860e:	e78f      	b.n	8008530 <_strtod_l+0x978>
 8008610:	2600      	movs	r6, #0
 8008612:	4f32      	ldr	r7, [pc, #200]	; (80086dc <_strtod_l+0xb24>)
 8008614:	e7ea      	b.n	80085ec <_strtod_l+0xa34>
 8008616:	4b31      	ldr	r3, [pc, #196]	; (80086dc <_strtod_l+0xb24>)
 8008618:	4630      	mov	r0, r6
 800861a:	4639      	mov	r1, r7
 800861c:	2200      	movs	r2, #0
 800861e:	f7f7 ffa9 	bl	8000574 <__aeabi_dmul>
 8008622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008624:	4606      	mov	r6, r0
 8008626:	460f      	mov	r7, r1
 8008628:	b933      	cbnz	r3, 8008638 <_strtod_l+0xa80>
 800862a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800862e:	9010      	str	r0, [sp, #64]	; 0x40
 8008630:	9311      	str	r3, [sp, #68]	; 0x44
 8008632:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008636:	e7df      	b.n	80085f8 <_strtod_l+0xa40>
 8008638:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800863c:	e7f9      	b.n	8008632 <_strtod_l+0xa7a>
 800863e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008642:	9b04      	ldr	r3, [sp, #16]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1ab      	bne.n	80085a0 <_strtod_l+0x9e8>
 8008648:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800864c:	0d1b      	lsrs	r3, r3, #20
 800864e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008650:	051b      	lsls	r3, r3, #20
 8008652:	429a      	cmp	r2, r3
 8008654:	465d      	mov	r5, fp
 8008656:	d1a3      	bne.n	80085a0 <_strtod_l+0x9e8>
 8008658:	4639      	mov	r1, r7
 800865a:	4630      	mov	r0, r6
 800865c:	f7f8 fa24 	bl	8000aa8 <__aeabi_d2iz>
 8008660:	f7f7 ff1e 	bl	80004a0 <__aeabi_i2d>
 8008664:	460b      	mov	r3, r1
 8008666:	4602      	mov	r2, r0
 8008668:	4639      	mov	r1, r7
 800866a:	4630      	mov	r0, r6
 800866c:	f7f7 fdca 	bl	8000204 <__aeabi_dsub>
 8008670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008672:	4606      	mov	r6, r0
 8008674:	460f      	mov	r7, r1
 8008676:	b933      	cbnz	r3, 8008686 <_strtod_l+0xace>
 8008678:	f1ba 0f00 	cmp.w	sl, #0
 800867c:	d103      	bne.n	8008686 <_strtod_l+0xace>
 800867e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8008682:	2d00      	cmp	r5, #0
 8008684:	d06d      	beq.n	8008762 <_strtod_l+0xbaa>
 8008686:	a30a      	add	r3, pc, #40	; (adr r3, 80086b0 <_strtod_l+0xaf8>)
 8008688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868c:	4630      	mov	r0, r6
 800868e:	4639      	mov	r1, r7
 8008690:	f7f8 f9e2 	bl	8000a58 <__aeabi_dcmplt>
 8008694:	2800      	cmp	r0, #0
 8008696:	f47f acb8 	bne.w	800800a <_strtod_l+0x452>
 800869a:	a307      	add	r3, pc, #28	; (adr r3, 80086b8 <_strtod_l+0xb00>)
 800869c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a0:	4630      	mov	r0, r6
 80086a2:	4639      	mov	r1, r7
 80086a4:	f7f8 f9f6 	bl	8000a94 <__aeabi_dcmpgt>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	f43f af79 	beq.w	80085a0 <_strtod_l+0x9e8>
 80086ae:	e4ac      	b.n	800800a <_strtod_l+0x452>
 80086b0:	94a03595 	.word	0x94a03595
 80086b4:	3fdfffff 	.word	0x3fdfffff
 80086b8:	35afe535 	.word	0x35afe535
 80086bc:	3fe00000 	.word	0x3fe00000
 80086c0:	000fffff 	.word	0x000fffff
 80086c4:	7ff00000 	.word	0x7ff00000
 80086c8:	7fefffff 	.word	0x7fefffff
 80086cc:	39500000 	.word	0x39500000
 80086d0:	3ff00000 	.word	0x3ff00000
 80086d4:	7fe00000 	.word	0x7fe00000
 80086d8:	7c9fffff 	.word	0x7c9fffff
 80086dc:	3fe00000 	.word	0x3fe00000
 80086e0:	bff00000 	.word	0xbff00000
 80086e4:	9b04      	ldr	r3, [sp, #16]
 80086e6:	b333      	cbz	r3, 8008736 <_strtod_l+0xb7e>
 80086e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086ea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80086ee:	d822      	bhi.n	8008736 <_strtod_l+0xb7e>
 80086f0:	a327      	add	r3, pc, #156	; (adr r3, 8008790 <_strtod_l+0xbd8>)
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	4630      	mov	r0, r6
 80086f8:	4639      	mov	r1, r7
 80086fa:	f7f8 f9b7 	bl	8000a6c <__aeabi_dcmple>
 80086fe:	b1a0      	cbz	r0, 800872a <_strtod_l+0xb72>
 8008700:	4639      	mov	r1, r7
 8008702:	4630      	mov	r0, r6
 8008704:	f7f8 f9f8 	bl	8000af8 <__aeabi_d2uiz>
 8008708:	2800      	cmp	r0, #0
 800870a:	bf08      	it	eq
 800870c:	2001      	moveq	r0, #1
 800870e:	f7f7 feb7 	bl	8000480 <__aeabi_ui2d>
 8008712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008714:	4606      	mov	r6, r0
 8008716:	460f      	mov	r7, r1
 8008718:	bb03      	cbnz	r3, 800875c <_strtod_l+0xba4>
 800871a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800871e:	9012      	str	r0, [sp, #72]	; 0x48
 8008720:	9313      	str	r3, [sp, #76]	; 0x4c
 8008722:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008726:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800872a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800872c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800872e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008732:	1a9b      	subs	r3, r3, r2
 8008734:	930b      	str	r3, [sp, #44]	; 0x2c
 8008736:	ed9d 0b08 	vldr	d0, [sp, #32]
 800873a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800873e:	f000 ff27 	bl	8009590 <__ulp>
 8008742:	4650      	mov	r0, sl
 8008744:	ec53 2b10 	vmov	r2, r3, d0
 8008748:	4659      	mov	r1, fp
 800874a:	f7f7 ff13 	bl	8000574 <__aeabi_dmul>
 800874e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008752:	f7f7 fd59 	bl	8000208 <__adddf3>
 8008756:	4682      	mov	sl, r0
 8008758:	468b      	mov	fp, r1
 800875a:	e772      	b.n	8008642 <_strtod_l+0xa8a>
 800875c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008760:	e7df      	b.n	8008722 <_strtod_l+0xb6a>
 8008762:	a30d      	add	r3, pc, #52	; (adr r3, 8008798 <_strtod_l+0xbe0>)
 8008764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008768:	f7f8 f976 	bl	8000a58 <__aeabi_dcmplt>
 800876c:	e79c      	b.n	80086a8 <_strtod_l+0xaf0>
 800876e:	2300      	movs	r3, #0
 8008770:	930d      	str	r3, [sp, #52]	; 0x34
 8008772:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008774:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008776:	6013      	str	r3, [r2, #0]
 8008778:	f7ff ba61 	b.w	8007c3e <_strtod_l+0x86>
 800877c:	2b65      	cmp	r3, #101	; 0x65
 800877e:	f04f 0200 	mov.w	r2, #0
 8008782:	f43f ab4e 	beq.w	8007e22 <_strtod_l+0x26a>
 8008786:	2101      	movs	r1, #1
 8008788:	4614      	mov	r4, r2
 800878a:	9104      	str	r1, [sp, #16]
 800878c:	f7ff bacb 	b.w	8007d26 <_strtod_l+0x16e>
 8008790:	ffc00000 	.word	0xffc00000
 8008794:	41dfffff 	.word	0x41dfffff
 8008798:	94a03595 	.word	0x94a03595
 800879c:	3fcfffff 	.word	0x3fcfffff

080087a0 <strtod>:
 80087a0:	4b07      	ldr	r3, [pc, #28]	; (80087c0 <strtod+0x20>)
 80087a2:	4a08      	ldr	r2, [pc, #32]	; (80087c4 <strtod+0x24>)
 80087a4:	b410      	push	{r4}
 80087a6:	681c      	ldr	r4, [r3, #0]
 80087a8:	6a23      	ldr	r3, [r4, #32]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	bf08      	it	eq
 80087ae:	4613      	moveq	r3, r2
 80087b0:	460a      	mov	r2, r1
 80087b2:	4601      	mov	r1, r0
 80087b4:	4620      	mov	r0, r4
 80087b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087ba:	f7ff b9fd 	b.w	8007bb8 <_strtod_l>
 80087be:	bf00      	nop
 80087c0:	20000a24 	.word	0x20000a24
 80087c4:	20000a88 	.word	0x20000a88

080087c8 <_strtol_l.isra.0>:
 80087c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087cc:	4680      	mov	r8, r0
 80087ce:	4689      	mov	r9, r1
 80087d0:	4692      	mov	sl, r2
 80087d2:	461e      	mov	r6, r3
 80087d4:	460f      	mov	r7, r1
 80087d6:	463d      	mov	r5, r7
 80087d8:	9808      	ldr	r0, [sp, #32]
 80087da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087de:	f000 fbe9 	bl	8008fb4 <__locale_ctype_ptr_l>
 80087e2:	4420      	add	r0, r4
 80087e4:	7843      	ldrb	r3, [r0, #1]
 80087e6:	f013 0308 	ands.w	r3, r3, #8
 80087ea:	d132      	bne.n	8008852 <_strtol_l.isra.0+0x8a>
 80087ec:	2c2d      	cmp	r4, #45	; 0x2d
 80087ee:	d132      	bne.n	8008856 <_strtol_l.isra.0+0x8e>
 80087f0:	787c      	ldrb	r4, [r7, #1]
 80087f2:	1cbd      	adds	r5, r7, #2
 80087f4:	2201      	movs	r2, #1
 80087f6:	2e00      	cmp	r6, #0
 80087f8:	d05d      	beq.n	80088b6 <_strtol_l.isra.0+0xee>
 80087fa:	2e10      	cmp	r6, #16
 80087fc:	d109      	bne.n	8008812 <_strtol_l.isra.0+0x4a>
 80087fe:	2c30      	cmp	r4, #48	; 0x30
 8008800:	d107      	bne.n	8008812 <_strtol_l.isra.0+0x4a>
 8008802:	782b      	ldrb	r3, [r5, #0]
 8008804:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008808:	2b58      	cmp	r3, #88	; 0x58
 800880a:	d14f      	bne.n	80088ac <_strtol_l.isra.0+0xe4>
 800880c:	786c      	ldrb	r4, [r5, #1]
 800880e:	2610      	movs	r6, #16
 8008810:	3502      	adds	r5, #2
 8008812:	2a00      	cmp	r2, #0
 8008814:	bf14      	ite	ne
 8008816:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800881a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800881e:	2700      	movs	r7, #0
 8008820:	fbb1 fcf6 	udiv	ip, r1, r6
 8008824:	4638      	mov	r0, r7
 8008826:	fb06 1e1c 	mls	lr, r6, ip, r1
 800882a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800882e:	2b09      	cmp	r3, #9
 8008830:	d817      	bhi.n	8008862 <_strtol_l.isra.0+0x9a>
 8008832:	461c      	mov	r4, r3
 8008834:	42a6      	cmp	r6, r4
 8008836:	dd23      	ble.n	8008880 <_strtol_l.isra.0+0xb8>
 8008838:	1c7b      	adds	r3, r7, #1
 800883a:	d007      	beq.n	800884c <_strtol_l.isra.0+0x84>
 800883c:	4584      	cmp	ip, r0
 800883e:	d31c      	bcc.n	800887a <_strtol_l.isra.0+0xb2>
 8008840:	d101      	bne.n	8008846 <_strtol_l.isra.0+0x7e>
 8008842:	45a6      	cmp	lr, r4
 8008844:	db19      	blt.n	800887a <_strtol_l.isra.0+0xb2>
 8008846:	fb00 4006 	mla	r0, r0, r6, r4
 800884a:	2701      	movs	r7, #1
 800884c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008850:	e7eb      	b.n	800882a <_strtol_l.isra.0+0x62>
 8008852:	462f      	mov	r7, r5
 8008854:	e7bf      	b.n	80087d6 <_strtol_l.isra.0+0xe>
 8008856:	2c2b      	cmp	r4, #43	; 0x2b
 8008858:	bf04      	itt	eq
 800885a:	1cbd      	addeq	r5, r7, #2
 800885c:	787c      	ldrbeq	r4, [r7, #1]
 800885e:	461a      	mov	r2, r3
 8008860:	e7c9      	b.n	80087f6 <_strtol_l.isra.0+0x2e>
 8008862:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008866:	2b19      	cmp	r3, #25
 8008868:	d801      	bhi.n	800886e <_strtol_l.isra.0+0xa6>
 800886a:	3c37      	subs	r4, #55	; 0x37
 800886c:	e7e2      	b.n	8008834 <_strtol_l.isra.0+0x6c>
 800886e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008872:	2b19      	cmp	r3, #25
 8008874:	d804      	bhi.n	8008880 <_strtol_l.isra.0+0xb8>
 8008876:	3c57      	subs	r4, #87	; 0x57
 8008878:	e7dc      	b.n	8008834 <_strtol_l.isra.0+0x6c>
 800887a:	f04f 37ff 	mov.w	r7, #4294967295
 800887e:	e7e5      	b.n	800884c <_strtol_l.isra.0+0x84>
 8008880:	1c7b      	adds	r3, r7, #1
 8008882:	d108      	bne.n	8008896 <_strtol_l.isra.0+0xce>
 8008884:	2322      	movs	r3, #34	; 0x22
 8008886:	f8c8 3000 	str.w	r3, [r8]
 800888a:	4608      	mov	r0, r1
 800888c:	f1ba 0f00 	cmp.w	sl, #0
 8008890:	d107      	bne.n	80088a2 <_strtol_l.isra.0+0xda>
 8008892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008896:	b102      	cbz	r2, 800889a <_strtol_l.isra.0+0xd2>
 8008898:	4240      	negs	r0, r0
 800889a:	f1ba 0f00 	cmp.w	sl, #0
 800889e:	d0f8      	beq.n	8008892 <_strtol_l.isra.0+0xca>
 80088a0:	b10f      	cbz	r7, 80088a6 <_strtol_l.isra.0+0xde>
 80088a2:	f105 39ff 	add.w	r9, r5, #4294967295
 80088a6:	f8ca 9000 	str.w	r9, [sl]
 80088aa:	e7f2      	b.n	8008892 <_strtol_l.isra.0+0xca>
 80088ac:	2430      	movs	r4, #48	; 0x30
 80088ae:	2e00      	cmp	r6, #0
 80088b0:	d1af      	bne.n	8008812 <_strtol_l.isra.0+0x4a>
 80088b2:	2608      	movs	r6, #8
 80088b4:	e7ad      	b.n	8008812 <_strtol_l.isra.0+0x4a>
 80088b6:	2c30      	cmp	r4, #48	; 0x30
 80088b8:	d0a3      	beq.n	8008802 <_strtol_l.isra.0+0x3a>
 80088ba:	260a      	movs	r6, #10
 80088bc:	e7a9      	b.n	8008812 <_strtol_l.isra.0+0x4a>
	...

080088c0 <strtol>:
 80088c0:	4b08      	ldr	r3, [pc, #32]	; (80088e4 <strtol+0x24>)
 80088c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088c4:	681c      	ldr	r4, [r3, #0]
 80088c6:	4d08      	ldr	r5, [pc, #32]	; (80088e8 <strtol+0x28>)
 80088c8:	6a23      	ldr	r3, [r4, #32]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	bf08      	it	eq
 80088ce:	462b      	moveq	r3, r5
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	4613      	mov	r3, r2
 80088d4:	460a      	mov	r2, r1
 80088d6:	4601      	mov	r1, r0
 80088d8:	4620      	mov	r0, r4
 80088da:	f7ff ff75 	bl	80087c8 <_strtol_l.isra.0>
 80088de:	b003      	add	sp, #12
 80088e0:	bd30      	pop	{r4, r5, pc}
 80088e2:	bf00      	nop
 80088e4:	20000a24 	.word	0x20000a24
 80088e8:	20000a88 	.word	0x20000a88

080088ec <__utoa>:
 80088ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088ee:	4b1d      	ldr	r3, [pc, #116]	; (8008964 <__utoa+0x78>)
 80088f0:	b08b      	sub	sp, #44	; 0x2c
 80088f2:	4605      	mov	r5, r0
 80088f4:	460c      	mov	r4, r1
 80088f6:	466e      	mov	r6, sp
 80088f8:	f103 0c20 	add.w	ip, r3, #32
 80088fc:	6818      	ldr	r0, [r3, #0]
 80088fe:	6859      	ldr	r1, [r3, #4]
 8008900:	4637      	mov	r7, r6
 8008902:	c703      	stmia	r7!, {r0, r1}
 8008904:	3308      	adds	r3, #8
 8008906:	4563      	cmp	r3, ip
 8008908:	463e      	mov	r6, r7
 800890a:	d1f7      	bne.n	80088fc <__utoa+0x10>
 800890c:	6818      	ldr	r0, [r3, #0]
 800890e:	791b      	ldrb	r3, [r3, #4]
 8008910:	713b      	strb	r3, [r7, #4]
 8008912:	1e93      	subs	r3, r2, #2
 8008914:	2b22      	cmp	r3, #34	; 0x22
 8008916:	6038      	str	r0, [r7, #0]
 8008918:	f04f 0300 	mov.w	r3, #0
 800891c:	d904      	bls.n	8008928 <__utoa+0x3c>
 800891e:	7023      	strb	r3, [r4, #0]
 8008920:	461c      	mov	r4, r3
 8008922:	4620      	mov	r0, r4
 8008924:	b00b      	add	sp, #44	; 0x2c
 8008926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008928:	1e66      	subs	r6, r4, #1
 800892a:	fbb5 f0f2 	udiv	r0, r5, r2
 800892e:	af0a      	add	r7, sp, #40	; 0x28
 8008930:	fb02 5510 	mls	r5, r2, r0, r5
 8008934:	443d      	add	r5, r7
 8008936:	1c59      	adds	r1, r3, #1
 8008938:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800893c:	f806 5f01 	strb.w	r5, [r6, #1]!
 8008940:	4605      	mov	r5, r0
 8008942:	b968      	cbnz	r0, 8008960 <__utoa+0x74>
 8008944:	5460      	strb	r0, [r4, r1]
 8008946:	4423      	add	r3, r4
 8008948:	4622      	mov	r2, r4
 800894a:	1b19      	subs	r1, r3, r4
 800894c:	1b10      	subs	r0, r2, r4
 800894e:	4281      	cmp	r1, r0
 8008950:	dde7      	ble.n	8008922 <__utoa+0x36>
 8008952:	7811      	ldrb	r1, [r2, #0]
 8008954:	7818      	ldrb	r0, [r3, #0]
 8008956:	f802 0b01 	strb.w	r0, [r2], #1
 800895a:	f803 1901 	strb.w	r1, [r3], #-1
 800895e:	e7f4      	b.n	800894a <__utoa+0x5e>
 8008960:	460b      	mov	r3, r1
 8008962:	e7e2      	b.n	800892a <__utoa+0x3e>
 8008964:	08009ca0 	.word	0x08009ca0

08008968 <rshift>:
 8008968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800896a:	6906      	ldr	r6, [r0, #16]
 800896c:	114b      	asrs	r3, r1, #5
 800896e:	429e      	cmp	r6, r3
 8008970:	f100 0414 	add.w	r4, r0, #20
 8008974:	dd30      	ble.n	80089d8 <rshift+0x70>
 8008976:	f011 011f 	ands.w	r1, r1, #31
 800897a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800897e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008982:	d108      	bne.n	8008996 <rshift+0x2e>
 8008984:	4621      	mov	r1, r4
 8008986:	42b2      	cmp	r2, r6
 8008988:	460b      	mov	r3, r1
 800898a:	d211      	bcs.n	80089b0 <rshift+0x48>
 800898c:	f852 3b04 	ldr.w	r3, [r2], #4
 8008990:	f841 3b04 	str.w	r3, [r1], #4
 8008994:	e7f7      	b.n	8008986 <rshift+0x1e>
 8008996:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800899a:	f1c1 0c20 	rsb	ip, r1, #32
 800899e:	40cd      	lsrs	r5, r1
 80089a0:	3204      	adds	r2, #4
 80089a2:	4623      	mov	r3, r4
 80089a4:	42b2      	cmp	r2, r6
 80089a6:	4617      	mov	r7, r2
 80089a8:	d30c      	bcc.n	80089c4 <rshift+0x5c>
 80089aa:	601d      	str	r5, [r3, #0]
 80089ac:	b105      	cbz	r5, 80089b0 <rshift+0x48>
 80089ae:	3304      	adds	r3, #4
 80089b0:	1b1a      	subs	r2, r3, r4
 80089b2:	42a3      	cmp	r3, r4
 80089b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80089b8:	bf08      	it	eq
 80089ba:	2300      	moveq	r3, #0
 80089bc:	6102      	str	r2, [r0, #16]
 80089be:	bf08      	it	eq
 80089c0:	6143      	streq	r3, [r0, #20]
 80089c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089c4:	683f      	ldr	r7, [r7, #0]
 80089c6:	fa07 f70c 	lsl.w	r7, r7, ip
 80089ca:	433d      	orrs	r5, r7
 80089cc:	f843 5b04 	str.w	r5, [r3], #4
 80089d0:	f852 5b04 	ldr.w	r5, [r2], #4
 80089d4:	40cd      	lsrs	r5, r1
 80089d6:	e7e5      	b.n	80089a4 <rshift+0x3c>
 80089d8:	4623      	mov	r3, r4
 80089da:	e7e9      	b.n	80089b0 <rshift+0x48>

080089dc <__hexdig_fun>:
 80089dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80089e0:	2b09      	cmp	r3, #9
 80089e2:	d802      	bhi.n	80089ea <__hexdig_fun+0xe>
 80089e4:	3820      	subs	r0, #32
 80089e6:	b2c0      	uxtb	r0, r0
 80089e8:	4770      	bx	lr
 80089ea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80089ee:	2b05      	cmp	r3, #5
 80089f0:	d801      	bhi.n	80089f6 <__hexdig_fun+0x1a>
 80089f2:	3847      	subs	r0, #71	; 0x47
 80089f4:	e7f7      	b.n	80089e6 <__hexdig_fun+0xa>
 80089f6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80089fa:	2b05      	cmp	r3, #5
 80089fc:	d801      	bhi.n	8008a02 <__hexdig_fun+0x26>
 80089fe:	3827      	subs	r0, #39	; 0x27
 8008a00:	e7f1      	b.n	80089e6 <__hexdig_fun+0xa>
 8008a02:	2000      	movs	r0, #0
 8008a04:	4770      	bx	lr

08008a06 <__gethex>:
 8008a06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a0a:	b08b      	sub	sp, #44	; 0x2c
 8008a0c:	468a      	mov	sl, r1
 8008a0e:	9002      	str	r0, [sp, #8]
 8008a10:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008a12:	9306      	str	r3, [sp, #24]
 8008a14:	4690      	mov	r8, r2
 8008a16:	f000 fad0 	bl	8008fba <__localeconv_l>
 8008a1a:	6803      	ldr	r3, [r0, #0]
 8008a1c:	9303      	str	r3, [sp, #12]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7f7 fbe4 	bl	80001ec <strlen>
 8008a24:	9b03      	ldr	r3, [sp, #12]
 8008a26:	9001      	str	r0, [sp, #4]
 8008a28:	4403      	add	r3, r0
 8008a2a:	f04f 0b00 	mov.w	fp, #0
 8008a2e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008a32:	9307      	str	r3, [sp, #28]
 8008a34:	f8da 3000 	ldr.w	r3, [sl]
 8008a38:	3302      	adds	r3, #2
 8008a3a:	461f      	mov	r7, r3
 8008a3c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008a40:	2830      	cmp	r0, #48	; 0x30
 8008a42:	d06c      	beq.n	8008b1e <__gethex+0x118>
 8008a44:	f7ff ffca 	bl	80089dc <__hexdig_fun>
 8008a48:	4604      	mov	r4, r0
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d16a      	bne.n	8008b24 <__gethex+0x11e>
 8008a4e:	9a01      	ldr	r2, [sp, #4]
 8008a50:	9903      	ldr	r1, [sp, #12]
 8008a52:	4638      	mov	r0, r7
 8008a54:	f000 ff48 	bl	80098e8 <strncmp>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	d166      	bne.n	8008b2a <__gethex+0x124>
 8008a5c:	9b01      	ldr	r3, [sp, #4]
 8008a5e:	5cf8      	ldrb	r0, [r7, r3]
 8008a60:	18fe      	adds	r6, r7, r3
 8008a62:	f7ff ffbb 	bl	80089dc <__hexdig_fun>
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d062      	beq.n	8008b30 <__gethex+0x12a>
 8008a6a:	4633      	mov	r3, r6
 8008a6c:	7818      	ldrb	r0, [r3, #0]
 8008a6e:	2830      	cmp	r0, #48	; 0x30
 8008a70:	461f      	mov	r7, r3
 8008a72:	f103 0301 	add.w	r3, r3, #1
 8008a76:	d0f9      	beq.n	8008a6c <__gethex+0x66>
 8008a78:	f7ff ffb0 	bl	80089dc <__hexdig_fun>
 8008a7c:	fab0 f580 	clz	r5, r0
 8008a80:	096d      	lsrs	r5, r5, #5
 8008a82:	4634      	mov	r4, r6
 8008a84:	f04f 0b01 	mov.w	fp, #1
 8008a88:	463a      	mov	r2, r7
 8008a8a:	4616      	mov	r6, r2
 8008a8c:	3201      	adds	r2, #1
 8008a8e:	7830      	ldrb	r0, [r6, #0]
 8008a90:	f7ff ffa4 	bl	80089dc <__hexdig_fun>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	d1f8      	bne.n	8008a8a <__gethex+0x84>
 8008a98:	9a01      	ldr	r2, [sp, #4]
 8008a9a:	9903      	ldr	r1, [sp, #12]
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	f000 ff23 	bl	80098e8 <strncmp>
 8008aa2:	b950      	cbnz	r0, 8008aba <__gethex+0xb4>
 8008aa4:	b954      	cbnz	r4, 8008abc <__gethex+0xb6>
 8008aa6:	9b01      	ldr	r3, [sp, #4]
 8008aa8:	18f4      	adds	r4, r6, r3
 8008aaa:	4622      	mov	r2, r4
 8008aac:	4616      	mov	r6, r2
 8008aae:	3201      	adds	r2, #1
 8008ab0:	7830      	ldrb	r0, [r6, #0]
 8008ab2:	f7ff ff93 	bl	80089dc <__hexdig_fun>
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	d1f8      	bne.n	8008aac <__gethex+0xa6>
 8008aba:	b10c      	cbz	r4, 8008ac0 <__gethex+0xba>
 8008abc:	1ba4      	subs	r4, r4, r6
 8008abe:	00a4      	lsls	r4, r4, #2
 8008ac0:	7833      	ldrb	r3, [r6, #0]
 8008ac2:	2b50      	cmp	r3, #80	; 0x50
 8008ac4:	d001      	beq.n	8008aca <__gethex+0xc4>
 8008ac6:	2b70      	cmp	r3, #112	; 0x70
 8008ac8:	d140      	bne.n	8008b4c <__gethex+0x146>
 8008aca:	7873      	ldrb	r3, [r6, #1]
 8008acc:	2b2b      	cmp	r3, #43	; 0x2b
 8008ace:	d031      	beq.n	8008b34 <__gethex+0x12e>
 8008ad0:	2b2d      	cmp	r3, #45	; 0x2d
 8008ad2:	d033      	beq.n	8008b3c <__gethex+0x136>
 8008ad4:	1c71      	adds	r1, r6, #1
 8008ad6:	f04f 0900 	mov.w	r9, #0
 8008ada:	7808      	ldrb	r0, [r1, #0]
 8008adc:	f7ff ff7e 	bl	80089dc <__hexdig_fun>
 8008ae0:	1e43      	subs	r3, r0, #1
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b18      	cmp	r3, #24
 8008ae6:	d831      	bhi.n	8008b4c <__gethex+0x146>
 8008ae8:	f1a0 0210 	sub.w	r2, r0, #16
 8008aec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008af0:	f7ff ff74 	bl	80089dc <__hexdig_fun>
 8008af4:	1e43      	subs	r3, r0, #1
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	2b18      	cmp	r3, #24
 8008afa:	d922      	bls.n	8008b42 <__gethex+0x13c>
 8008afc:	f1b9 0f00 	cmp.w	r9, #0
 8008b00:	d000      	beq.n	8008b04 <__gethex+0xfe>
 8008b02:	4252      	negs	r2, r2
 8008b04:	4414      	add	r4, r2
 8008b06:	f8ca 1000 	str.w	r1, [sl]
 8008b0a:	b30d      	cbz	r5, 8008b50 <__gethex+0x14a>
 8008b0c:	f1bb 0f00 	cmp.w	fp, #0
 8008b10:	bf0c      	ite	eq
 8008b12:	2706      	moveq	r7, #6
 8008b14:	2700      	movne	r7, #0
 8008b16:	4638      	mov	r0, r7
 8008b18:	b00b      	add	sp, #44	; 0x2c
 8008b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b1e:	f10b 0b01 	add.w	fp, fp, #1
 8008b22:	e78a      	b.n	8008a3a <__gethex+0x34>
 8008b24:	2500      	movs	r5, #0
 8008b26:	462c      	mov	r4, r5
 8008b28:	e7ae      	b.n	8008a88 <__gethex+0x82>
 8008b2a:	463e      	mov	r6, r7
 8008b2c:	2501      	movs	r5, #1
 8008b2e:	e7c7      	b.n	8008ac0 <__gethex+0xba>
 8008b30:	4604      	mov	r4, r0
 8008b32:	e7fb      	b.n	8008b2c <__gethex+0x126>
 8008b34:	f04f 0900 	mov.w	r9, #0
 8008b38:	1cb1      	adds	r1, r6, #2
 8008b3a:	e7ce      	b.n	8008ada <__gethex+0xd4>
 8008b3c:	f04f 0901 	mov.w	r9, #1
 8008b40:	e7fa      	b.n	8008b38 <__gethex+0x132>
 8008b42:	230a      	movs	r3, #10
 8008b44:	fb03 0202 	mla	r2, r3, r2, r0
 8008b48:	3a10      	subs	r2, #16
 8008b4a:	e7cf      	b.n	8008aec <__gethex+0xe6>
 8008b4c:	4631      	mov	r1, r6
 8008b4e:	e7da      	b.n	8008b06 <__gethex+0x100>
 8008b50:	1bf3      	subs	r3, r6, r7
 8008b52:	3b01      	subs	r3, #1
 8008b54:	4629      	mov	r1, r5
 8008b56:	2b07      	cmp	r3, #7
 8008b58:	dc49      	bgt.n	8008bee <__gethex+0x1e8>
 8008b5a:	9802      	ldr	r0, [sp, #8]
 8008b5c:	f000 fa4c 	bl	8008ff8 <_Balloc>
 8008b60:	9b01      	ldr	r3, [sp, #4]
 8008b62:	f100 0914 	add.w	r9, r0, #20
 8008b66:	f04f 0b00 	mov.w	fp, #0
 8008b6a:	f1c3 0301 	rsb	r3, r3, #1
 8008b6e:	4605      	mov	r5, r0
 8008b70:	f8cd 9010 	str.w	r9, [sp, #16]
 8008b74:	46da      	mov	sl, fp
 8008b76:	9308      	str	r3, [sp, #32]
 8008b78:	42b7      	cmp	r7, r6
 8008b7a:	d33b      	bcc.n	8008bf4 <__gethex+0x1ee>
 8008b7c:	9804      	ldr	r0, [sp, #16]
 8008b7e:	f840 ab04 	str.w	sl, [r0], #4
 8008b82:	eba0 0009 	sub.w	r0, r0, r9
 8008b86:	1080      	asrs	r0, r0, #2
 8008b88:	6128      	str	r0, [r5, #16]
 8008b8a:	0147      	lsls	r7, r0, #5
 8008b8c:	4650      	mov	r0, sl
 8008b8e:	f000 faf7 	bl	8009180 <__hi0bits>
 8008b92:	f8d8 6000 	ldr.w	r6, [r8]
 8008b96:	1a3f      	subs	r7, r7, r0
 8008b98:	42b7      	cmp	r7, r6
 8008b9a:	dd64      	ble.n	8008c66 <__gethex+0x260>
 8008b9c:	1bbf      	subs	r7, r7, r6
 8008b9e:	4639      	mov	r1, r7
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	f000 fe07 	bl	80097b4 <__any_on>
 8008ba6:	4682      	mov	sl, r0
 8008ba8:	b178      	cbz	r0, 8008bca <__gethex+0x1c4>
 8008baa:	1e7b      	subs	r3, r7, #1
 8008bac:	1159      	asrs	r1, r3, #5
 8008bae:	f003 021f 	and.w	r2, r3, #31
 8008bb2:	f04f 0a01 	mov.w	sl, #1
 8008bb6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008bba:	fa0a f202 	lsl.w	r2, sl, r2
 8008bbe:	420a      	tst	r2, r1
 8008bc0:	d003      	beq.n	8008bca <__gethex+0x1c4>
 8008bc2:	4553      	cmp	r3, sl
 8008bc4:	dc46      	bgt.n	8008c54 <__gethex+0x24e>
 8008bc6:	f04f 0a02 	mov.w	sl, #2
 8008bca:	4639      	mov	r1, r7
 8008bcc:	4628      	mov	r0, r5
 8008bce:	f7ff fecb 	bl	8008968 <rshift>
 8008bd2:	443c      	add	r4, r7
 8008bd4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008bd8:	42a3      	cmp	r3, r4
 8008bda:	da52      	bge.n	8008c82 <__gethex+0x27c>
 8008bdc:	4629      	mov	r1, r5
 8008bde:	9802      	ldr	r0, [sp, #8]
 8008be0:	f000 fa3e 	bl	8009060 <_Bfree>
 8008be4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008be6:	2300      	movs	r3, #0
 8008be8:	6013      	str	r3, [r2, #0]
 8008bea:	27a3      	movs	r7, #163	; 0xa3
 8008bec:	e793      	b.n	8008b16 <__gethex+0x110>
 8008bee:	3101      	adds	r1, #1
 8008bf0:	105b      	asrs	r3, r3, #1
 8008bf2:	e7b0      	b.n	8008b56 <__gethex+0x150>
 8008bf4:	1e73      	subs	r3, r6, #1
 8008bf6:	9305      	str	r3, [sp, #20]
 8008bf8:	9a07      	ldr	r2, [sp, #28]
 8008bfa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d018      	beq.n	8008c34 <__gethex+0x22e>
 8008c02:	f1bb 0f20 	cmp.w	fp, #32
 8008c06:	d107      	bne.n	8008c18 <__gethex+0x212>
 8008c08:	9b04      	ldr	r3, [sp, #16]
 8008c0a:	f8c3 a000 	str.w	sl, [r3]
 8008c0e:	3304      	adds	r3, #4
 8008c10:	f04f 0a00 	mov.w	sl, #0
 8008c14:	9304      	str	r3, [sp, #16]
 8008c16:	46d3      	mov	fp, sl
 8008c18:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008c1c:	f7ff fede 	bl	80089dc <__hexdig_fun>
 8008c20:	f000 000f 	and.w	r0, r0, #15
 8008c24:	fa00 f00b 	lsl.w	r0, r0, fp
 8008c28:	ea4a 0a00 	orr.w	sl, sl, r0
 8008c2c:	f10b 0b04 	add.w	fp, fp, #4
 8008c30:	9b05      	ldr	r3, [sp, #20]
 8008c32:	e00d      	b.n	8008c50 <__gethex+0x24a>
 8008c34:	9b05      	ldr	r3, [sp, #20]
 8008c36:	9a08      	ldr	r2, [sp, #32]
 8008c38:	4413      	add	r3, r2
 8008c3a:	42bb      	cmp	r3, r7
 8008c3c:	d3e1      	bcc.n	8008c02 <__gethex+0x1fc>
 8008c3e:	4618      	mov	r0, r3
 8008c40:	9a01      	ldr	r2, [sp, #4]
 8008c42:	9903      	ldr	r1, [sp, #12]
 8008c44:	9309      	str	r3, [sp, #36]	; 0x24
 8008c46:	f000 fe4f 	bl	80098e8 <strncmp>
 8008c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	d1d8      	bne.n	8008c02 <__gethex+0x1fc>
 8008c50:	461e      	mov	r6, r3
 8008c52:	e791      	b.n	8008b78 <__gethex+0x172>
 8008c54:	1eb9      	subs	r1, r7, #2
 8008c56:	4628      	mov	r0, r5
 8008c58:	f000 fdac 	bl	80097b4 <__any_on>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	d0b2      	beq.n	8008bc6 <__gethex+0x1c0>
 8008c60:	f04f 0a03 	mov.w	sl, #3
 8008c64:	e7b1      	b.n	8008bca <__gethex+0x1c4>
 8008c66:	da09      	bge.n	8008c7c <__gethex+0x276>
 8008c68:	1bf7      	subs	r7, r6, r7
 8008c6a:	4629      	mov	r1, r5
 8008c6c:	463a      	mov	r2, r7
 8008c6e:	9802      	ldr	r0, [sp, #8]
 8008c70:	f000 fbc2 	bl	80093f8 <__lshift>
 8008c74:	1be4      	subs	r4, r4, r7
 8008c76:	4605      	mov	r5, r0
 8008c78:	f100 0914 	add.w	r9, r0, #20
 8008c7c:	f04f 0a00 	mov.w	sl, #0
 8008c80:	e7a8      	b.n	8008bd4 <__gethex+0x1ce>
 8008c82:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008c86:	42a0      	cmp	r0, r4
 8008c88:	dd6a      	ble.n	8008d60 <__gethex+0x35a>
 8008c8a:	1b04      	subs	r4, r0, r4
 8008c8c:	42a6      	cmp	r6, r4
 8008c8e:	dc2e      	bgt.n	8008cee <__gethex+0x2e8>
 8008c90:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d022      	beq.n	8008cde <__gethex+0x2d8>
 8008c98:	2b03      	cmp	r3, #3
 8008c9a:	d024      	beq.n	8008ce6 <__gethex+0x2e0>
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d115      	bne.n	8008ccc <__gethex+0x2c6>
 8008ca0:	42a6      	cmp	r6, r4
 8008ca2:	d113      	bne.n	8008ccc <__gethex+0x2c6>
 8008ca4:	2e01      	cmp	r6, #1
 8008ca6:	dc0b      	bgt.n	8008cc0 <__gethex+0x2ba>
 8008ca8:	9a06      	ldr	r2, [sp, #24]
 8008caa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	612b      	str	r3, [r5, #16]
 8008cb4:	f8c9 3000 	str.w	r3, [r9]
 8008cb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008cba:	2762      	movs	r7, #98	; 0x62
 8008cbc:	601d      	str	r5, [r3, #0]
 8008cbe:	e72a      	b.n	8008b16 <__gethex+0x110>
 8008cc0:	1e71      	subs	r1, r6, #1
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	f000 fd76 	bl	80097b4 <__any_on>
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	d1ed      	bne.n	8008ca8 <__gethex+0x2a2>
 8008ccc:	4629      	mov	r1, r5
 8008cce:	9802      	ldr	r0, [sp, #8]
 8008cd0:	f000 f9c6 	bl	8009060 <_Bfree>
 8008cd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	6013      	str	r3, [r2, #0]
 8008cda:	2750      	movs	r7, #80	; 0x50
 8008cdc:	e71b      	b.n	8008b16 <__gethex+0x110>
 8008cde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d0e1      	beq.n	8008ca8 <__gethex+0x2a2>
 8008ce4:	e7f2      	b.n	8008ccc <__gethex+0x2c6>
 8008ce6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1dd      	bne.n	8008ca8 <__gethex+0x2a2>
 8008cec:	e7ee      	b.n	8008ccc <__gethex+0x2c6>
 8008cee:	1e67      	subs	r7, r4, #1
 8008cf0:	f1ba 0f00 	cmp.w	sl, #0
 8008cf4:	d131      	bne.n	8008d5a <__gethex+0x354>
 8008cf6:	b127      	cbz	r7, 8008d02 <__gethex+0x2fc>
 8008cf8:	4639      	mov	r1, r7
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	f000 fd5a 	bl	80097b4 <__any_on>
 8008d00:	4682      	mov	sl, r0
 8008d02:	117a      	asrs	r2, r7, #5
 8008d04:	2301      	movs	r3, #1
 8008d06:	f007 071f 	and.w	r7, r7, #31
 8008d0a:	fa03 f707 	lsl.w	r7, r3, r7
 8008d0e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008d12:	4621      	mov	r1, r4
 8008d14:	421f      	tst	r7, r3
 8008d16:	4628      	mov	r0, r5
 8008d18:	bf18      	it	ne
 8008d1a:	f04a 0a02 	orrne.w	sl, sl, #2
 8008d1e:	1b36      	subs	r6, r6, r4
 8008d20:	f7ff fe22 	bl	8008968 <rshift>
 8008d24:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008d28:	2702      	movs	r7, #2
 8008d2a:	f1ba 0f00 	cmp.w	sl, #0
 8008d2e:	d048      	beq.n	8008dc2 <__gethex+0x3bc>
 8008d30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d015      	beq.n	8008d64 <__gethex+0x35e>
 8008d38:	2b03      	cmp	r3, #3
 8008d3a:	d017      	beq.n	8008d6c <__gethex+0x366>
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d109      	bne.n	8008d54 <__gethex+0x34e>
 8008d40:	f01a 0f02 	tst.w	sl, #2
 8008d44:	d006      	beq.n	8008d54 <__gethex+0x34e>
 8008d46:	f8d9 3000 	ldr.w	r3, [r9]
 8008d4a:	ea4a 0a03 	orr.w	sl, sl, r3
 8008d4e:	f01a 0f01 	tst.w	sl, #1
 8008d52:	d10e      	bne.n	8008d72 <__gethex+0x36c>
 8008d54:	f047 0710 	orr.w	r7, r7, #16
 8008d58:	e033      	b.n	8008dc2 <__gethex+0x3bc>
 8008d5a:	f04f 0a01 	mov.w	sl, #1
 8008d5e:	e7d0      	b.n	8008d02 <__gethex+0x2fc>
 8008d60:	2701      	movs	r7, #1
 8008d62:	e7e2      	b.n	8008d2a <__gethex+0x324>
 8008d64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d66:	f1c3 0301 	rsb	r3, r3, #1
 8008d6a:	9315      	str	r3, [sp, #84]	; 0x54
 8008d6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d0f0      	beq.n	8008d54 <__gethex+0x34e>
 8008d72:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008d76:	f105 0314 	add.w	r3, r5, #20
 8008d7a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008d7e:	eb03 010a 	add.w	r1, r3, sl
 8008d82:	f04f 0c00 	mov.w	ip, #0
 8008d86:	4618      	mov	r0, r3
 8008d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d8c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008d90:	d01c      	beq.n	8008dcc <__gethex+0x3c6>
 8008d92:	3201      	adds	r2, #1
 8008d94:	6002      	str	r2, [r0, #0]
 8008d96:	2f02      	cmp	r7, #2
 8008d98:	f105 0314 	add.w	r3, r5, #20
 8008d9c:	d138      	bne.n	8008e10 <__gethex+0x40a>
 8008d9e:	f8d8 2000 	ldr.w	r2, [r8]
 8008da2:	3a01      	subs	r2, #1
 8008da4:	42b2      	cmp	r2, r6
 8008da6:	d10a      	bne.n	8008dbe <__gethex+0x3b8>
 8008da8:	1171      	asrs	r1, r6, #5
 8008daa:	2201      	movs	r2, #1
 8008dac:	f006 061f 	and.w	r6, r6, #31
 8008db0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008db4:	fa02 f606 	lsl.w	r6, r2, r6
 8008db8:	421e      	tst	r6, r3
 8008dba:	bf18      	it	ne
 8008dbc:	4617      	movne	r7, r2
 8008dbe:	f047 0720 	orr.w	r7, r7, #32
 8008dc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008dc4:	601d      	str	r5, [r3, #0]
 8008dc6:	9b06      	ldr	r3, [sp, #24]
 8008dc8:	601c      	str	r4, [r3, #0]
 8008dca:	e6a4      	b.n	8008b16 <__gethex+0x110>
 8008dcc:	4299      	cmp	r1, r3
 8008dce:	f843 cc04 	str.w	ip, [r3, #-4]
 8008dd2:	d8d8      	bhi.n	8008d86 <__gethex+0x380>
 8008dd4:	68ab      	ldr	r3, [r5, #8]
 8008dd6:	4599      	cmp	r9, r3
 8008dd8:	db12      	blt.n	8008e00 <__gethex+0x3fa>
 8008dda:	6869      	ldr	r1, [r5, #4]
 8008ddc:	9802      	ldr	r0, [sp, #8]
 8008dde:	3101      	adds	r1, #1
 8008de0:	f000 f90a 	bl	8008ff8 <_Balloc>
 8008de4:	692a      	ldr	r2, [r5, #16]
 8008de6:	3202      	adds	r2, #2
 8008de8:	f105 010c 	add.w	r1, r5, #12
 8008dec:	4683      	mov	fp, r0
 8008dee:	0092      	lsls	r2, r2, #2
 8008df0:	300c      	adds	r0, #12
 8008df2:	f000 f8f6 	bl	8008fe2 <memcpy>
 8008df6:	4629      	mov	r1, r5
 8008df8:	9802      	ldr	r0, [sp, #8]
 8008dfa:	f000 f931 	bl	8009060 <_Bfree>
 8008dfe:	465d      	mov	r5, fp
 8008e00:	692b      	ldr	r3, [r5, #16]
 8008e02:	1c5a      	adds	r2, r3, #1
 8008e04:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008e08:	612a      	str	r2, [r5, #16]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	615a      	str	r2, [r3, #20]
 8008e0e:	e7c2      	b.n	8008d96 <__gethex+0x390>
 8008e10:	692a      	ldr	r2, [r5, #16]
 8008e12:	454a      	cmp	r2, r9
 8008e14:	dd0b      	ble.n	8008e2e <__gethex+0x428>
 8008e16:	2101      	movs	r1, #1
 8008e18:	4628      	mov	r0, r5
 8008e1a:	f7ff fda5 	bl	8008968 <rshift>
 8008e1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e22:	3401      	adds	r4, #1
 8008e24:	42a3      	cmp	r3, r4
 8008e26:	f6ff aed9 	blt.w	8008bdc <__gethex+0x1d6>
 8008e2a:	2701      	movs	r7, #1
 8008e2c:	e7c7      	b.n	8008dbe <__gethex+0x3b8>
 8008e2e:	f016 061f 	ands.w	r6, r6, #31
 8008e32:	d0fa      	beq.n	8008e2a <__gethex+0x424>
 8008e34:	449a      	add	sl, r3
 8008e36:	f1c6 0620 	rsb	r6, r6, #32
 8008e3a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008e3e:	f000 f99f 	bl	8009180 <__hi0bits>
 8008e42:	42b0      	cmp	r0, r6
 8008e44:	dbe7      	blt.n	8008e16 <__gethex+0x410>
 8008e46:	e7f0      	b.n	8008e2a <__gethex+0x424>

08008e48 <L_shift>:
 8008e48:	f1c2 0208 	rsb	r2, r2, #8
 8008e4c:	0092      	lsls	r2, r2, #2
 8008e4e:	b570      	push	{r4, r5, r6, lr}
 8008e50:	f1c2 0620 	rsb	r6, r2, #32
 8008e54:	6843      	ldr	r3, [r0, #4]
 8008e56:	6804      	ldr	r4, [r0, #0]
 8008e58:	fa03 f506 	lsl.w	r5, r3, r6
 8008e5c:	432c      	orrs	r4, r5
 8008e5e:	40d3      	lsrs	r3, r2
 8008e60:	6004      	str	r4, [r0, #0]
 8008e62:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e66:	4288      	cmp	r0, r1
 8008e68:	d3f4      	bcc.n	8008e54 <L_shift+0xc>
 8008e6a:	bd70      	pop	{r4, r5, r6, pc}

08008e6c <__match>:
 8008e6c:	b530      	push	{r4, r5, lr}
 8008e6e:	6803      	ldr	r3, [r0, #0]
 8008e70:	3301      	adds	r3, #1
 8008e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e76:	b914      	cbnz	r4, 8008e7e <__match+0x12>
 8008e78:	6003      	str	r3, [r0, #0]
 8008e7a:	2001      	movs	r0, #1
 8008e7c:	bd30      	pop	{r4, r5, pc}
 8008e7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e82:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008e86:	2d19      	cmp	r5, #25
 8008e88:	bf98      	it	ls
 8008e8a:	3220      	addls	r2, #32
 8008e8c:	42a2      	cmp	r2, r4
 8008e8e:	d0f0      	beq.n	8008e72 <__match+0x6>
 8008e90:	2000      	movs	r0, #0
 8008e92:	e7f3      	b.n	8008e7c <__match+0x10>

08008e94 <__hexnan>:
 8008e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e98:	680b      	ldr	r3, [r1, #0]
 8008e9a:	6801      	ldr	r1, [r0, #0]
 8008e9c:	115f      	asrs	r7, r3, #5
 8008e9e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008ea2:	f013 031f 	ands.w	r3, r3, #31
 8008ea6:	b087      	sub	sp, #28
 8008ea8:	bf18      	it	ne
 8008eaa:	3704      	addne	r7, #4
 8008eac:	2500      	movs	r5, #0
 8008eae:	1f3e      	subs	r6, r7, #4
 8008eb0:	4682      	mov	sl, r0
 8008eb2:	4690      	mov	r8, r2
 8008eb4:	9301      	str	r3, [sp, #4]
 8008eb6:	f847 5c04 	str.w	r5, [r7, #-4]
 8008eba:	46b1      	mov	r9, r6
 8008ebc:	4634      	mov	r4, r6
 8008ebe:	9502      	str	r5, [sp, #8]
 8008ec0:	46ab      	mov	fp, r5
 8008ec2:	784a      	ldrb	r2, [r1, #1]
 8008ec4:	1c4b      	adds	r3, r1, #1
 8008ec6:	9303      	str	r3, [sp, #12]
 8008ec8:	b342      	cbz	r2, 8008f1c <__hexnan+0x88>
 8008eca:	4610      	mov	r0, r2
 8008ecc:	9105      	str	r1, [sp, #20]
 8008ece:	9204      	str	r2, [sp, #16]
 8008ed0:	f7ff fd84 	bl	80089dc <__hexdig_fun>
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	d143      	bne.n	8008f60 <__hexnan+0xcc>
 8008ed8:	9a04      	ldr	r2, [sp, #16]
 8008eda:	9905      	ldr	r1, [sp, #20]
 8008edc:	2a20      	cmp	r2, #32
 8008ede:	d818      	bhi.n	8008f12 <__hexnan+0x7e>
 8008ee0:	9b02      	ldr	r3, [sp, #8]
 8008ee2:	459b      	cmp	fp, r3
 8008ee4:	dd13      	ble.n	8008f0e <__hexnan+0x7a>
 8008ee6:	454c      	cmp	r4, r9
 8008ee8:	d206      	bcs.n	8008ef8 <__hexnan+0x64>
 8008eea:	2d07      	cmp	r5, #7
 8008eec:	dc04      	bgt.n	8008ef8 <__hexnan+0x64>
 8008eee:	462a      	mov	r2, r5
 8008ef0:	4649      	mov	r1, r9
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f7ff ffa8 	bl	8008e48 <L_shift>
 8008ef8:	4544      	cmp	r4, r8
 8008efa:	d944      	bls.n	8008f86 <__hexnan+0xf2>
 8008efc:	2300      	movs	r3, #0
 8008efe:	f1a4 0904 	sub.w	r9, r4, #4
 8008f02:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f06:	f8cd b008 	str.w	fp, [sp, #8]
 8008f0a:	464c      	mov	r4, r9
 8008f0c:	461d      	mov	r5, r3
 8008f0e:	9903      	ldr	r1, [sp, #12]
 8008f10:	e7d7      	b.n	8008ec2 <__hexnan+0x2e>
 8008f12:	2a29      	cmp	r2, #41	; 0x29
 8008f14:	d14a      	bne.n	8008fac <__hexnan+0x118>
 8008f16:	3102      	adds	r1, #2
 8008f18:	f8ca 1000 	str.w	r1, [sl]
 8008f1c:	f1bb 0f00 	cmp.w	fp, #0
 8008f20:	d044      	beq.n	8008fac <__hexnan+0x118>
 8008f22:	454c      	cmp	r4, r9
 8008f24:	d206      	bcs.n	8008f34 <__hexnan+0xa0>
 8008f26:	2d07      	cmp	r5, #7
 8008f28:	dc04      	bgt.n	8008f34 <__hexnan+0xa0>
 8008f2a:	462a      	mov	r2, r5
 8008f2c:	4649      	mov	r1, r9
 8008f2e:	4620      	mov	r0, r4
 8008f30:	f7ff ff8a 	bl	8008e48 <L_shift>
 8008f34:	4544      	cmp	r4, r8
 8008f36:	d928      	bls.n	8008f8a <__hexnan+0xf6>
 8008f38:	4643      	mov	r3, r8
 8008f3a:	f854 2b04 	ldr.w	r2, [r4], #4
 8008f3e:	f843 2b04 	str.w	r2, [r3], #4
 8008f42:	42a6      	cmp	r6, r4
 8008f44:	d2f9      	bcs.n	8008f3a <__hexnan+0xa6>
 8008f46:	2200      	movs	r2, #0
 8008f48:	f843 2b04 	str.w	r2, [r3], #4
 8008f4c:	429e      	cmp	r6, r3
 8008f4e:	d2fb      	bcs.n	8008f48 <__hexnan+0xb4>
 8008f50:	6833      	ldr	r3, [r6, #0]
 8008f52:	b91b      	cbnz	r3, 8008f5c <__hexnan+0xc8>
 8008f54:	4546      	cmp	r6, r8
 8008f56:	d127      	bne.n	8008fa8 <__hexnan+0x114>
 8008f58:	2301      	movs	r3, #1
 8008f5a:	6033      	str	r3, [r6, #0]
 8008f5c:	2005      	movs	r0, #5
 8008f5e:	e026      	b.n	8008fae <__hexnan+0x11a>
 8008f60:	3501      	adds	r5, #1
 8008f62:	2d08      	cmp	r5, #8
 8008f64:	f10b 0b01 	add.w	fp, fp, #1
 8008f68:	dd06      	ble.n	8008f78 <__hexnan+0xe4>
 8008f6a:	4544      	cmp	r4, r8
 8008f6c:	d9cf      	bls.n	8008f0e <__hexnan+0x7a>
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f74:	2501      	movs	r5, #1
 8008f76:	3c04      	subs	r4, #4
 8008f78:	6822      	ldr	r2, [r4, #0]
 8008f7a:	f000 000f 	and.w	r0, r0, #15
 8008f7e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008f82:	6020      	str	r0, [r4, #0]
 8008f84:	e7c3      	b.n	8008f0e <__hexnan+0x7a>
 8008f86:	2508      	movs	r5, #8
 8008f88:	e7c1      	b.n	8008f0e <__hexnan+0x7a>
 8008f8a:	9b01      	ldr	r3, [sp, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d0df      	beq.n	8008f50 <__hexnan+0xbc>
 8008f90:	f04f 32ff 	mov.w	r2, #4294967295
 8008f94:	f1c3 0320 	rsb	r3, r3, #32
 8008f98:	fa22 f303 	lsr.w	r3, r2, r3
 8008f9c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008fa0:	401a      	ands	r2, r3
 8008fa2:	f847 2c04 	str.w	r2, [r7, #-4]
 8008fa6:	e7d3      	b.n	8008f50 <__hexnan+0xbc>
 8008fa8:	3e04      	subs	r6, #4
 8008faa:	e7d1      	b.n	8008f50 <__hexnan+0xbc>
 8008fac:	2004      	movs	r0, #4
 8008fae:	b007      	add	sp, #28
 8008fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008fb4 <__locale_ctype_ptr_l>:
 8008fb4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008fb8:	4770      	bx	lr

08008fba <__localeconv_l>:
 8008fba:	30f0      	adds	r0, #240	; 0xf0
 8008fbc:	4770      	bx	lr

08008fbe <__ascii_mbtowc>:
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	b901      	cbnz	r1, 8008fc4 <__ascii_mbtowc+0x6>
 8008fc2:	a901      	add	r1, sp, #4
 8008fc4:	b142      	cbz	r2, 8008fd8 <__ascii_mbtowc+0x1a>
 8008fc6:	b14b      	cbz	r3, 8008fdc <__ascii_mbtowc+0x1e>
 8008fc8:	7813      	ldrb	r3, [r2, #0]
 8008fca:	600b      	str	r3, [r1, #0]
 8008fcc:	7812      	ldrb	r2, [r2, #0]
 8008fce:	1c10      	adds	r0, r2, #0
 8008fd0:	bf18      	it	ne
 8008fd2:	2001      	movne	r0, #1
 8008fd4:	b002      	add	sp, #8
 8008fd6:	4770      	bx	lr
 8008fd8:	4610      	mov	r0, r2
 8008fda:	e7fb      	b.n	8008fd4 <__ascii_mbtowc+0x16>
 8008fdc:	f06f 0001 	mvn.w	r0, #1
 8008fe0:	e7f8      	b.n	8008fd4 <__ascii_mbtowc+0x16>

08008fe2 <memcpy>:
 8008fe2:	b510      	push	{r4, lr}
 8008fe4:	1e43      	subs	r3, r0, #1
 8008fe6:	440a      	add	r2, r1
 8008fe8:	4291      	cmp	r1, r2
 8008fea:	d100      	bne.n	8008fee <memcpy+0xc>
 8008fec:	bd10      	pop	{r4, pc}
 8008fee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ff2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ff6:	e7f7      	b.n	8008fe8 <memcpy+0x6>

08008ff8 <_Balloc>:
 8008ff8:	b570      	push	{r4, r5, r6, lr}
 8008ffa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	460e      	mov	r6, r1
 8009000:	b93d      	cbnz	r5, 8009012 <_Balloc+0x1a>
 8009002:	2010      	movs	r0, #16
 8009004:	f000 fc90 	bl	8009928 <malloc>
 8009008:	6260      	str	r0, [r4, #36]	; 0x24
 800900a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800900e:	6005      	str	r5, [r0, #0]
 8009010:	60c5      	str	r5, [r0, #12]
 8009012:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009014:	68eb      	ldr	r3, [r5, #12]
 8009016:	b183      	cbz	r3, 800903a <_Balloc+0x42>
 8009018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009020:	b9b8      	cbnz	r0, 8009052 <_Balloc+0x5a>
 8009022:	2101      	movs	r1, #1
 8009024:	fa01 f506 	lsl.w	r5, r1, r6
 8009028:	1d6a      	adds	r2, r5, #5
 800902a:	0092      	lsls	r2, r2, #2
 800902c:	4620      	mov	r0, r4
 800902e:	f000 fbe2 	bl	80097f6 <_calloc_r>
 8009032:	b160      	cbz	r0, 800904e <_Balloc+0x56>
 8009034:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009038:	e00e      	b.n	8009058 <_Balloc+0x60>
 800903a:	2221      	movs	r2, #33	; 0x21
 800903c:	2104      	movs	r1, #4
 800903e:	4620      	mov	r0, r4
 8009040:	f000 fbd9 	bl	80097f6 <_calloc_r>
 8009044:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009046:	60e8      	str	r0, [r5, #12]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1e4      	bne.n	8009018 <_Balloc+0x20>
 800904e:	2000      	movs	r0, #0
 8009050:	bd70      	pop	{r4, r5, r6, pc}
 8009052:	6802      	ldr	r2, [r0, #0]
 8009054:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009058:	2300      	movs	r3, #0
 800905a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800905e:	e7f7      	b.n	8009050 <_Balloc+0x58>

08009060 <_Bfree>:
 8009060:	b570      	push	{r4, r5, r6, lr}
 8009062:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009064:	4606      	mov	r6, r0
 8009066:	460d      	mov	r5, r1
 8009068:	b93c      	cbnz	r4, 800907a <_Bfree+0x1a>
 800906a:	2010      	movs	r0, #16
 800906c:	f000 fc5c 	bl	8009928 <malloc>
 8009070:	6270      	str	r0, [r6, #36]	; 0x24
 8009072:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009076:	6004      	str	r4, [r0, #0]
 8009078:	60c4      	str	r4, [r0, #12]
 800907a:	b13d      	cbz	r5, 800908c <_Bfree+0x2c>
 800907c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800907e:	686a      	ldr	r2, [r5, #4]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009086:	6029      	str	r1, [r5, #0]
 8009088:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800908c:	bd70      	pop	{r4, r5, r6, pc}

0800908e <__multadd>:
 800908e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009092:	690d      	ldr	r5, [r1, #16]
 8009094:	461f      	mov	r7, r3
 8009096:	4606      	mov	r6, r0
 8009098:	460c      	mov	r4, r1
 800909a:	f101 0c14 	add.w	ip, r1, #20
 800909e:	2300      	movs	r3, #0
 80090a0:	f8dc 0000 	ldr.w	r0, [ip]
 80090a4:	b281      	uxth	r1, r0
 80090a6:	fb02 7101 	mla	r1, r2, r1, r7
 80090aa:	0c0f      	lsrs	r7, r1, #16
 80090ac:	0c00      	lsrs	r0, r0, #16
 80090ae:	fb02 7000 	mla	r0, r2, r0, r7
 80090b2:	b289      	uxth	r1, r1
 80090b4:	3301      	adds	r3, #1
 80090b6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80090ba:	429d      	cmp	r5, r3
 80090bc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80090c0:	f84c 1b04 	str.w	r1, [ip], #4
 80090c4:	dcec      	bgt.n	80090a0 <__multadd+0x12>
 80090c6:	b1d7      	cbz	r7, 80090fe <__multadd+0x70>
 80090c8:	68a3      	ldr	r3, [r4, #8]
 80090ca:	42ab      	cmp	r3, r5
 80090cc:	dc12      	bgt.n	80090f4 <__multadd+0x66>
 80090ce:	6861      	ldr	r1, [r4, #4]
 80090d0:	4630      	mov	r0, r6
 80090d2:	3101      	adds	r1, #1
 80090d4:	f7ff ff90 	bl	8008ff8 <_Balloc>
 80090d8:	6922      	ldr	r2, [r4, #16]
 80090da:	3202      	adds	r2, #2
 80090dc:	f104 010c 	add.w	r1, r4, #12
 80090e0:	4680      	mov	r8, r0
 80090e2:	0092      	lsls	r2, r2, #2
 80090e4:	300c      	adds	r0, #12
 80090e6:	f7ff ff7c 	bl	8008fe2 <memcpy>
 80090ea:	4621      	mov	r1, r4
 80090ec:	4630      	mov	r0, r6
 80090ee:	f7ff ffb7 	bl	8009060 <_Bfree>
 80090f2:	4644      	mov	r4, r8
 80090f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090f8:	3501      	adds	r5, #1
 80090fa:	615f      	str	r7, [r3, #20]
 80090fc:	6125      	str	r5, [r4, #16]
 80090fe:	4620      	mov	r0, r4
 8009100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009104 <__s2b>:
 8009104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009108:	460c      	mov	r4, r1
 800910a:	4615      	mov	r5, r2
 800910c:	461f      	mov	r7, r3
 800910e:	2209      	movs	r2, #9
 8009110:	3308      	adds	r3, #8
 8009112:	4606      	mov	r6, r0
 8009114:	fb93 f3f2 	sdiv	r3, r3, r2
 8009118:	2100      	movs	r1, #0
 800911a:	2201      	movs	r2, #1
 800911c:	429a      	cmp	r2, r3
 800911e:	db20      	blt.n	8009162 <__s2b+0x5e>
 8009120:	4630      	mov	r0, r6
 8009122:	f7ff ff69 	bl	8008ff8 <_Balloc>
 8009126:	9b08      	ldr	r3, [sp, #32]
 8009128:	6143      	str	r3, [r0, #20]
 800912a:	2d09      	cmp	r5, #9
 800912c:	f04f 0301 	mov.w	r3, #1
 8009130:	6103      	str	r3, [r0, #16]
 8009132:	dd19      	ble.n	8009168 <__s2b+0x64>
 8009134:	f104 0809 	add.w	r8, r4, #9
 8009138:	46c1      	mov	r9, r8
 800913a:	442c      	add	r4, r5
 800913c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009140:	4601      	mov	r1, r0
 8009142:	3b30      	subs	r3, #48	; 0x30
 8009144:	220a      	movs	r2, #10
 8009146:	4630      	mov	r0, r6
 8009148:	f7ff ffa1 	bl	800908e <__multadd>
 800914c:	45a1      	cmp	r9, r4
 800914e:	d1f5      	bne.n	800913c <__s2b+0x38>
 8009150:	eb08 0405 	add.w	r4, r8, r5
 8009154:	3c08      	subs	r4, #8
 8009156:	1b2d      	subs	r5, r5, r4
 8009158:	1963      	adds	r3, r4, r5
 800915a:	42bb      	cmp	r3, r7
 800915c:	db07      	blt.n	800916e <__s2b+0x6a>
 800915e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009162:	0052      	lsls	r2, r2, #1
 8009164:	3101      	adds	r1, #1
 8009166:	e7d9      	b.n	800911c <__s2b+0x18>
 8009168:	340a      	adds	r4, #10
 800916a:	2509      	movs	r5, #9
 800916c:	e7f3      	b.n	8009156 <__s2b+0x52>
 800916e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009172:	4601      	mov	r1, r0
 8009174:	3b30      	subs	r3, #48	; 0x30
 8009176:	220a      	movs	r2, #10
 8009178:	4630      	mov	r0, r6
 800917a:	f7ff ff88 	bl	800908e <__multadd>
 800917e:	e7eb      	b.n	8009158 <__s2b+0x54>

08009180 <__hi0bits>:
 8009180:	0c02      	lsrs	r2, r0, #16
 8009182:	0412      	lsls	r2, r2, #16
 8009184:	4603      	mov	r3, r0
 8009186:	b9b2      	cbnz	r2, 80091b6 <__hi0bits+0x36>
 8009188:	0403      	lsls	r3, r0, #16
 800918a:	2010      	movs	r0, #16
 800918c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009190:	bf04      	itt	eq
 8009192:	021b      	lsleq	r3, r3, #8
 8009194:	3008      	addeq	r0, #8
 8009196:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800919a:	bf04      	itt	eq
 800919c:	011b      	lsleq	r3, r3, #4
 800919e:	3004      	addeq	r0, #4
 80091a0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80091a4:	bf04      	itt	eq
 80091a6:	009b      	lsleq	r3, r3, #2
 80091a8:	3002      	addeq	r0, #2
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	db06      	blt.n	80091bc <__hi0bits+0x3c>
 80091ae:	005b      	lsls	r3, r3, #1
 80091b0:	d503      	bpl.n	80091ba <__hi0bits+0x3a>
 80091b2:	3001      	adds	r0, #1
 80091b4:	4770      	bx	lr
 80091b6:	2000      	movs	r0, #0
 80091b8:	e7e8      	b.n	800918c <__hi0bits+0xc>
 80091ba:	2020      	movs	r0, #32
 80091bc:	4770      	bx	lr

080091be <__lo0bits>:
 80091be:	6803      	ldr	r3, [r0, #0]
 80091c0:	f013 0207 	ands.w	r2, r3, #7
 80091c4:	4601      	mov	r1, r0
 80091c6:	d00b      	beq.n	80091e0 <__lo0bits+0x22>
 80091c8:	07da      	lsls	r2, r3, #31
 80091ca:	d423      	bmi.n	8009214 <__lo0bits+0x56>
 80091cc:	0798      	lsls	r0, r3, #30
 80091ce:	bf49      	itett	mi
 80091d0:	085b      	lsrmi	r3, r3, #1
 80091d2:	089b      	lsrpl	r3, r3, #2
 80091d4:	2001      	movmi	r0, #1
 80091d6:	600b      	strmi	r3, [r1, #0]
 80091d8:	bf5c      	itt	pl
 80091da:	600b      	strpl	r3, [r1, #0]
 80091dc:	2002      	movpl	r0, #2
 80091de:	4770      	bx	lr
 80091e0:	b298      	uxth	r0, r3
 80091e2:	b9a8      	cbnz	r0, 8009210 <__lo0bits+0x52>
 80091e4:	0c1b      	lsrs	r3, r3, #16
 80091e6:	2010      	movs	r0, #16
 80091e8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80091ec:	bf04      	itt	eq
 80091ee:	0a1b      	lsreq	r3, r3, #8
 80091f0:	3008      	addeq	r0, #8
 80091f2:	071a      	lsls	r2, r3, #28
 80091f4:	bf04      	itt	eq
 80091f6:	091b      	lsreq	r3, r3, #4
 80091f8:	3004      	addeq	r0, #4
 80091fa:	079a      	lsls	r2, r3, #30
 80091fc:	bf04      	itt	eq
 80091fe:	089b      	lsreq	r3, r3, #2
 8009200:	3002      	addeq	r0, #2
 8009202:	07da      	lsls	r2, r3, #31
 8009204:	d402      	bmi.n	800920c <__lo0bits+0x4e>
 8009206:	085b      	lsrs	r3, r3, #1
 8009208:	d006      	beq.n	8009218 <__lo0bits+0x5a>
 800920a:	3001      	adds	r0, #1
 800920c:	600b      	str	r3, [r1, #0]
 800920e:	4770      	bx	lr
 8009210:	4610      	mov	r0, r2
 8009212:	e7e9      	b.n	80091e8 <__lo0bits+0x2a>
 8009214:	2000      	movs	r0, #0
 8009216:	4770      	bx	lr
 8009218:	2020      	movs	r0, #32
 800921a:	4770      	bx	lr

0800921c <__i2b>:
 800921c:	b510      	push	{r4, lr}
 800921e:	460c      	mov	r4, r1
 8009220:	2101      	movs	r1, #1
 8009222:	f7ff fee9 	bl	8008ff8 <_Balloc>
 8009226:	2201      	movs	r2, #1
 8009228:	6144      	str	r4, [r0, #20]
 800922a:	6102      	str	r2, [r0, #16]
 800922c:	bd10      	pop	{r4, pc}

0800922e <__multiply>:
 800922e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009232:	4614      	mov	r4, r2
 8009234:	690a      	ldr	r2, [r1, #16]
 8009236:	6923      	ldr	r3, [r4, #16]
 8009238:	429a      	cmp	r2, r3
 800923a:	bfb8      	it	lt
 800923c:	460b      	movlt	r3, r1
 800923e:	4688      	mov	r8, r1
 8009240:	bfbc      	itt	lt
 8009242:	46a0      	movlt	r8, r4
 8009244:	461c      	movlt	r4, r3
 8009246:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800924a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800924e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009252:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009256:	eb07 0609 	add.w	r6, r7, r9
 800925a:	42b3      	cmp	r3, r6
 800925c:	bfb8      	it	lt
 800925e:	3101      	addlt	r1, #1
 8009260:	f7ff feca 	bl	8008ff8 <_Balloc>
 8009264:	f100 0514 	add.w	r5, r0, #20
 8009268:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800926c:	462b      	mov	r3, r5
 800926e:	2200      	movs	r2, #0
 8009270:	4573      	cmp	r3, lr
 8009272:	d316      	bcc.n	80092a2 <__multiply+0x74>
 8009274:	f104 0214 	add.w	r2, r4, #20
 8009278:	f108 0114 	add.w	r1, r8, #20
 800927c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009280:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	9b00      	ldr	r3, [sp, #0]
 8009288:	9201      	str	r2, [sp, #4]
 800928a:	4293      	cmp	r3, r2
 800928c:	d80c      	bhi.n	80092a8 <__multiply+0x7a>
 800928e:	2e00      	cmp	r6, #0
 8009290:	dd03      	ble.n	800929a <__multiply+0x6c>
 8009292:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009296:	2b00      	cmp	r3, #0
 8009298:	d05d      	beq.n	8009356 <__multiply+0x128>
 800929a:	6106      	str	r6, [r0, #16]
 800929c:	b003      	add	sp, #12
 800929e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a2:	f843 2b04 	str.w	r2, [r3], #4
 80092a6:	e7e3      	b.n	8009270 <__multiply+0x42>
 80092a8:	f8b2 b000 	ldrh.w	fp, [r2]
 80092ac:	f1bb 0f00 	cmp.w	fp, #0
 80092b0:	d023      	beq.n	80092fa <__multiply+0xcc>
 80092b2:	4689      	mov	r9, r1
 80092b4:	46ac      	mov	ip, r5
 80092b6:	f04f 0800 	mov.w	r8, #0
 80092ba:	f859 4b04 	ldr.w	r4, [r9], #4
 80092be:	f8dc a000 	ldr.w	sl, [ip]
 80092c2:	b2a3      	uxth	r3, r4
 80092c4:	fa1f fa8a 	uxth.w	sl, sl
 80092c8:	fb0b a303 	mla	r3, fp, r3, sl
 80092cc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80092d0:	f8dc 4000 	ldr.w	r4, [ip]
 80092d4:	4443      	add	r3, r8
 80092d6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80092da:	fb0b 840a 	mla	r4, fp, sl, r8
 80092de:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80092e2:	46e2      	mov	sl, ip
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80092ea:	454f      	cmp	r7, r9
 80092ec:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80092f0:	f84a 3b04 	str.w	r3, [sl], #4
 80092f4:	d82b      	bhi.n	800934e <__multiply+0x120>
 80092f6:	f8cc 8004 	str.w	r8, [ip, #4]
 80092fa:	9b01      	ldr	r3, [sp, #4]
 80092fc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009300:	3204      	adds	r2, #4
 8009302:	f1ba 0f00 	cmp.w	sl, #0
 8009306:	d020      	beq.n	800934a <__multiply+0x11c>
 8009308:	682b      	ldr	r3, [r5, #0]
 800930a:	4689      	mov	r9, r1
 800930c:	46a8      	mov	r8, r5
 800930e:	f04f 0b00 	mov.w	fp, #0
 8009312:	f8b9 c000 	ldrh.w	ip, [r9]
 8009316:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800931a:	fb0a 440c 	mla	r4, sl, ip, r4
 800931e:	445c      	add	r4, fp
 8009320:	46c4      	mov	ip, r8
 8009322:	b29b      	uxth	r3, r3
 8009324:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009328:	f84c 3b04 	str.w	r3, [ip], #4
 800932c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009330:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009334:	0c1b      	lsrs	r3, r3, #16
 8009336:	fb0a b303 	mla	r3, sl, r3, fp
 800933a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800933e:	454f      	cmp	r7, r9
 8009340:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009344:	d805      	bhi.n	8009352 <__multiply+0x124>
 8009346:	f8c8 3004 	str.w	r3, [r8, #4]
 800934a:	3504      	adds	r5, #4
 800934c:	e79b      	b.n	8009286 <__multiply+0x58>
 800934e:	46d4      	mov	ip, sl
 8009350:	e7b3      	b.n	80092ba <__multiply+0x8c>
 8009352:	46e0      	mov	r8, ip
 8009354:	e7dd      	b.n	8009312 <__multiply+0xe4>
 8009356:	3e01      	subs	r6, #1
 8009358:	e799      	b.n	800928e <__multiply+0x60>
	...

0800935c <__pow5mult>:
 800935c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009360:	4615      	mov	r5, r2
 8009362:	f012 0203 	ands.w	r2, r2, #3
 8009366:	4606      	mov	r6, r0
 8009368:	460f      	mov	r7, r1
 800936a:	d007      	beq.n	800937c <__pow5mult+0x20>
 800936c:	3a01      	subs	r2, #1
 800936e:	4c21      	ldr	r4, [pc, #132]	; (80093f4 <__pow5mult+0x98>)
 8009370:	2300      	movs	r3, #0
 8009372:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009376:	f7ff fe8a 	bl	800908e <__multadd>
 800937a:	4607      	mov	r7, r0
 800937c:	10ad      	asrs	r5, r5, #2
 800937e:	d035      	beq.n	80093ec <__pow5mult+0x90>
 8009380:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009382:	b93c      	cbnz	r4, 8009394 <__pow5mult+0x38>
 8009384:	2010      	movs	r0, #16
 8009386:	f000 facf 	bl	8009928 <malloc>
 800938a:	6270      	str	r0, [r6, #36]	; 0x24
 800938c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009390:	6004      	str	r4, [r0, #0]
 8009392:	60c4      	str	r4, [r0, #12]
 8009394:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009398:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800939c:	b94c      	cbnz	r4, 80093b2 <__pow5mult+0x56>
 800939e:	f240 2171 	movw	r1, #625	; 0x271
 80093a2:	4630      	mov	r0, r6
 80093a4:	f7ff ff3a 	bl	800921c <__i2b>
 80093a8:	2300      	movs	r3, #0
 80093aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80093ae:	4604      	mov	r4, r0
 80093b0:	6003      	str	r3, [r0, #0]
 80093b2:	f04f 0800 	mov.w	r8, #0
 80093b6:	07eb      	lsls	r3, r5, #31
 80093b8:	d50a      	bpl.n	80093d0 <__pow5mult+0x74>
 80093ba:	4639      	mov	r1, r7
 80093bc:	4622      	mov	r2, r4
 80093be:	4630      	mov	r0, r6
 80093c0:	f7ff ff35 	bl	800922e <__multiply>
 80093c4:	4639      	mov	r1, r7
 80093c6:	4681      	mov	r9, r0
 80093c8:	4630      	mov	r0, r6
 80093ca:	f7ff fe49 	bl	8009060 <_Bfree>
 80093ce:	464f      	mov	r7, r9
 80093d0:	106d      	asrs	r5, r5, #1
 80093d2:	d00b      	beq.n	80093ec <__pow5mult+0x90>
 80093d4:	6820      	ldr	r0, [r4, #0]
 80093d6:	b938      	cbnz	r0, 80093e8 <__pow5mult+0x8c>
 80093d8:	4622      	mov	r2, r4
 80093da:	4621      	mov	r1, r4
 80093dc:	4630      	mov	r0, r6
 80093de:	f7ff ff26 	bl	800922e <__multiply>
 80093e2:	6020      	str	r0, [r4, #0]
 80093e4:	f8c0 8000 	str.w	r8, [r0]
 80093e8:	4604      	mov	r4, r0
 80093ea:	e7e4      	b.n	80093b6 <__pow5mult+0x5a>
 80093ec:	4638      	mov	r0, r7
 80093ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093f2:	bf00      	nop
 80093f4:	08009dc0 	.word	0x08009dc0

080093f8 <__lshift>:
 80093f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093fc:	460c      	mov	r4, r1
 80093fe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009402:	6923      	ldr	r3, [r4, #16]
 8009404:	6849      	ldr	r1, [r1, #4]
 8009406:	eb0a 0903 	add.w	r9, sl, r3
 800940a:	68a3      	ldr	r3, [r4, #8]
 800940c:	4607      	mov	r7, r0
 800940e:	4616      	mov	r6, r2
 8009410:	f109 0501 	add.w	r5, r9, #1
 8009414:	42ab      	cmp	r3, r5
 8009416:	db32      	blt.n	800947e <__lshift+0x86>
 8009418:	4638      	mov	r0, r7
 800941a:	f7ff fded 	bl	8008ff8 <_Balloc>
 800941e:	2300      	movs	r3, #0
 8009420:	4680      	mov	r8, r0
 8009422:	f100 0114 	add.w	r1, r0, #20
 8009426:	461a      	mov	r2, r3
 8009428:	4553      	cmp	r3, sl
 800942a:	db2b      	blt.n	8009484 <__lshift+0x8c>
 800942c:	6920      	ldr	r0, [r4, #16]
 800942e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009432:	f104 0314 	add.w	r3, r4, #20
 8009436:	f016 021f 	ands.w	r2, r6, #31
 800943a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800943e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009442:	d025      	beq.n	8009490 <__lshift+0x98>
 8009444:	f1c2 0e20 	rsb	lr, r2, #32
 8009448:	2000      	movs	r0, #0
 800944a:	681e      	ldr	r6, [r3, #0]
 800944c:	468a      	mov	sl, r1
 800944e:	4096      	lsls	r6, r2
 8009450:	4330      	orrs	r0, r6
 8009452:	f84a 0b04 	str.w	r0, [sl], #4
 8009456:	f853 0b04 	ldr.w	r0, [r3], #4
 800945a:	459c      	cmp	ip, r3
 800945c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009460:	d814      	bhi.n	800948c <__lshift+0x94>
 8009462:	6048      	str	r0, [r1, #4]
 8009464:	b108      	cbz	r0, 800946a <__lshift+0x72>
 8009466:	f109 0502 	add.w	r5, r9, #2
 800946a:	3d01      	subs	r5, #1
 800946c:	4638      	mov	r0, r7
 800946e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009472:	4621      	mov	r1, r4
 8009474:	f7ff fdf4 	bl	8009060 <_Bfree>
 8009478:	4640      	mov	r0, r8
 800947a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800947e:	3101      	adds	r1, #1
 8009480:	005b      	lsls	r3, r3, #1
 8009482:	e7c7      	b.n	8009414 <__lshift+0x1c>
 8009484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009488:	3301      	adds	r3, #1
 800948a:	e7cd      	b.n	8009428 <__lshift+0x30>
 800948c:	4651      	mov	r1, sl
 800948e:	e7dc      	b.n	800944a <__lshift+0x52>
 8009490:	3904      	subs	r1, #4
 8009492:	f853 2b04 	ldr.w	r2, [r3], #4
 8009496:	f841 2f04 	str.w	r2, [r1, #4]!
 800949a:	459c      	cmp	ip, r3
 800949c:	d8f9      	bhi.n	8009492 <__lshift+0x9a>
 800949e:	e7e4      	b.n	800946a <__lshift+0x72>

080094a0 <__mcmp>:
 80094a0:	6903      	ldr	r3, [r0, #16]
 80094a2:	690a      	ldr	r2, [r1, #16]
 80094a4:	1a9b      	subs	r3, r3, r2
 80094a6:	b530      	push	{r4, r5, lr}
 80094a8:	d10c      	bne.n	80094c4 <__mcmp+0x24>
 80094aa:	0092      	lsls	r2, r2, #2
 80094ac:	3014      	adds	r0, #20
 80094ae:	3114      	adds	r1, #20
 80094b0:	1884      	adds	r4, r0, r2
 80094b2:	4411      	add	r1, r2
 80094b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80094b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80094bc:	4295      	cmp	r5, r2
 80094be:	d003      	beq.n	80094c8 <__mcmp+0x28>
 80094c0:	d305      	bcc.n	80094ce <__mcmp+0x2e>
 80094c2:	2301      	movs	r3, #1
 80094c4:	4618      	mov	r0, r3
 80094c6:	bd30      	pop	{r4, r5, pc}
 80094c8:	42a0      	cmp	r0, r4
 80094ca:	d3f3      	bcc.n	80094b4 <__mcmp+0x14>
 80094cc:	e7fa      	b.n	80094c4 <__mcmp+0x24>
 80094ce:	f04f 33ff 	mov.w	r3, #4294967295
 80094d2:	e7f7      	b.n	80094c4 <__mcmp+0x24>

080094d4 <__mdiff>:
 80094d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d8:	460d      	mov	r5, r1
 80094da:	4607      	mov	r7, r0
 80094dc:	4611      	mov	r1, r2
 80094de:	4628      	mov	r0, r5
 80094e0:	4614      	mov	r4, r2
 80094e2:	f7ff ffdd 	bl	80094a0 <__mcmp>
 80094e6:	1e06      	subs	r6, r0, #0
 80094e8:	d108      	bne.n	80094fc <__mdiff+0x28>
 80094ea:	4631      	mov	r1, r6
 80094ec:	4638      	mov	r0, r7
 80094ee:	f7ff fd83 	bl	8008ff8 <_Balloc>
 80094f2:	2301      	movs	r3, #1
 80094f4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80094f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094fc:	bfa4      	itt	ge
 80094fe:	4623      	movge	r3, r4
 8009500:	462c      	movge	r4, r5
 8009502:	4638      	mov	r0, r7
 8009504:	6861      	ldr	r1, [r4, #4]
 8009506:	bfa6      	itte	ge
 8009508:	461d      	movge	r5, r3
 800950a:	2600      	movge	r6, #0
 800950c:	2601      	movlt	r6, #1
 800950e:	f7ff fd73 	bl	8008ff8 <_Balloc>
 8009512:	692b      	ldr	r3, [r5, #16]
 8009514:	60c6      	str	r6, [r0, #12]
 8009516:	6926      	ldr	r6, [r4, #16]
 8009518:	f105 0914 	add.w	r9, r5, #20
 800951c:	f104 0214 	add.w	r2, r4, #20
 8009520:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009524:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009528:	f100 0514 	add.w	r5, r0, #20
 800952c:	f04f 0e00 	mov.w	lr, #0
 8009530:	f852 ab04 	ldr.w	sl, [r2], #4
 8009534:	f859 4b04 	ldr.w	r4, [r9], #4
 8009538:	fa1e f18a 	uxtah	r1, lr, sl
 800953c:	b2a3      	uxth	r3, r4
 800953e:	1ac9      	subs	r1, r1, r3
 8009540:	0c23      	lsrs	r3, r4, #16
 8009542:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009546:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800954a:	b289      	uxth	r1, r1
 800954c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009550:	45c8      	cmp	r8, r9
 8009552:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009556:	4694      	mov	ip, r2
 8009558:	f845 3b04 	str.w	r3, [r5], #4
 800955c:	d8e8      	bhi.n	8009530 <__mdiff+0x5c>
 800955e:	45bc      	cmp	ip, r7
 8009560:	d304      	bcc.n	800956c <__mdiff+0x98>
 8009562:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009566:	b183      	cbz	r3, 800958a <__mdiff+0xb6>
 8009568:	6106      	str	r6, [r0, #16]
 800956a:	e7c5      	b.n	80094f8 <__mdiff+0x24>
 800956c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009570:	fa1e f381 	uxtah	r3, lr, r1
 8009574:	141a      	asrs	r2, r3, #16
 8009576:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800957a:	b29b      	uxth	r3, r3
 800957c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009580:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009584:	f845 3b04 	str.w	r3, [r5], #4
 8009588:	e7e9      	b.n	800955e <__mdiff+0x8a>
 800958a:	3e01      	subs	r6, #1
 800958c:	e7e9      	b.n	8009562 <__mdiff+0x8e>
	...

08009590 <__ulp>:
 8009590:	4b12      	ldr	r3, [pc, #72]	; (80095dc <__ulp+0x4c>)
 8009592:	ee10 2a90 	vmov	r2, s1
 8009596:	401a      	ands	r2, r3
 8009598:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800959c:	2b00      	cmp	r3, #0
 800959e:	dd04      	ble.n	80095aa <__ulp+0x1a>
 80095a0:	2000      	movs	r0, #0
 80095a2:	4619      	mov	r1, r3
 80095a4:	ec41 0b10 	vmov	d0, r0, r1
 80095a8:	4770      	bx	lr
 80095aa:	425b      	negs	r3, r3
 80095ac:	151b      	asrs	r3, r3, #20
 80095ae:	2b13      	cmp	r3, #19
 80095b0:	f04f 0000 	mov.w	r0, #0
 80095b4:	f04f 0100 	mov.w	r1, #0
 80095b8:	dc04      	bgt.n	80095c4 <__ulp+0x34>
 80095ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80095be:	fa42 f103 	asr.w	r1, r2, r3
 80095c2:	e7ef      	b.n	80095a4 <__ulp+0x14>
 80095c4:	3b14      	subs	r3, #20
 80095c6:	2b1e      	cmp	r3, #30
 80095c8:	f04f 0201 	mov.w	r2, #1
 80095cc:	bfda      	itte	le
 80095ce:	f1c3 031f 	rsble	r3, r3, #31
 80095d2:	fa02 f303 	lslle.w	r3, r2, r3
 80095d6:	4613      	movgt	r3, r2
 80095d8:	4618      	mov	r0, r3
 80095da:	e7e3      	b.n	80095a4 <__ulp+0x14>
 80095dc:	7ff00000 	.word	0x7ff00000

080095e0 <__b2d>:
 80095e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e2:	6905      	ldr	r5, [r0, #16]
 80095e4:	f100 0714 	add.w	r7, r0, #20
 80095e8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80095ec:	1f2e      	subs	r6, r5, #4
 80095ee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80095f2:	4620      	mov	r0, r4
 80095f4:	f7ff fdc4 	bl	8009180 <__hi0bits>
 80095f8:	f1c0 0320 	rsb	r3, r0, #32
 80095fc:	280a      	cmp	r0, #10
 80095fe:	600b      	str	r3, [r1, #0]
 8009600:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009678 <__b2d+0x98>
 8009604:	dc14      	bgt.n	8009630 <__b2d+0x50>
 8009606:	f1c0 0e0b 	rsb	lr, r0, #11
 800960a:	fa24 f10e 	lsr.w	r1, r4, lr
 800960e:	42b7      	cmp	r7, r6
 8009610:	ea41 030c 	orr.w	r3, r1, ip
 8009614:	bf34      	ite	cc
 8009616:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800961a:	2100      	movcs	r1, #0
 800961c:	3015      	adds	r0, #21
 800961e:	fa04 f000 	lsl.w	r0, r4, r0
 8009622:	fa21 f10e 	lsr.w	r1, r1, lr
 8009626:	ea40 0201 	orr.w	r2, r0, r1
 800962a:	ec43 2b10 	vmov	d0, r2, r3
 800962e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009630:	42b7      	cmp	r7, r6
 8009632:	bf3a      	itte	cc
 8009634:	f1a5 0608 	subcc.w	r6, r5, #8
 8009638:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800963c:	2100      	movcs	r1, #0
 800963e:	380b      	subs	r0, #11
 8009640:	d015      	beq.n	800966e <__b2d+0x8e>
 8009642:	4084      	lsls	r4, r0
 8009644:	f1c0 0520 	rsb	r5, r0, #32
 8009648:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800964c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8009650:	42be      	cmp	r6, r7
 8009652:	fa21 fc05 	lsr.w	ip, r1, r5
 8009656:	ea44 030c 	orr.w	r3, r4, ip
 800965a:	bf8c      	ite	hi
 800965c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009660:	2400      	movls	r4, #0
 8009662:	fa01 f000 	lsl.w	r0, r1, r0
 8009666:	40ec      	lsrs	r4, r5
 8009668:	ea40 0204 	orr.w	r2, r0, r4
 800966c:	e7dd      	b.n	800962a <__b2d+0x4a>
 800966e:	ea44 030c 	orr.w	r3, r4, ip
 8009672:	460a      	mov	r2, r1
 8009674:	e7d9      	b.n	800962a <__b2d+0x4a>
 8009676:	bf00      	nop
 8009678:	3ff00000 	.word	0x3ff00000

0800967c <__d2b>:
 800967c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009680:	460e      	mov	r6, r1
 8009682:	2101      	movs	r1, #1
 8009684:	ec59 8b10 	vmov	r8, r9, d0
 8009688:	4615      	mov	r5, r2
 800968a:	f7ff fcb5 	bl	8008ff8 <_Balloc>
 800968e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009692:	4607      	mov	r7, r0
 8009694:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009698:	bb34      	cbnz	r4, 80096e8 <__d2b+0x6c>
 800969a:	9301      	str	r3, [sp, #4]
 800969c:	f1b8 0300 	subs.w	r3, r8, #0
 80096a0:	d027      	beq.n	80096f2 <__d2b+0x76>
 80096a2:	a802      	add	r0, sp, #8
 80096a4:	f840 3d08 	str.w	r3, [r0, #-8]!
 80096a8:	f7ff fd89 	bl	80091be <__lo0bits>
 80096ac:	9900      	ldr	r1, [sp, #0]
 80096ae:	b1f0      	cbz	r0, 80096ee <__d2b+0x72>
 80096b0:	9a01      	ldr	r2, [sp, #4]
 80096b2:	f1c0 0320 	rsb	r3, r0, #32
 80096b6:	fa02 f303 	lsl.w	r3, r2, r3
 80096ba:	430b      	orrs	r3, r1
 80096bc:	40c2      	lsrs	r2, r0
 80096be:	617b      	str	r3, [r7, #20]
 80096c0:	9201      	str	r2, [sp, #4]
 80096c2:	9b01      	ldr	r3, [sp, #4]
 80096c4:	61bb      	str	r3, [r7, #24]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	bf14      	ite	ne
 80096ca:	2102      	movne	r1, #2
 80096cc:	2101      	moveq	r1, #1
 80096ce:	6139      	str	r1, [r7, #16]
 80096d0:	b1c4      	cbz	r4, 8009704 <__d2b+0x88>
 80096d2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80096d6:	4404      	add	r4, r0
 80096d8:	6034      	str	r4, [r6, #0]
 80096da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80096de:	6028      	str	r0, [r5, #0]
 80096e0:	4638      	mov	r0, r7
 80096e2:	b003      	add	sp, #12
 80096e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096ec:	e7d5      	b.n	800969a <__d2b+0x1e>
 80096ee:	6179      	str	r1, [r7, #20]
 80096f0:	e7e7      	b.n	80096c2 <__d2b+0x46>
 80096f2:	a801      	add	r0, sp, #4
 80096f4:	f7ff fd63 	bl	80091be <__lo0bits>
 80096f8:	9b01      	ldr	r3, [sp, #4]
 80096fa:	617b      	str	r3, [r7, #20]
 80096fc:	2101      	movs	r1, #1
 80096fe:	6139      	str	r1, [r7, #16]
 8009700:	3020      	adds	r0, #32
 8009702:	e7e5      	b.n	80096d0 <__d2b+0x54>
 8009704:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009708:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800970c:	6030      	str	r0, [r6, #0]
 800970e:	6918      	ldr	r0, [r3, #16]
 8009710:	f7ff fd36 	bl	8009180 <__hi0bits>
 8009714:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009718:	e7e1      	b.n	80096de <__d2b+0x62>

0800971a <__ratio>:
 800971a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971e:	4688      	mov	r8, r1
 8009720:	4669      	mov	r1, sp
 8009722:	4681      	mov	r9, r0
 8009724:	f7ff ff5c 	bl	80095e0 <__b2d>
 8009728:	a901      	add	r1, sp, #4
 800972a:	4640      	mov	r0, r8
 800972c:	ec57 6b10 	vmov	r6, r7, d0
 8009730:	f7ff ff56 	bl	80095e0 <__b2d>
 8009734:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009738:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800973c:	eba3 0c02 	sub.w	ip, r3, r2
 8009740:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009744:	1a9b      	subs	r3, r3, r2
 8009746:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800974a:	ec5b ab10 	vmov	sl, fp, d0
 800974e:	2b00      	cmp	r3, #0
 8009750:	bfce      	itee	gt
 8009752:	463a      	movgt	r2, r7
 8009754:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009758:	465a      	movle	r2, fp
 800975a:	4659      	mov	r1, fp
 800975c:	463d      	mov	r5, r7
 800975e:	bfd4      	ite	le
 8009760:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009764:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8009768:	4630      	mov	r0, r6
 800976a:	ee10 2a10 	vmov	r2, s0
 800976e:	460b      	mov	r3, r1
 8009770:	4629      	mov	r1, r5
 8009772:	f7f7 f829 	bl	80007c8 <__aeabi_ddiv>
 8009776:	ec41 0b10 	vmov	d0, r0, r1
 800977a:	b003      	add	sp, #12
 800977c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009780 <__copybits>:
 8009780:	3901      	subs	r1, #1
 8009782:	b510      	push	{r4, lr}
 8009784:	1149      	asrs	r1, r1, #5
 8009786:	6914      	ldr	r4, [r2, #16]
 8009788:	3101      	adds	r1, #1
 800978a:	f102 0314 	add.w	r3, r2, #20
 800978e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009792:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009796:	42a3      	cmp	r3, r4
 8009798:	4602      	mov	r2, r0
 800979a:	d303      	bcc.n	80097a4 <__copybits+0x24>
 800979c:	2300      	movs	r3, #0
 800979e:	428a      	cmp	r2, r1
 80097a0:	d305      	bcc.n	80097ae <__copybits+0x2e>
 80097a2:	bd10      	pop	{r4, pc}
 80097a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80097a8:	f840 2b04 	str.w	r2, [r0], #4
 80097ac:	e7f3      	b.n	8009796 <__copybits+0x16>
 80097ae:	f842 3b04 	str.w	r3, [r2], #4
 80097b2:	e7f4      	b.n	800979e <__copybits+0x1e>

080097b4 <__any_on>:
 80097b4:	f100 0214 	add.w	r2, r0, #20
 80097b8:	6900      	ldr	r0, [r0, #16]
 80097ba:	114b      	asrs	r3, r1, #5
 80097bc:	4298      	cmp	r0, r3
 80097be:	b510      	push	{r4, lr}
 80097c0:	db11      	blt.n	80097e6 <__any_on+0x32>
 80097c2:	dd0a      	ble.n	80097da <__any_on+0x26>
 80097c4:	f011 011f 	ands.w	r1, r1, #31
 80097c8:	d007      	beq.n	80097da <__any_on+0x26>
 80097ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80097ce:	fa24 f001 	lsr.w	r0, r4, r1
 80097d2:	fa00 f101 	lsl.w	r1, r0, r1
 80097d6:	428c      	cmp	r4, r1
 80097d8:	d10b      	bne.n	80097f2 <__any_on+0x3e>
 80097da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80097de:	4293      	cmp	r3, r2
 80097e0:	d803      	bhi.n	80097ea <__any_on+0x36>
 80097e2:	2000      	movs	r0, #0
 80097e4:	bd10      	pop	{r4, pc}
 80097e6:	4603      	mov	r3, r0
 80097e8:	e7f7      	b.n	80097da <__any_on+0x26>
 80097ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80097ee:	2900      	cmp	r1, #0
 80097f0:	d0f5      	beq.n	80097de <__any_on+0x2a>
 80097f2:	2001      	movs	r0, #1
 80097f4:	e7f6      	b.n	80097e4 <__any_on+0x30>

080097f6 <_calloc_r>:
 80097f6:	b538      	push	{r3, r4, r5, lr}
 80097f8:	fb02 f401 	mul.w	r4, r2, r1
 80097fc:	4621      	mov	r1, r4
 80097fe:	f000 f809 	bl	8009814 <_malloc_r>
 8009802:	4605      	mov	r5, r0
 8009804:	b118      	cbz	r0, 800980e <_calloc_r+0x18>
 8009806:	4622      	mov	r2, r4
 8009808:	2100      	movs	r1, #0
 800980a:	f7fe f9a7 	bl	8007b5c <memset>
 800980e:	4628      	mov	r0, r5
 8009810:	bd38      	pop	{r3, r4, r5, pc}
	...

08009814 <_malloc_r>:
 8009814:	b570      	push	{r4, r5, r6, lr}
 8009816:	1ccd      	adds	r5, r1, #3
 8009818:	f025 0503 	bic.w	r5, r5, #3
 800981c:	3508      	adds	r5, #8
 800981e:	2d0c      	cmp	r5, #12
 8009820:	bf38      	it	cc
 8009822:	250c      	movcc	r5, #12
 8009824:	2d00      	cmp	r5, #0
 8009826:	4606      	mov	r6, r0
 8009828:	db01      	blt.n	800982e <_malloc_r+0x1a>
 800982a:	42a9      	cmp	r1, r5
 800982c:	d903      	bls.n	8009836 <_malloc_r+0x22>
 800982e:	230c      	movs	r3, #12
 8009830:	6033      	str	r3, [r6, #0]
 8009832:	2000      	movs	r0, #0
 8009834:	bd70      	pop	{r4, r5, r6, pc}
 8009836:	f000 f87f 	bl	8009938 <__malloc_lock>
 800983a:	4a21      	ldr	r2, [pc, #132]	; (80098c0 <_malloc_r+0xac>)
 800983c:	6814      	ldr	r4, [r2, #0]
 800983e:	4621      	mov	r1, r4
 8009840:	b991      	cbnz	r1, 8009868 <_malloc_r+0x54>
 8009842:	4c20      	ldr	r4, [pc, #128]	; (80098c4 <_malloc_r+0xb0>)
 8009844:	6823      	ldr	r3, [r4, #0]
 8009846:	b91b      	cbnz	r3, 8009850 <_malloc_r+0x3c>
 8009848:	4630      	mov	r0, r6
 800984a:	f000 f83d 	bl	80098c8 <_sbrk_r>
 800984e:	6020      	str	r0, [r4, #0]
 8009850:	4629      	mov	r1, r5
 8009852:	4630      	mov	r0, r6
 8009854:	f000 f838 	bl	80098c8 <_sbrk_r>
 8009858:	1c43      	adds	r3, r0, #1
 800985a:	d124      	bne.n	80098a6 <_malloc_r+0x92>
 800985c:	230c      	movs	r3, #12
 800985e:	6033      	str	r3, [r6, #0]
 8009860:	4630      	mov	r0, r6
 8009862:	f000 f86a 	bl	800993a <__malloc_unlock>
 8009866:	e7e4      	b.n	8009832 <_malloc_r+0x1e>
 8009868:	680b      	ldr	r3, [r1, #0]
 800986a:	1b5b      	subs	r3, r3, r5
 800986c:	d418      	bmi.n	80098a0 <_malloc_r+0x8c>
 800986e:	2b0b      	cmp	r3, #11
 8009870:	d90f      	bls.n	8009892 <_malloc_r+0x7e>
 8009872:	600b      	str	r3, [r1, #0]
 8009874:	50cd      	str	r5, [r1, r3]
 8009876:	18cc      	adds	r4, r1, r3
 8009878:	4630      	mov	r0, r6
 800987a:	f000 f85e 	bl	800993a <__malloc_unlock>
 800987e:	f104 000b 	add.w	r0, r4, #11
 8009882:	1d23      	adds	r3, r4, #4
 8009884:	f020 0007 	bic.w	r0, r0, #7
 8009888:	1ac3      	subs	r3, r0, r3
 800988a:	d0d3      	beq.n	8009834 <_malloc_r+0x20>
 800988c:	425a      	negs	r2, r3
 800988e:	50e2      	str	r2, [r4, r3]
 8009890:	e7d0      	b.n	8009834 <_malloc_r+0x20>
 8009892:	428c      	cmp	r4, r1
 8009894:	684b      	ldr	r3, [r1, #4]
 8009896:	bf16      	itet	ne
 8009898:	6063      	strne	r3, [r4, #4]
 800989a:	6013      	streq	r3, [r2, #0]
 800989c:	460c      	movne	r4, r1
 800989e:	e7eb      	b.n	8009878 <_malloc_r+0x64>
 80098a0:	460c      	mov	r4, r1
 80098a2:	6849      	ldr	r1, [r1, #4]
 80098a4:	e7cc      	b.n	8009840 <_malloc_r+0x2c>
 80098a6:	1cc4      	adds	r4, r0, #3
 80098a8:	f024 0403 	bic.w	r4, r4, #3
 80098ac:	42a0      	cmp	r0, r4
 80098ae:	d005      	beq.n	80098bc <_malloc_r+0xa8>
 80098b0:	1a21      	subs	r1, r4, r0
 80098b2:	4630      	mov	r0, r6
 80098b4:	f000 f808 	bl	80098c8 <_sbrk_r>
 80098b8:	3001      	adds	r0, #1
 80098ba:	d0cf      	beq.n	800985c <_malloc_r+0x48>
 80098bc:	6025      	str	r5, [r4, #0]
 80098be:	e7db      	b.n	8009878 <_malloc_r+0x64>
 80098c0:	20000c28 	.word	0x20000c28
 80098c4:	20000c2c 	.word	0x20000c2c

080098c8 <_sbrk_r>:
 80098c8:	b538      	push	{r3, r4, r5, lr}
 80098ca:	4c06      	ldr	r4, [pc, #24]	; (80098e4 <_sbrk_r+0x1c>)
 80098cc:	2300      	movs	r3, #0
 80098ce:	4605      	mov	r5, r0
 80098d0:	4608      	mov	r0, r1
 80098d2:	6023      	str	r3, [r4, #0]
 80098d4:	f7f8 fd2e 	bl	8002334 <_sbrk>
 80098d8:	1c43      	adds	r3, r0, #1
 80098da:	d102      	bne.n	80098e2 <_sbrk_r+0x1a>
 80098dc:	6823      	ldr	r3, [r4, #0]
 80098de:	b103      	cbz	r3, 80098e2 <_sbrk_r+0x1a>
 80098e0:	602b      	str	r3, [r5, #0]
 80098e2:	bd38      	pop	{r3, r4, r5, pc}
 80098e4:	2000d1d4 	.word	0x2000d1d4

080098e8 <strncmp>:
 80098e8:	b510      	push	{r4, lr}
 80098ea:	b16a      	cbz	r2, 8009908 <strncmp+0x20>
 80098ec:	3901      	subs	r1, #1
 80098ee:	1884      	adds	r4, r0, r2
 80098f0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80098f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d103      	bne.n	8009904 <strncmp+0x1c>
 80098fc:	42a0      	cmp	r0, r4
 80098fe:	d001      	beq.n	8009904 <strncmp+0x1c>
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1f5      	bne.n	80098f0 <strncmp+0x8>
 8009904:	1a98      	subs	r0, r3, r2
 8009906:	bd10      	pop	{r4, pc}
 8009908:	4610      	mov	r0, r2
 800990a:	e7fc      	b.n	8009906 <strncmp+0x1e>

0800990c <__ascii_wctomb>:
 800990c:	b149      	cbz	r1, 8009922 <__ascii_wctomb+0x16>
 800990e:	2aff      	cmp	r2, #255	; 0xff
 8009910:	bf85      	ittet	hi
 8009912:	238a      	movhi	r3, #138	; 0x8a
 8009914:	6003      	strhi	r3, [r0, #0]
 8009916:	700a      	strbls	r2, [r1, #0]
 8009918:	f04f 30ff 	movhi.w	r0, #4294967295
 800991c:	bf98      	it	ls
 800991e:	2001      	movls	r0, #1
 8009920:	4770      	bx	lr
 8009922:	4608      	mov	r0, r1
 8009924:	4770      	bx	lr
	...

08009928 <malloc>:
 8009928:	4b02      	ldr	r3, [pc, #8]	; (8009934 <malloc+0xc>)
 800992a:	4601      	mov	r1, r0
 800992c:	6818      	ldr	r0, [r3, #0]
 800992e:	f7ff bf71 	b.w	8009814 <_malloc_r>
 8009932:	bf00      	nop
 8009934:	20000a24 	.word	0x20000a24

08009938 <__malloc_lock>:
 8009938:	4770      	bx	lr

0800993a <__malloc_unlock>:
 800993a:	4770      	bx	lr

0800993c <_init>:
 800993c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993e:	bf00      	nop
 8009940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009942:	bc08      	pop	{r3}
 8009944:	469e      	mov	lr, r3
 8009946:	4770      	bx	lr

08009948 <_fini>:
 8009948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994a:	bf00      	nop
 800994c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800994e:	bc08      	pop	{r3}
 8009950:	469e      	mov	lr, r3
 8009952:	4770      	bx	lr
