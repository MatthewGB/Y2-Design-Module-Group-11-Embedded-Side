
First_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c9c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08005e34  08005e34  00015e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006084  08006084  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08006084  08006084  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006084  08006084  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006084  08006084  00016084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006088  08006088  00016088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800608c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c4a0  200001e0  0800626c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c680  0800626c  0002c680  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d218  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e85  00000000  00000000  0002d428  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b20  00000000  00000000  0002f2b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a58  00000000  00000000  0002fdd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021591  00000000  00000000  00030828  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c150  00000000  00000000  00051db9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cbfcf  00000000  00000000  0005df09  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00129ed8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030d4  00000000  00000000  00129f54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001e0 	.word	0x200001e0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005e1c 	.word	0x08005e1c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001e4 	.word	0x200001e4
 80001d4:	08005e1c 	.word	0x08005e1c

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	; 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033a:	f1a4 0401 	sub.w	r4, r4, #1
 800033e:	d1e9      	bne.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_dmul>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000582:	bf1d      	ittte	ne
 8000584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000588:	ea94 0f0c 	teqne	r4, ip
 800058c:	ea95 0f0c 	teqne	r5, ip
 8000590:	f000 f8de 	bleq	8000750 <__aeabi_dmul+0x1dc>
 8000594:	442c      	add	r4, r5
 8000596:	ea81 0603 	eor.w	r6, r1, r3
 800059a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a6:	bf18      	it	ne
 80005a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b4:	d038      	beq.n	8000628 <__aeabi_dmul+0xb4>
 80005b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ca:	f04f 0600 	mov.w	r6, #0
 80005ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d2:	f09c 0f00 	teq	ip, #0
 80005d6:	bf18      	it	ne
 80005d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e8:	d204      	bcs.n	80005f4 <__aeabi_dmul+0x80>
 80005ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ee:	416d      	adcs	r5, r5
 80005f0:	eb46 0606 	adc.w	r6, r6, r6
 80005f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000608:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800060c:	bf88      	it	hi
 800060e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000612:	d81e      	bhi.n	8000652 <__aeabi_dmul+0xde>
 8000614:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800062c:	ea46 0101 	orr.w	r1, r6, r1
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	ea81 0103 	eor.w	r1, r1, r3
 8000638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800063c:	bfc2      	ittt	gt
 800063e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000646:	bd70      	popgt	{r4, r5, r6, pc}
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f04f 0e00 	mov.w	lr, #0
 8000650:	3c01      	subs	r4, #1
 8000652:	f300 80ab 	bgt.w	80007ac <__aeabi_dmul+0x238>
 8000656:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065a:	bfde      	ittt	le
 800065c:	2000      	movle	r0, #0
 800065e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000662:	bd70      	pople	{r4, r5, r6, pc}
 8000664:	f1c4 0400 	rsb	r4, r4, #0
 8000668:	3c20      	subs	r4, #32
 800066a:	da35      	bge.n	80006d8 <__aeabi_dmul+0x164>
 800066c:	340c      	adds	r4, #12
 800066e:	dc1b      	bgt.n	80006a8 <__aeabi_dmul+0x134>
 8000670:	f104 0414 	add.w	r4, r4, #20
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f305 	lsl.w	r3, r0, r5
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	fa21 f604 	lsr.w	r6, r1, r4
 8000698:	eb42 0106 	adc.w	r1, r2, r6
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 040c 	rsb	r4, r4, #12
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f304 	lsl.w	r3, r0, r4
 80006b4:	fa20 f005 	lsr.w	r0, r0, r5
 80006b8:	fa01 f204 	lsl.w	r2, r1, r4
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	f141 0100 	adc.w	r1, r1, #0
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f205 	lsl.w	r2, r0, r5
 80006e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e4:	fa20 f304 	lsr.w	r3, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea43 0302 	orr.w	r3, r3, r2
 80006f0:	fa21 f004 	lsr.w	r0, r1, r4
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	fa21 f204 	lsr.w	r2, r1, r4
 80006fc:	ea20 0002 	bic.w	r0, r0, r2
 8000700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f094 0f00 	teq	r4, #0
 8000714:	d10f      	bne.n	8000736 <__aeabi_dmul+0x1c2>
 8000716:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071a:	0040      	lsls	r0, r0, #1
 800071c:	eb41 0101 	adc.w	r1, r1, r1
 8000720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3c01      	subeq	r4, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1a6>
 800072a:	ea41 0106 	orr.w	r1, r1, r6
 800072e:	f095 0f00 	teq	r5, #0
 8000732:	bf18      	it	ne
 8000734:	4770      	bxne	lr
 8000736:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	eb43 0303 	adc.w	r3, r3, r3
 8000740:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000744:	bf08      	it	eq
 8000746:	3d01      	subeq	r5, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1c6>
 800074a:	ea43 0306 	orr.w	r3, r3, r6
 800074e:	4770      	bx	lr
 8000750:	ea94 0f0c 	teq	r4, ip
 8000754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000758:	bf18      	it	ne
 800075a:	ea95 0f0c 	teqne	r5, ip
 800075e:	d00c      	beq.n	800077a <__aeabi_dmul+0x206>
 8000760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076a:	d1d1      	bne.n	8000710 <__aeabi_dmul+0x19c>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077e:	bf06      	itte	eq
 8000780:	4610      	moveq	r0, r2
 8000782:	4619      	moveq	r1, r3
 8000784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000788:	d019      	beq.n	80007be <__aeabi_dmul+0x24a>
 800078a:	ea94 0f0c 	teq	r4, ip
 800078e:	d102      	bne.n	8000796 <__aeabi_dmul+0x222>
 8000790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000794:	d113      	bne.n	80007be <__aeabi_dmul+0x24a>
 8000796:	ea95 0f0c 	teq	r5, ip
 800079a:	d105      	bne.n	80007a8 <__aeabi_dmul+0x234>
 800079c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a0:	bf1c      	itt	ne
 80007a2:	4610      	movne	r0, r2
 80007a4:	4619      	movne	r1, r3
 80007a6:	d10a      	bne.n	80007be <__aeabi_dmul+0x24a>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__aeabi_ddiv>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d6:	bf1d      	ittte	ne
 80007d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007dc:	ea94 0f0c 	teqne	r4, ip
 80007e0:	ea95 0f0c 	teqne	r5, ip
 80007e4:	f000 f8a7 	bleq	8000936 <__aeabi_ddiv+0x16e>
 80007e8:	eba4 0405 	sub.w	r4, r4, r5
 80007ec:	ea81 0e03 	eor.w	lr, r1, r3
 80007f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f8:	f000 8088 	beq.w	800090c <__aeabi_ddiv+0x144>
 80007fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000800:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800080c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000818:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800081c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000820:	429d      	cmp	r5, r3
 8000822:	bf08      	it	eq
 8000824:	4296      	cmpeq	r6, r2
 8000826:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082e:	d202      	bcs.n	8000836 <__aeabi_ddiv+0x6e>
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	1ab6      	subs	r6, r6, r2
 8000838:	eb65 0503 	sbc.w	r5, r5, r3
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000846:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 000c 	orrcs.w	r0, r0, ip
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a8:	d018      	beq.n	80008dc <__aeabi_ddiv+0x114>
 80008aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c6:	d1c0      	bne.n	800084a <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	d10b      	bne.n	80008e6 <__aeabi_ddiv+0x11e>
 80008ce:	ea41 0100 	orr.w	r1, r1, r0
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008da:	e7b6      	b.n	800084a <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	bf04      	itt	eq
 80008e2:	4301      	orreq	r1, r0
 80008e4:	2000      	moveq	r0, #0
 80008e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ea:	bf88      	it	hi
 80008ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f0:	f63f aeaf 	bhi.w	8000652 <__aeabi_dmul+0xde>
 80008f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f8:	bf04      	itt	eq
 80008fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000918:	bfc2      	ittt	gt
 800091a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000922:	bd70      	popgt	{r4, r5, r6, pc}
 8000924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000928:	f04f 0e00 	mov.w	lr, #0
 800092c:	3c01      	subs	r4, #1
 800092e:	e690      	b.n	8000652 <__aeabi_dmul+0xde>
 8000930:	ea45 0e06 	orr.w	lr, r5, r6
 8000934:	e68d      	b.n	8000652 <__aeabi_dmul+0xde>
 8000936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093a:	ea94 0f0c 	teq	r4, ip
 800093e:	bf08      	it	eq
 8000940:	ea95 0f0c 	teqeq	r5, ip
 8000944:	f43f af3b 	beq.w	80007be <__aeabi_dmul+0x24a>
 8000948:	ea94 0f0c 	teq	r4, ip
 800094c:	d10a      	bne.n	8000964 <__aeabi_ddiv+0x19c>
 800094e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000952:	f47f af34 	bne.w	80007be <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	f47f af25 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e72c      	b.n	80007be <__aeabi_dmul+0x24a>
 8000964:	ea95 0f0c 	teq	r5, ip
 8000968:	d106      	bne.n	8000978 <__aeabi_ddiv+0x1b0>
 800096a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096e:	f43f aefd 	beq.w	800076c <__aeabi_dmul+0x1f8>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e722      	b.n	80007be <__aeabi_dmul+0x24a>
 8000978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000982:	f47f aec5 	bne.w	8000710 <__aeabi_dmul+0x19c>
 8000986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098a:	f47f af0d 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800098e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000992:	f47f aeeb 	bne.w	800076c <__aeabi_dmul+0x1f8>
 8000996:	e712      	b.n	80007be <__aeabi_dmul+0x24a>

08000998 <__aeabi_d2iz>:
 8000998:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800099c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a0:	d215      	bcs.n	80009ce <__aeabi_d2iz+0x36>
 80009a2:	d511      	bpl.n	80009c8 <__aeabi_d2iz+0x30>
 80009a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009ac:	d912      	bls.n	80009d4 <__aeabi_d2iz+0x3c>
 80009ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009be:	fa23 f002 	lsr.w	r0, r3, r2
 80009c2:	bf18      	it	ne
 80009c4:	4240      	negne	r0, r0
 80009c6:	4770      	bx	lr
 80009c8:	f04f 0000 	mov.w	r0, #0
 80009cc:	4770      	bx	lr
 80009ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d2:	d105      	bne.n	80009e0 <__aeabi_d2iz+0x48>
 80009d4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009d8:	bf08      	it	eq
 80009da:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009de:	4770      	bx	lr
 80009e0:	f04f 0000 	mov.w	r0, #0
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <serialOut>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void serialOut(UART_HandleTypeDef *huart, char _out[], uint32_t len){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(huart, (uint8_t *) _out, len, 100);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	2364      	movs	r3, #100	; 0x64
 80009fa:	68b9      	ldr	r1, [r7, #8]
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f004 fc2b 	bl	8005258 <HAL_UART_Transmit>
}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <printStr>:

void printStr(char str[])
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	serialOut(&huart2, str, strlen(str));
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff fbe9 	bl	80001ec <strlen>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	4803      	ldr	r0, [pc, #12]	; (8000a30 <printStr+0x24>)
 8000a22:	f7ff ffe1 	bl	80009e8 <serialOut>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000c5f8 	.word	0x2000c5f8

08000a34 <printChar>:

void printChar(char chr)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	char str1[2] = {chr , '\0'};
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	753b      	strb	r3, [r7, #20]
 8000a42:	2300      	movs	r3, #0
 8000a44:	757b      	strb	r3, [r7, #21]
	char str2[5] = "";
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	743b      	strb	r3, [r7, #16]
	strcpy(str2,str1);
 8000a4e:	f107 0214 	add.w	r2, r7, #20
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	4611      	mov	r1, r2
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f005 f8e5 	bl	8005c28 <strcpy>
	serialOut(&huart2, str2, strlen(str2));
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fbc2 	bl	80001ec <strlen>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4803      	ldr	r0, [pc, #12]	; (8000a80 <printChar+0x4c>)
 8000a72:	f7ff ffb9 	bl	80009e8 <serialOut>
}
 8000a76:	bf00      	nop
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	2000c5f8 	.word	0x2000c5f8

08000a84 <printInt>:

void printInt(int i)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	char str[5];
	itoa(i, str, 10);
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	220a      	movs	r2, #10
 8000a92:	4619      	mov	r1, r3
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f005 f8bd 	bl	8005c14 <itoa>
	serialOut(&huart2, str, strlen(str));
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fba4 	bl	80001ec <strlen>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4803      	ldr	r0, [pc, #12]	; (8000abc <printInt+0x38>)
 8000aae:	f7ff ff9b 	bl	80009e8 <serialOut>
}
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	2000c5f8 	.word	0x2000c5f8

08000ac0 <printWaveform>:
	strcat(newstr, "\r\n");
	serialOut(&huart2, str, strlen(newstr));
}

void printWaveform(short data[], int size)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
	for(int i = 0; i<size; i++)
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	e00e      	b.n	8000aee <printWaveform+0x2e>
	{
		printStr("|");
 8000ad0:	480b      	ldr	r0, [pc, #44]	; (8000b00 <printWaveform+0x40>)
 8000ad2:	f7ff ff9b 	bl	8000a0c <printStr>
		printInt(data[i]);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff ffce 	bl	8000a84 <printInt>
	for(int i = 0; i<size; i++)
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	3301      	adds	r3, #1
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	dbec      	blt.n	8000ad0 <printWaveform+0x10>
	}
}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	08005e38 	.word	0x08005e38

08000b04 <readSerial>:
 * Read "readsize" number of characters from serial port, and outputs to outputString
 * Returns 1 if timed out, else 0
 * printchar echoes the typed character back to the PC
 */
int readSerial(char* outputString, int readsize, int timeout, int printchar)
{
 8000b04:	b5b0      	push	{r4, r5, r7, lr}
 8000b06:	b08c      	sub	sp, #48	; 0x30
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	466b      	mov	r3, sp
 8000b14:	461d      	mov	r5, r3
	int starttime = HAL_GetTick();
 8000b16:	f000 fe53 	bl	80017c0 <HAL_GetTick>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	61fb      	str	r3, [r7, #28]
	char rxedString[readsize+1];
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	1c58      	adds	r0, r3, #1
 8000b22:	1e43      	subs	r3, r0, #1
 8000b24:	61bb      	str	r3, [r7, #24]
 8000b26:	4603      	mov	r3, r0
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f04f 0200 	mov.w	r2, #0
 8000b2e:	f04f 0300 	mov.w	r3, #0
 8000b32:	f04f 0400 	mov.w	r4, #0
 8000b36:	00d4      	lsls	r4, r2, #3
 8000b38:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000b3c:	00cb      	lsls	r3, r1, #3
 8000b3e:	4603      	mov	r3, r0
 8000b40:	4619      	mov	r1, r3
 8000b42:	f04f 0200 	mov.w	r2, #0
 8000b46:	f04f 0300 	mov.w	r3, #0
 8000b4a:	f04f 0400 	mov.w	r4, #0
 8000b4e:	00d4      	lsls	r4, r2, #3
 8000b50:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000b54:	00cb      	lsls	r3, r1, #3
 8000b56:	4603      	mov	r3, r0
 8000b58:	3307      	adds	r3, #7
 8000b5a:	08db      	lsrs	r3, r3, #3
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	ebad 0d03 	sub.w	sp, sp, r3
 8000b62:	466b      	mov	r3, sp
 8000b64:	3300      	adds	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
	for(int i = 0; i<readsize; i++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b6c:	e007      	b.n	8000b7e <readSerial+0x7a>
	{
		rxedString[i] = '#';
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b72:	4413      	add	r3, r2
 8000b74:	2223      	movs	r2, #35	; 0x23
 8000b76:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<readsize; i++)
 8000b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	dbf3      	blt.n	8000b6e <readSerial+0x6a>
	}
	char rxedChar[1] = "#";
 8000b86:	2323      	movs	r3, #35	; 0x23
 8000b88:	743b      	strb	r3, [r7, #16]
	int charnum = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
	while (1)
	{
		  HAL_UART_Receive(&huart2, (uint8_t *)rxedChar, 1, 100);
 8000b8e:	f107 0110 	add.w	r1, r7, #16
 8000b92:	2364      	movs	r3, #100	; 0x64
 8000b94:	2201      	movs	r2, #1
 8000b96:	482a      	ldr	r0, [pc, #168]	; (8000c40 <readSerial+0x13c>)
 8000b98:	f004 fbf2 	bl	8005380 <HAL_UART_Receive>

		  if (rxedChar[0] == '\n' || rxedChar[0] == '\r') {
 8000b9c:	7c3b      	ldrb	r3, [r7, #16]
 8000b9e:	2b0a      	cmp	r3, #10
 8000ba0:	d028      	beq.n	8000bf4 <readSerial+0xf0>
 8000ba2:	7c3b      	ldrb	r3, [r7, #16]
 8000ba4:	2b0d      	cmp	r3, #13
 8000ba6:	d025      	beq.n	8000bf4 <readSerial+0xf0>
			  break;
		  }

		  if(rxedChar[0] != '#')
 8000ba8:	7c3b      	ldrb	r3, [r7, #16]
 8000baa:	2b23      	cmp	r3, #35	; 0x23
 8000bac:	d011      	beq.n	8000bd2 <readSerial+0xce>
		  {
			  rxedString[charnum] = rxedChar[0];
 8000bae:	7c39      	ldrb	r1, [r7, #16]
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb4:	4413      	add	r3, r2
 8000bb6:	460a      	mov	r2, r1
 8000bb8:	701a      	strb	r2, [r3, #0]
			  charnum += 1;
 8000bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
			  if(printchar == 1)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d103      	bne.n	8000bce <readSerial+0xca>
			  {
				  printChar(rxedChar[0]);
 8000bc6:	7c3b      	ldrb	r3, [r7, #16]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff33 	bl	8000a34 <printChar>
			  }
			  rxedChar[0] = '#';
 8000bce:	2323      	movs	r3, #35	; 0x23
 8000bd0:	743b      	strb	r3, [r7, #16]
		  }

		  if(rxedString[readsize-1] != '#')
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	697a      	ldr	r2, [r7, #20]
 8000bd8:	5cd3      	ldrb	r3, [r2, r3]
 8000bda:	2b23      	cmp	r3, #35	; 0x23
 8000bdc:	d109      	bne.n	8000bf2 <readSerial+0xee>
		  {
			  break; //String is full
		  }

		  if(HAL_GetTick()-starttime > timeout)
 8000bde:	f000 fdef 	bl	80017c0 <HAL_GetTick>
 8000be2:	4602      	mov	r2, r0
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	1ad2      	subs	r2, r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d9cf      	bls.n	8000b8e <readSerial+0x8a>
		  {
			  return 1;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e020      	b.n	8000c34 <readSerial+0x130>
			  break; //String is full
 8000bf2:	bf00      	nop
		  }
	}

	int truesize = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i<readsize; i++)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
 8000bfc:	e00b      	b.n	8000c16 <readSerial+0x112>
	{
		if(rxedString[i] != '#')
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	6a3b      	ldr	r3, [r7, #32]
 8000c02:	4413      	add	r3, r2
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b23      	cmp	r3, #35	; 0x23
 8000c08:	d002      	beq.n	8000c10 <readSerial+0x10c>
		{
			truesize += 1;
 8000c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i<readsize; i++)
 8000c10:	6a3b      	ldr	r3, [r7, #32]
 8000c12:	3301      	adds	r3, #1
 8000c14:	623b      	str	r3, [r7, #32]
 8000c16:	6a3a      	ldr	r2, [r7, #32]
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	dbef      	blt.n	8000bfe <readSerial+0xfa>
		}
	}
	rxedString[truesize] = 0; //Terminates string correctly
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c22:	4413      	add	r3, r2
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]

	strcpy(outputString, rxedString);
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	68f8      	ldr	r0, [r7, #12]
 8000c2e:	f004 fffb 	bl	8005c28 <strcpy>
	return 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	46ad      	mov	sp, r5
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3730      	adds	r7, #48	; 0x30
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	2000c5f8 	.word	0x2000c5f8

08000c44 <compressWaveform>:

/**
 * Either extrapolates between samples to fit resolution_x or uses multiple samples per pixel
 */
void compressWaveform(short* data, short *newdata, int samples_taken, int resolution_x)
{
 8000c44:	b5b0      	push	{r4, r5, r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	603b      	str	r3, [r7, #0]
	for(int current_pixel = 0; current_pixel<resolution_x; current_pixel++)
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	e02e      	b.n	8000cb6 <compressWaveform+0x72>
	{
		newdata[current_pixel] = data[(int)(((double)current_pixel/resolution_x)*samples_taken)];
 8000c58:	6978      	ldr	r0, [r7, #20]
 8000c5a:	f7ff fc21 	bl	80004a0 <__aeabi_i2d>
 8000c5e:	4604      	mov	r4, r0
 8000c60:	460d      	mov	r5, r1
 8000c62:	6838      	ldr	r0, [r7, #0]
 8000c64:	f7ff fc1c 	bl	80004a0 <__aeabi_i2d>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	4629      	mov	r1, r5
 8000c70:	f7ff fdaa 	bl	80007c8 <__aeabi_ddiv>
 8000c74:	4603      	mov	r3, r0
 8000c76:	460c      	mov	r4, r1
 8000c78:	4625      	mov	r5, r4
 8000c7a:	461c      	mov	r4, r3
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff fc0f 	bl	80004a0 <__aeabi_i2d>
 8000c82:	4602      	mov	r2, r0
 8000c84:	460b      	mov	r3, r1
 8000c86:	4620      	mov	r0, r4
 8000c88:	4629      	mov	r1, r5
 8000c8a:	f7ff fc73 	bl	8000574 <__aeabi_dmul>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	460c      	mov	r4, r1
 8000c92:	4618      	mov	r0, r3
 8000c94:	4621      	mov	r1, r4
 8000c96:	f7ff fe7f 	bl	8000998 <__aeabi_d2iz>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	441a      	add	r2, r3
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	68b9      	ldr	r1, [r7, #8]
 8000ca8:	440b      	add	r3, r1
 8000caa:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000cae:	801a      	strh	r2, [r3, #0]
	for(int current_pixel = 0; current_pixel<resolution_x; current_pixel++)
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	dbcc      	blt.n	8000c58 <compressWaveform+0x14>
			current_pixel++;
		}
		newdata[current_pixel] += data[current_sample];
		current_sample++;
	}*/
}
 8000cbe:	bf00      	nop
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000cc8 <getWaveform>:

/**
 * Get the set amount of samples in the timeframe, and store in data
 */
void getWaveform(short* data_out, int resolution_x, double sample_time)
{
 8000cc8:	b5b0      	push	{r4, r5, r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	ed87 0b00 	vstr	d0, [r7]
	//double a = timeframe/0.0251;

	//samples_needed = 220000*timeframe*0.001;
	//printInt(samples_needed);
	//int samples_needed = (double)samples_per_ms*timeframe;
	int samples_needed = (sample_time/25.1)*max_samples;
 8000cd6:	a338      	add	r3, pc, #224	; (adr r3, 8000db8 <getWaveform+0xf0>)
 8000cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ce0:	f7ff fd72 	bl	80007c8 <__aeabi_ddiv>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	460c      	mov	r4, r1
 8000ce8:	4625      	mov	r5, r4
 8000cea:	461c      	mov	r4, r3
 8000cec:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fbd5 	bl	80004a0 <__aeabi_i2d>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	4629      	mov	r1, r5
 8000cfe:	f7ff fc39 	bl	8000574 <__aeabi_dmul>
 8000d02:	4603      	mov	r3, r0
 8000d04:	460c      	mov	r4, r1
 8000d06:	4618      	mov	r0, r3
 8000d08:	4621      	mov	r1, r4
 8000d0a:	f7ff fe45 	bl	8000998 <__aeabi_d2iz>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	61fb      	str	r3, [r7, #28]
	if(samples_needed < max_samples)
 8000d12:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	da38      	bge.n	8000d8e <getWaveform+0xc6>
	{
		if(debug)
 8000d1c:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <getWaveform+0xd0>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d008      	beq.n	8000d36 <getWaveform+0x6e>
		{
			printStr("High sample rate mode\n\r");
 8000d24:	481d      	ldr	r0, [pc, #116]	; (8000d9c <getWaveform+0xd4>)
 8000d26:	f7ff fe71 	bl	8000a0c <printStr>
			printInt(samples_needed);
 8000d2a:	69f8      	ldr	r0, [r7, #28]
 8000d2c:	f7ff feaa 	bl	8000a84 <printInt>
			printStr(" samples needed\n\r");
 8000d30:	481b      	ldr	r0, [pc, #108]	; (8000da0 <getWaveform+0xd8>)
 8000d32:	f7ff fe6b 	bl	8000a0c <printStr>
		}
		sample_completed = 0;
 8000d36:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <getWaveform+0xdc>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)data, samples_needed);
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4919      	ldr	r1, [pc, #100]	; (8000da8 <getWaveform+0xe0>)
 8000d42:	481a      	ldr	r0, [pc, #104]	; (8000dac <getWaveform+0xe4>)
 8000d44:	f000 ff60 	bl	8001c08 <HAL_ADC_Start_DMA>
		unsigned long t1 = DWT->CYCCNT; //32400
 8000d48:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <getWaveform+0xe8>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	61bb      	str	r3, [r7, #24]
		while(sample_completed == 0)
 8000d4e:	e001      	b.n	8000d54 <getWaveform+0x8c>
		{
			int a = 1;
 8000d50:	2301      	movs	r3, #1
 8000d52:	613b      	str	r3, [r7, #16]
		while(sample_completed == 0)
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <getWaveform+0xdc>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d0f9      	beq.n	8000d50 <getWaveform+0x88>
		}
		unsigned long time2 = (DWT->CYCCNT);
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <getWaveform+0xe8>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	617b      	str	r3, [r7, #20]
		HAL_ADC_Stop_DMA(&hadc1);
 8000d62:	4812      	ldr	r0, [pc, #72]	; (8000dac <getWaveform+0xe4>)
 8000d64:	f001 f86c 	bl	8001e40 <HAL_ADC_Stop_DMA>
		//printStr("Time:");
		//printInt(time2);
		/*
		printStr("Time2:");
		printInt(t1);*/
		if(debug)
 8000d68:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <getWaveform+0xd0>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d008      	beq.n	8000d82 <getWaveform+0xba>
		{
			printStr("time delta:");
 8000d70:	4810      	ldr	r0, [pc, #64]	; (8000db4 <getWaveform+0xec>)
 8000d72:	f7ff fe4b 	bl	8000a0c <printStr>
			printInt(time2-t1);
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fe81 	bl	8000a84 <printInt>

		//HAL_ADC_Start_IT(&hadc1);
		//printStr("Data:");
		//printInt(data[0]);

		compressWaveform(data, data_out, samples_needed, resolution_x);
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	69fa      	ldr	r2, [r7, #28]
 8000d86:	68f9      	ldr	r1, [r7, #12]
 8000d88:	4807      	ldr	r0, [pc, #28]	; (8000da8 <getWaveform+0xe0>)
 8000d8a:	f7ff ff5b 	bl	8000c44 <compressWaveform>
	}
}
 8000d8e:	bf00      	nop
 8000d90:	3720      	adds	r7, #32
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bdb0      	pop	{r4, r5, r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	08005e3c 	.word	0x08005e3c
 8000da0:	08005e54 	.word	0x08005e54
 8000da4:	200001fc 	.word	0x200001fc
 8000da8:	200002a8 	.word	0x200002a8
 8000dac:	20000214 	.word	0x20000214
 8000db0:	e0001000 	.word	0xe0001000
 8000db4:	08005e68 	.word	0x08005e68
 8000db8:	9999999a 	.word	0x9999999a
 8000dbc:	40391999 	.word	0x40391999

08000dc0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	sample_completed = 1;
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <HAL_ADC_ConvCpltCallback+0x1c>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	601a      	str	r2, [r3, #0]
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	200001fc 	.word	0x200001fc

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b09c      	sub	sp, #112	; 0x70
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  int resolution_x = 200;
 8000de6:	23c8      	movs	r3, #200	; 0xc8
 8000de8:	667b      	str	r3, [r7, #100]	; 0x64
  int resolution_y = 1080; //Unused
 8000dea:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000dee:	65fb      	str	r3, [r7, #92]	; 0x5c

  double sample_time = 25; //in miliseconds, current maximum is 25
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	4c8d      	ldr	r4, [pc, #564]	; (800102c <main+0x24c>)
 8000df6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dfa:	f000 fc87 	bl	800170c <HAL_Init>

  /* USER CODE BEGIN Init */

  //Enable clock cycle counter
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000dfe:	4b8c      	ldr	r3, [pc, #560]	; (8001030 <main+0x250>)
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	4a8b      	ldr	r2, [pc, #556]	; (8001030 <main+0x250>)
 8000e04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e08:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 8000e0a:	4b8a      	ldr	r3, [pc, #552]	; (8001034 <main+0x254>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000e10:	4b88      	ldr	r3, [pc, #544]	; (8001034 <main+0x254>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a87      	ldr	r2, [pc, #540]	; (8001034 <main+0x254>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6013      	str	r3, [r2, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1c:	f000 f920 	bl	8001060 <SystemClock_Config>
  // RCC->APB1ENR |= RCC_APB1ENR_DAC1EN;

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e20:	f000 fa68 	bl	80012f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e24:	f000 fa48 	bl	80012b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e28:	f000 fa16 	bl	8001258 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000e2c:	f000 f97a 	bl	8001124 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000e30:	f000 f9e8 	bl	8001204 <MX_DAC1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  if(debug) { printStr("Ready\n\r"); }
 8000e34:	4b80      	ldr	r3, [pc, #512]	; (8001038 <main+0x258>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d002      	beq.n	8000e42 <main+0x62>
 8000e3c:	487f      	ldr	r0, [pc, #508]	; (800103c <main+0x25c>)
 8000e3e:	f7ff fde5 	bl	8000a0c <printStr>

  while(1)
  {
	  printStr(">");
 8000e42:	487f      	ldr	r0, [pc, #508]	; (8001040 <main+0x260>)
 8000e44:	f7ff fde2 	bl	8000a0c <printStr>
	  char input[2];
	  while(readSerial(input, 1, 10000, debug) == 1)
 8000e48:	e002      	b.n	8000e50 <main+0x70>
	  {
		  printStr(">");
 8000e4a:	487d      	ldr	r0, [pc, #500]	; (8001040 <main+0x260>)
 8000e4c:	f7ff fdde 	bl	8000a0c <printStr>
	  while(readSerial(input, 1, 10000, debug) == 1)
 8000e50:	4b79      	ldr	r3, [pc, #484]	; (8001038 <main+0x258>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000e58:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	f7ff fe51 	bl	8000b04 <readSerial>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d0f0      	beq.n	8000e4a <main+0x6a>
	  }

	  if(input[0] == 'A') //Acquire data
 8000e68:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000e6c:	2b41      	cmp	r3, #65	; 0x41
 8000e6e:	d146      	bne.n	8000efe <main+0x11e>
	  {
 8000e70:	466b      	mov	r3, sp
 8000e72:	461d      	mov	r5, r3
		  short newdata[resolution_x];
 8000e74:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000e76:	1e43      	subs	r3, r0, #1
 8000e78:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f04f 0200 	mov.w	r2, #0
 8000e82:	f04f 0300 	mov.w	r3, #0
 8000e86:	f04f 0400 	mov.w	r4, #0
 8000e8a:	0114      	lsls	r4, r2, #4
 8000e8c:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8000e90:	010b      	lsls	r3, r1, #4
 8000e92:	4603      	mov	r3, r0
 8000e94:	4619      	mov	r1, r3
 8000e96:	f04f 0200 	mov.w	r2, #0
 8000e9a:	f04f 0300 	mov.w	r3, #0
 8000e9e:	f04f 0400 	mov.w	r4, #0
 8000ea2:	0114      	lsls	r4, r2, #4
 8000ea4:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8000ea8:	010b      	lsls	r3, r1, #4
 8000eaa:	4603      	mov	r3, r0
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	3301      	adds	r3, #1
 8000eb0:	3307      	adds	r3, #7
 8000eb2:	08db      	lsrs	r3, r3, #3
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	ebad 0d03 	sub.w	sp, sp, r3
 8000eba:	466b      	mov	r3, sp
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	085b      	lsrs	r3, r3, #1
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	647b      	str	r3, [r7, #68]	; 0x44
		  for(int i = 0; i<resolution_x; i++)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	663b      	str	r3, [r7, #96]	; 0x60
 8000ec8:	e007      	b.n	8000eda <main+0xfa>
		  {
			  newdata[i] = 0;
 8000eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ecc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ece:	2100      	movs	r1, #0
 8000ed0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  for(int i = 0; i<resolution_x; i++)
 8000ed4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	663b      	str	r3, [r7, #96]	; 0x60
 8000eda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	dbf3      	blt.n	8000eca <main+0xea>
		  }
		  getWaveform(newdata, resolution_x, sample_time);
 8000ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ee4:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8000ee8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff feec 	bl	8000cc8 <getWaveform>
		  //printStr("dsaoi");
		  //printInt(newdata[0]);
		  printWaveform(newdata, resolution_x);
 8000ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ef2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fde3 	bl	8000ac0 <printWaveform>
 8000efa:	46ad      	mov	sp, r5
 8000efc:	e7a1      	b.n	8000e42 <main+0x62>
	  }
	  else if(input[0] == 'S') //Set variable
 8000efe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000f02:	2b53      	cmp	r3, #83	; 0x53
 8000f04:	d19d      	bne.n	8000e42 <main+0x62>
	  {
		  printStr("SetVar");
 8000f06:	484f      	ldr	r0, [pc, #316]	; (8001044 <main+0x264>)
 8000f08:	f7ff fd80 	bl	8000a0c <printStr>

		  char variable_name[21];
		  readSerial(variable_name, 20, 20000, 1);
 8000f0c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000f10:	2301      	movs	r3, #1
 8000f12:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000f16:	2114      	movs	r1, #20
 8000f18:	f7ff fdf4 	bl	8000b04 <readSerial>
		  variable_name[20] = '\0';
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

		  char variable_value[21];
		  readSerial(variable_value, 20, 20000, 1);
 8000f22:	f107 0010 	add.w	r0, r7, #16
 8000f26:	2301      	movs	r3, #1
 8000f28:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000f2c:	2114      	movs	r1, #20
 8000f2e:	f7ff fde9 	bl	8000b04 <readSerial>
		  variable_value[20] = '\0';
 8000f32:	2300      	movs	r3, #0
 8000f34:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		  printStr(" to ");
		  printStr(value);
		  printStr("\n\r");
		  printInt(strcmp(variable, "resolution_x"));*/

		  if(strcmp(variable_name, "resolution_x") == 0)
 8000f38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f3c:	4942      	ldr	r1, [pc, #264]	; (8001048 <main+0x268>)
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff f94a 	bl	80001d8 <strcmp>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d112      	bne.n	8000f70 <main+0x190>
		  {
			  char *end;
			  int newval = strtol(variable_value, &end, 10);
 8000f4a:	f107 010c 	add.w	r1, r7, #12
 8000f4e:	f107 0310 	add.w	r3, r7, #16
 8000f52:	220a      	movs	r2, #10
 8000f54:	4618      	mov	r0, r3
 8000f56:	f004 feeb 	bl	8005d30 <strtol>
 8000f5a:	64f8      	str	r0, [r7, #76]	; 0x4c
			  if(newval == 0)
 8000f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d103      	bne.n	8000f6a <main+0x18a>
			  {
				  printStr("Invalid number");
 8000f62:	483a      	ldr	r0, [pc, #232]	; (800104c <main+0x26c>)
 8000f64:	f7ff fd52 	bl	8000a0c <printStr>
 8000f68:	e76b      	b.n	8000e42 <main+0x62>
			  }
			  else
			  {
				  resolution_x = newval;
 8000f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f6c:	667b      	str	r3, [r7, #100]	; 0x64
 8000f6e:	e768      	b.n	8000e42 <main+0x62>
			  }
		  }
		  else if(strcmp(variable_name, "resolution_y") == 0)
 8000f70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f74:	4936      	ldr	r1, [pc, #216]	; (8001050 <main+0x270>)
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff f92e 	bl	80001d8 <strcmp>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d112      	bne.n	8000fa8 <main+0x1c8>
		  {
			  char *end;
			  int newval = strtol(variable_value, &end, 10);
 8000f82:	f107 0108 	add.w	r1, r7, #8
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	220a      	movs	r2, #10
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f004 fecf 	bl	8005d30 <strtol>
 8000f92:	6538      	str	r0, [r7, #80]	; 0x50
			  if(newval == 0)
 8000f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d103      	bne.n	8000fa2 <main+0x1c2>
			  {
				  printStr("Invalid number");
 8000f9a:	482c      	ldr	r0, [pc, #176]	; (800104c <main+0x26c>)
 8000f9c:	f7ff fd36 	bl	8000a0c <printStr>
 8000fa0:	e74f      	b.n	8000e42 <main+0x62>
			  }
			  else
			  {
				  resolution_y = newval;
 8000fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000fa6:	e74c      	b.n	8000e42 <main+0x62>
			  }
		  }
		  else if(strcmp(variable_name, "sample_time") == 0)
 8000fa8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fac:	4929      	ldr	r1, [pc, #164]	; (8001054 <main+0x274>)
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff f912 	bl	80001d8 <strcmp>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d116      	bne.n	8000fe8 <main+0x208>
		  {
			  char *end;
			  int newval = strtol(variable_value, &end, 10);
 8000fba:	1d39      	adds	r1, r7, #4
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	220a      	movs	r2, #10
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f004 feb4 	bl	8005d30 <strtol>
 8000fc8:	6578      	str	r0, [r7, #84]	; 0x54
			  if(newval == 0)
 8000fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d103      	bne.n	8000fd8 <main+0x1f8>
			  {
				  printStr("Invalid number");
 8000fd0:	481e      	ldr	r0, [pc, #120]	; (800104c <main+0x26c>)
 8000fd2:	f7ff fd1b 	bl	8000a0c <printStr>
 8000fd6:	e734      	b.n	8000e42 <main+0x62>
			  }
			  else
			  {
				  sample_time = newval;
 8000fd8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000fda:	f7ff fa61 	bl	80004a0 <__aeabi_i2d>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	460c      	mov	r4, r1
 8000fe2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
 8000fe6:	e72c      	b.n	8000e42 <main+0x62>
			  }
		  }
		  else if(strcmp(variable_name, "DEBUG") == 0)
 8000fe8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fec:	491a      	ldr	r1, [pc, #104]	; (8001058 <main+0x278>)
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff f8f2 	bl	80001d8 <strcmp>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d114      	bne.n	8001024 <main+0x244>
		  {
			  char *endptr;
			  int newval = strtol(variable_value, &endptr, 10);
 8000ffa:	4639      	mov	r1, r7
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	220a      	movs	r2, #10
 8001002:	4618      	mov	r0, r3
 8001004:	f004 fe94 	bl	8005d30 <strtol>
 8001008:	65b8      	str	r0, [r7, #88]	; 0x58
			  if(endptr == variable_value)
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	429a      	cmp	r2, r3
 8001012:	d103      	bne.n	800101c <main+0x23c>
			  {
				  printStr("Invalid number");
 8001014:	480d      	ldr	r0, [pc, #52]	; (800104c <main+0x26c>)
 8001016:	f7ff fcf9 	bl	8000a0c <printStr>
 800101a:	e712      	b.n	8000e42 <main+0x62>
			  }
			  else
			  {
				  debug = newval;
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <main+0x258>)
 800101e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	e70e      	b.n	8000e42 <main+0x62>
			  }
		  }
		  else
		  {
			  printStr("Variable not found");
 8001024:	480d      	ldr	r0, [pc, #52]	; (800105c <main+0x27c>)
 8001026:	f7ff fcf1 	bl	8000a0c <printStr>
  {
 800102a:	e70a      	b.n	8000e42 <main+0x62>
 800102c:	40390000 	.word	0x40390000
 8001030:	e000edf0 	.word	0xe000edf0
 8001034:	e0001000 	.word	0xe0001000
 8001038:	20000000 	.word	0x20000000
 800103c:	08005e74 	.word	0x08005e74
 8001040:	08005e7c 	.word	0x08005e7c
 8001044:	08005e80 	.word	0x08005e80
 8001048:	08005e88 	.word	0x08005e88
 800104c:	08005e98 	.word	0x08005e98
 8001050:	08005ea8 	.word	0x08005ea8
 8001054:	08005eb8 	.word	0x08005eb8
 8001058:	08005ec4 	.word	0x08005ec4
 800105c:	08005ecc 	.word	0x08005ecc

08001060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b0a6      	sub	sp, #152	; 0x98
 8001064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001066:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800106a:	2228      	movs	r2, #40	; 0x28
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f004 fdd2 	bl	8005c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001074:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2258      	movs	r2, #88	; 0x58
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f004 fdc4 	bl	8005c18 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001090:	2302      	movs	r3, #2
 8001092:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001094:	2301      	movs	r3, #1
 8001096:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001098:	2310      	movs	r3, #16
 800109a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109e:	2302      	movs	r3, #2
 80010a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010be:	4618      	mov	r0, r3
 80010c0:	f002 fd12 	bl	8003ae8 <HAL_RCC_OscConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010ca:	f000 f97b 	bl	80013c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ce:	230f      	movs	r3, #15
 80010d0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d2:	2302      	movs	r3, #2
 80010d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010e8:	2102      	movs	r1, #2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f003 fc12 	bl	8004914 <HAL_RCC_ClockConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010f6:	f000 f965 	bl	80013c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 80010fa:	2382      	movs	r3, #130	; 0x82
 80010fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001102:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	4618      	mov	r0, r3
 800110c:	f003 fe38 	bl	8004d80 <HAL_RCCEx_PeriphCLKConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001116:	f000 f955 	bl	80013c4 <Error_Handler>
  }
}
 800111a:	bf00      	nop
 800111c:	3798      	adds	r7, #152	; 0x98
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
 8001144:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001146:	4b2e      	ldr	r3, [pc, #184]	; (8001200 <MX_ADC1_Init+0xdc>)
 8001148:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800114c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800114e:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <MX_ADC1_Init+0xdc>)
 8001150:	2200      	movs	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001154:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <MX_ADC1_Init+0xdc>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800115a:	4b29      	ldr	r3, [pc, #164]	; (8001200 <MX_ADC1_Init+0xdc>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001160:	4b27      	ldr	r3, [pc, #156]	; (8001200 <MX_ADC1_Init+0xdc>)
 8001162:	2201      	movs	r2, #1
 8001164:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001166:	4b26      	ldr	r3, [pc, #152]	; (8001200 <MX_ADC1_Init+0xdc>)
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800116e:	4b24      	ldr	r3, [pc, #144]	; (8001200 <MX_ADC1_Init+0xdc>)
 8001170:	2200      	movs	r2, #0
 8001172:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001174:	4b22      	ldr	r3, [pc, #136]	; (8001200 <MX_ADC1_Init+0xdc>)
 8001176:	2201      	movs	r2, #1
 8001178:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800117a:	4b21      	ldr	r3, [pc, #132]	; (8001200 <MX_ADC1_Init+0xdc>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001180:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <MX_ADC1_Init+0xdc>)
 8001182:	2201      	movs	r2, #1
 8001184:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001186:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <MX_ADC1_Init+0xdc>)
 8001188:	2201      	movs	r2, #1
 800118a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <MX_ADC1_Init+0xdc>)
 8001190:	2204      	movs	r2, #4
 8001192:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <MX_ADC1_Init+0xdc>)
 8001196:	2200      	movs	r2, #0
 8001198:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <MX_ADC1_Init+0xdc>)
 800119c:	2200      	movs	r2, #0
 800119e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011a0:	4817      	ldr	r0, [pc, #92]	; (8001200 <MX_ADC1_Init+0xdc>)
 80011a2:	f000 fb37 	bl	8001814 <HAL_ADC_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80011ac:	f000 f90a 	bl	80013c4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4619      	mov	r1, r3
 80011ba:	4811      	ldr	r0, [pc, #68]	; (8001200 <MX_ADC1_Init+0xdc>)
 80011bc:	f001 fcc2 	bl	8002b44 <HAL_ADCEx_MultiModeConfigChannel>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80011c6:	f000 f8fd 	bl	80013c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ce:	2301      	movs	r3, #1
 80011d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 80011d6:	2305      	movs	r3, #5
 80011d8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	4619      	mov	r1, r3
 80011e6:	4806      	ldr	r0, [pc, #24]	; (8001200 <MX_ADC1_Init+0xdc>)
 80011e8:	f001 f9c0 	bl	800256c <HAL_ADC_ConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80011f2:	f000 f8e7 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	3728      	adds	r7, #40	; 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000214 	.word	0x20000214

08001204 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_DAC1_Init+0x4c>)
 8001216:	4a0f      	ldr	r2, [pc, #60]	; (8001254 <MX_DAC1_Init+0x50>)
 8001218:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800121a:	480d      	ldr	r0, [pc, #52]	; (8001250 <MX_DAC1_Init+0x4c>)
 800121c:	f002 f867 	bl	80032ee <HAL_DAC_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8001226:	f000 f8cd 	bl	80013c4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2200      	movs	r2, #0
 8001236:	4619      	mov	r1, r3
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_DAC1_Init+0x4c>)
 800123a:	f002 f87a 	bl	8003332 <HAL_DAC_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8001244:	f000 f8be 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000200 	.word	0x20000200
 8001254:	40007400 	.word	0x40007400

08001258 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800125e:	4a15      	ldr	r2, [pc, #84]	; (80012b4 <MX_USART2_UART_Init+0x5c>)
 8001260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800127e:	220c      	movs	r2, #12
 8001280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001296:	2200      	movs	r2, #0
 8001298:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800129c:	f003 ff8e 	bl	80051bc <HAL_UART_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012a6:	f000 f88d 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000c5f8 	.word	0x2000c5f8
 80012b4:	40004400 	.word	0x40004400

080012b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_DMA_Init+0x38>)
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <MX_DMA_Init+0x38>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6153      	str	r3, [r2, #20]
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_DMA_Init+0x38>)
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	200b      	movs	r0, #11
 80012dc:	f001 ffd1 	bl	8003282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012e0:	200b      	movs	r0, #11
 80012e2:	f001 ffea 	bl	80032ba <HAL_NVIC_EnableIRQ>

}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000

080012f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130a:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <MX_GPIO_Init+0xc4>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	4a2a      	ldr	r2, [pc, #168]	; (80013b8 <MX_GPIO_Init+0xc4>)
 8001310:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001314:	6153      	str	r3, [r2, #20]
 8001316:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <MX_GPIO_Init+0xc4>)
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001322:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <MX_GPIO_Init+0xc4>)
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	4a24      	ldr	r2, [pc, #144]	; (80013b8 <MX_GPIO_Init+0xc4>)
 8001328:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800132c:	6153      	str	r3, [r2, #20]
 800132e:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <MX_GPIO_Init+0xc4>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <MX_GPIO_Init+0xc4>)
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	4a1e      	ldr	r2, [pc, #120]	; (80013b8 <MX_GPIO_Init+0xc4>)
 8001340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001344:	6153      	str	r3, [r2, #20]
 8001346:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <MX_GPIO_Init+0xc4>)
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001352:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <MX_GPIO_Init+0xc4>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	4a18      	ldr	r2, [pc, #96]	; (80013b8 <MX_GPIO_Init+0xc4>)
 8001358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800135c:	6153      	str	r3, [r2, #20]
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <MX_GPIO_Init+0xc4>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2120      	movs	r1, #32
 800136e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001372:	f002 fba1 	bl	8003ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001376:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <MX_GPIO_Init+0xc8>)
 800137e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	480d      	ldr	r0, [pc, #52]	; (80013c0 <MX_GPIO_Init+0xcc>)
 800138c:	f002 fa0a 	bl	80037a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001390:	2320      	movs	r3, #32
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013aa:	f002 f9fb 	bl	80037a4 <HAL_GPIO_Init>

}
 80013ae:	bf00      	nop
 80013b0:	3728      	adds	r7, #40	; 0x28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000
 80013bc:	10210000 	.word	0x10210000
 80013c0:	48000800 	.word	0x48000800

080013c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ca:	e7fe      	b.n	80013ca <Error_Handler+0x6>

080013cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <HAL_MspInit+0x44>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <HAL_MspInit+0x44>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6193      	str	r3, [r2, #24]
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <HAL_MspInit+0x44>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_MspInit+0x44>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	4a08      	ldr	r2, [pc, #32]	; (8001410 <HAL_MspInit+0x44>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f4:	61d3      	str	r3, [r2, #28]
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_MspInit+0x44>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001402:	2007      	movs	r0, #7
 8001404:	f001 ff32 	bl	800326c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40021000 	.word	0x40021000

08001414 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001434:	d154      	bne.n	80014e0 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001436:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <HAL_ADC_MspInit+0xd4>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	4a2b      	ldr	r2, [pc, #172]	; (80014e8 <HAL_ADC_MspInit+0xd4>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001440:	6153      	str	r3, [r2, #20]
 8001442:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <HAL_ADC_MspInit+0xd4>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	4b26      	ldr	r3, [pc, #152]	; (80014e8 <HAL_ADC_MspInit+0xd4>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	4a25      	ldr	r2, [pc, #148]	; (80014e8 <HAL_ADC_MspInit+0xd4>)
 8001454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001458:	6153      	str	r3, [r2, #20]
 800145a:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <HAL_ADC_MspInit+0xd4>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001466:	2301      	movs	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800146a:	2303      	movs	r3, #3
 800146c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147c:	f002 f992 	bl	80037a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001480:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <HAL_ADC_MspInit+0xd8>)
 8001482:	4a1b      	ldr	r2, [pc, #108]	; (80014f0 <HAL_ADC_MspInit+0xdc>)
 8001484:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001486:	4b19      	ldr	r3, [pc, #100]	; (80014ec <HAL_ADC_MspInit+0xd8>)
 8001488:	2200      	movs	r2, #0
 800148a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <HAL_ADC_MspInit+0xd8>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <HAL_ADC_MspInit+0xd8>)
 8001494:	2280      	movs	r2, #128	; 0x80
 8001496:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <HAL_ADC_MspInit+0xd8>)
 800149a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800149e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_ADC_MspInit+0xd8>)
 80014a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <HAL_ADC_MspInit+0xd8>)
 80014aa:	2220      	movs	r2, #32
 80014ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_ADC_MspInit+0xd8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014b4:	480d      	ldr	r0, [pc, #52]	; (80014ec <HAL_ADC_MspInit+0xd8>)
 80014b6:	f001 ff89 	bl	80033cc <HAL_DMA_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80014c0:	f7ff ff80 	bl	80013c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a09      	ldr	r2, [pc, #36]	; (80014ec <HAL_ADC_MspInit+0xd8>)
 80014c8:	639a      	str	r2, [r3, #56]	; 0x38
 80014ca:	4a08      	ldr	r2, [pc, #32]	; (80014ec <HAL_ADC_MspInit+0xd8>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	2012      	movs	r0, #18
 80014d6:	f001 fed4 	bl	8003282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80014da:	2012      	movs	r0, #18
 80014dc:	f001 feed 	bl	80032ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	; 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40021000 	.word	0x40021000
 80014ec:	20000264 	.word	0x20000264
 80014f0:	40020008 	.word	0x40020008

080014f4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a15      	ldr	r2, [pc, #84]	; (8001568 <HAL_DAC_MspInit+0x74>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d124      	bne.n	8001560 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_DAC_MspInit+0x78>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	4a14      	ldr	r2, [pc, #80]	; (800156c <HAL_DAC_MspInit+0x78>)
 800151c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001520:	61d3      	str	r3, [r2, #28]
 8001522:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_DAC_MspInit+0x78>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_DAC_MspInit+0x78>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	4a0e      	ldr	r2, [pc, #56]	; (800156c <HAL_DAC_MspInit+0x78>)
 8001534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001538:	6153      	str	r3, [r2, #20]
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <HAL_DAC_MspInit+0x78>)
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001546:	2310      	movs	r3, #16
 8001548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800154a:	2303      	movs	r3, #3
 800154c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155c:	f002 f922 	bl	80037a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001560:	bf00      	nop
 8001562:	3728      	adds	r7, #40	; 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40007400 	.word	0x40007400
 800156c:	40021000 	.word	0x40021000

08001570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a17      	ldr	r2, [pc, #92]	; (80015ec <HAL_UART_MspInit+0x7c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d128      	bne.n	80015e4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <HAL_UART_MspInit+0x80>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	4a16      	ldr	r2, [pc, #88]	; (80015f0 <HAL_UART_MspInit+0x80>)
 8001598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159c:	61d3      	str	r3, [r2, #28]
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <HAL_UART_MspInit+0x80>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <HAL_UART_MspInit+0x80>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <HAL_UART_MspInit+0x80>)
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	6153      	str	r3, [r2, #20]
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <HAL_UART_MspInit+0x80>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015c2:	230c      	movs	r3, #12
 80015c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015d2:	2307      	movs	r3, #7
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e0:	f002 f8e0 	bl	80037a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015e4:	bf00      	nop
 80015e6:	3728      	adds	r7, #40	; 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40004400 	.word	0x40004400
 80015f0:	40021000 	.word	0x40021000

080015f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <NMI_Handler+0x4>
	...

080015fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printStr("Error: Hard fault");
 8001600:	4801      	ldr	r0, [pc, #4]	; (8001608 <HardFault_Handler+0xc>)
 8001602:	f7ff fa03 	bl	8000a0c <printStr>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <HardFault_Handler+0xa>
 8001608:	08005ee0 	.word	0x08005ee0

0800160c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <MemManage_Handler+0x4>
	...

08001614 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  printStr("Error: Bus fault");
 8001618:	4801      	ldr	r0, [pc, #4]	; (8001620 <BusFault_Handler+0xc>)
 800161a:	f7ff f9f7 	bl	8000a0c <printStr>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <BusFault_Handler+0xa>
 8001620:	08005ef4 	.word	0x08005ef4

08001624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  printStr("Error: Usage fault");
 8001628:	4801      	ldr	r0, [pc, #4]	; (8001630 <UsageFault_Handler+0xc>)
 800162a:	f7ff f9ef 	bl	8000a0c <printStr>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <UsageFault_Handler+0xa>
 8001630:	08005f08 	.word	0x08005f08

08001634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001662:	f000 f899 	bl	8001798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <DMA1_Channel1_IRQHandler+0x10>)
 8001672:	f001 ff8a 	bl	800358a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000264 	.word	0x20000264

08001680 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <ADC1_2_IRQHandler+0x10>)
 8001686:	f000 fc3d 	bl	8001f04 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000214 	.word	0x20000214

08001694 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <SystemInit+0x20>)
 800169a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169e:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <SystemInit+0x20>)
 80016a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80016be:	490e      	ldr	r1, [pc, #56]	; (80016f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <LoopForever+0xe>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c4:	e002      	b.n	80016cc <LoopCopyDataInit>

080016c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ca:	3304      	adds	r3, #4

080016cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d0:	d3f9      	bcc.n	80016c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016d4:	4c0b      	ldr	r4, [pc, #44]	; (8001704 <LoopForever+0x16>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d8:	e001      	b.n	80016de <LoopFillZerobss>

080016da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016dc:	3204      	adds	r2, #4

080016de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e0:	d3fb      	bcc.n	80016da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016e2:	f7ff ffd7 	bl	8001694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016e6:	f004 fa59 	bl	8005b9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ea:	f7ff fb79 	bl	8000de0 <main>

080016ee <LoopForever>:

LoopForever:
    b LoopForever
 80016ee:	e7fe      	b.n	80016ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80016f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80016fc:	0800608c 	.word	0x0800608c
  ldr r2, =_sbss
 8001700:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001704:	2000c680 	.word	0x2000c680

08001708 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001708:	e7fe      	b.n	8001708 <ADC3_IRQHandler>
	...

0800170c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <HAL_Init+0x28>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a07      	ldr	r2, [pc, #28]	; (8001734 <HAL_Init+0x28>)
 8001716:	f043 0310 	orr.w	r3, r3, #16
 800171a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800171c:	2003      	movs	r0, #3
 800171e:	f001 fda5 	bl	800326c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001722:	2000      	movs	r0, #0
 8001724:	f000 f808 	bl	8001738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001728:	f7ff fe50 	bl	80013cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40022000 	.word	0x40022000

08001738 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_InitTick+0x54>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <HAL_InitTick+0x58>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4619      	mov	r1, r3
 800174a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001752:	fbb2 f3f3 	udiv	r3, r2, r3
 8001756:	4618      	mov	r0, r3
 8001758:	f001 fdbd 	bl	80032d6 <HAL_SYSTICK_Config>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e00e      	b.n	8001784 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b0f      	cmp	r3, #15
 800176a:	d80a      	bhi.n	8001782 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800176c:	2200      	movs	r2, #0
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	f001 fd85 	bl	8003282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001778:	4a06      	ldr	r2, [pc, #24]	; (8001794 <HAL_InitTick+0x5c>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	e000      	b.n	8001784 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
}
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000004 	.word	0x20000004
 8001790:	2000000c 	.word	0x2000000c
 8001794:	20000008 	.word	0x20000008

08001798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_IncTick+0x20>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_IncTick+0x24>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	4a04      	ldr	r2, [pc, #16]	; (80017bc <HAL_IncTick+0x24>)
 80017aa:	6013      	str	r3, [r2, #0]
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	2000000c 	.word	0x2000000c
 80017bc:	2000c67c 	.word	0x2000c67c

080017c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <HAL_GetTick+0x14>)
 80017c6:	681b      	ldr	r3, [r3, #0]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	2000c67c 	.word	0x2000c67c

080017d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b09a      	sub	sp, #104	; 0x68
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001822:	2300      	movs	r3, #0
 8001824:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e1e3      	b.n	8001bfc <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	2b00      	cmp	r3, #0
 8001844:	d176      	bne.n	8001934 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	2b00      	cmp	r3, #0
 800184c:	d152      	bne.n	80018f4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff fdd3 	bl	8001414 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d13b      	bne.n	80018f4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f001 fb17 	bl	8002eb0 <ADC_Disable>
 8001882:	4603      	mov	r3, r0
 8001884:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	f003 0310 	and.w	r3, r3, #16
 8001890:	2b00      	cmp	r3, #0
 8001892:	d12f      	bne.n	80018f4 <HAL_ADC_Init+0xe0>
 8001894:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001898:	2b00      	cmp	r3, #0
 800189a:	d12b      	bne.n	80018f4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018a4:	f023 0302 	bic.w	r3, r3, #2
 80018a8:	f043 0202 	orr.w	r2, r3, #2
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018be:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018ce:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018d0:	4b92      	ldr	r3, [pc, #584]	; (8001b1c <HAL_ADC_Init+0x308>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a92      	ldr	r2, [pc, #584]	; (8001b20 <HAL_ADC_Init+0x30c>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	0c9a      	lsrs	r2, r3, #18
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018e6:	e002      	b.n	80018ee <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1f9      	bne.n	80018e8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d007      	beq.n	8001912 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800190c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001910:	d110      	bne.n	8001934 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f023 0312 	bic.w	r3, r3, #18
 800191a:	f043 0210 	orr.w	r2, r3, #16
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	f043 0201 	orr.w	r2, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	f003 0310 	and.w	r3, r3, #16
 800193c:	2b00      	cmp	r3, #0
 800193e:	f040 8150 	bne.w	8001be2 <HAL_ADC_Init+0x3ce>
 8001942:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001946:	2b00      	cmp	r3, #0
 8001948:	f040 814b 	bne.w	8001be2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001956:	2b00      	cmp	r3, #0
 8001958:	f040 8143 	bne.w	8001be2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001964:	f043 0202 	orr.w	r2, r3, #2
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001974:	d004      	beq.n	8001980 <HAL_ADC_Init+0x16c>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a6a      	ldr	r2, [pc, #424]	; (8001b24 <HAL_ADC_Init+0x310>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d101      	bne.n	8001984 <HAL_ADC_Init+0x170>
 8001980:	4b69      	ldr	r3, [pc, #420]	; (8001b28 <HAL_ADC_Init+0x314>)
 8001982:	e000      	b.n	8001986 <HAL_ADC_Init+0x172>
 8001984:	4b69      	ldr	r3, [pc, #420]	; (8001b2c <HAL_ADC_Init+0x318>)
 8001986:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001990:	d102      	bne.n	8001998 <HAL_ADC_Init+0x184>
 8001992:	4b64      	ldr	r3, [pc, #400]	; (8001b24 <HAL_ADC_Init+0x310>)
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	e01a      	b.n	80019ce <HAL_ADC_Init+0x1ba>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a61      	ldr	r2, [pc, #388]	; (8001b24 <HAL_ADC_Init+0x310>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d103      	bne.n	80019aa <HAL_ADC_Init+0x196>
 80019a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	e011      	b.n	80019ce <HAL_ADC_Init+0x1ba>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a60      	ldr	r2, [pc, #384]	; (8001b30 <HAL_ADC_Init+0x31c>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d102      	bne.n	80019ba <HAL_ADC_Init+0x1a6>
 80019b4:	4b5f      	ldr	r3, [pc, #380]	; (8001b34 <HAL_ADC_Init+0x320>)
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	e009      	b.n	80019ce <HAL_ADC_Init+0x1ba>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a5d      	ldr	r2, [pc, #372]	; (8001b34 <HAL_ADC_Init+0x320>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d102      	bne.n	80019ca <HAL_ADC_Init+0x1b6>
 80019c4:	4b5a      	ldr	r3, [pc, #360]	; (8001b30 <HAL_ADC_Init+0x31c>)
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	e001      	b.n	80019ce <HAL_ADC_Init+0x1ba>
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d108      	bne.n	80019ee <HAL_ADC_Init+0x1da>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d101      	bne.n	80019ee <HAL_ADC_Init+0x1da>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <HAL_ADC_Init+0x1dc>
 80019ee:	2300      	movs	r3, #0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d11c      	bne.n	8001a2e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80019f4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d010      	beq.n	8001a1c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d107      	bne.n	8001a16 <HAL_ADC_Init+0x202>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_ADC_Init+0x202>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <HAL_ADC_Init+0x204>
 8001a16:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d108      	bne.n	8001a2e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001a1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a2c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	7e5b      	ldrb	r3, [r3, #25]
 8001a32:	035b      	lsls	r3, r3, #13
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a38:	2a01      	cmp	r2, #1
 8001a3a:	d002      	beq.n	8001a42 <HAL_ADC_Init+0x22e>
 8001a3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a40:	e000      	b.n	8001a44 <HAL_ADC_Init+0x230>
 8001a42:	2200      	movs	r2, #0
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a54:	4313      	orrs	r3, r2
 8001a56:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d11b      	bne.n	8001a9a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	7e5b      	ldrb	r3, [r3, #25]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d109      	bne.n	8001a7e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	045a      	lsls	r2, r3, #17
 8001a72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a74:	4313      	orrs	r3, r2
 8001a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7a:	663b      	str	r3, [r7, #96]	; 0x60
 8001a7c:	e00d      	b.n	8001a9a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001a86:	f043 0220 	orr.w	r2, r3, #32
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	f043 0201 	orr.w	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d054      	beq.n	8001b4c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a22      	ldr	r2, [pc, #136]	; (8001b30 <HAL_ADC_Init+0x31c>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d004      	beq.n	8001ab6 <HAL_ADC_Init+0x2a2>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a20      	ldr	r2, [pc, #128]	; (8001b34 <HAL_ADC_Init+0x320>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d140      	bne.n	8001b38 <HAL_ADC_Init+0x324>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001abe:	d02a      	beq.n	8001b16 <HAL_ADC_Init+0x302>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ac8:	d022      	beq.n	8001b10 <HAL_ADC_Init+0x2fc>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ace:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001ad2:	d01a      	beq.n	8001b0a <HAL_ADC_Init+0x2f6>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad8:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001adc:	d012      	beq.n	8001b04 <HAL_ADC_Init+0x2f0>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae2:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001ae6:	d00a      	beq.n	8001afe <HAL_ADC_Init+0x2ea>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aec:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001af0:	d002      	beq.n	8001af8 <HAL_ADC_Init+0x2e4>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af6:	e023      	b.n	8001b40 <HAL_ADC_Init+0x32c>
 8001af8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001afc:	e020      	b.n	8001b40 <HAL_ADC_Init+0x32c>
 8001afe:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001b02:	e01d      	b.n	8001b40 <HAL_ADC_Init+0x32c>
 8001b04:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001b08:	e01a      	b.n	8001b40 <HAL_ADC_Init+0x32c>
 8001b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b0e:	e017      	b.n	8001b40 <HAL_ADC_Init+0x32c>
 8001b10:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001b14:	e014      	b.n	8001b40 <HAL_ADC_Init+0x32c>
 8001b16:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001b1a:	e011      	b.n	8001b40 <HAL_ADC_Init+0x32c>
 8001b1c:	20000004 	.word	0x20000004
 8001b20:	431bde83 	.word	0x431bde83
 8001b24:	50000100 	.word	0x50000100
 8001b28:	50000300 	.word	0x50000300
 8001b2c:	50000700 	.word	0x50000700
 8001b30:	50000400 	.word	0x50000400
 8001b34:	50000500 	.word	0x50000500
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b44:	4313      	orrs	r3, r2
 8001b46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d114      	bne.n	8001b84 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b68:	f023 0302 	bic.w	r3, r3, #2
 8001b6c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	7e1b      	ldrb	r3, [r3, #24]
 8001b72:	039a      	lsls	r2, r3, #14
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b80:	4313      	orrs	r3, r2
 8001b82:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <HAL_ADC_Init+0x3f0>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6812      	ldr	r2, [r2, #0]
 8001b92:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001b94:	430b      	orrs	r3, r1
 8001b96:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d10c      	bne.n	8001bba <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f023 010f 	bic.w	r1, r3, #15
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	1e5a      	subs	r2, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	631a      	str	r2, [r3, #48]	; 0x30
 8001bb8:	e007      	b.n	8001bca <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 020f 	bic.w	r2, r2, #15
 8001bc8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	f023 0303 	bic.w	r3, r3, #3
 8001bd8:	f043 0201 	orr.w	r2, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	641a      	str	r2, [r3, #64]	; 0x40
 8001be0:	e00a      	b.n	8001bf8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f023 0312 	bic.w	r3, r3, #18
 8001bea:	f043 0210 	orr.w	r2, r3, #16
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001bf8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3768      	adds	r7, #104	; 0x68
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	fff0c007 	.word	0xfff0c007

08001c08 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f040 80f7 	bne.w	8001e16 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_ADC_Start_DMA+0x2e>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e0f2      	b.n	8001e1c <HAL_ADC_Start_DMA+0x214>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c46:	d004      	beq.n	8001c52 <HAL_ADC_Start_DMA+0x4a>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a75      	ldr	r2, [pc, #468]	; (8001e24 <HAL_ADC_Start_DMA+0x21c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d109      	bne.n	8001c66 <HAL_ADC_Start_DMA+0x5e>
 8001c52:	4b75      	ldr	r3, [pc, #468]	; (8001e28 <HAL_ADC_Start_DMA+0x220>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	bf0c      	ite	eq
 8001c5e:	2301      	moveq	r3, #1
 8001c60:	2300      	movne	r3, #0
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	e008      	b.n	8001c78 <HAL_ADC_Start_DMA+0x70>
 8001c66:	4b71      	ldr	r3, [pc, #452]	; (8001e2c <HAL_ADC_Start_DMA+0x224>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 031f 	and.w	r3, r3, #31
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bf0c      	ite	eq
 8001c72:	2301      	moveq	r3, #1
 8001c74:	2300      	movne	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 80c5 	beq.w	8001e08 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f001 f8b8 	bl	8002df4 <ADC_Enable>
 8001c84:	4603      	mov	r3, r0
 8001c86:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c88:	7dfb      	ldrb	r3, [r7, #23]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f040 80b7 	bne.w	8001dfe <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c98:	f023 0301 	bic.w	r3, r3, #1
 8001c9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cac:	d004      	beq.n	8001cb8 <HAL_ADC_Start_DMA+0xb0>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a5c      	ldr	r2, [pc, #368]	; (8001e24 <HAL_ADC_Start_DMA+0x21c>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d106      	bne.n	8001cc6 <HAL_ADC_Start_DMA+0xbe>
 8001cb8:	4b5b      	ldr	r3, [pc, #364]	; (8001e28 <HAL_ADC_Start_DMA+0x220>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d010      	beq.n	8001ce6 <HAL_ADC_Start_DMA+0xde>
 8001cc4:	e005      	b.n	8001cd2 <HAL_ADC_Start_DMA+0xca>
 8001cc6:	4b59      	ldr	r3, [pc, #356]	; (8001e2c <HAL_ADC_Start_DMA+0x224>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 031f 	and.w	r3, r3, #31
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d009      	beq.n	8001ce6 <HAL_ADC_Start_DMA+0xde>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cda:	d004      	beq.n	8001ce6 <HAL_ADC_Start_DMA+0xde>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a53      	ldr	r2, [pc, #332]	; (8001e30 <HAL_ADC_Start_DMA+0x228>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d115      	bne.n	8001d12 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d036      	beq.n	8001d6e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d08:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001d10:	e02d      	b.n	8001d6e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d26:	d004      	beq.n	8001d32 <HAL_ADC_Start_DMA+0x12a>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a3d      	ldr	r2, [pc, #244]	; (8001e24 <HAL_ADC_Start_DMA+0x21c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d10a      	bne.n	8001d48 <HAL_ADC_Start_DMA+0x140>
 8001d32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf14      	ite	ne
 8001d40:	2301      	movne	r3, #1
 8001d42:	2300      	moveq	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	e008      	b.n	8001d5a <HAL_ADC_Start_DMA+0x152>
 8001d48:	4b39      	ldr	r3, [pc, #228]	; (8001e30 <HAL_ADC_Start_DMA+0x228>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bf14      	ite	ne
 8001d54:	2301      	movne	r3, #1
 8001d56:	2300      	moveq	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d007      	beq.n	8001d6e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d7a:	d106      	bne.n	8001d8a <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d80:	f023 0206 	bic.w	r2, r3, #6
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	645a      	str	r2, [r3, #68]	; 0x44
 8001d88:	e002      	b.n	8001d90 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9c:	4a25      	ldr	r2, [pc, #148]	; (8001e34 <HAL_ADC_Start_DMA+0x22c>)
 8001d9e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da4:	4a24      	ldr	r2, [pc, #144]	; (8001e38 <HAL_ADC_Start_DMA+0x230>)
 8001da6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dac:	4a23      	ldr	r2, [pc, #140]	; (8001e3c <HAL_ADC_Start_DMA+0x234>)
 8001dae:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	221c      	movs	r2, #28
 8001db6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0210 	orr.w	r2, r2, #16
 8001dc6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0201 	orr.w	r2, r2, #1
 8001dd6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	3340      	adds	r3, #64	; 0x40
 8001de2:	4619      	mov	r1, r3
 8001de4:	68ba      	ldr	r2, [r7, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f001 fb37 	bl	800345a <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0204 	orr.w	r2, r2, #4
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	e00d      	b.n	8001e1a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001e06:	e008      	b.n	8001e1a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001e14:	e001      	b.n	8001e1a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e16:	2302      	movs	r3, #2
 8001e18:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	50000100 	.word	0x50000100
 8001e28:	50000300 	.word	0x50000300
 8001e2c:	50000700 	.word	0x50000700
 8001e30:	50000400 	.word	0x50000400
 8001e34:	08002d29 	.word	0x08002d29
 8001e38:	08002da3 	.word	0x08002da3
 8001e3c:	08002dbf 	.word	0x08002dbf

08001e40 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d101      	bne.n	8001e5a <HAL_ADC_Stop_DMA+0x1a>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e050      	b.n	8001efc <HAL_ADC_Stop_DMA+0xbc>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001e62:	216c      	movs	r1, #108	; 0x6c
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f001 f883 	bl	8002f70 <ADC_ConversionStop>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d13e      	bne.n	8001ef2 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d10f      	bne.n	8001eb0 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e94:	4618      	mov	r0, r3
 8001e96:	f001 fb3f 	bl	8003518 <HAL_DMA_Abort>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0210 	bic.w	r2, r2, #16
 8001ebe:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d105      	bne.n	8001ed2 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fff2 	bl	8002eb0 <ADC_Disable>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	e002      	b.n	8001ed8 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 ffec 	bl	8002eb0 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d109      	bne.n	8001ef2 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ee6:	f023 0301 	bic.w	r3, r3, #1
 8001eea:	f043 0201 	orr.w	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d106      	bne.n	8001f34 <HAL_ADC_IRQHandler+0x30>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d00f      	beq.n	8001f54 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	f040 80c0 	bne.w	80020c4 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	f040 80b8 	bne.w	80020c4 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d105      	bne.n	8001f6c <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f74:	d004      	beq.n	8001f80 <HAL_ADC_IRQHandler+0x7c>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a95      	ldr	r2, [pc, #596]	; (80021d0 <HAL_ADC_IRQHandler+0x2cc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d106      	bne.n	8001f8e <HAL_ADC_IRQHandler+0x8a>
 8001f80:	4b94      	ldr	r3, [pc, #592]	; (80021d4 <HAL_ADC_IRQHandler+0x2d0>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 031f 	and.w	r3, r3, #31
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d03e      	beq.n	800200a <HAL_ADC_IRQHandler+0x106>
 8001f8c:	e005      	b.n	8001f9a <HAL_ADC_IRQHandler+0x96>
 8001f8e:	4b92      	ldr	r3, [pc, #584]	; (80021d8 <HAL_ADC_IRQHandler+0x2d4>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d037      	beq.n	800200a <HAL_ADC_IRQHandler+0x106>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fa2:	d004      	beq.n	8001fae <HAL_ADC_IRQHandler+0xaa>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a89      	ldr	r2, [pc, #548]	; (80021d0 <HAL_ADC_IRQHandler+0x2cc>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d106      	bne.n	8001fbc <HAL_ADC_IRQHandler+0xb8>
 8001fae:	4b89      	ldr	r3, [pc, #548]	; (80021d4 <HAL_ADC_IRQHandler+0x2d0>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 031f 	and.w	r3, r3, #31
 8001fb6:	2b05      	cmp	r3, #5
 8001fb8:	d027      	beq.n	800200a <HAL_ADC_IRQHandler+0x106>
 8001fba:	e005      	b.n	8001fc8 <HAL_ADC_IRQHandler+0xc4>
 8001fbc:	4b86      	ldr	r3, [pc, #536]	; (80021d8 <HAL_ADC_IRQHandler+0x2d4>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 031f 	and.w	r3, r3, #31
 8001fc4:	2b05      	cmp	r3, #5
 8001fc6:	d020      	beq.n	800200a <HAL_ADC_IRQHandler+0x106>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fd0:	d004      	beq.n	8001fdc <HAL_ADC_IRQHandler+0xd8>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a7e      	ldr	r2, [pc, #504]	; (80021d0 <HAL_ADC_IRQHandler+0x2cc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d106      	bne.n	8001fea <HAL_ADC_IRQHandler+0xe6>
 8001fdc:	4b7d      	ldr	r3, [pc, #500]	; (80021d4 <HAL_ADC_IRQHandler+0x2d0>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	2b09      	cmp	r3, #9
 8001fe6:	d010      	beq.n	800200a <HAL_ADC_IRQHandler+0x106>
 8001fe8:	e005      	b.n	8001ff6 <HAL_ADC_IRQHandler+0xf2>
 8001fea:	4b7b      	ldr	r3, [pc, #492]	; (80021d8 <HAL_ADC_IRQHandler+0x2d4>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 031f 	and.w	r3, r3, #31
 8001ff2:	2b09      	cmp	r3, #9
 8001ff4:	d009      	beq.n	800200a <HAL_ADC_IRQHandler+0x106>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ffe:	d004      	beq.n	800200a <HAL_ADC_IRQHandler+0x106>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a75      	ldr	r2, [pc, #468]	; (80021dc <HAL_ADC_IRQHandler+0x2d8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d104      	bne.n	8002014 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	e00f      	b.n	8002034 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800201c:	d004      	beq.n	8002028 <HAL_ADC_IRQHandler+0x124>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a6b      	ldr	r2, [pc, #428]	; (80021d0 <HAL_ADC_IRQHandler+0x2cc>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d102      	bne.n	800202e <HAL_ADC_IRQHandler+0x12a>
 8002028:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800202c:	e000      	b.n	8002030 <HAL_ADC_IRQHandler+0x12c>
 800202e:	4b6b      	ldr	r3, [pc, #428]	; (80021dc <HAL_ADC_IRQHandler+0x2d8>)
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800203e:	2b00      	cmp	r3, #0
 8002040:	d139      	bne.n	80020b6 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002048:	2b00      	cmp	r3, #0
 800204a:	d134      	bne.n	80020b6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b08      	cmp	r3, #8
 8002058:	d12d      	bne.n	80020b6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d11a      	bne.n	800209e <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 020c 	bic.w	r2, r2, #12
 8002076:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d112      	bne.n	80020b6 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	f043 0201 	orr.w	r2, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	641a      	str	r2, [r3, #64]	; 0x40
 800209c:	e00b      	b.n	80020b6 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f043 0210 	orr.w	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	f043 0201 	orr.w	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7fe fe82 	bl	8000dc0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	220c      	movs	r2, #12
 80020c2:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0320 	and.w	r3, r3, #32
 80020ce:	2b20      	cmp	r3, #32
 80020d0:	d106      	bne.n	80020e0 <HAL_ADC_IRQHandler+0x1dc>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b20      	cmp	r3, #32
 80020de:	d00f      	beq.n	8002100 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80020ea:	2b40      	cmp	r3, #64	; 0x40
 80020ec:	f040 813c 	bne.w	8002368 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fa:	2b40      	cmp	r3, #64	; 0x40
 80020fc:	f040 8134 	bne.w	8002368 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002114:	d004      	beq.n	8002120 <HAL_ADC_IRQHandler+0x21c>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a2d      	ldr	r2, [pc, #180]	; (80021d0 <HAL_ADC_IRQHandler+0x2cc>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d106      	bne.n	800212e <HAL_ADC_IRQHandler+0x22a>
 8002120:	4b2c      	ldr	r3, [pc, #176]	; (80021d4 <HAL_ADC_IRQHandler+0x2d0>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 031f 	and.w	r3, r3, #31
 8002128:	2b00      	cmp	r3, #0
 800212a:	d03e      	beq.n	80021aa <HAL_ADC_IRQHandler+0x2a6>
 800212c:	e005      	b.n	800213a <HAL_ADC_IRQHandler+0x236>
 800212e:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <HAL_ADC_IRQHandler+0x2d4>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 031f 	and.w	r3, r3, #31
 8002136:	2b00      	cmp	r3, #0
 8002138:	d037      	beq.n	80021aa <HAL_ADC_IRQHandler+0x2a6>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002142:	d004      	beq.n	800214e <HAL_ADC_IRQHandler+0x24a>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a21      	ldr	r2, [pc, #132]	; (80021d0 <HAL_ADC_IRQHandler+0x2cc>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d106      	bne.n	800215c <HAL_ADC_IRQHandler+0x258>
 800214e:	4b21      	ldr	r3, [pc, #132]	; (80021d4 <HAL_ADC_IRQHandler+0x2d0>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	2b05      	cmp	r3, #5
 8002158:	d027      	beq.n	80021aa <HAL_ADC_IRQHandler+0x2a6>
 800215a:	e005      	b.n	8002168 <HAL_ADC_IRQHandler+0x264>
 800215c:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <HAL_ADC_IRQHandler+0x2d4>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	2b05      	cmp	r3, #5
 8002166:	d020      	beq.n	80021aa <HAL_ADC_IRQHandler+0x2a6>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002170:	d004      	beq.n	800217c <HAL_ADC_IRQHandler+0x278>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a16      	ldr	r2, [pc, #88]	; (80021d0 <HAL_ADC_IRQHandler+0x2cc>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d106      	bne.n	800218a <HAL_ADC_IRQHandler+0x286>
 800217c:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <HAL_ADC_IRQHandler+0x2d0>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	2b09      	cmp	r3, #9
 8002186:	d010      	beq.n	80021aa <HAL_ADC_IRQHandler+0x2a6>
 8002188:	e005      	b.n	8002196 <HAL_ADC_IRQHandler+0x292>
 800218a:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <HAL_ADC_IRQHandler+0x2d4>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	2b09      	cmp	r3, #9
 8002194:	d009      	beq.n	80021aa <HAL_ADC_IRQHandler+0x2a6>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800219e:	d004      	beq.n	80021aa <HAL_ADC_IRQHandler+0x2a6>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0d      	ldr	r2, [pc, #52]	; (80021dc <HAL_ADC_IRQHandler+0x2d8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d104      	bne.n	80021b4 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	e018      	b.n	80021e6 <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021bc:	d004      	beq.n	80021c8 <HAL_ADC_IRQHandler+0x2c4>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a03      	ldr	r2, [pc, #12]	; (80021d0 <HAL_ADC_IRQHandler+0x2cc>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d10b      	bne.n	80021e0 <HAL_ADC_IRQHandler+0x2dc>
 80021c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021cc:	e009      	b.n	80021e2 <HAL_ADC_IRQHandler+0x2de>
 80021ce:	bf00      	nop
 80021d0:	50000100 	.word	0x50000100
 80021d4:	50000300 	.word	0x50000300
 80021d8:	50000700 	.word	0x50000700
 80021dc:	50000400 	.word	0x50000400
 80021e0:	4b9d      	ldr	r3, [pc, #628]	; (8002458 <HAL_ADC_IRQHandler+0x554>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f040 80b2 	bne.w	800235a <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00d      	beq.n	800221c <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800220a:	2b00      	cmp	r3, #0
 800220c:	f040 80a5 	bne.w	800235a <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002216:	2b00      	cmp	r3, #0
 8002218:	f040 809f 	bne.w	800235a <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002226:	2b40      	cmp	r3, #64	; 0x40
 8002228:	f040 8097 	bne.w	800235a <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002234:	d004      	beq.n	8002240 <HAL_ADC_IRQHandler+0x33c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a88      	ldr	r2, [pc, #544]	; (800245c <HAL_ADC_IRQHandler+0x558>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d106      	bne.n	800224e <HAL_ADC_IRQHandler+0x34a>
 8002240:	4b87      	ldr	r3, [pc, #540]	; (8002460 <HAL_ADC_IRQHandler+0x55c>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	2b00      	cmp	r3, #0
 800224a:	d03e      	beq.n	80022ca <HAL_ADC_IRQHandler+0x3c6>
 800224c:	e005      	b.n	800225a <HAL_ADC_IRQHandler+0x356>
 800224e:	4b85      	ldr	r3, [pc, #532]	; (8002464 <HAL_ADC_IRQHandler+0x560>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 031f 	and.w	r3, r3, #31
 8002256:	2b00      	cmp	r3, #0
 8002258:	d037      	beq.n	80022ca <HAL_ADC_IRQHandler+0x3c6>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002262:	d004      	beq.n	800226e <HAL_ADC_IRQHandler+0x36a>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a7c      	ldr	r2, [pc, #496]	; (800245c <HAL_ADC_IRQHandler+0x558>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d106      	bne.n	800227c <HAL_ADC_IRQHandler+0x378>
 800226e:	4b7c      	ldr	r3, [pc, #496]	; (8002460 <HAL_ADC_IRQHandler+0x55c>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	2b06      	cmp	r3, #6
 8002278:	d027      	beq.n	80022ca <HAL_ADC_IRQHandler+0x3c6>
 800227a:	e005      	b.n	8002288 <HAL_ADC_IRQHandler+0x384>
 800227c:	4b79      	ldr	r3, [pc, #484]	; (8002464 <HAL_ADC_IRQHandler+0x560>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 031f 	and.w	r3, r3, #31
 8002284:	2b06      	cmp	r3, #6
 8002286:	d020      	beq.n	80022ca <HAL_ADC_IRQHandler+0x3c6>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002290:	d004      	beq.n	800229c <HAL_ADC_IRQHandler+0x398>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a71      	ldr	r2, [pc, #452]	; (800245c <HAL_ADC_IRQHandler+0x558>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d106      	bne.n	80022aa <HAL_ADC_IRQHandler+0x3a6>
 800229c:	4b70      	ldr	r3, [pc, #448]	; (8002460 <HAL_ADC_IRQHandler+0x55c>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	2b07      	cmp	r3, #7
 80022a6:	d010      	beq.n	80022ca <HAL_ADC_IRQHandler+0x3c6>
 80022a8:	e005      	b.n	80022b6 <HAL_ADC_IRQHandler+0x3b2>
 80022aa:	4b6e      	ldr	r3, [pc, #440]	; (8002464 <HAL_ADC_IRQHandler+0x560>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 031f 	and.w	r3, r3, #31
 80022b2:	2b07      	cmp	r3, #7
 80022b4:	d009      	beq.n	80022ca <HAL_ADC_IRQHandler+0x3c6>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022be:	d004      	beq.n	80022ca <HAL_ADC_IRQHandler+0x3c6>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a64      	ldr	r2, [pc, #400]	; (8002458 <HAL_ADC_IRQHandler+0x554>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d104      	bne.n	80022d4 <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	e00f      	b.n	80022f4 <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022dc:	d004      	beq.n	80022e8 <HAL_ADC_IRQHandler+0x3e4>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a5e      	ldr	r2, [pc, #376]	; (800245c <HAL_ADC_IRQHandler+0x558>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d102      	bne.n	80022ee <HAL_ADC_IRQHandler+0x3ea>
 80022e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022ec:	e000      	b.n	80022f0 <HAL_ADC_IRQHandler+0x3ec>
 80022ee:	4b5a      	ldr	r3, [pc, #360]	; (8002458 <HAL_ADC_IRQHandler+0x554>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d12d      	bne.n	800235a <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b00      	cmp	r3, #0
 800230a:	d11a      	bne.n	8002342 <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800231a:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	d112      	bne.n	800235a <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f043 0201 	orr.w	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	641a      	str	r2, [r3, #64]	; 0x40
 8002340:	e00b      	b.n	800235a <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f043 0210 	orr.w	r2, r3, #16
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f043 0201 	orr.w	r2, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f8de 	bl	800251c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2260      	movs	r2, #96	; 0x60
 8002366:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002372:	2b80      	cmp	r3, #128	; 0x80
 8002374:	d113      	bne.n	800239e <HAL_ADC_IRQHandler+0x49a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002380:	2b80      	cmp	r3, #128	; 0x80
 8002382:	d10c      	bne.n	800239e <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff fa2b 	bl	80017ec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2280      	movs	r2, #128	; 0x80
 800239c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023ac:	d115      	bne.n	80023da <HAL_ADC_IRQHandler+0x4d6>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023bc:	d10d      	bne.n	80023da <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f8ba 	bl	8002544 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023d8:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023e8:	d115      	bne.n	8002416 <HAL_ADC_IRQHandler+0x512>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023f8:	d10d      	bne.n	8002416 <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f8a6 	bl	8002558 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002414:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	2b10      	cmp	r3, #16
 8002422:	d151      	bne.n	80024c8 <HAL_ADC_IRQHandler+0x5c4>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	2b10      	cmp	r3, #16
 8002430:	d14a      	bne.n	80024c8 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002436:	2b01      	cmp	r3, #1
 8002438:	d102      	bne.n	8002440 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 800243a:	2301      	movs	r3, #1
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	e02d      	b.n	800249c <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002448:	d004      	beq.n	8002454 <HAL_ADC_IRQHandler+0x550>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a03      	ldr	r2, [pc, #12]	; (800245c <HAL_ADC_IRQHandler+0x558>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d109      	bne.n	8002468 <HAL_ADC_IRQHandler+0x564>
 8002454:	4b02      	ldr	r3, [pc, #8]	; (8002460 <HAL_ADC_IRQHandler+0x55c>)
 8002456:	e008      	b.n	800246a <HAL_ADC_IRQHandler+0x566>
 8002458:	50000400 	.word	0x50000400
 800245c:	50000100 	.word	0x50000100
 8002460:	50000300 	.word	0x50000300
 8002464:	50000700 	.word	0x50000700
 8002468:	4b2b      	ldr	r3, [pc, #172]	; (8002518 <HAL_ADC_IRQHandler+0x614>)
 800246a:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 031f 	and.w	r3, r3, #31
 8002474:	2b00      	cmp	r3, #0
 8002476:	d109      	bne.n	800248c <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b01      	cmp	r3, #1
 8002484:	d10a      	bne.n	800249c <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8002486:	2301      	movs	r3, #1
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	e007      	b.n	800249c <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8002498:	2301      	movs	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d10e      	bne.n	80024c0 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	f043 0202 	orr.w	r2, r3, #2
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff f9a0 	bl	8001800 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2210      	movs	r2, #16
 80024c6:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d6:	d11b      	bne.n	8002510 <HAL_ADC_IRQHandler+0x60c>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e6:	d113      	bne.n	8002510 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f8:	f043 0208 	orr.w	r2, r3, #8
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002508:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f810 	bl	8002530 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002510:	bf00      	nop
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	50000700 	.word	0x50000700

0800251c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800256c:	b480      	push	{r7}
 800256e:	b09b      	sub	sp, #108	; 0x6c
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_ADC_ConfigChannel+0x22>
 800258a:	2302      	movs	r3, #2
 800258c:	e2cb      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x5ba>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f040 82af 	bne.w	8002b04 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d81c      	bhi.n	80025e8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	461a      	mov	r2, r3
 80025c2:	231f      	movs	r3, #31
 80025c4:	4093      	lsls	r3, r2
 80025c6:	43db      	mvns	r3, r3
 80025c8:	4019      	ands	r1, r3
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	4413      	add	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	fa00 f203 	lsl.w	r2, r0, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30
 80025e6:	e063      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b09      	cmp	r3, #9
 80025ee:	d81e      	bhi.n	800262e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	3b1e      	subs	r3, #30
 8002604:	221f      	movs	r2, #31
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	4019      	ands	r1, r3
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4413      	add	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	3b1e      	subs	r3, #30
 8002620:	fa00 f203 	lsl.w	r2, r0, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	635a      	str	r2, [r3, #52]	; 0x34
 800262c:	e040      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b0e      	cmp	r3, #14
 8002634:	d81e      	bhi.n	8002674 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4413      	add	r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	3b3c      	subs	r3, #60	; 0x3c
 800264a:	221f      	movs	r2, #31
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	4019      	ands	r1, r3
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	3b3c      	subs	r3, #60	; 0x3c
 8002666:	fa00 f203 	lsl.w	r2, r0, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	639a      	str	r2, [r3, #56]	; 0x38
 8002672:	e01d      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4413      	add	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	3b5a      	subs	r3, #90	; 0x5a
 8002688:	221f      	movs	r2, #31
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	4019      	ands	r1, r3
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4413      	add	r3, r2
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	3b5a      	subs	r3, #90	; 0x5a
 80026a4:	fa00 f203 	lsl.w	r2, r0, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f040 80e5 	bne.w	800288a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b09      	cmp	r3, #9
 80026c6:	d91c      	bls.n	8002702 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6999      	ldr	r1, [r3, #24]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	4613      	mov	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	3b1e      	subs	r3, #30
 80026da:	2207      	movs	r2, #7
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	4019      	ands	r1, r3
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	6898      	ldr	r0, [r3, #8]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	3b1e      	subs	r3, #30
 80026f4:	fa00 f203 	lsl.w	r2, r0, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	619a      	str	r2, [r3, #24]
 8002700:	e019      	b.n	8002736 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6959      	ldr	r1, [r3, #20]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4613      	mov	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4413      	add	r3, r2
 8002712:	2207      	movs	r2, #7
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	4019      	ands	r1, r3
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	6898      	ldr	r0, [r3, #8]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4613      	mov	r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4413      	add	r3, r2
 800272a:	fa00 f203 	lsl.w	r2, r0, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	08db      	lsrs	r3, r3, #3
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	3b01      	subs	r3, #1
 8002754:	2b03      	cmp	r3, #3
 8002756:	d84f      	bhi.n	80027f8 <HAL_ADC_ConfigChannel+0x28c>
 8002758:	a201      	add	r2, pc, #4	; (adr r2, 8002760 <HAL_ADC_ConfigChannel+0x1f4>)
 800275a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275e:	bf00      	nop
 8002760:	08002771 	.word	0x08002771
 8002764:	08002793 	.word	0x08002793
 8002768:	080027b5 	.word	0x080027b5
 800276c:	080027d7 	.word	0x080027d7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002776:	4b9f      	ldr	r3, [pc, #636]	; (80029f4 <HAL_ADC_ConfigChannel+0x488>)
 8002778:	4013      	ands	r3, r2
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	0691      	lsls	r1, r2, #26
 8002780:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002782:	430a      	orrs	r2, r1
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800278e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002790:	e07e      	b.n	8002890 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002798:	4b96      	ldr	r3, [pc, #600]	; (80029f4 <HAL_ADC_ConfigChannel+0x488>)
 800279a:	4013      	ands	r3, r2
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	0691      	lsls	r1, r2, #26
 80027a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027a4:	430a      	orrs	r2, r1
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027b0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027b2:	e06d      	b.n	8002890 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80027ba:	4b8e      	ldr	r3, [pc, #568]	; (80029f4 <HAL_ADC_ConfigChannel+0x488>)
 80027bc:	4013      	ands	r3, r2
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	0691      	lsls	r1, r2, #26
 80027c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027c6:	430a      	orrs	r2, r1
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027d2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027d4:	e05c      	b.n	8002890 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80027dc:	4b85      	ldr	r3, [pc, #532]	; (80029f4 <HAL_ADC_ConfigChannel+0x488>)
 80027de:	4013      	ands	r3, r2
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	0691      	lsls	r1, r2, #26
 80027e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027e8:	430a      	orrs	r2, r1
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027f4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027f6:	e04b      	b.n	8002890 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	069b      	lsls	r3, r3, #26
 8002808:	429a      	cmp	r2, r3
 800280a:	d107      	bne.n	800281c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800281a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002822:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	069b      	lsls	r3, r3, #26
 800282c:	429a      	cmp	r2, r3
 800282e:	d107      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800283e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002846:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	069b      	lsls	r3, r3, #26
 8002850:	429a      	cmp	r2, r3
 8002852:	d107      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002862:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800286a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	069b      	lsls	r3, r3, #26
 8002874:	429a      	cmp	r2, r3
 8002876:	d10a      	bne.n	800288e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002886:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002888:	e001      	b.n	800288e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800288a:	bf00      	nop
 800288c:	e000      	b.n	8002890 <HAL_ADC_ConfigChannel+0x324>
      break;
 800288e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b01      	cmp	r3, #1
 800289c:	d108      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x344>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x344>
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x346>
 80028b0:	2300      	movs	r3, #0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f040 8131 	bne.w	8002b1a <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d00f      	beq.n	80028e0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2201      	movs	r2, #1
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43da      	mvns	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	400a      	ands	r2, r1
 80028da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80028de:	e049      	b.n	8002974 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2201      	movs	r2, #1
 80028ee:	409a      	lsls	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b09      	cmp	r3, #9
 8002900:	d91c      	bls.n	800293c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6999      	ldr	r1, [r3, #24]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4613      	mov	r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4413      	add	r3, r2
 8002912:	3b1b      	subs	r3, #27
 8002914:	2207      	movs	r2, #7
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	4019      	ands	r1, r3
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	6898      	ldr	r0, [r3, #8]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	3b1b      	subs	r3, #27
 800292e:	fa00 f203 	lsl.w	r2, r0, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	619a      	str	r2, [r3, #24]
 800293a:	e01b      	b.n	8002974 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6959      	ldr	r1, [r3, #20]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	4613      	mov	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	4413      	add	r3, r2
 800294e:	2207      	movs	r2, #7
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	4019      	ands	r1, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	6898      	ldr	r0, [r3, #8]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	4613      	mov	r3, r2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	4413      	add	r3, r2
 8002968:	fa00 f203 	lsl.w	r2, r0, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800297c:	d004      	beq.n	8002988 <HAL_ADC_ConfigChannel+0x41c>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a1d      	ldr	r2, [pc, #116]	; (80029f8 <HAL_ADC_ConfigChannel+0x48c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d101      	bne.n	800298c <HAL_ADC_ConfigChannel+0x420>
 8002988:	4b1c      	ldr	r3, [pc, #112]	; (80029fc <HAL_ADC_ConfigChannel+0x490>)
 800298a:	e000      	b.n	800298e <HAL_ADC_ConfigChannel+0x422>
 800298c:	4b1c      	ldr	r3, [pc, #112]	; (8002a00 <HAL_ADC_ConfigChannel+0x494>)
 800298e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b10      	cmp	r3, #16
 8002996:	d105      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d015      	beq.n	80029d0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80029a8:	2b11      	cmp	r3, #17
 80029aa:	d105      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80029ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00b      	beq.n	80029d0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80029bc:	2b12      	cmp	r3, #18
 80029be:	f040 80ac 	bne.w	8002b1a <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80029c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f040 80a5 	bne.w	8002b1a <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029d8:	d102      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x474>
 80029da:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <HAL_ADC_ConfigChannel+0x48c>)
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	e023      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x4bc>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a04      	ldr	r2, [pc, #16]	; (80029f8 <HAL_ADC_ConfigChannel+0x48c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d10c      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x498>
 80029ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	e01a      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x4bc>
 80029f2:	bf00      	nop
 80029f4:	83fff000 	.word	0x83fff000
 80029f8:	50000100 	.word	0x50000100
 80029fc:	50000300 	.word	0x50000300
 8002a00:	50000700 	.word	0x50000700
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a4a      	ldr	r2, [pc, #296]	; (8002b34 <HAL_ADC_ConfigChannel+0x5c8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d102      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x4a8>
 8002a0e:	4b4a      	ldr	r3, [pc, #296]	; (8002b38 <HAL_ADC_ConfigChannel+0x5cc>)
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	e009      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x4bc>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a47      	ldr	r2, [pc, #284]	; (8002b38 <HAL_ADC_ConfigChannel+0x5cc>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d102      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x4b8>
 8002a1e:	4b45      	ldr	r3, [pc, #276]	; (8002b34 <HAL_ADC_ConfigChannel+0x5c8>)
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	e001      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x4bc>
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d108      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x4dc>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x4dc>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x4de>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d150      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a4e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d010      	beq.n	8002a76 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d107      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x504>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x504>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x506>
 8002a70:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d13c      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b10      	cmp	r3, #16
 8002a7c:	d11d      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x54e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a86:	d118      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a92:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a94:	4b29      	ldr	r3, [pc, #164]	; (8002b3c <HAL_ADC_ConfigChannel+0x5d0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a29      	ldr	r2, [pc, #164]	; (8002b40 <HAL_ADC_ConfigChannel+0x5d4>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	0c9a      	lsrs	r2, r3, #18
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002aaa:	e002      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1f9      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ab8:	e02e      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b11      	cmp	r3, #17
 8002ac0:	d10b      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x56e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aca:	d106      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ad8:	e01e      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b12      	cmp	r3, #18
 8002ae0:	d11a      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aec:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002aee:	e013      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	f043 0220 	orr.w	r2, r3, #32
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002b02:	e00a      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	f043 0220 	orr.w	r2, r3, #32
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002b16:	e000      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b18:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002b22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	376c      	adds	r7, #108	; 0x6c
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	50000400 	.word	0x50000400
 8002b38:	50000500 	.word	0x50000500
 8002b3c:	20000004 	.word	0x20000004
 8002b40:	431bde83 	.word	0x431bde83

08002b44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b099      	sub	sp, #100	; 0x64
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b5c:	d102      	bne.n	8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002b5e:	4b6d      	ldr	r3, [pc, #436]	; (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	e01a      	b.n	8002b9a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a6a      	ldr	r2, [pc, #424]	; (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d103      	bne.n	8002b76 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002b6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	e011      	b.n	8002b9a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a67      	ldr	r2, [pc, #412]	; (8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d102      	bne.n	8002b86 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b80:	4b66      	ldr	r3, [pc, #408]	; (8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	e009      	b.n	8002b9a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a64      	ldr	r2, [pc, #400]	; (8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d102      	bne.n	8002b96 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002b90:	4b61      	ldr	r3, [pc, #388]	; (8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	e001      	b.n	8002b9a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0b0      	b.n	8002d06 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e0a9      	b.n	8002d06 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f040 808d 	bne.w	8002ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f040 8086 	bne.w	8002ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002be0:	d004      	beq.n	8002bec <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a4b      	ldr	r2, [pc, #300]	; (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d101      	bne.n	8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002bec:	4b4c      	ldr	r3, [pc, #304]	; (8002d20 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002bee:	e000      	b.n	8002bf2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002bf0:	4b4c      	ldr	r3, [pc, #304]	; (8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002bf2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d040      	beq.n	8002c7e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002bfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	6859      	ldr	r1, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c0e:	035b      	lsls	r3, r3, #13
 8002c10:	430b      	orrs	r3, r1
 8002c12:	431a      	orrs	r2, r3
 8002c14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c16:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d108      	bne.n	8002c38 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d15c      	bne.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d107      	bne.n	8002c5a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002c5a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d14b      	bne.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002c60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c68:	f023 030f 	bic.w	r3, r3, #15
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	6811      	ldr	r1, [r2, #0]
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	6892      	ldr	r2, [r2, #8]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	431a      	orrs	r2, r3
 8002c78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c7a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c7c:	e03c      	b.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c88:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d108      	bne.n	8002caa <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d101      	bne.n	8002caa <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002caa:	2300      	movs	r3, #0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d123      	bne.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d107      	bne.n	8002ccc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002ccc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d112      	bne.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002cd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cda:	f023 030f 	bic.w	r3, r3, #15
 8002cde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ce0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ce2:	e009      	b.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	f043 0220 	orr.w	r2, r3, #32
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002cf6:	e000      	b.n	8002cfa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cf8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002d06:	4618      	mov	r0, r3
 8002d08:	3764      	adds	r7, #100	; 0x64
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	50000100 	.word	0x50000100
 8002d18:	50000400 	.word	0x50000400
 8002d1c:	50000500 	.word	0x50000500
 8002d20:	50000300 	.word	0x50000300
 8002d24:	50000700 	.word	0x50000700

08002d28 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d126      	bne.n	8002d90 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d115      	bne.n	8002d88 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d111      	bne.n	8002d88 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d105      	bne.n	8002d88 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	f043 0201 	orr.w	r2, r3, #1
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f7fe f819 	bl	8000dc0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002d8e:	e004      	b.n	8002d9a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	4798      	blx	r3
}
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f7fe fd11 	bl	80017d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ddc:	f043 0204 	orr.w	r2, r3, #4
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f7fe fd0b 	bl	8001800 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dea:	bf00      	nop
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d108      	bne.n	8002e20 <ADC_Enable+0x2c>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <ADC_Enable+0x2c>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <ADC_Enable+0x2e>
 8002e20:	2300      	movs	r3, #0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d13c      	bne.n	8002ea0 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	4b1f      	ldr	r3, [pc, #124]	; (8002eac <ADC_Enable+0xb8>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00d      	beq.n	8002e50 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	f043 0210 	orr.w	r2, r3, #16
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e44:	f043 0201 	orr.w	r2, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e028      	b.n	8002ea2 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002e60:	f7fe fcae 	bl	80017c0 <HAL_GetTick>
 8002e64:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e66:	e014      	b.n	8002e92 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e68:	f7fe fcaa 	bl	80017c0 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d90d      	bls.n	8002e92 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f043 0210 	orr.w	r2, r3, #16
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	f043 0201 	orr.w	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e007      	b.n	8002ea2 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d1e3      	bne.n	8002e68 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	8000003f 	.word	0x8000003f

08002eb0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d108      	bne.n	8002edc <ADC_Disable+0x2c>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <ADC_Disable+0x2c>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <ADC_Disable+0x2e>
 8002edc:	2300      	movs	r3, #0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d040      	beq.n	8002f64 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 030d 	and.w	r3, r3, #13
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d10f      	bne.n	8002f10 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0202 	orr.w	r2, r2, #2
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2203      	movs	r2, #3
 8002f06:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002f08:	f7fe fc5a 	bl	80017c0 <HAL_GetTick>
 8002f0c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f0e:	e022      	b.n	8002f56 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	f043 0210 	orr.w	r2, r3, #16
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f20:	f043 0201 	orr.w	r2, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e01c      	b.n	8002f66 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f2c:	f7fe fc48 	bl	80017c0 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d90d      	bls.n	8002f56 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	f043 0210 	orr.w	r2, r3, #16
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4a:	f043 0201 	orr.w	r2, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e007      	b.n	8002f66 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d0e3      	beq.n	8002f2c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 030c 	and.w	r3, r3, #12
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 8093 	beq.w	80030bc <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fa4:	d12a      	bne.n	8002ffc <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d126      	bne.n	8002ffc <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d122      	bne.n	8002ffc <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002fb6:	230c      	movs	r3, #12
 8002fb8:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002fba:	e014      	b.n	8002fe6 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4a42      	ldr	r2, [pc, #264]	; (80030c8 <ADC_ConversionStop+0x158>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d90d      	bls.n	8002fe0 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	f043 0210 	orr.w	r2, r3, #16
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd4:	f043 0201 	orr.w	r2, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e06e      	b.n	80030be <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff0:	2b40      	cmp	r3, #64	; 0x40
 8002ff2:	d1e3      	bne.n	8002fbc <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2240      	movs	r2, #64	; 0x40
 8002ffa:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2b60      	cmp	r3, #96	; 0x60
 8003000:	d015      	beq.n	800302e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b04      	cmp	r3, #4
 800300e:	d10e      	bne.n	800302e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800301a:	2b00      	cmp	r3, #0
 800301c:	d107      	bne.n	800302e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 0210 	orr.w	r2, r2, #16
 800302c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b0c      	cmp	r3, #12
 8003032:	d015      	beq.n	8003060 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b08      	cmp	r3, #8
 8003040:	d10e      	bne.n	8003060 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800304c:	2b00      	cmp	r3, #0
 800304e:	d107      	bne.n	8003060 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0220 	orr.w	r2, r2, #32
 800305e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2b60      	cmp	r3, #96	; 0x60
 8003064:	d004      	beq.n	8003070 <ADC_ConversionStop+0x100>
 8003066:	2b6c      	cmp	r3, #108	; 0x6c
 8003068:	d105      	bne.n	8003076 <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800306a:	230c      	movs	r3, #12
 800306c:	617b      	str	r3, [r7, #20]
        break;
 800306e:	e005      	b.n	800307c <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003070:	2308      	movs	r3, #8
 8003072:	617b      	str	r3, [r7, #20]
        break;
 8003074:	e002      	b.n	800307c <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003076:	2304      	movs	r3, #4
 8003078:	617b      	str	r3, [r7, #20]
        break;
 800307a:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800307c:	f7fe fba0 	bl	80017c0 <HAL_GetTick>
 8003080:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003082:	e014      	b.n	80030ae <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003084:	f7fe fb9c 	bl	80017c0 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b0b      	cmp	r3, #11
 8003090:	d90d      	bls.n	80030ae <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f043 0210 	orr.w	r2, r3, #16
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	f043 0201 	orr.w	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e007      	b.n	80030be <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e3      	bne.n	8003084 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	000993ff 	.word	0x000993ff

080030cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030dc:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <__NVIC_SetPriorityGrouping+0x44>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030e8:	4013      	ands	r3, r2
 80030ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030fe:	4a04      	ldr	r2, [pc, #16]	; (8003110 <__NVIC_SetPriorityGrouping+0x44>)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	60d3      	str	r3, [r2, #12]
}
 8003104:	bf00      	nop
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003118:	4b04      	ldr	r3, [pc, #16]	; (800312c <__NVIC_GetPriorityGrouping+0x18>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	0a1b      	lsrs	r3, r3, #8
 800311e:	f003 0307 	and.w	r3, r3, #7
}
 8003122:	4618      	mov	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800313a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313e:	2b00      	cmp	r3, #0
 8003140:	db0b      	blt.n	800315a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	f003 021f 	and.w	r2, r3, #31
 8003148:	4907      	ldr	r1, [pc, #28]	; (8003168 <__NVIC_EnableIRQ+0x38>)
 800314a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	2001      	movs	r0, #1
 8003152:	fa00 f202 	lsl.w	r2, r0, r2
 8003156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	e000e100 	.word	0xe000e100

0800316c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	6039      	str	r1, [r7, #0]
 8003176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317c:	2b00      	cmp	r3, #0
 800317e:	db0a      	blt.n	8003196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	b2da      	uxtb	r2, r3
 8003184:	490c      	ldr	r1, [pc, #48]	; (80031b8 <__NVIC_SetPriority+0x4c>)
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	0112      	lsls	r2, r2, #4
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	440b      	add	r3, r1
 8003190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003194:	e00a      	b.n	80031ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	b2da      	uxtb	r2, r3
 800319a:	4908      	ldr	r1, [pc, #32]	; (80031bc <__NVIC_SetPriority+0x50>)
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	3b04      	subs	r3, #4
 80031a4:	0112      	lsls	r2, r2, #4
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	440b      	add	r3, r1
 80031aa:	761a      	strb	r2, [r3, #24]
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	e000e100 	.word	0xe000e100
 80031bc:	e000ed00 	.word	0xe000ed00

080031c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b089      	sub	sp, #36	; 0x24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f1c3 0307 	rsb	r3, r3, #7
 80031da:	2b04      	cmp	r3, #4
 80031dc:	bf28      	it	cs
 80031de:	2304      	movcs	r3, #4
 80031e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3304      	adds	r3, #4
 80031e6:	2b06      	cmp	r3, #6
 80031e8:	d902      	bls.n	80031f0 <NVIC_EncodePriority+0x30>
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	3b03      	subs	r3, #3
 80031ee:	e000      	b.n	80031f2 <NVIC_EncodePriority+0x32>
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f4:	f04f 32ff 	mov.w	r2, #4294967295
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43da      	mvns	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	401a      	ands	r2, r3
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003208:	f04f 31ff 	mov.w	r1, #4294967295
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	fa01 f303 	lsl.w	r3, r1, r3
 8003212:	43d9      	mvns	r1, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003218:	4313      	orrs	r3, r2
         );
}
 800321a:	4618      	mov	r0, r3
 800321c:	3724      	adds	r7, #36	; 0x24
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
	...

08003228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3b01      	subs	r3, #1
 8003234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003238:	d301      	bcc.n	800323e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800323a:	2301      	movs	r3, #1
 800323c:	e00f      	b.n	800325e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800323e:	4a0a      	ldr	r2, [pc, #40]	; (8003268 <SysTick_Config+0x40>)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3b01      	subs	r3, #1
 8003244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003246:	210f      	movs	r1, #15
 8003248:	f04f 30ff 	mov.w	r0, #4294967295
 800324c:	f7ff ff8e 	bl	800316c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <SysTick_Config+0x40>)
 8003252:	2200      	movs	r2, #0
 8003254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003256:	4b04      	ldr	r3, [pc, #16]	; (8003268 <SysTick_Config+0x40>)
 8003258:	2207      	movs	r2, #7
 800325a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	e000e010 	.word	0xe000e010

0800326c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff ff29 	bl	80030cc <__NVIC_SetPriorityGrouping>
}
 800327a:	bf00      	nop
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b086      	sub	sp, #24
 8003286:	af00      	add	r7, sp, #0
 8003288:	4603      	mov	r3, r0
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]
 800328e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003294:	f7ff ff3e 	bl	8003114 <__NVIC_GetPriorityGrouping>
 8003298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	6978      	ldr	r0, [r7, #20]
 80032a0:	f7ff ff8e 	bl	80031c0 <NVIC_EncodePriority>
 80032a4:	4602      	mov	r2, r0
 80032a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032aa:	4611      	mov	r1, r2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff ff5d 	bl	800316c <__NVIC_SetPriority>
}
 80032b2:	bf00      	nop
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	4603      	mov	r3, r0
 80032c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff ff31 	bl	8003130 <__NVIC_EnableIRQ>
}
 80032ce:	bf00      	nop
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff ffa2 	bl	8003228 <SysTick_Config>
 80032e4:	4603      	mov	r3, r0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e014      	b.n	800332a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	791b      	ldrb	r3, [r3, #4]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d105      	bne.n	8003316 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7fe f8ef 	bl	80014f4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2202      	movs	r2, #2
 800331a:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003332:	b480      	push	{r7}
 8003334:	b087      	sub	sp, #28
 8003336:	af00      	add	r7, sp, #0
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	795b      	ldrb	r3, [r3, #5]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <HAL_DAC_ConfigChannel+0x20>
 800334e:	2302      	movs	r3, #2
 8003350:	e036      	b.n	80033c0 <HAL_DAC_ConfigChannel+0x8e>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2202      	movs	r2, #2
 800335c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003366:	f640 72fe 	movw	r2, #4094	; 0xffe
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4013      	ands	r3, r2
 8003376:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	4313      	orrs	r3, r2
 8003390:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6819      	ldr	r1, [r3, #0]
 80033a0:	22c0      	movs	r2, #192	; 0xc0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43da      	mvns	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	400a      	ands	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2201      	movs	r2, #1
 80033b6:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	371c      	adds	r7, #28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e037      	b.n	8003452 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2202      	movs	r2, #2
 80033e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80033f8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80033fc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003406:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003412:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800341e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4313      	orrs	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f979 	bl	800372c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}  
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b086      	sub	sp, #24
 800345e:	af00      	add	r7, sp, #0
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	607a      	str	r2, [r7, #4]
 8003466:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d101      	bne.n	800347a <HAL_DMA_Start_IT+0x20>
 8003476:	2302      	movs	r3, #2
 8003478:	e04a      	b.n	8003510 <HAL_DMA_Start_IT+0xb6>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003488:	2b01      	cmp	r3, #1
 800348a:	d13a      	bne.n	8003502 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0201 	bic.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	68b9      	ldr	r1, [r7, #8]
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f90d 	bl	80036d0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d008      	beq.n	80034d0 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 020e 	orr.w	r2, r2, #14
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	e00f      	b.n	80034f0 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 020a 	orr.w	r2, r2, #10
 80034de:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0204 	bic.w	r2, r2, #4
 80034ee:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	e005      	b.n	800350e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800350a:	2302      	movs	r3, #2
 800350c:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800350e:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003526:	2b02      	cmp	r3, #2
 8003528:	d008      	beq.n	800353c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2204      	movs	r2, #4
 800352e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e020      	b.n	800357e <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 020e 	bic.w	r2, r2, #14
 800354a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0201 	bic.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003564:	2101      	movs	r1, #1
 8003566:	fa01 f202 	lsl.w	r2, r1, r2
 800356a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b084      	sub	sp, #16
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2204      	movs	r2, #4
 80035a8:	409a      	lsls	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4013      	ands	r3, r2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d024      	beq.n	80035fc <HAL_DMA_IRQHandler+0x72>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01f      	beq.n	80035fc <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d107      	bne.n	80035da <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0204 	bic.w	r2, r2, #4
 80035d8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e2:	2104      	movs	r1, #4
 80035e4:	fa01 f202 	lsl.w	r2, r1, r2
 80035e8:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d06a      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80035fa:	e065      	b.n	80036c8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	2202      	movs	r2, #2
 8003602:	409a      	lsls	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4013      	ands	r3, r2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d02c      	beq.n	8003666 <HAL_DMA_IRQHandler+0xdc>
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d027      	beq.n	8003666 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10b      	bne.n	800363c <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 020a 	bic.w	r2, r2, #10
 8003632:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003644:	2102      	movs	r1, #2
 8003646:	fa01 f202 	lsl.w	r2, r1, r2
 800364a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003658:	2b00      	cmp	r3, #0
 800365a:	d035      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003664:	e030      	b.n	80036c8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	2208      	movs	r2, #8
 800366c:	409a      	lsls	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4013      	ands	r3, r2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d028      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x13e>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	f003 0308 	and.w	r3, r3, #8
 800367c:	2b00      	cmp	r3, #0
 800367e:	d023      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 020e 	bic.w	r2, r2, #14
 800368e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003698:	2101      	movs	r1, #1
 800369a:	fa01 f202 	lsl.w	r2, r1, r2
 800369e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d004      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	4798      	blx	r3
    }
  }
}  
 80036c6:	e7ff      	b.n	80036c8 <HAL_DMA_IRQHandler+0x13e>
 80036c8:	bf00      	nop
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e6:	2101      	movs	r1, #1
 80036e8:	fa01 f202 	lsl.w	r2, r1, r2
 80036ec:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b10      	cmp	r3, #16
 80036fc:	d108      	bne.n	8003710 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800370e:	e007      	b.n	8003720 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	60da      	str	r2, [r3, #12]
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	4b14      	ldr	r3, [pc, #80]	; (800378c <DMA_CalcBaseAndBitshift+0x60>)
 800373c:	429a      	cmp	r2, r3
 800373e:	d80f      	bhi.n	8003760 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	4b12      	ldr	r3, [pc, #72]	; (8003790 <DMA_CalcBaseAndBitshift+0x64>)
 8003748:	4413      	add	r3, r2
 800374a:	4a12      	ldr	r2, [pc, #72]	; (8003794 <DMA_CalcBaseAndBitshift+0x68>)
 800374c:	fba2 2303 	umull	r2, r3, r2, r3
 8003750:	091b      	lsrs	r3, r3, #4
 8003752:	009a      	lsls	r2, r3, #2
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a0f      	ldr	r2, [pc, #60]	; (8003798 <DMA_CalcBaseAndBitshift+0x6c>)
 800375c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800375e:	e00e      	b.n	800377e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	4b0d      	ldr	r3, [pc, #52]	; (800379c <DMA_CalcBaseAndBitshift+0x70>)
 8003768:	4413      	add	r3, r2
 800376a:	4a0a      	ldr	r2, [pc, #40]	; (8003794 <DMA_CalcBaseAndBitshift+0x68>)
 800376c:	fba2 2303 	umull	r2, r3, r2, r3
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	009a      	lsls	r2, r3, #2
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a09      	ldr	r2, [pc, #36]	; (80037a0 <DMA_CalcBaseAndBitshift+0x74>)
 800377c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40020407 	.word	0x40020407
 8003790:	bffdfff8 	.word	0xbffdfff8
 8003794:	cccccccd 	.word	0xcccccccd
 8003798:	40020000 	.word	0x40020000
 800379c:	bffdfbf8 	.word	0xbffdfbf8
 80037a0:	40020400 	.word	0x40020400

080037a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037b2:	e160      	b.n	8003a76 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	2101      	movs	r1, #1
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	fa01 f303 	lsl.w	r3, r1, r3
 80037c0:	4013      	ands	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 8152 	beq.w	8003a70 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d00b      	beq.n	80037ec <HAL_GPIO_Init+0x48>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d007      	beq.n	80037ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037e0:	2b11      	cmp	r3, #17
 80037e2:	d003      	beq.n	80037ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b12      	cmp	r3, #18
 80037ea:	d130      	bne.n	800384e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	2203      	movs	r2, #3
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4013      	ands	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003822:	2201      	movs	r2, #1
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43db      	mvns	r3, r3
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4013      	ands	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	091b      	lsrs	r3, r3, #4
 8003838:	f003 0201 	and.w	r2, r3, #1
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	2203      	movs	r2, #3
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43db      	mvns	r3, r3
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4013      	ands	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	4313      	orrs	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d003      	beq.n	800388e <HAL_GPIO_Init+0xea>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b12      	cmp	r3, #18
 800388c:	d123      	bne.n	80038d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	08da      	lsrs	r2, r3, #3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3208      	adds	r2, #8
 8003896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800389a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	220f      	movs	r2, #15
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43db      	mvns	r3, r3
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4013      	ands	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	08da      	lsrs	r2, r3, #3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3208      	adds	r2, #8
 80038d0:	6939      	ldr	r1, [r7, #16]
 80038d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	2203      	movs	r2, #3
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	43db      	mvns	r3, r3
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4013      	ands	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f003 0203 	and.w	r2, r3, #3
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 80ac 	beq.w	8003a70 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003918:	4b5e      	ldr	r3, [pc, #376]	; (8003a94 <HAL_GPIO_Init+0x2f0>)
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	4a5d      	ldr	r2, [pc, #372]	; (8003a94 <HAL_GPIO_Init+0x2f0>)
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	6193      	str	r3, [r2, #24]
 8003924:	4b5b      	ldr	r3, [pc, #364]	; (8003a94 <HAL_GPIO_Init+0x2f0>)
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003930:	4a59      	ldr	r2, [pc, #356]	; (8003a98 <HAL_GPIO_Init+0x2f4>)
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	089b      	lsrs	r3, r3, #2
 8003936:	3302      	adds	r3, #2
 8003938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	220f      	movs	r2, #15
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	43db      	mvns	r3, r3
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4013      	ands	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800395a:	d025      	beq.n	80039a8 <HAL_GPIO_Init+0x204>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a4f      	ldr	r2, [pc, #316]	; (8003a9c <HAL_GPIO_Init+0x2f8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d01f      	beq.n	80039a4 <HAL_GPIO_Init+0x200>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a4e      	ldr	r2, [pc, #312]	; (8003aa0 <HAL_GPIO_Init+0x2fc>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d019      	beq.n	80039a0 <HAL_GPIO_Init+0x1fc>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a4d      	ldr	r2, [pc, #308]	; (8003aa4 <HAL_GPIO_Init+0x300>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d013      	beq.n	800399c <HAL_GPIO_Init+0x1f8>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a4c      	ldr	r2, [pc, #304]	; (8003aa8 <HAL_GPIO_Init+0x304>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00d      	beq.n	8003998 <HAL_GPIO_Init+0x1f4>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a4b      	ldr	r2, [pc, #300]	; (8003aac <HAL_GPIO_Init+0x308>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d007      	beq.n	8003994 <HAL_GPIO_Init+0x1f0>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a4a      	ldr	r2, [pc, #296]	; (8003ab0 <HAL_GPIO_Init+0x30c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d101      	bne.n	8003990 <HAL_GPIO_Init+0x1ec>
 800398c:	2306      	movs	r3, #6
 800398e:	e00c      	b.n	80039aa <HAL_GPIO_Init+0x206>
 8003990:	2307      	movs	r3, #7
 8003992:	e00a      	b.n	80039aa <HAL_GPIO_Init+0x206>
 8003994:	2305      	movs	r3, #5
 8003996:	e008      	b.n	80039aa <HAL_GPIO_Init+0x206>
 8003998:	2304      	movs	r3, #4
 800399a:	e006      	b.n	80039aa <HAL_GPIO_Init+0x206>
 800399c:	2303      	movs	r3, #3
 800399e:	e004      	b.n	80039aa <HAL_GPIO_Init+0x206>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e002      	b.n	80039aa <HAL_GPIO_Init+0x206>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <HAL_GPIO_Init+0x206>
 80039a8:	2300      	movs	r3, #0
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	f002 0203 	and.w	r2, r2, #3
 80039b0:	0092      	lsls	r2, r2, #2
 80039b2:	4093      	lsls	r3, r2
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039ba:	4937      	ldr	r1, [pc, #220]	; (8003a98 <HAL_GPIO_Init+0x2f4>)
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	089b      	lsrs	r3, r3, #2
 80039c0:	3302      	adds	r3, #2
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039c8:	4b3a      	ldr	r3, [pc, #232]	; (8003ab4 <HAL_GPIO_Init+0x310>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	43db      	mvns	r3, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4013      	ands	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80039ec:	4a31      	ldr	r2, [pc, #196]	; (8003ab4 <HAL_GPIO_Init+0x310>)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039f2:	4b30      	ldr	r3, [pc, #192]	; (8003ab4 <HAL_GPIO_Init+0x310>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	43db      	mvns	r3, r3
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4013      	ands	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a16:	4a27      	ldr	r2, [pc, #156]	; (8003ab4 <HAL_GPIO_Init+0x310>)
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a1c:	4b25      	ldr	r3, [pc, #148]	; (8003ab4 <HAL_GPIO_Init+0x310>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	43db      	mvns	r3, r3
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a40:	4a1c      	ldr	r2, [pc, #112]	; (8003ab4 <HAL_GPIO_Init+0x310>)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a46:	4b1b      	ldr	r3, [pc, #108]	; (8003ab4 <HAL_GPIO_Init+0x310>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4013      	ands	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a6a:	4a12      	ldr	r2, [pc, #72]	; (8003ab4 <HAL_GPIO_Init+0x310>)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	3301      	adds	r3, #1
 8003a74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f47f ae97 	bne.w	80037b4 <HAL_GPIO_Init+0x10>
  }
}
 8003a86:	bf00      	nop
 8003a88:	371c      	adds	r7, #28
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40021000 	.word	0x40021000
 8003a98:	40010000 	.word	0x40010000
 8003a9c:	48000400 	.word	0x48000400
 8003aa0:	48000800 	.word	0x48000800
 8003aa4:	48000c00 	.word	0x48000c00
 8003aa8:	48001000 	.word	0x48001000
 8003aac:	48001400 	.word	0x48001400
 8003ab0:	48001800 	.word	0x48001800
 8003ab4:	40010400 	.word	0x40010400

08003ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	807b      	strh	r3, [r7, #2]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ac8:	787b      	ldrb	r3, [r7, #1]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ace:	887a      	ldrh	r2, [r7, #2]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ad4:	e002      	b.n	8003adc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ad6:	887a      	ldrh	r2, [r7, #2]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	1d3b      	adds	r3, r7, #4
 8003af2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003af4:	1d3b      	adds	r3, r7, #4
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d102      	bne.n	8003b02 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	f000 bf01 	b.w	8004904 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b02:	1d3b      	adds	r3, r7, #4
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 8160 	beq.w	8003dd2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003b12:	4bae      	ldr	r3, [pc, #696]	; (8003dcc <HAL_RCC_OscConfig+0x2e4>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f003 030c 	and.w	r3, r3, #12
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d00c      	beq.n	8003b38 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b1e:	4bab      	ldr	r3, [pc, #684]	; (8003dcc <HAL_RCC_OscConfig+0x2e4>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f003 030c 	and.w	r3, r3, #12
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d159      	bne.n	8003bde <HAL_RCC_OscConfig+0xf6>
 8003b2a:	4ba8      	ldr	r3, [pc, #672]	; (8003dcc <HAL_RCC_OscConfig+0x2e4>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b36:	d152      	bne.n	8003bde <HAL_RCC_OscConfig+0xf6>
 8003b38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b3c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b40:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003b44:	fa93 f3a3 	rbit	r3, r3
 8003b48:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b4c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b50:	fab3 f383 	clz	r3, r3
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	f043 0301 	orr.w	r3, r3, #1
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d102      	bne.n	8003b6a <HAL_RCC_OscConfig+0x82>
 8003b64:	4b99      	ldr	r3, [pc, #612]	; (8003dcc <HAL_RCC_OscConfig+0x2e4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	e015      	b.n	8003b96 <HAL_RCC_OscConfig+0xae>
 8003b6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b6e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b72:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003b76:	fa93 f3a3 	rbit	r3, r3
 8003b7a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003b7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b82:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003b86:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003b8a:	fa93 f3a3 	rbit	r3, r3
 8003b8e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003b92:	4b8e      	ldr	r3, [pc, #568]	; (8003dcc <HAL_RCC_OscConfig+0x2e4>)
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b9a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003b9e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003ba2:	fa92 f2a2 	rbit	r2, r2
 8003ba6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003baa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003bae:	fab2 f282 	clz	r2, r2
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	f042 0220 	orr.w	r2, r2, #32
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	f002 021f 	and.w	r2, r2, #31
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 8102 	beq.w	8003dd0 <HAL_RCC_OscConfig+0x2e8>
 8003bcc:	1d3b      	adds	r3, r7, #4
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f040 80fc 	bne.w	8003dd0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f000 be93 	b.w	8004904 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bde:	1d3b      	adds	r3, r7, #4
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be8:	d106      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x110>
 8003bea:	4b78      	ldr	r3, [pc, #480]	; (8003dcc <HAL_RCC_OscConfig+0x2e4>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a77      	ldr	r2, [pc, #476]	; (8003dcc <HAL_RCC_OscConfig+0x2e4>)
 8003bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	e030      	b.n	8003c5a <HAL_RCC_OscConfig+0x172>
 8003bf8:	1d3b      	adds	r3, r7, #4
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCC_OscConfig+0x134>
 8003c02:	4b72      	ldr	r3, [pc, #456]	; (8003dcc <HAL_RCC_OscConfig+0x2e4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a71      	ldr	r2, [pc, #452]	; (8003dcc <HAL_RCC_OscConfig+0x2e4>)
 8003c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	4b6f      	ldr	r3, [pc, #444]	; (8003dcc <HAL_RCC_OscConfig+0x2e4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a6e      	ldr	r2, [pc, #440]	; (8003dcc <HAL_RCC_OscConfig+0x2e4>)
 8003c14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	e01e      	b.n	8003c5a <HAL_RCC_OscConfig+0x172>
 8003c1c:	1d3b      	adds	r3, r7, #4
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c26:	d10c      	bne.n	8003c42 <HAL_RCC_OscConfig+0x15a>
 8003c28:	4b68      	ldr	r3, [pc, #416]	; (8003dcc <HAL_RCC_OscConfig+0x2e4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a67      	ldr	r2, [pc, #412]	; (8003dcc <HAL_RCC_OscConfig+0x2e4>)
 8003c2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	4b65      	ldr	r3, [pc, #404]	; (8003dcc <HAL_RCC_OscConfig+0x2e4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a64      	ldr	r2, [pc, #400]	; (8003dcc <HAL_RCC_OscConfig+0x2e4>)
 8003c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	e00b      	b.n	8003c5a <HAL_RCC_OscConfig+0x172>
 8003c42:	4b62      	ldr	r3, [pc, #392]	; (8003dcc <HAL_RCC_OscConfig+0x2e4>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a61      	ldr	r2, [pc, #388]	; (8003dcc <HAL_RCC_OscConfig+0x2e4>)
 8003c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	4b5f      	ldr	r3, [pc, #380]	; (8003dcc <HAL_RCC_OscConfig+0x2e4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a5e      	ldr	r2, [pc, #376]	; (8003dcc <HAL_RCC_OscConfig+0x2e4>)
 8003c54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c58:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c5a:	1d3b      	adds	r3, r7, #4
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d059      	beq.n	8003d18 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7fd fdac 	bl	80017c0 <HAL_GetTick>
 8003c68:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6c:	e00a      	b.n	8003c84 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c6e:	f7fd fda7 	bl	80017c0 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	; 0x64
 8003c7c:	d902      	bls.n	8003c84 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	f000 be40 	b.w	8004904 <HAL_RCC_OscConfig+0xe1c>
 8003c84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c88:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003c90:	fa93 f3a3 	rbit	r3, r3
 8003c94:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003c98:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9c:	fab3 f383 	clz	r3, r3
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d102      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x1ce>
 8003cb0:	4b46      	ldr	r3, [pc, #280]	; (8003dcc <HAL_RCC_OscConfig+0x2e4>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	e015      	b.n	8003ce2 <HAL_RCC_OscConfig+0x1fa>
 8003cb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003cc2:	fa93 f3a3 	rbit	r3, r3
 8003cc6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003cca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cce:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003cd2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003cd6:	fa93 f3a3 	rbit	r3, r3
 8003cda:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003cde:	4b3b      	ldr	r3, [pc, #236]	; (8003dcc <HAL_RCC_OscConfig+0x2e4>)
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ce6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003cea:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003cee:	fa92 f2a2 	rbit	r2, r2
 8003cf2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003cf6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003cfa:	fab2 f282 	clz	r2, r2
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	f042 0220 	orr.w	r2, r2, #32
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	f002 021f 	and.w	r2, r2, #31
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0ab      	beq.n	8003c6e <HAL_RCC_OscConfig+0x186>
 8003d16:	e05c      	b.n	8003dd2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d18:	f7fd fd52 	bl	80017c0 <HAL_GetTick>
 8003d1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d20:	e00a      	b.n	8003d38 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d22:	f7fd fd4d 	bl	80017c0 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b64      	cmp	r3, #100	; 0x64
 8003d30:	d902      	bls.n	8003d38 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	f000 bde6 	b.w	8004904 <HAL_RCC_OscConfig+0xe1c>
 8003d38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d3c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d40:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003d44:	fa93 f3a3 	rbit	r3, r3
 8003d48:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003d4c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d50:	fab3 f383 	clz	r3, r3
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d102      	bne.n	8003d6a <HAL_RCC_OscConfig+0x282>
 8003d64:	4b19      	ldr	r3, [pc, #100]	; (8003dcc <HAL_RCC_OscConfig+0x2e4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	e015      	b.n	8003d96 <HAL_RCC_OscConfig+0x2ae>
 8003d6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d6e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d72:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003d76:	fa93 f3a3 	rbit	r3, r3
 8003d7a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003d7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d82:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003d86:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d8a:	fa93 f3a3 	rbit	r3, r3
 8003d8e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003d92:	4b0e      	ldr	r3, [pc, #56]	; (8003dcc <HAL_RCC_OscConfig+0x2e4>)
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d9a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003d9e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003da2:	fa92 f2a2 	rbit	r2, r2
 8003da6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003daa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003dae:	fab2 f282 	clz	r2, r2
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	f042 0220 	orr.w	r2, r2, #32
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	f002 021f 	and.w	r2, r2, #31
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1ab      	bne.n	8003d22 <HAL_RCC_OscConfig+0x23a>
 8003dca:	e002      	b.n	8003dd2 <HAL_RCC_OscConfig+0x2ea>
 8003dcc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dd2:	1d3b      	adds	r3, r7, #4
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8170 	beq.w	80040c2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003de2:	4bd0      	ldr	r3, [pc, #832]	; (8004124 <HAL_RCC_OscConfig+0x63c>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f003 030c 	and.w	r3, r3, #12
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00c      	beq.n	8003e08 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003dee:	4bcd      	ldr	r3, [pc, #820]	; (8004124 <HAL_RCC_OscConfig+0x63c>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d16d      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x3ee>
 8003dfa:	4bca      	ldr	r3, [pc, #808]	; (8004124 <HAL_RCC_OscConfig+0x63c>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e06:	d166      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x3ee>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003e12:	fa93 f3a3 	rbit	r3, r3
 8003e16:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003e1a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e1e:	fab3 f383 	clz	r3, r3
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	095b      	lsrs	r3, r3, #5
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d102      	bne.n	8003e38 <HAL_RCC_OscConfig+0x350>
 8003e32:	4bbc      	ldr	r3, [pc, #752]	; (8004124 <HAL_RCC_OscConfig+0x63c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	e013      	b.n	8003e60 <HAL_RCC_OscConfig+0x378>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003e42:	fa93 f3a3 	rbit	r3, r3
 8003e46:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003e50:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003e54:	fa93 f3a3 	rbit	r3, r3
 8003e58:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003e5c:	4bb1      	ldr	r3, [pc, #708]	; (8004124 <HAL_RCC_OscConfig+0x63c>)
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	2202      	movs	r2, #2
 8003e62:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003e66:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003e6a:	fa92 f2a2 	rbit	r2, r2
 8003e6e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003e72:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003e76:	fab2 f282 	clz	r2, r2
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	f042 0220 	orr.w	r2, r2, #32
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	f002 021f 	and.w	r2, r2, #31
 8003e86:	2101      	movs	r1, #1
 8003e88:	fa01 f202 	lsl.w	r2, r1, r2
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d007      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x3ba>
 8003e92:	1d3b      	adds	r3, r7, #4
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d002      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f000 bd31 	b.w	8004904 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea2:	4ba0      	ldr	r3, [pc, #640]	; (8004124 <HAL_RCC_OscConfig+0x63c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eaa:	1d3b      	adds	r3, r7, #4
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	21f8      	movs	r1, #248	; 0xf8
 8003eb2:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb6:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003eba:	fa91 f1a1 	rbit	r1, r1
 8003ebe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003ec2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003ec6:	fab1 f181 	clz	r1, r1
 8003eca:	b2c9      	uxtb	r1, r1
 8003ecc:	408b      	lsls	r3, r1
 8003ece:	4995      	ldr	r1, [pc, #596]	; (8004124 <HAL_RCC_OscConfig+0x63c>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed4:	e0f5      	b.n	80040c2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ed6:	1d3b      	adds	r3, r7, #4
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 8085 	beq.w	8003fec <HAL_RCC_OscConfig+0x504>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003eec:	fa93 f3a3 	rbit	r3, r3
 8003ef0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003ef4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ef8:	fab3 f383 	clz	r3, r3
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f02:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	461a      	mov	r2, r3
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0e:	f7fd fc57 	bl	80017c0 <HAL_GetTick>
 8003f12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f16:	e00a      	b.n	8003f2e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f18:	f7fd fc52 	bl	80017c0 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d902      	bls.n	8003f2e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	f000 bceb 	b.w	8004904 <HAL_RCC_OscConfig+0xe1c>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f34:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003f38:	fa93 f3a3 	rbit	r3, r3
 8003f3c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003f40:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f44:	fab3 f383 	clz	r3, r3
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	f043 0301 	orr.w	r3, r3, #1
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d102      	bne.n	8003f5e <HAL_RCC_OscConfig+0x476>
 8003f58:	4b72      	ldr	r3, [pc, #456]	; (8004124 <HAL_RCC_OscConfig+0x63c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	e013      	b.n	8003f86 <HAL_RCC_OscConfig+0x49e>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f64:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003f68:	fa93 f3a3 	rbit	r3, r3
 8003f6c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003f70:	2302      	movs	r3, #2
 8003f72:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003f76:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003f7a:	fa93 f3a3 	rbit	r3, r3
 8003f7e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003f82:	4b68      	ldr	r3, [pc, #416]	; (8004124 <HAL_RCC_OscConfig+0x63c>)
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	2202      	movs	r2, #2
 8003f88:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003f8c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003f90:	fa92 f2a2 	rbit	r2, r2
 8003f94:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003f98:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003f9c:	fab2 f282 	clz	r2, r2
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	f042 0220 	orr.w	r2, r2, #32
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	f002 021f 	and.w	r2, r2, #31
 8003fac:	2101      	movs	r1, #1
 8003fae:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0af      	beq.n	8003f18 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb8:	4b5a      	ldr	r3, [pc, #360]	; (8004124 <HAL_RCC_OscConfig+0x63c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fc0:	1d3b      	adds	r3, r7, #4
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	21f8      	movs	r1, #248	; 0xf8
 8003fc8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fcc:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003fd0:	fa91 f1a1 	rbit	r1, r1
 8003fd4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003fd8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003fdc:	fab1 f181 	clz	r1, r1
 8003fe0:	b2c9      	uxtb	r1, r1
 8003fe2:	408b      	lsls	r3, r1
 8003fe4:	494f      	ldr	r1, [pc, #316]	; (8004124 <HAL_RCC_OscConfig+0x63c>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]
 8003fea:	e06a      	b.n	80040c2 <HAL_RCC_OscConfig+0x5da>
 8003fec:	2301      	movs	r3, #1
 8003fee:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003ff6:	fa93 f3a3 	rbit	r3, r3
 8003ffa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003ffe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004002:	fab3 f383 	clz	r3, r3
 8004006:	b2db      	uxtb	r3, r3
 8004008:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800400c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	461a      	mov	r2, r3
 8004014:	2300      	movs	r3, #0
 8004016:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004018:	f7fd fbd2 	bl	80017c0 <HAL_GetTick>
 800401c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004020:	e00a      	b.n	8004038 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004022:	f7fd fbcd 	bl	80017c0 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d902      	bls.n	8004038 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	f000 bc66 	b.w	8004904 <HAL_RCC_OscConfig+0xe1c>
 8004038:	2302      	movs	r3, #2
 800403a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004042:	fa93 f3a3 	rbit	r3, r3
 8004046:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800404a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800404e:	fab3 f383 	clz	r3, r3
 8004052:	b2db      	uxtb	r3, r3
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	b2db      	uxtb	r3, r3
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b01      	cmp	r3, #1
 8004060:	d102      	bne.n	8004068 <HAL_RCC_OscConfig+0x580>
 8004062:	4b30      	ldr	r3, [pc, #192]	; (8004124 <HAL_RCC_OscConfig+0x63c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	e013      	b.n	8004090 <HAL_RCC_OscConfig+0x5a8>
 8004068:	2302      	movs	r3, #2
 800406a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004072:	fa93 f3a3 	rbit	r3, r3
 8004076:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800407a:	2302      	movs	r3, #2
 800407c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004080:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004084:	fa93 f3a3 	rbit	r3, r3
 8004088:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800408c:	4b25      	ldr	r3, [pc, #148]	; (8004124 <HAL_RCC_OscConfig+0x63c>)
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	2202      	movs	r2, #2
 8004092:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004096:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800409a:	fa92 f2a2 	rbit	r2, r2
 800409e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80040a2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80040a6:	fab2 f282 	clz	r2, r2
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	f042 0220 	orr.w	r2, r2, #32
 80040b0:	b2d2      	uxtb	r2, r2
 80040b2:	f002 021f 	and.w	r2, r2, #31
 80040b6:	2101      	movs	r1, #1
 80040b8:	fa01 f202 	lsl.w	r2, r1, r2
 80040bc:	4013      	ands	r3, r2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1af      	bne.n	8004022 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040c2:	1d3b      	adds	r3, r7, #4
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 80da 	beq.w	8004286 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040d2:	1d3b      	adds	r3, r7, #4
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d069      	beq.n	80041b0 <HAL_RCC_OscConfig+0x6c8>
 80040dc:	2301      	movs	r3, #1
 80040de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e6:	fa93 f3a3 	rbit	r3, r3
 80040ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80040ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040f2:	fab3 f383 	clz	r3, r3
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	461a      	mov	r2, r3
 80040fa:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <HAL_RCC_OscConfig+0x640>)
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	461a      	mov	r2, r3
 8004102:	2301      	movs	r3, #1
 8004104:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004106:	f7fd fb5b 	bl	80017c0 <HAL_GetTick>
 800410a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800410e:	e00d      	b.n	800412c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004110:	f7fd fb56 	bl	80017c0 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d905      	bls.n	800412c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e3ef      	b.n	8004904 <HAL_RCC_OscConfig+0xe1c>
 8004124:	40021000 	.word	0x40021000
 8004128:	10908120 	.word	0x10908120
 800412c:	2302      	movs	r3, #2
 800412e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004132:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004136:	fa93 f2a3 	rbit	r2, r3
 800413a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004144:	2202      	movs	r2, #2
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	fa93 f2a3 	rbit	r2, r3
 8004152:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800415c:	2202      	movs	r2, #2
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	fa93 f2a3 	rbit	r2, r3
 800416a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800416e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004170:	4ba4      	ldr	r3, [pc, #656]	; (8004404 <HAL_RCC_OscConfig+0x91c>)
 8004172:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004174:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004178:	2102      	movs	r1, #2
 800417a:	6019      	str	r1, [r3, #0]
 800417c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	fa93 f1a3 	rbit	r1, r3
 8004186:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800418a:	6019      	str	r1, [r3, #0]
  return result;
 800418c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	fab3 f383 	clz	r3, r3
 8004196:	b2db      	uxtb	r3, r3
 8004198:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800419c:	b2db      	uxtb	r3, r3
 800419e:	f003 031f 	and.w	r3, r3, #31
 80041a2:	2101      	movs	r1, #1
 80041a4:	fa01 f303 	lsl.w	r3, r1, r3
 80041a8:	4013      	ands	r3, r2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0b0      	beq.n	8004110 <HAL_RCC_OscConfig+0x628>
 80041ae:	e06a      	b.n	8004286 <HAL_RCC_OscConfig+0x79e>
 80041b0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80041b4:	2201      	movs	r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	fa93 f2a3 	rbit	r2, r3
 80041c2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80041c6:	601a      	str	r2, [r3, #0]
  return result;
 80041c8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80041cc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ce:	fab3 f383 	clz	r3, r3
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	461a      	mov	r2, r3
 80041d6:	4b8c      	ldr	r3, [pc, #560]	; (8004408 <HAL_RCC_OscConfig+0x920>)
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	461a      	mov	r2, r3
 80041de:	2300      	movs	r3, #0
 80041e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e2:	f7fd faed 	bl	80017c0 <HAL_GetTick>
 80041e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ea:	e009      	b.n	8004200 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ec:	f7fd fae8 	bl	80017c0 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e381      	b.n	8004904 <HAL_RCC_OscConfig+0xe1c>
 8004200:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004204:	2202      	movs	r2, #2
 8004206:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004208:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	fa93 f2a3 	rbit	r2, r3
 8004212:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800421c:	2202      	movs	r2, #2
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	fa93 f2a3 	rbit	r2, r3
 800422a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004234:	2202      	movs	r2, #2
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	fa93 f2a3 	rbit	r2, r3
 8004242:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004246:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004248:	4b6e      	ldr	r3, [pc, #440]	; (8004404 <HAL_RCC_OscConfig+0x91c>)
 800424a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800424c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004250:	2102      	movs	r1, #2
 8004252:	6019      	str	r1, [r3, #0]
 8004254:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	fa93 f1a3 	rbit	r1, r3
 800425e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004262:	6019      	str	r1, [r3, #0]
  return result;
 8004264:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	fab3 f383 	clz	r3, r3
 800426e:	b2db      	uxtb	r3, r3
 8004270:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f003 031f 	and.w	r3, r3, #31
 800427a:	2101      	movs	r1, #1
 800427c:	fa01 f303 	lsl.w	r3, r1, r3
 8004280:	4013      	ands	r3, r2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1b2      	bne.n	80041ec <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004286:	1d3b      	adds	r3, r7, #4
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 8157 	beq.w	8004544 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004296:	2300      	movs	r3, #0
 8004298:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800429c:	4b59      	ldr	r3, [pc, #356]	; (8004404 <HAL_RCC_OscConfig+0x91c>)
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d112      	bne.n	80042ce <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042a8:	4b56      	ldr	r3, [pc, #344]	; (8004404 <HAL_RCC_OscConfig+0x91c>)
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	4a55      	ldr	r2, [pc, #340]	; (8004404 <HAL_RCC_OscConfig+0x91c>)
 80042ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b2:	61d3      	str	r3, [r2, #28]
 80042b4:	4b53      	ldr	r3, [pc, #332]	; (8004404 <HAL_RCC_OscConfig+0x91c>)
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80042bc:	f107 030c 	add.w	r3, r7, #12
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	f107 030c 	add.w	r3, r7, #12
 80042c6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80042c8:	2301      	movs	r3, #1
 80042ca:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ce:	4b4f      	ldr	r3, [pc, #316]	; (800440c <HAL_RCC_OscConfig+0x924>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d11a      	bne.n	8004310 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042da:	4b4c      	ldr	r3, [pc, #304]	; (800440c <HAL_RCC_OscConfig+0x924>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a4b      	ldr	r2, [pc, #300]	; (800440c <HAL_RCC_OscConfig+0x924>)
 80042e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e6:	f7fd fa6b 	bl	80017c0 <HAL_GetTick>
 80042ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ee:	e009      	b.n	8004304 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f0:	f7fd fa66 	bl	80017c0 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b64      	cmp	r3, #100	; 0x64
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e2ff      	b.n	8004904 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004304:	4b41      	ldr	r3, [pc, #260]	; (800440c <HAL_RCC_OscConfig+0x924>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0ef      	beq.n	80042f0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004310:	1d3b      	adds	r3, r7, #4
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d106      	bne.n	8004328 <HAL_RCC_OscConfig+0x840>
 800431a:	4b3a      	ldr	r3, [pc, #232]	; (8004404 <HAL_RCC_OscConfig+0x91c>)
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	4a39      	ldr	r2, [pc, #228]	; (8004404 <HAL_RCC_OscConfig+0x91c>)
 8004320:	f043 0301 	orr.w	r3, r3, #1
 8004324:	6213      	str	r3, [r2, #32]
 8004326:	e02f      	b.n	8004388 <HAL_RCC_OscConfig+0x8a0>
 8004328:	1d3b      	adds	r3, r7, #4
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10c      	bne.n	800434c <HAL_RCC_OscConfig+0x864>
 8004332:	4b34      	ldr	r3, [pc, #208]	; (8004404 <HAL_RCC_OscConfig+0x91c>)
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	4a33      	ldr	r2, [pc, #204]	; (8004404 <HAL_RCC_OscConfig+0x91c>)
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	6213      	str	r3, [r2, #32]
 800433e:	4b31      	ldr	r3, [pc, #196]	; (8004404 <HAL_RCC_OscConfig+0x91c>)
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	4a30      	ldr	r2, [pc, #192]	; (8004404 <HAL_RCC_OscConfig+0x91c>)
 8004344:	f023 0304 	bic.w	r3, r3, #4
 8004348:	6213      	str	r3, [r2, #32]
 800434a:	e01d      	b.n	8004388 <HAL_RCC_OscConfig+0x8a0>
 800434c:	1d3b      	adds	r3, r7, #4
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	2b05      	cmp	r3, #5
 8004354:	d10c      	bne.n	8004370 <HAL_RCC_OscConfig+0x888>
 8004356:	4b2b      	ldr	r3, [pc, #172]	; (8004404 <HAL_RCC_OscConfig+0x91c>)
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	4a2a      	ldr	r2, [pc, #168]	; (8004404 <HAL_RCC_OscConfig+0x91c>)
 800435c:	f043 0304 	orr.w	r3, r3, #4
 8004360:	6213      	str	r3, [r2, #32]
 8004362:	4b28      	ldr	r3, [pc, #160]	; (8004404 <HAL_RCC_OscConfig+0x91c>)
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	4a27      	ldr	r2, [pc, #156]	; (8004404 <HAL_RCC_OscConfig+0x91c>)
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	6213      	str	r3, [r2, #32]
 800436e:	e00b      	b.n	8004388 <HAL_RCC_OscConfig+0x8a0>
 8004370:	4b24      	ldr	r3, [pc, #144]	; (8004404 <HAL_RCC_OscConfig+0x91c>)
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	4a23      	ldr	r2, [pc, #140]	; (8004404 <HAL_RCC_OscConfig+0x91c>)
 8004376:	f023 0301 	bic.w	r3, r3, #1
 800437a:	6213      	str	r3, [r2, #32]
 800437c:	4b21      	ldr	r3, [pc, #132]	; (8004404 <HAL_RCC_OscConfig+0x91c>)
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	4a20      	ldr	r2, [pc, #128]	; (8004404 <HAL_RCC_OscConfig+0x91c>)
 8004382:	f023 0304 	bic.w	r3, r3, #4
 8004386:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004388:	1d3b      	adds	r3, r7, #4
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d06a      	beq.n	8004468 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004392:	f7fd fa15 	bl	80017c0 <HAL_GetTick>
 8004396:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439a:	e00b      	b.n	80043b4 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800439c:	f7fd fa10 	bl	80017c0 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e2a7      	b.n	8004904 <HAL_RCC_OscConfig+0xe1c>
 80043b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80043b8:	2202      	movs	r2, #2
 80043ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	fa93 f2a3 	rbit	r2, r3
 80043c6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80043d0:	2202      	movs	r2, #2
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	fa93 f2a3 	rbit	r2, r3
 80043de:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80043e2:	601a      	str	r2, [r3, #0]
  return result;
 80043e4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80043e8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ea:	fab3 f383 	clz	r3, r3
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	f043 0302 	orr.w	r3, r3, #2
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d108      	bne.n	8004410 <HAL_RCC_OscConfig+0x928>
 80043fe:	4b01      	ldr	r3, [pc, #4]	; (8004404 <HAL_RCC_OscConfig+0x91c>)
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	e013      	b.n	800442c <HAL_RCC_OscConfig+0x944>
 8004404:	40021000 	.word	0x40021000
 8004408:	10908120 	.word	0x10908120
 800440c:	40007000 	.word	0x40007000
 8004410:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004414:	2202      	movs	r2, #2
 8004416:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004418:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	fa93 f2a3 	rbit	r2, r3
 8004422:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	4bc0      	ldr	r3, [pc, #768]	; (800472c <HAL_RCC_OscConfig+0xc44>)
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004430:	2102      	movs	r1, #2
 8004432:	6011      	str	r1, [r2, #0]
 8004434:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004438:	6812      	ldr	r2, [r2, #0]
 800443a:	fa92 f1a2 	rbit	r1, r2
 800443e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004442:	6011      	str	r1, [r2, #0]
  return result;
 8004444:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	fab2 f282 	clz	r2, r2
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	f002 021f 	and.w	r2, r2, #31
 800445a:	2101      	movs	r1, #1
 800445c:	fa01 f202 	lsl.w	r2, r1, r2
 8004460:	4013      	ands	r3, r2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d09a      	beq.n	800439c <HAL_RCC_OscConfig+0x8b4>
 8004466:	e063      	b.n	8004530 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004468:	f7fd f9aa 	bl	80017c0 <HAL_GetTick>
 800446c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004470:	e00b      	b.n	800448a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004472:	f7fd f9a5 	bl	80017c0 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004482:	4293      	cmp	r3, r2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e23c      	b.n	8004904 <HAL_RCC_OscConfig+0xe1c>
 800448a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800448e:	2202      	movs	r2, #2
 8004490:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004492:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	fa93 f2a3 	rbit	r2, r3
 800449c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80044a6:	2202      	movs	r2, #2
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	fa93 f2a3 	rbit	r2, r3
 80044b4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80044b8:	601a      	str	r2, [r3, #0]
  return result;
 80044ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80044be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044c0:	fab3 f383 	clz	r3, r3
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	f043 0302 	orr.w	r3, r3, #2
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d102      	bne.n	80044da <HAL_RCC_OscConfig+0x9f2>
 80044d4:	4b95      	ldr	r3, [pc, #596]	; (800472c <HAL_RCC_OscConfig+0xc44>)
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	e00d      	b.n	80044f6 <HAL_RCC_OscConfig+0xa0e>
 80044da:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80044de:	2202      	movs	r2, #2
 80044e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	fa93 f2a3 	rbit	r2, r3
 80044ec:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	4b8e      	ldr	r3, [pc, #568]	; (800472c <HAL_RCC_OscConfig+0xc44>)
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80044fa:	2102      	movs	r1, #2
 80044fc:	6011      	str	r1, [r2, #0]
 80044fe:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	fa92 f1a2 	rbit	r1, r2
 8004508:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800450c:	6011      	str	r1, [r2, #0]
  return result;
 800450e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	fab2 f282 	clz	r2, r2
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	f002 021f 	and.w	r2, r2, #31
 8004524:	2101      	movs	r1, #1
 8004526:	fa01 f202 	lsl.w	r2, r1, r2
 800452a:	4013      	ands	r3, r2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1a0      	bne.n	8004472 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004530:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004534:	2b01      	cmp	r3, #1
 8004536:	d105      	bne.n	8004544 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004538:	4b7c      	ldr	r3, [pc, #496]	; (800472c <HAL_RCC_OscConfig+0xc44>)
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	4a7b      	ldr	r2, [pc, #492]	; (800472c <HAL_RCC_OscConfig+0xc44>)
 800453e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004542:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004544:	1d3b      	adds	r3, r7, #4
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 81d9 	beq.w	8004902 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004550:	4b76      	ldr	r3, [pc, #472]	; (800472c <HAL_RCC_OscConfig+0xc44>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f003 030c 	and.w	r3, r3, #12
 8004558:	2b08      	cmp	r3, #8
 800455a:	f000 81a6 	beq.w	80048aa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800455e:	1d3b      	adds	r3, r7, #4
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	2b02      	cmp	r3, #2
 8004566:	f040 811e 	bne.w	80047a6 <HAL_RCC_OscConfig+0xcbe>
 800456a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800456e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004572:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004574:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	fa93 f2a3 	rbit	r2, r3
 800457e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004582:	601a      	str	r2, [r3, #0]
  return result;
 8004584:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004588:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800458a:	fab3 f383 	clz	r3, r3
 800458e:	b2db      	uxtb	r3, r3
 8004590:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004594:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	461a      	mov	r2, r3
 800459c:	2300      	movs	r3, #0
 800459e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a0:	f7fd f90e 	bl	80017c0 <HAL_GetTick>
 80045a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045a8:	e009      	b.n	80045be <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045aa:	f7fd f909 	bl	80017c0 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e1a2      	b.n	8004904 <HAL_RCC_OscConfig+0xe1c>
 80045be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80045c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	fa93 f2a3 	rbit	r2, r3
 80045d2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80045d6:	601a      	str	r2, [r3, #0]
  return result;
 80045d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80045dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045de:	fab3 f383 	clz	r3, r3
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	095b      	lsrs	r3, r3, #5
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	f043 0301 	orr.w	r3, r3, #1
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d102      	bne.n	80045f8 <HAL_RCC_OscConfig+0xb10>
 80045f2:	4b4e      	ldr	r3, [pc, #312]	; (800472c <HAL_RCC_OscConfig+0xc44>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	e01b      	b.n	8004630 <HAL_RCC_OscConfig+0xb48>
 80045f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80045fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004600:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004602:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	fa93 f2a3 	rbit	r2, r3
 800460c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004616:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	fa93 f2a3 	rbit	r2, r3
 8004626:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	4b3f      	ldr	r3, [pc, #252]	; (800472c <HAL_RCC_OscConfig+0xc44>)
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004634:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004638:	6011      	str	r1, [r2, #0]
 800463a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	fa92 f1a2 	rbit	r1, r2
 8004644:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004648:	6011      	str	r1, [r2, #0]
  return result;
 800464a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800464e:	6812      	ldr	r2, [r2, #0]
 8004650:	fab2 f282 	clz	r2, r2
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	f042 0220 	orr.w	r2, r2, #32
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	f002 021f 	and.w	r2, r2, #31
 8004660:	2101      	movs	r1, #1
 8004662:	fa01 f202 	lsl.w	r2, r1, r2
 8004666:	4013      	ands	r3, r2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d19e      	bne.n	80045aa <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800466c:	4b2f      	ldr	r3, [pc, #188]	; (800472c <HAL_RCC_OscConfig+0xc44>)
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	f023 020f 	bic.w	r2, r3, #15
 8004674:	1d3b      	adds	r3, r7, #4
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	492c      	ldr	r1, [pc, #176]	; (800472c <HAL_RCC_OscConfig+0xc44>)
 800467c:	4313      	orrs	r3, r2
 800467e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004680:	4b2a      	ldr	r3, [pc, #168]	; (800472c <HAL_RCC_OscConfig+0xc44>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004688:	1d3b      	adds	r3, r7, #4
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6a19      	ldr	r1, [r3, #32]
 800468e:	1d3b      	adds	r3, r7, #4
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	430b      	orrs	r3, r1
 8004696:	4925      	ldr	r1, [pc, #148]	; (800472c <HAL_RCC_OscConfig+0xc44>)
 8004698:	4313      	orrs	r3, r2
 800469a:	604b      	str	r3, [r1, #4]
 800469c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80046a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	fa93 f2a3 	rbit	r2, r3
 80046b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80046b4:	601a      	str	r2, [r3, #0]
  return result;
 80046b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80046ba:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046bc:	fab3 f383 	clz	r3, r3
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80046c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	461a      	mov	r2, r3
 80046ce:	2301      	movs	r3, #1
 80046d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d2:	f7fd f875 	bl	80017c0 <HAL_GetTick>
 80046d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046da:	e009      	b.n	80046f0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046dc:	f7fd f870 	bl	80017c0 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e109      	b.n	8004904 <HAL_RCC_OscConfig+0xe1c>
 80046f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80046f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	fa93 f2a3 	rbit	r2, r3
 8004704:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004708:	601a      	str	r2, [r3, #0]
  return result;
 800470a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800470e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004710:	fab3 f383 	clz	r3, r3
 8004714:	b2db      	uxtb	r3, r3
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	b2db      	uxtb	r3, r3
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b01      	cmp	r3, #1
 8004722:	d105      	bne.n	8004730 <HAL_RCC_OscConfig+0xc48>
 8004724:	4b01      	ldr	r3, [pc, #4]	; (800472c <HAL_RCC_OscConfig+0xc44>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	e01e      	b.n	8004768 <HAL_RCC_OscConfig+0xc80>
 800472a:	bf00      	nop
 800472c:	40021000 	.word	0x40021000
 8004730:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004734:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004738:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	fa93 f2a3 	rbit	r2, r3
 8004744:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800474e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	fa93 f2a3 	rbit	r2, r3
 800475e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	4b6a      	ldr	r3, [pc, #424]	; (8004910 <HAL_RCC_OscConfig+0xe28>)
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800476c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004770:	6011      	str	r1, [r2, #0]
 8004772:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004776:	6812      	ldr	r2, [r2, #0]
 8004778:	fa92 f1a2 	rbit	r1, r2
 800477c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004780:	6011      	str	r1, [r2, #0]
  return result;
 8004782:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004786:	6812      	ldr	r2, [r2, #0]
 8004788:	fab2 f282 	clz	r2, r2
 800478c:	b2d2      	uxtb	r2, r2
 800478e:	f042 0220 	orr.w	r2, r2, #32
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	f002 021f 	and.w	r2, r2, #31
 8004798:	2101      	movs	r1, #1
 800479a:	fa01 f202 	lsl.w	r2, r1, r2
 800479e:	4013      	ands	r3, r2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d09b      	beq.n	80046dc <HAL_RCC_OscConfig+0xbf4>
 80047a4:	e0ad      	b.n	8004902 <HAL_RCC_OscConfig+0xe1a>
 80047a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80047aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	fa93 f2a3 	rbit	r2, r3
 80047ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047be:	601a      	str	r2, [r3, #0]
  return result;
 80047c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047c4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c6:	fab3 f383 	clz	r3, r3
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	461a      	mov	r2, r3
 80047d8:	2300      	movs	r3, #0
 80047da:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047dc:	f7fc fff0 	bl	80017c0 <HAL_GetTick>
 80047e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047e4:	e009      	b.n	80047fa <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e6:	f7fc ffeb 	bl	80017c0 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e084      	b.n	8004904 <HAL_RCC_OscConfig+0xe1c>
 80047fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004802:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004804:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	fa93 f2a3 	rbit	r2, r3
 800480e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004812:	601a      	str	r2, [r3, #0]
  return result;
 8004814:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004818:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800481a:	fab3 f383 	clz	r3, r3
 800481e:	b2db      	uxtb	r3, r3
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	b2db      	uxtb	r3, r3
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b01      	cmp	r3, #1
 800482c:	d102      	bne.n	8004834 <HAL_RCC_OscConfig+0xd4c>
 800482e:	4b38      	ldr	r3, [pc, #224]	; (8004910 <HAL_RCC_OscConfig+0xe28>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	e01b      	b.n	800486c <HAL_RCC_OscConfig+0xd84>
 8004834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004838:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800483c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	fa93 f2a3 	rbit	r2, r3
 8004848:	f107 0320 	add.w	r3, r7, #32
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	f107 031c 	add.w	r3, r7, #28
 8004852:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	f107 031c 	add.w	r3, r7, #28
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	fa93 f2a3 	rbit	r2, r3
 8004862:	f107 0318 	add.w	r3, r7, #24
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	4b29      	ldr	r3, [pc, #164]	; (8004910 <HAL_RCC_OscConfig+0xe28>)
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	f107 0214 	add.w	r2, r7, #20
 8004870:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004874:	6011      	str	r1, [r2, #0]
 8004876:	f107 0214 	add.w	r2, r7, #20
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	fa92 f1a2 	rbit	r1, r2
 8004880:	f107 0210 	add.w	r2, r7, #16
 8004884:	6011      	str	r1, [r2, #0]
  return result;
 8004886:	f107 0210 	add.w	r2, r7, #16
 800488a:	6812      	ldr	r2, [r2, #0]
 800488c:	fab2 f282 	clz	r2, r2
 8004890:	b2d2      	uxtb	r2, r2
 8004892:	f042 0220 	orr.w	r2, r2, #32
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	f002 021f 	and.w	r2, r2, #31
 800489c:	2101      	movs	r1, #1
 800489e:	fa01 f202 	lsl.w	r2, r1, r2
 80048a2:	4013      	ands	r3, r2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d19e      	bne.n	80047e6 <HAL_RCC_OscConfig+0xcfe>
 80048a8:	e02b      	b.n	8004902 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048aa:	1d3b      	adds	r3, r7, #4
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e025      	b.n	8004904 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048b8:	4b15      	ldr	r3, [pc, #84]	; (8004910 <HAL_RCC_OscConfig+0xe28>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80048c0:	4b13      	ldr	r3, [pc, #76]	; (8004910 <HAL_RCC_OscConfig+0xe28>)
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80048c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80048cc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80048d0:	1d3b      	adds	r3, r7, #4
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d111      	bne.n	80048fe <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80048da:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80048de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048e2:	1d3b      	adds	r3, r7, #4
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d108      	bne.n	80048fe <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80048ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048f0:	f003 020f 	and.w	r2, r3, #15
 80048f4:	1d3b      	adds	r3, r7, #4
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d001      	beq.n	8004902 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e000      	b.n	8004904 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	40021000 	.word	0x40021000

08004914 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b09e      	sub	sp, #120	; 0x78
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e162      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800492c:	4b90      	ldr	r3, [pc, #576]	; (8004b70 <HAL_RCC_ClockConfig+0x25c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d910      	bls.n	800495c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493a:	4b8d      	ldr	r3, [pc, #564]	; (8004b70 <HAL_RCC_ClockConfig+0x25c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f023 0207 	bic.w	r2, r3, #7
 8004942:	498b      	ldr	r1, [pc, #556]	; (8004b70 <HAL_RCC_ClockConfig+0x25c>)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	4313      	orrs	r3, r2
 8004948:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800494a:	4b89      	ldr	r3, [pc, #548]	; (8004b70 <HAL_RCC_ClockConfig+0x25c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d001      	beq.n	800495c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e14a      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d008      	beq.n	800497a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004968:	4b82      	ldr	r3, [pc, #520]	; (8004b74 <HAL_RCC_ClockConfig+0x260>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	497f      	ldr	r1, [pc, #508]	; (8004b74 <HAL_RCC_ClockConfig+0x260>)
 8004976:	4313      	orrs	r3, r2
 8004978:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 80dc 	beq.w	8004b40 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d13c      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xf6>
 8004990:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004994:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004996:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004998:	fa93 f3a3 	rbit	r3, r3
 800499c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800499e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a0:	fab3 f383 	clz	r3, r3
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	f043 0301 	orr.w	r3, r3, #1
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d102      	bne.n	80049ba <HAL_RCC_ClockConfig+0xa6>
 80049b4:	4b6f      	ldr	r3, [pc, #444]	; (8004b74 <HAL_RCC_ClockConfig+0x260>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	e00f      	b.n	80049da <HAL_RCC_ClockConfig+0xc6>
 80049ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049c2:	fa93 f3a3 	rbit	r3, r3
 80049c6:	667b      	str	r3, [r7, #100]	; 0x64
 80049c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049cc:	663b      	str	r3, [r7, #96]	; 0x60
 80049ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049d0:	fa93 f3a3 	rbit	r3, r3
 80049d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049d6:	4b67      	ldr	r3, [pc, #412]	; (8004b74 <HAL_RCC_ClockConfig+0x260>)
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049de:	65ba      	str	r2, [r7, #88]	; 0x58
 80049e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049e2:	fa92 f2a2 	rbit	r2, r2
 80049e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80049e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049ea:	fab2 f282 	clz	r2, r2
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	f042 0220 	orr.w	r2, r2, #32
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	f002 021f 	and.w	r2, r2, #31
 80049fa:	2101      	movs	r1, #1
 80049fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004a00:	4013      	ands	r3, r2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d17b      	bne.n	8004afe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e0f3      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d13c      	bne.n	8004a8c <HAL_RCC_ClockConfig+0x178>
 8004a12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a1a:	fa93 f3a3 	rbit	r3, r3
 8004a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a22:	fab3 f383 	clz	r3, r3
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	095b      	lsrs	r3, r3, #5
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	f043 0301 	orr.w	r3, r3, #1
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d102      	bne.n	8004a3c <HAL_RCC_ClockConfig+0x128>
 8004a36:	4b4f      	ldr	r3, [pc, #316]	; (8004b74 <HAL_RCC_ClockConfig+0x260>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	e00f      	b.n	8004a5c <HAL_RCC_ClockConfig+0x148>
 8004a3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a44:	fa93 f3a3 	rbit	r3, r3
 8004a48:	647b      	str	r3, [r7, #68]	; 0x44
 8004a4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a4e:	643b      	str	r3, [r7, #64]	; 0x40
 8004a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a52:	fa93 f3a3 	rbit	r3, r3
 8004a56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a58:	4b46      	ldr	r3, [pc, #280]	; (8004b74 <HAL_RCC_ClockConfig+0x260>)
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a60:	63ba      	str	r2, [r7, #56]	; 0x38
 8004a62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a64:	fa92 f2a2 	rbit	r2, r2
 8004a68:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004a6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a6c:	fab2 f282 	clz	r2, r2
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	f042 0220 	orr.w	r2, r2, #32
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	f002 021f 	and.w	r2, r2, #31
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a82:	4013      	ands	r3, r2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d13a      	bne.n	8004afe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e0b2      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x2de>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a92:	fa93 f3a3 	rbit	r3, r3
 8004a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a9a:	fab3 f383 	clz	r3, r3
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	095b      	lsrs	r3, r3, #5
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	f043 0301 	orr.w	r3, r3, #1
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d102      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0x1a0>
 8004aae:	4b31      	ldr	r3, [pc, #196]	; (8004b74 <HAL_RCC_ClockConfig+0x260>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	e00d      	b.n	8004ad0 <HAL_RCC_ClockConfig+0x1bc>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	fa93 f3a3 	rbit	r3, r3
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	623b      	str	r3, [r7, #32]
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	fa93 f3a3 	rbit	r3, r3
 8004aca:	61fb      	str	r3, [r7, #28]
 8004acc:	4b29      	ldr	r3, [pc, #164]	; (8004b74 <HAL_RCC_ClockConfig+0x260>)
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	61ba      	str	r2, [r7, #24]
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	fa92 f2a2 	rbit	r2, r2
 8004ada:	617a      	str	r2, [r7, #20]
  return result;
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	fab2 f282 	clz	r2, r2
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	f042 0220 	orr.w	r2, r2, #32
 8004ae8:	b2d2      	uxtb	r2, r2
 8004aea:	f002 021f 	and.w	r2, r2, #31
 8004aee:	2101      	movs	r1, #1
 8004af0:	fa01 f202 	lsl.w	r2, r1, r2
 8004af4:	4013      	ands	r3, r2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e079      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004afe:	4b1d      	ldr	r3, [pc, #116]	; (8004b74 <HAL_RCC_ClockConfig+0x260>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f023 0203 	bic.w	r2, r3, #3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	491a      	ldr	r1, [pc, #104]	; (8004b74 <HAL_RCC_ClockConfig+0x260>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b10:	f7fc fe56 	bl	80017c0 <HAL_GetTick>
 8004b14:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b16:	e00a      	b.n	8004b2e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b18:	f7fc fe52 	bl	80017c0 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e061      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2e:	4b11      	ldr	r3, [pc, #68]	; (8004b74 <HAL_RCC_ClockConfig+0x260>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f003 020c 	and.w	r2, r3, #12
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d1eb      	bne.n	8004b18 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b40:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <HAL_RCC_ClockConfig+0x25c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d214      	bcs.n	8004b78 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4e:	4b08      	ldr	r3, [pc, #32]	; (8004b70 <HAL_RCC_ClockConfig+0x25c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f023 0207 	bic.w	r2, r3, #7
 8004b56:	4906      	ldr	r1, [pc, #24]	; (8004b70 <HAL_RCC_ClockConfig+0x25c>)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5e:	4b04      	ldr	r3, [pc, #16]	; (8004b70 <HAL_RCC_ClockConfig+0x25c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d005      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e040      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x2de>
 8004b70:	40022000 	.word	0x40022000
 8004b74:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d008      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b84:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <HAL_RCC_ClockConfig+0x2e8>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	491a      	ldr	r1, [pc, #104]	; (8004bfc <HAL_RCC_ClockConfig+0x2e8>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d009      	beq.n	8004bb6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ba2:	4b16      	ldr	r3, [pc, #88]	; (8004bfc <HAL_RCC_ClockConfig+0x2e8>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	4912      	ldr	r1, [pc, #72]	; (8004bfc <HAL_RCC_ClockConfig+0x2e8>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004bb6:	f000 f829 	bl	8004c0c <HAL_RCC_GetSysClockFreq>
 8004bba:	4601      	mov	r1, r0
 8004bbc:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <HAL_RCC_ClockConfig+0x2e8>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bc4:	22f0      	movs	r2, #240	; 0xf0
 8004bc6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	fa92 f2a2 	rbit	r2, r2
 8004bce:	60fa      	str	r2, [r7, #12]
  return result;
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	fab2 f282 	clz	r2, r2
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	40d3      	lsrs	r3, r2
 8004bda:	4a09      	ldr	r2, [pc, #36]	; (8004c00 <HAL_RCC_ClockConfig+0x2ec>)
 8004bdc:	5cd3      	ldrb	r3, [r2, r3]
 8004bde:	fa21 f303 	lsr.w	r3, r1, r3
 8004be2:	4a08      	ldr	r2, [pc, #32]	; (8004c04 <HAL_RCC_ClockConfig+0x2f0>)
 8004be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004be6:	4b08      	ldr	r3, [pc, #32]	; (8004c08 <HAL_RCC_ClockConfig+0x2f4>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fc fda4 	bl	8001738 <HAL_InitTick>
  
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3778      	adds	r7, #120	; 0x78
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	08005f1c 	.word	0x08005f1c
 8004c04:	20000004 	.word	0x20000004
 8004c08:	20000008 	.word	0x20000008

08004c0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b08b      	sub	sp, #44	; 0x2c
 8004c10:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
 8004c16:	2300      	movs	r3, #0
 8004c18:	61bb      	str	r3, [r7, #24]
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1e:	2300      	movs	r3, #0
 8004c20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004c26:	4b2a      	ldr	r3, [pc, #168]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	f003 030c 	and.w	r3, r3, #12
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d002      	beq.n	8004c3c <HAL_RCC_GetSysClockFreq+0x30>
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d003      	beq.n	8004c42 <HAL_RCC_GetSysClockFreq+0x36>
 8004c3a:	e03f      	b.n	8004cbc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c3c:	4b25      	ldr	r3, [pc, #148]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004c3e:	623b      	str	r3, [r7, #32]
      break;
 8004c40:	e03f      	b.n	8004cc2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004c48:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004c4c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	fa92 f2a2 	rbit	r2, r2
 8004c54:	607a      	str	r2, [r7, #4]
  return result;
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	fab2 f282 	clz	r2, r2
 8004c5c:	b2d2      	uxtb	r2, r2
 8004c5e:	40d3      	lsrs	r3, r2
 8004c60:	4a1d      	ldr	r2, [pc, #116]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c62:	5cd3      	ldrb	r3, [r2, r3]
 8004c64:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004c66:	4b1a      	ldr	r3, [pc, #104]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	220f      	movs	r2, #15
 8004c70:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	fa92 f2a2 	rbit	r2, r2
 8004c78:	60fa      	str	r2, [r7, #12]
  return result;
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	fab2 f282 	clz	r2, r2
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	40d3      	lsrs	r3, r2
 8004c84:	4a15      	ldr	r2, [pc, #84]	; (8004cdc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c86:	5cd3      	ldrb	r3, [r2, r3]
 8004c88:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d008      	beq.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c94:	4a0f      	ldr	r2, [pc, #60]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca4:	e007      	b.n	8004cb6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ca6:	4a0b      	ldr	r2, [pc, #44]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	fb02 f303 	mul.w	r3, r2, r3
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	623b      	str	r3, [r7, #32]
      break;
 8004cba:	e002      	b.n	8004cc2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004cbc:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004cbe:	623b      	str	r3, [r7, #32]
      break;
 8004cc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	372c      	adds	r7, #44	; 0x2c
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	007a1200 	.word	0x007a1200
 8004cd8:	08005f34 	.word	0x08005f34
 8004cdc:	08005f44 	.word	0x08005f44

08004ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ce4:	4b03      	ldr	r3, [pc, #12]	; (8004cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	20000004 	.word	0x20000004

08004cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004cfe:	f7ff ffef 	bl	8004ce0 <HAL_RCC_GetHCLKFreq>
 8004d02:	4601      	mov	r1, r0
 8004d04:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d0c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004d10:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	fa92 f2a2 	rbit	r2, r2
 8004d18:	603a      	str	r2, [r7, #0]
  return result;
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	fab2 f282 	clz	r2, r2
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	40d3      	lsrs	r3, r2
 8004d24:	4a04      	ldr	r2, [pc, #16]	; (8004d38 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004d26:	5cd3      	ldrb	r3, [r2, r3]
 8004d28:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40021000 	.word	0x40021000
 8004d38:	08005f2c 	.word	0x08005f2c

08004d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004d42:	f7ff ffcd 	bl	8004ce0 <HAL_RCC_GetHCLKFreq>
 8004d46:	4601      	mov	r1, r0
 8004d48:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004d50:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004d54:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	fa92 f2a2 	rbit	r2, r2
 8004d5c:	603a      	str	r2, [r7, #0]
  return result;
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	fab2 f282 	clz	r2, r2
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	40d3      	lsrs	r3, r2
 8004d68:	4a04      	ldr	r2, [pc, #16]	; (8004d7c <HAL_RCC_GetPCLK2Freq+0x40>)
 8004d6a:	5cd3      	ldrb	r3, [r2, r3]
 8004d6c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004d70:	4618      	mov	r0, r3
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	08005f2c 	.word	0x08005f2c

08004d80 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b092      	sub	sp, #72	; 0x48
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004d90:	2300      	movs	r3, #0
 8004d92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 80d4 	beq.w	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004da4:	4b4e      	ldr	r3, [pc, #312]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10e      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db0:	4b4b      	ldr	r3, [pc, #300]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	4a4a      	ldr	r2, [pc, #296]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dba:	61d3      	str	r3, [r2, #28]
 8004dbc:	4b48      	ldr	r3, [pc, #288]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc4:	60bb      	str	r3, [r7, #8]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dce:	4b45      	ldr	r3, [pc, #276]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d118      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dda:	4b42      	ldr	r3, [pc, #264]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a41      	ldr	r2, [pc, #260]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004de6:	f7fc fceb 	bl	80017c0 <HAL_GetTick>
 8004dea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dec:	e008      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dee:	f7fc fce7 	bl	80017c0 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b64      	cmp	r3, #100	; 0x64
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e1d6      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e00:	4b38      	ldr	r3, [pc, #224]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0f0      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e0c:	4b34      	ldr	r3, [pc, #208]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e14:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 8084 	beq.w	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d07c      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e2c:	4b2c      	ldr	r3, [pc, #176]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	fa93 f3a3 	rbit	r3, r3
 8004e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e46:	fab3 f383 	clz	r3, r3
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	4b26      	ldr	r3, [pc, #152]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	461a      	mov	r2, r3
 8004e56:	2301      	movs	r3, #1
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e62:	fa93 f3a3 	rbit	r3, r3
 8004e66:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e6a:	fab3 f383 	clz	r3, r3
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	461a      	mov	r2, r3
 8004e72:	4b1d      	ldr	r3, [pc, #116]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e74:	4413      	add	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	461a      	mov	r2, r3
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e7e:	4a18      	ldr	r2, [pc, #96]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e82:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d04b      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8e:	f7fc fc97 	bl	80017c0 <HAL_GetTick>
 8004e92:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e94:	e00a      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e96:	f7fc fc93 	bl	80017c0 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e180      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004eac:	2302      	movs	r3, #2
 8004eae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb2:	fa93 f3a3 	rbit	r3, r3
 8004eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb8:	2302      	movs	r3, #2
 8004eba:	623b      	str	r3, [r7, #32]
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	fa93 f3a3 	rbit	r3, r3
 8004ec2:	61fb      	str	r3, [r7, #28]
  return result;
 8004ec4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec6:	fab3 f383 	clz	r3, r3
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	095b      	lsrs	r3, r3, #5
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	f043 0302 	orr.w	r3, r3, #2
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d108      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004eda:	4b01      	ldr	r3, [pc, #4]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	e00d      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	40007000 	.word	0x40007000
 8004ee8:	10908100 	.word	0x10908100
 8004eec:	2302      	movs	r3, #2
 8004eee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	fa93 f3a3 	rbit	r3, r3
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	4ba0      	ldr	r3, [pc, #640]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	2202      	movs	r2, #2
 8004efe:	613a      	str	r2, [r7, #16]
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	fa92 f2a2 	rbit	r2, r2
 8004f06:	60fa      	str	r2, [r7, #12]
  return result;
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	fab2 f282 	clz	r2, r2
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	f002 021f 	and.w	r2, r2, #31
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f20:	4013      	ands	r3, r2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0b7      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004f26:	4b95      	ldr	r3, [pc, #596]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	4992      	ldr	r1, [pc, #584]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d105      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f40:	4b8e      	ldr	r3, [pc, #568]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	4a8d      	ldr	r2, [pc, #564]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d008      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f58:	4b88      	ldr	r3, [pc, #544]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5c:	f023 0203 	bic.w	r2, r3, #3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	4985      	ldr	r1, [pc, #532]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d008      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f76:	4b81      	ldr	r3, [pc, #516]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	497e      	ldr	r1, [pc, #504]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d008      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f94:	4b79      	ldr	r3, [pc, #484]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	4976      	ldr	r1, [pc, #472]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d008      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fb2:	4b72      	ldr	r3, [pc, #456]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	f023 0210 	bic.w	r2, r3, #16
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	496f      	ldr	r1, [pc, #444]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d008      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004fd0:	4b6a      	ldr	r3, [pc, #424]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fdc:	4967      	ldr	r1, [pc, #412]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d008      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fee:	4b63      	ldr	r3, [pc, #396]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff2:	f023 0220 	bic.w	r2, r3, #32
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	4960      	ldr	r1, [pc, #384]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d008      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800500c:	4b5b      	ldr	r3, [pc, #364]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800500e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005010:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	4958      	ldr	r1, [pc, #352]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800501a:	4313      	orrs	r3, r2
 800501c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b00      	cmp	r3, #0
 8005028:	d008      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800502a:	4b54      	ldr	r3, [pc, #336]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800502c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	4951      	ldr	r1, [pc, #324]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005038:	4313      	orrs	r3, r2
 800503a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0310 	and.w	r3, r3, #16
 8005044:	2b00      	cmp	r3, #0
 8005046:	d008      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005048:	4b4c      	ldr	r3, [pc, #304]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	4949      	ldr	r1, [pc, #292]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005056:	4313      	orrs	r3, r2
 8005058:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005062:	2b00      	cmp	r3, #0
 8005064:	d008      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005066:	4b45      	ldr	r3, [pc, #276]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	4942      	ldr	r1, [pc, #264]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005074:	4313      	orrs	r3, r2
 8005076:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005080:	2b00      	cmp	r3, #0
 8005082:	d008      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005084:	4b3d      	ldr	r3, [pc, #244]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	493a      	ldr	r1, [pc, #232]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005092:	4313      	orrs	r3, r2
 8005094:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d008      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80050a2:	4b36      	ldr	r3, [pc, #216]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ae:	4933      	ldr	r1, [pc, #204]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d008      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80050c0:	4b2e      	ldr	r3, [pc, #184]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050cc:	492b      	ldr	r1, [pc, #172]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d008      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80050de:	4b27      	ldr	r3, [pc, #156]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	4924      	ldr	r1, [pc, #144]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d008      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80050fc:	4b1f      	ldr	r3, [pc, #124]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80050fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005100:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005108:	491c      	ldr	r1, [pc, #112]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800510a:	4313      	orrs	r3, r2
 800510c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d008      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800511a:	4b18      	ldr	r3, [pc, #96]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005126:	4915      	ldr	r1, [pc, #84]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005128:	4313      	orrs	r3, r2
 800512a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d008      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005138:	4b10      	ldr	r3, [pc, #64]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005144:	490d      	ldr	r1, [pc, #52]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005146:	4313      	orrs	r3, r2
 8005148:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d008      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005156:	4b09      	ldr	r3, [pc, #36]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005162:	4906      	ldr	r1, [pc, #24]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005164:	4313      	orrs	r3, r2
 8005166:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00c      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005174:	4b01      	ldr	r3, [pc, #4]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005178:	e002      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800517a:	bf00      	nop
 800517c:	40021000 	.word	0x40021000
 8005180:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005188:	490b      	ldr	r1, [pc, #44]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800518a:	4313      	orrs	r3, r2
 800518c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d008      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800519a:	4b07      	ldr	r3, [pc, #28]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800519c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a6:	4904      	ldr	r1, [pc, #16]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3748      	adds	r7, #72	; 0x48
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	40021000 	.word	0x40021000

080051bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e040      	b.n	8005250 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fc f9c6 	bl	8001570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2224      	movs	r2, #36	; 0x24
 80051e8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 0201 	bic.w	r2, r2, #1
 80051f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f992 	bl	8005524 <UART_SetConfig>
 8005200:	4603      	mov	r3, r0
 8005202:	2b01      	cmp	r3, #1
 8005204:	d101      	bne.n	800520a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e022      	b.n	8005250 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fb5a 	bl	80058cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005226:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005236:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0201 	orr.w	r2, r2, #1
 8005246:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fbe1 	bl	8005a10 <UART_CheckIdleState>
 800524e:	4603      	mov	r3, r0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08a      	sub	sp, #40	; 0x28
 800525c:	af02      	add	r7, sp, #8
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	603b      	str	r3, [r7, #0]
 8005264:	4613      	mov	r3, r2
 8005266:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800526c:	2b20      	cmp	r3, #32
 800526e:	f040 8082 	bne.w	8005376 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <HAL_UART_Transmit+0x26>
 8005278:	88fb      	ldrh	r3, [r7, #6]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e07a      	b.n	8005378 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005288:	2b01      	cmp	r3, #1
 800528a:	d101      	bne.n	8005290 <HAL_UART_Transmit+0x38>
 800528c:	2302      	movs	r3, #2
 800528e:	e073      	b.n	8005378 <HAL_UART_Transmit+0x120>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2221      	movs	r2, #33	; 0x21
 80052a4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052a6:	f7fc fa8b 	bl	80017c0 <HAL_GetTick>
 80052aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	88fa      	ldrh	r2, [r7, #6]
 80052b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	88fa      	ldrh	r2, [r7, #6]
 80052b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c4:	d108      	bne.n	80052d8 <HAL_UART_Transmit+0x80>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d104      	bne.n	80052d8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	61bb      	str	r3, [r7, #24]
 80052d6:	e003      	b.n	80052e0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052dc:	2300      	movs	r3, #0
 80052de:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80052e8:	e02d      	b.n	8005346 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2200      	movs	r2, #0
 80052f2:	2180      	movs	r1, #128	; 0x80
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 fbd4 	bl	8005aa2 <UART_WaitOnFlagUntilTimeout>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e039      	b.n	8005378 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10b      	bne.n	8005322 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	881a      	ldrh	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005316:	b292      	uxth	r2, r2
 8005318:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	3302      	adds	r3, #2
 800531e:	61bb      	str	r3, [r7, #24]
 8005320:	e008      	b.n	8005334 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	781a      	ldrb	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	b292      	uxth	r2, r2
 800532c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	3301      	adds	r3, #1
 8005332:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800533a:	b29b      	uxth	r3, r3
 800533c:	3b01      	subs	r3, #1
 800533e:	b29a      	uxth	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800534c:	b29b      	uxth	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1cb      	bne.n	80052ea <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2200      	movs	r2, #0
 800535a:	2140      	movs	r1, #64	; 0x40
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 fba0 	bl	8005aa2 <UART_WaitOnFlagUntilTimeout>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e005      	b.n	8005378 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2220      	movs	r2, #32
 8005370:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	e000      	b.n	8005378 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005376:	2302      	movs	r3, #2
  }
}
 8005378:	4618      	mov	r0, r3
 800537a:	3720      	adds	r7, #32
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08a      	sub	sp, #40	; 0x28
 8005384:	af02      	add	r7, sp, #8
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	603b      	str	r3, [r7, #0]
 800538c:	4613      	mov	r3, r2
 800538e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005394:	2b20      	cmp	r3, #32
 8005396:	f040 80bf 	bne.w	8005518 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <HAL_UART_Receive+0x26>
 80053a0:	88fb      	ldrh	r3, [r7, #6]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e0b7      	b.n	800551a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_UART_Receive+0x38>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e0b0      	b.n	800551a <HAL_UART_Receive+0x19a>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2222      	movs	r2, #34	; 0x22
 80053cc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053d4:	f7fc f9f4 	bl	80017c0 <HAL_GetTick>
 80053d8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	88fa      	ldrh	r2, [r7, #6]
 80053de:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	88fa      	ldrh	r2, [r7, #6]
 80053e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f2:	d10e      	bne.n	8005412 <HAL_UART_Receive+0x92>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d105      	bne.n	8005408 <HAL_UART_Receive+0x88>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005402:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005406:	e02d      	b.n	8005464 <HAL_UART_Receive+0xe4>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	22ff      	movs	r2, #255	; 0xff
 800540c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005410:	e028      	b.n	8005464 <HAL_UART_Receive+0xe4>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10d      	bne.n	8005436 <HAL_UART_Receive+0xb6>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d104      	bne.n	800542c <HAL_UART_Receive+0xac>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	22ff      	movs	r2, #255	; 0xff
 8005426:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800542a:	e01b      	b.n	8005464 <HAL_UART_Receive+0xe4>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	227f      	movs	r2, #127	; 0x7f
 8005430:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005434:	e016      	b.n	8005464 <HAL_UART_Receive+0xe4>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800543e:	d10d      	bne.n	800545c <HAL_UART_Receive+0xdc>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d104      	bne.n	8005452 <HAL_UART_Receive+0xd2>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	227f      	movs	r2, #127	; 0x7f
 800544c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005450:	e008      	b.n	8005464 <HAL_UART_Receive+0xe4>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	223f      	movs	r2, #63	; 0x3f
 8005456:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800545a:	e003      	b.n	8005464 <HAL_UART_Receive+0xe4>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800546a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005474:	d108      	bne.n	8005488 <HAL_UART_Receive+0x108>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d104      	bne.n	8005488 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800547e:	2300      	movs	r3, #0
 8005480:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	61bb      	str	r3, [r7, #24]
 8005486:	e003      	b.n	8005490 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800548c:	2300      	movs	r3, #0
 800548e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005498:	e033      	b.n	8005502 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2200      	movs	r2, #0
 80054a2:	2120      	movs	r1, #32
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 fafc 	bl	8005aa2 <UART_WaitOnFlagUntilTimeout>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e032      	b.n	800551a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10c      	bne.n	80054d4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	8a7b      	ldrh	r3, [r7, #18]
 80054c4:	4013      	ands	r3, r2
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	3302      	adds	r3, #2
 80054d0:	61bb      	str	r3, [r7, #24]
 80054d2:	e00d      	b.n	80054f0 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80054da:	b29b      	uxth	r3, r3
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	8a7b      	ldrh	r3, [r7, #18]
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	4013      	ands	r3, r2
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	3301      	adds	r3, #1
 80054ee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	3b01      	subs	r3, #1
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005508:	b29b      	uxth	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1c5      	bne.n	800549a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2220      	movs	r2, #32
 8005512:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	e000      	b.n	800551a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005518:	2302      	movs	r3, #2
  }
}
 800551a:	4618      	mov	r0, r3
 800551c:	3720      	adds	r7, #32
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800552c:	2300      	movs	r3, #0
 800552e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	431a      	orrs	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	431a      	orrs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	4baa      	ldr	r3, [pc, #680]	; (80057f8 <UART_SetConfig+0x2d4>)
 8005550:	4013      	ands	r3, r2
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6812      	ldr	r2, [r2, #0]
 8005556:	6979      	ldr	r1, [r7, #20]
 8005558:	430b      	orrs	r3, r1
 800555a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	4313      	orrs	r3, r2
 8005580:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	430a      	orrs	r2, r1
 8005594:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a98      	ldr	r2, [pc, #608]	; (80057fc <UART_SetConfig+0x2d8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d121      	bne.n	80055e4 <UART_SetConfig+0xc0>
 80055a0:	4b97      	ldr	r3, [pc, #604]	; (8005800 <UART_SetConfig+0x2dc>)
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	f003 0303 	and.w	r3, r3, #3
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d817      	bhi.n	80055dc <UART_SetConfig+0xb8>
 80055ac:	a201      	add	r2, pc, #4	; (adr r2, 80055b4 <UART_SetConfig+0x90>)
 80055ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b2:	bf00      	nop
 80055b4:	080055c5 	.word	0x080055c5
 80055b8:	080055d1 	.word	0x080055d1
 80055bc:	080055d7 	.word	0x080055d7
 80055c0:	080055cb 	.word	0x080055cb
 80055c4:	2301      	movs	r3, #1
 80055c6:	77fb      	strb	r3, [r7, #31]
 80055c8:	e0b2      	b.n	8005730 <UART_SetConfig+0x20c>
 80055ca:	2302      	movs	r3, #2
 80055cc:	77fb      	strb	r3, [r7, #31]
 80055ce:	e0af      	b.n	8005730 <UART_SetConfig+0x20c>
 80055d0:	2304      	movs	r3, #4
 80055d2:	77fb      	strb	r3, [r7, #31]
 80055d4:	e0ac      	b.n	8005730 <UART_SetConfig+0x20c>
 80055d6:	2308      	movs	r3, #8
 80055d8:	77fb      	strb	r3, [r7, #31]
 80055da:	e0a9      	b.n	8005730 <UART_SetConfig+0x20c>
 80055dc:	2310      	movs	r3, #16
 80055de:	77fb      	strb	r3, [r7, #31]
 80055e0:	bf00      	nop
 80055e2:	e0a5      	b.n	8005730 <UART_SetConfig+0x20c>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a86      	ldr	r2, [pc, #536]	; (8005804 <UART_SetConfig+0x2e0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d123      	bne.n	8005636 <UART_SetConfig+0x112>
 80055ee:	4b84      	ldr	r3, [pc, #528]	; (8005800 <UART_SetConfig+0x2dc>)
 80055f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055fa:	d012      	beq.n	8005622 <UART_SetConfig+0xfe>
 80055fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005600:	d802      	bhi.n	8005608 <UART_SetConfig+0xe4>
 8005602:	2b00      	cmp	r3, #0
 8005604:	d007      	beq.n	8005616 <UART_SetConfig+0xf2>
 8005606:	e012      	b.n	800562e <UART_SetConfig+0x10a>
 8005608:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800560c:	d00c      	beq.n	8005628 <UART_SetConfig+0x104>
 800560e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005612:	d003      	beq.n	800561c <UART_SetConfig+0xf8>
 8005614:	e00b      	b.n	800562e <UART_SetConfig+0x10a>
 8005616:	2300      	movs	r3, #0
 8005618:	77fb      	strb	r3, [r7, #31]
 800561a:	e089      	b.n	8005730 <UART_SetConfig+0x20c>
 800561c:	2302      	movs	r3, #2
 800561e:	77fb      	strb	r3, [r7, #31]
 8005620:	e086      	b.n	8005730 <UART_SetConfig+0x20c>
 8005622:	2304      	movs	r3, #4
 8005624:	77fb      	strb	r3, [r7, #31]
 8005626:	e083      	b.n	8005730 <UART_SetConfig+0x20c>
 8005628:	2308      	movs	r3, #8
 800562a:	77fb      	strb	r3, [r7, #31]
 800562c:	e080      	b.n	8005730 <UART_SetConfig+0x20c>
 800562e:	2310      	movs	r3, #16
 8005630:	77fb      	strb	r3, [r7, #31]
 8005632:	bf00      	nop
 8005634:	e07c      	b.n	8005730 <UART_SetConfig+0x20c>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a73      	ldr	r2, [pc, #460]	; (8005808 <UART_SetConfig+0x2e4>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d123      	bne.n	8005688 <UART_SetConfig+0x164>
 8005640:	4b6f      	ldr	r3, [pc, #444]	; (8005800 <UART_SetConfig+0x2dc>)
 8005642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005644:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005648:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800564c:	d012      	beq.n	8005674 <UART_SetConfig+0x150>
 800564e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005652:	d802      	bhi.n	800565a <UART_SetConfig+0x136>
 8005654:	2b00      	cmp	r3, #0
 8005656:	d007      	beq.n	8005668 <UART_SetConfig+0x144>
 8005658:	e012      	b.n	8005680 <UART_SetConfig+0x15c>
 800565a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800565e:	d00c      	beq.n	800567a <UART_SetConfig+0x156>
 8005660:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005664:	d003      	beq.n	800566e <UART_SetConfig+0x14a>
 8005666:	e00b      	b.n	8005680 <UART_SetConfig+0x15c>
 8005668:	2300      	movs	r3, #0
 800566a:	77fb      	strb	r3, [r7, #31]
 800566c:	e060      	b.n	8005730 <UART_SetConfig+0x20c>
 800566e:	2302      	movs	r3, #2
 8005670:	77fb      	strb	r3, [r7, #31]
 8005672:	e05d      	b.n	8005730 <UART_SetConfig+0x20c>
 8005674:	2304      	movs	r3, #4
 8005676:	77fb      	strb	r3, [r7, #31]
 8005678:	e05a      	b.n	8005730 <UART_SetConfig+0x20c>
 800567a:	2308      	movs	r3, #8
 800567c:	77fb      	strb	r3, [r7, #31]
 800567e:	e057      	b.n	8005730 <UART_SetConfig+0x20c>
 8005680:	2310      	movs	r3, #16
 8005682:	77fb      	strb	r3, [r7, #31]
 8005684:	bf00      	nop
 8005686:	e053      	b.n	8005730 <UART_SetConfig+0x20c>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a5f      	ldr	r2, [pc, #380]	; (800580c <UART_SetConfig+0x2e8>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d123      	bne.n	80056da <UART_SetConfig+0x1b6>
 8005692:	4b5b      	ldr	r3, [pc, #364]	; (8005800 <UART_SetConfig+0x2dc>)
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800569a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800569e:	d012      	beq.n	80056c6 <UART_SetConfig+0x1a2>
 80056a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056a4:	d802      	bhi.n	80056ac <UART_SetConfig+0x188>
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d007      	beq.n	80056ba <UART_SetConfig+0x196>
 80056aa:	e012      	b.n	80056d2 <UART_SetConfig+0x1ae>
 80056ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056b0:	d00c      	beq.n	80056cc <UART_SetConfig+0x1a8>
 80056b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056b6:	d003      	beq.n	80056c0 <UART_SetConfig+0x19c>
 80056b8:	e00b      	b.n	80056d2 <UART_SetConfig+0x1ae>
 80056ba:	2300      	movs	r3, #0
 80056bc:	77fb      	strb	r3, [r7, #31]
 80056be:	e037      	b.n	8005730 <UART_SetConfig+0x20c>
 80056c0:	2302      	movs	r3, #2
 80056c2:	77fb      	strb	r3, [r7, #31]
 80056c4:	e034      	b.n	8005730 <UART_SetConfig+0x20c>
 80056c6:	2304      	movs	r3, #4
 80056c8:	77fb      	strb	r3, [r7, #31]
 80056ca:	e031      	b.n	8005730 <UART_SetConfig+0x20c>
 80056cc:	2308      	movs	r3, #8
 80056ce:	77fb      	strb	r3, [r7, #31]
 80056d0:	e02e      	b.n	8005730 <UART_SetConfig+0x20c>
 80056d2:	2310      	movs	r3, #16
 80056d4:	77fb      	strb	r3, [r7, #31]
 80056d6:	bf00      	nop
 80056d8:	e02a      	b.n	8005730 <UART_SetConfig+0x20c>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a4c      	ldr	r2, [pc, #304]	; (8005810 <UART_SetConfig+0x2ec>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d123      	bne.n	800572c <UART_SetConfig+0x208>
 80056e4:	4b46      	ldr	r3, [pc, #280]	; (8005800 <UART_SetConfig+0x2dc>)
 80056e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80056ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056f0:	d012      	beq.n	8005718 <UART_SetConfig+0x1f4>
 80056f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056f6:	d802      	bhi.n	80056fe <UART_SetConfig+0x1da>
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d007      	beq.n	800570c <UART_SetConfig+0x1e8>
 80056fc:	e012      	b.n	8005724 <UART_SetConfig+0x200>
 80056fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005702:	d00c      	beq.n	800571e <UART_SetConfig+0x1fa>
 8005704:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005708:	d003      	beq.n	8005712 <UART_SetConfig+0x1ee>
 800570a:	e00b      	b.n	8005724 <UART_SetConfig+0x200>
 800570c:	2300      	movs	r3, #0
 800570e:	77fb      	strb	r3, [r7, #31]
 8005710:	e00e      	b.n	8005730 <UART_SetConfig+0x20c>
 8005712:	2302      	movs	r3, #2
 8005714:	77fb      	strb	r3, [r7, #31]
 8005716:	e00b      	b.n	8005730 <UART_SetConfig+0x20c>
 8005718:	2304      	movs	r3, #4
 800571a:	77fb      	strb	r3, [r7, #31]
 800571c:	e008      	b.n	8005730 <UART_SetConfig+0x20c>
 800571e:	2308      	movs	r3, #8
 8005720:	77fb      	strb	r3, [r7, #31]
 8005722:	e005      	b.n	8005730 <UART_SetConfig+0x20c>
 8005724:	2310      	movs	r3, #16
 8005726:	77fb      	strb	r3, [r7, #31]
 8005728:	bf00      	nop
 800572a:	e001      	b.n	8005730 <UART_SetConfig+0x20c>
 800572c:	2310      	movs	r3, #16
 800572e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005738:	d16e      	bne.n	8005818 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800573a:	7ffb      	ldrb	r3, [r7, #31]
 800573c:	2b08      	cmp	r3, #8
 800573e:	d828      	bhi.n	8005792 <UART_SetConfig+0x26e>
 8005740:	a201      	add	r2, pc, #4	; (adr r2, 8005748 <UART_SetConfig+0x224>)
 8005742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005746:	bf00      	nop
 8005748:	0800576d 	.word	0x0800576d
 800574c:	08005775 	.word	0x08005775
 8005750:	0800577d 	.word	0x0800577d
 8005754:	08005793 	.word	0x08005793
 8005758:	08005783 	.word	0x08005783
 800575c:	08005793 	.word	0x08005793
 8005760:	08005793 	.word	0x08005793
 8005764:	08005793 	.word	0x08005793
 8005768:	0800578b 	.word	0x0800578b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800576c:	f7ff fac4 	bl	8004cf8 <HAL_RCC_GetPCLK1Freq>
 8005770:	61b8      	str	r0, [r7, #24]
        break;
 8005772:	e013      	b.n	800579c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005774:	f7ff fae2 	bl	8004d3c <HAL_RCC_GetPCLK2Freq>
 8005778:	61b8      	str	r0, [r7, #24]
        break;
 800577a:	e00f      	b.n	800579c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800577c:	4b25      	ldr	r3, [pc, #148]	; (8005814 <UART_SetConfig+0x2f0>)
 800577e:	61bb      	str	r3, [r7, #24]
        break;
 8005780:	e00c      	b.n	800579c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005782:	f7ff fa43 	bl	8004c0c <HAL_RCC_GetSysClockFreq>
 8005786:	61b8      	str	r0, [r7, #24]
        break;
 8005788:	e008      	b.n	800579c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800578a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800578e:	61bb      	str	r3, [r7, #24]
        break;
 8005790:	e004      	b.n	800579c <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	77bb      	strb	r3, [r7, #30]
        break;
 800579a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f000 8086 	beq.w	80058b0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	005a      	lsls	r2, r3, #1
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	085b      	lsrs	r3, r3, #1
 80057ae:	441a      	add	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	2b0f      	cmp	r3, #15
 80057c0:	d916      	bls.n	80057f0 <UART_SetConfig+0x2cc>
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c8:	d212      	bcs.n	80057f0 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	f023 030f 	bic.w	r3, r3, #15
 80057d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	085b      	lsrs	r3, r3, #1
 80057d8:	b29b      	uxth	r3, r3
 80057da:	f003 0307 	and.w	r3, r3, #7
 80057de:	b29a      	uxth	r2, r3
 80057e0:	89fb      	ldrh	r3, [r7, #14]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	89fa      	ldrh	r2, [r7, #14]
 80057ec:	60da      	str	r2, [r3, #12]
 80057ee:	e05f      	b.n	80058b0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	77bb      	strb	r3, [r7, #30]
 80057f4:	e05c      	b.n	80058b0 <UART_SetConfig+0x38c>
 80057f6:	bf00      	nop
 80057f8:	efff69f3 	.word	0xefff69f3
 80057fc:	40013800 	.word	0x40013800
 8005800:	40021000 	.word	0x40021000
 8005804:	40004400 	.word	0x40004400
 8005808:	40004800 	.word	0x40004800
 800580c:	40004c00 	.word	0x40004c00
 8005810:	40005000 	.word	0x40005000
 8005814:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8005818:	7ffb      	ldrb	r3, [r7, #31]
 800581a:	2b08      	cmp	r3, #8
 800581c:	d827      	bhi.n	800586e <UART_SetConfig+0x34a>
 800581e:	a201      	add	r2, pc, #4	; (adr r2, 8005824 <UART_SetConfig+0x300>)
 8005820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005824:	08005849 	.word	0x08005849
 8005828:	08005851 	.word	0x08005851
 800582c:	08005859 	.word	0x08005859
 8005830:	0800586f 	.word	0x0800586f
 8005834:	0800585f 	.word	0x0800585f
 8005838:	0800586f 	.word	0x0800586f
 800583c:	0800586f 	.word	0x0800586f
 8005840:	0800586f 	.word	0x0800586f
 8005844:	08005867 	.word	0x08005867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005848:	f7ff fa56 	bl	8004cf8 <HAL_RCC_GetPCLK1Freq>
 800584c:	61b8      	str	r0, [r7, #24]
        break;
 800584e:	e013      	b.n	8005878 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005850:	f7ff fa74 	bl	8004d3c <HAL_RCC_GetPCLK2Freq>
 8005854:	61b8      	str	r0, [r7, #24]
        break;
 8005856:	e00f      	b.n	8005878 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005858:	4b1b      	ldr	r3, [pc, #108]	; (80058c8 <UART_SetConfig+0x3a4>)
 800585a:	61bb      	str	r3, [r7, #24]
        break;
 800585c:	e00c      	b.n	8005878 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800585e:	f7ff f9d5 	bl	8004c0c <HAL_RCC_GetSysClockFreq>
 8005862:	61b8      	str	r0, [r7, #24]
        break;
 8005864:	e008      	b.n	8005878 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800586a:	61bb      	str	r3, [r7, #24]
        break;
 800586c:	e004      	b.n	8005878 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	77bb      	strb	r3, [r7, #30]
        break;
 8005876:	bf00      	nop
    }

    if (pclk != 0U)
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d018      	beq.n	80058b0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	085a      	lsrs	r2, r3, #1
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	441a      	add	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005890:	b29b      	uxth	r3, r3
 8005892:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	2b0f      	cmp	r3, #15
 8005898:	d908      	bls.n	80058ac <UART_SetConfig+0x388>
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a0:	d204      	bcs.n	80058ac <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	60da      	str	r2, [r3, #12]
 80058aa:	e001      	b.n	80058b0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80058bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3720      	adds	r7, #32
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	007a1200 	.word	0x007a1200

080058cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00a      	beq.n	80058f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	f003 0308 	and.w	r3, r3, #8
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	f003 0310 	and.w	r3, r3, #16
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00a      	beq.n	800597e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	430a      	orrs	r2, r1
 800597c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01a      	beq.n	80059e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ca:	d10a      	bne.n	80059e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	605a      	str	r2, [r3, #4]
  }
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af02      	add	r7, sp, #8
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a20:	f7fb fece 	bl	80017c0 <HAL_GetTick>
 8005a24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0308 	and.w	r3, r3, #8
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d10e      	bne.n	8005a52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f82d 	bl	8005aa2 <UART_WaitOnFlagUntilTimeout>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e023      	b.n	8005a9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d10e      	bne.n	8005a7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f817 	bl	8005aa2 <UART_WaitOnFlagUntilTimeout>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e00d      	b.n	8005a9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2220      	movs	r2, #32
 8005a82:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b084      	sub	sp, #16
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	603b      	str	r3, [r7, #0]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ab2:	e05e      	b.n	8005b72 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aba:	d05a      	beq.n	8005b72 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005abc:	f7fb fe80 	bl	80017c0 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d302      	bcc.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d11b      	bne.n	8005b0a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ae0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0201 	bic.w	r2, r2, #1
 8005af0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2220      	movs	r2, #32
 8005af6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2220      	movs	r2, #32
 8005afc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e043      	b.n	8005b92 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d02c      	beq.n	8005b72 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b26:	d124      	bne.n	8005b72 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b40:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	689a      	ldr	r2, [r3, #8]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 0201 	bic.w	r2, r2, #1
 8005b50:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2220      	movs	r2, #32
 8005b56:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2220      	movs	r2, #32
 8005b62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e00f      	b.n	8005b92 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	69da      	ldr	r2, [r3, #28]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	bf0c      	ite	eq
 8005b82:	2301      	moveq	r3, #1
 8005b84:	2300      	movne	r3, #0
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	461a      	mov	r2, r3
 8005b8a:	79fb      	ldrb	r3, [r7, #7]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d091      	beq.n	8005ab4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
	...

08005b9c <__libc_init_array>:
 8005b9c:	b570      	push	{r4, r5, r6, lr}
 8005b9e:	4e0d      	ldr	r6, [pc, #52]	; (8005bd4 <__libc_init_array+0x38>)
 8005ba0:	4c0d      	ldr	r4, [pc, #52]	; (8005bd8 <__libc_init_array+0x3c>)
 8005ba2:	1ba4      	subs	r4, r4, r6
 8005ba4:	10a4      	asrs	r4, r4, #2
 8005ba6:	2500      	movs	r5, #0
 8005ba8:	42a5      	cmp	r5, r4
 8005baa:	d109      	bne.n	8005bc0 <__libc_init_array+0x24>
 8005bac:	4e0b      	ldr	r6, [pc, #44]	; (8005bdc <__libc_init_array+0x40>)
 8005bae:	4c0c      	ldr	r4, [pc, #48]	; (8005be0 <__libc_init_array+0x44>)
 8005bb0:	f000 f934 	bl	8005e1c <_init>
 8005bb4:	1ba4      	subs	r4, r4, r6
 8005bb6:	10a4      	asrs	r4, r4, #2
 8005bb8:	2500      	movs	r5, #0
 8005bba:	42a5      	cmp	r5, r4
 8005bbc:	d105      	bne.n	8005bca <__libc_init_array+0x2e>
 8005bbe:	bd70      	pop	{r4, r5, r6, pc}
 8005bc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bc4:	4798      	blx	r3
 8005bc6:	3501      	adds	r5, #1
 8005bc8:	e7ee      	b.n	8005ba8 <__libc_init_array+0xc>
 8005bca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bce:	4798      	blx	r3
 8005bd0:	3501      	adds	r5, #1
 8005bd2:	e7f2      	b.n	8005bba <__libc_init_array+0x1e>
 8005bd4:	08006084 	.word	0x08006084
 8005bd8:	08006084 	.word	0x08006084
 8005bdc:	08006084 	.word	0x08006084
 8005be0:	08006088 	.word	0x08006088

08005be4 <__itoa>:
 8005be4:	1e93      	subs	r3, r2, #2
 8005be6:	2b22      	cmp	r3, #34	; 0x22
 8005be8:	b510      	push	{r4, lr}
 8005bea:	460c      	mov	r4, r1
 8005bec:	d904      	bls.n	8005bf8 <__itoa+0x14>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	700b      	strb	r3, [r1, #0]
 8005bf2:	461c      	mov	r4, r3
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	bd10      	pop	{r4, pc}
 8005bf8:	2a0a      	cmp	r2, #10
 8005bfa:	d109      	bne.n	8005c10 <__itoa+0x2c>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	da07      	bge.n	8005c10 <__itoa+0x2c>
 8005c00:	232d      	movs	r3, #45	; 0x2d
 8005c02:	700b      	strb	r3, [r1, #0]
 8005c04:	4240      	negs	r0, r0
 8005c06:	2101      	movs	r1, #1
 8005c08:	4421      	add	r1, r4
 8005c0a:	f000 f8a7 	bl	8005d5c <__utoa>
 8005c0e:	e7f1      	b.n	8005bf4 <__itoa+0x10>
 8005c10:	2100      	movs	r1, #0
 8005c12:	e7f9      	b.n	8005c08 <__itoa+0x24>

08005c14 <itoa>:
 8005c14:	f7ff bfe6 	b.w	8005be4 <__itoa>

08005c18 <memset>:
 8005c18:	4402      	add	r2, r0
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d100      	bne.n	8005c22 <memset+0xa>
 8005c20:	4770      	bx	lr
 8005c22:	f803 1b01 	strb.w	r1, [r3], #1
 8005c26:	e7f9      	b.n	8005c1c <memset+0x4>

08005c28 <strcpy>:
 8005c28:	4603      	mov	r3, r0
 8005c2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c2e:	f803 2b01 	strb.w	r2, [r3], #1
 8005c32:	2a00      	cmp	r2, #0
 8005c34:	d1f9      	bne.n	8005c2a <strcpy+0x2>
 8005c36:	4770      	bx	lr

08005c38 <_strtol_l.isra.0>:
 8005c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c3c:	4680      	mov	r8, r0
 8005c3e:	4689      	mov	r9, r1
 8005c40:	4692      	mov	sl, r2
 8005c42:	461e      	mov	r6, r3
 8005c44:	460f      	mov	r7, r1
 8005c46:	463d      	mov	r5, r7
 8005c48:	9808      	ldr	r0, [sp, #32]
 8005c4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c4e:	f000 f8c3 	bl	8005dd8 <__locale_ctype_ptr_l>
 8005c52:	4420      	add	r0, r4
 8005c54:	7843      	ldrb	r3, [r0, #1]
 8005c56:	f013 0308 	ands.w	r3, r3, #8
 8005c5a:	d132      	bne.n	8005cc2 <_strtol_l.isra.0+0x8a>
 8005c5c:	2c2d      	cmp	r4, #45	; 0x2d
 8005c5e:	d132      	bne.n	8005cc6 <_strtol_l.isra.0+0x8e>
 8005c60:	787c      	ldrb	r4, [r7, #1]
 8005c62:	1cbd      	adds	r5, r7, #2
 8005c64:	2201      	movs	r2, #1
 8005c66:	2e00      	cmp	r6, #0
 8005c68:	d05d      	beq.n	8005d26 <_strtol_l.isra.0+0xee>
 8005c6a:	2e10      	cmp	r6, #16
 8005c6c:	d109      	bne.n	8005c82 <_strtol_l.isra.0+0x4a>
 8005c6e:	2c30      	cmp	r4, #48	; 0x30
 8005c70:	d107      	bne.n	8005c82 <_strtol_l.isra.0+0x4a>
 8005c72:	782b      	ldrb	r3, [r5, #0]
 8005c74:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005c78:	2b58      	cmp	r3, #88	; 0x58
 8005c7a:	d14f      	bne.n	8005d1c <_strtol_l.isra.0+0xe4>
 8005c7c:	786c      	ldrb	r4, [r5, #1]
 8005c7e:	2610      	movs	r6, #16
 8005c80:	3502      	adds	r5, #2
 8005c82:	2a00      	cmp	r2, #0
 8005c84:	bf14      	ite	ne
 8005c86:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005c8a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005c8e:	2700      	movs	r7, #0
 8005c90:	fbb1 fcf6 	udiv	ip, r1, r6
 8005c94:	4638      	mov	r0, r7
 8005c96:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005c9a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005c9e:	2b09      	cmp	r3, #9
 8005ca0:	d817      	bhi.n	8005cd2 <_strtol_l.isra.0+0x9a>
 8005ca2:	461c      	mov	r4, r3
 8005ca4:	42a6      	cmp	r6, r4
 8005ca6:	dd23      	ble.n	8005cf0 <_strtol_l.isra.0+0xb8>
 8005ca8:	1c7b      	adds	r3, r7, #1
 8005caa:	d007      	beq.n	8005cbc <_strtol_l.isra.0+0x84>
 8005cac:	4584      	cmp	ip, r0
 8005cae:	d31c      	bcc.n	8005cea <_strtol_l.isra.0+0xb2>
 8005cb0:	d101      	bne.n	8005cb6 <_strtol_l.isra.0+0x7e>
 8005cb2:	45a6      	cmp	lr, r4
 8005cb4:	db19      	blt.n	8005cea <_strtol_l.isra.0+0xb2>
 8005cb6:	fb00 4006 	mla	r0, r0, r6, r4
 8005cba:	2701      	movs	r7, #1
 8005cbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cc0:	e7eb      	b.n	8005c9a <_strtol_l.isra.0+0x62>
 8005cc2:	462f      	mov	r7, r5
 8005cc4:	e7bf      	b.n	8005c46 <_strtol_l.isra.0+0xe>
 8005cc6:	2c2b      	cmp	r4, #43	; 0x2b
 8005cc8:	bf04      	itt	eq
 8005cca:	1cbd      	addeq	r5, r7, #2
 8005ccc:	787c      	ldrbeq	r4, [r7, #1]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	e7c9      	b.n	8005c66 <_strtol_l.isra.0+0x2e>
 8005cd2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005cd6:	2b19      	cmp	r3, #25
 8005cd8:	d801      	bhi.n	8005cde <_strtol_l.isra.0+0xa6>
 8005cda:	3c37      	subs	r4, #55	; 0x37
 8005cdc:	e7e2      	b.n	8005ca4 <_strtol_l.isra.0+0x6c>
 8005cde:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005ce2:	2b19      	cmp	r3, #25
 8005ce4:	d804      	bhi.n	8005cf0 <_strtol_l.isra.0+0xb8>
 8005ce6:	3c57      	subs	r4, #87	; 0x57
 8005ce8:	e7dc      	b.n	8005ca4 <_strtol_l.isra.0+0x6c>
 8005cea:	f04f 37ff 	mov.w	r7, #4294967295
 8005cee:	e7e5      	b.n	8005cbc <_strtol_l.isra.0+0x84>
 8005cf0:	1c7b      	adds	r3, r7, #1
 8005cf2:	d108      	bne.n	8005d06 <_strtol_l.isra.0+0xce>
 8005cf4:	2322      	movs	r3, #34	; 0x22
 8005cf6:	f8c8 3000 	str.w	r3, [r8]
 8005cfa:	4608      	mov	r0, r1
 8005cfc:	f1ba 0f00 	cmp.w	sl, #0
 8005d00:	d107      	bne.n	8005d12 <_strtol_l.isra.0+0xda>
 8005d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d06:	b102      	cbz	r2, 8005d0a <_strtol_l.isra.0+0xd2>
 8005d08:	4240      	negs	r0, r0
 8005d0a:	f1ba 0f00 	cmp.w	sl, #0
 8005d0e:	d0f8      	beq.n	8005d02 <_strtol_l.isra.0+0xca>
 8005d10:	b10f      	cbz	r7, 8005d16 <_strtol_l.isra.0+0xde>
 8005d12:	f105 39ff 	add.w	r9, r5, #4294967295
 8005d16:	f8ca 9000 	str.w	r9, [sl]
 8005d1a:	e7f2      	b.n	8005d02 <_strtol_l.isra.0+0xca>
 8005d1c:	2430      	movs	r4, #48	; 0x30
 8005d1e:	2e00      	cmp	r6, #0
 8005d20:	d1af      	bne.n	8005c82 <_strtol_l.isra.0+0x4a>
 8005d22:	2608      	movs	r6, #8
 8005d24:	e7ad      	b.n	8005c82 <_strtol_l.isra.0+0x4a>
 8005d26:	2c30      	cmp	r4, #48	; 0x30
 8005d28:	d0a3      	beq.n	8005c72 <_strtol_l.isra.0+0x3a>
 8005d2a:	260a      	movs	r6, #10
 8005d2c:	e7a9      	b.n	8005c82 <_strtol_l.isra.0+0x4a>
	...

08005d30 <strtol>:
 8005d30:	4b08      	ldr	r3, [pc, #32]	; (8005d54 <strtol+0x24>)
 8005d32:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d34:	681c      	ldr	r4, [r3, #0]
 8005d36:	4d08      	ldr	r5, [pc, #32]	; (8005d58 <strtol+0x28>)
 8005d38:	6a23      	ldr	r3, [r4, #32]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	bf08      	it	eq
 8005d3e:	462b      	moveq	r3, r5
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	4613      	mov	r3, r2
 8005d44:	460a      	mov	r2, r1
 8005d46:	4601      	mov	r1, r0
 8005d48:	4620      	mov	r0, r4
 8005d4a:	f7ff ff75 	bl	8005c38 <_strtol_l.isra.0>
 8005d4e:	b003      	add	sp, #12
 8005d50:	bd30      	pop	{r4, r5, pc}
 8005d52:	bf00      	nop
 8005d54:	20000010 	.word	0x20000010
 8005d58:	20000074 	.word	0x20000074

08005d5c <__utoa>:
 8005d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d5e:	4b1d      	ldr	r3, [pc, #116]	; (8005dd4 <__utoa+0x78>)
 8005d60:	b08b      	sub	sp, #44	; 0x2c
 8005d62:	4605      	mov	r5, r0
 8005d64:	460c      	mov	r4, r1
 8005d66:	466e      	mov	r6, sp
 8005d68:	f103 0c20 	add.w	ip, r3, #32
 8005d6c:	6818      	ldr	r0, [r3, #0]
 8005d6e:	6859      	ldr	r1, [r3, #4]
 8005d70:	4637      	mov	r7, r6
 8005d72:	c703      	stmia	r7!, {r0, r1}
 8005d74:	3308      	adds	r3, #8
 8005d76:	4563      	cmp	r3, ip
 8005d78:	463e      	mov	r6, r7
 8005d7a:	d1f7      	bne.n	8005d6c <__utoa+0x10>
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	791b      	ldrb	r3, [r3, #4]
 8005d80:	713b      	strb	r3, [r7, #4]
 8005d82:	1e93      	subs	r3, r2, #2
 8005d84:	2b22      	cmp	r3, #34	; 0x22
 8005d86:	6038      	str	r0, [r7, #0]
 8005d88:	f04f 0300 	mov.w	r3, #0
 8005d8c:	d904      	bls.n	8005d98 <__utoa+0x3c>
 8005d8e:	7023      	strb	r3, [r4, #0]
 8005d90:	461c      	mov	r4, r3
 8005d92:	4620      	mov	r0, r4
 8005d94:	b00b      	add	sp, #44	; 0x2c
 8005d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d98:	1e66      	subs	r6, r4, #1
 8005d9a:	fbb5 f0f2 	udiv	r0, r5, r2
 8005d9e:	af0a      	add	r7, sp, #40	; 0x28
 8005da0:	fb02 5510 	mls	r5, r2, r0, r5
 8005da4:	443d      	add	r5, r7
 8005da6:	1c59      	adds	r1, r3, #1
 8005da8:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8005dac:	f806 5f01 	strb.w	r5, [r6, #1]!
 8005db0:	4605      	mov	r5, r0
 8005db2:	b968      	cbnz	r0, 8005dd0 <__utoa+0x74>
 8005db4:	5460      	strb	r0, [r4, r1]
 8005db6:	4423      	add	r3, r4
 8005db8:	4622      	mov	r2, r4
 8005dba:	1b19      	subs	r1, r3, r4
 8005dbc:	1b10      	subs	r0, r2, r4
 8005dbe:	4281      	cmp	r1, r0
 8005dc0:	dde7      	ble.n	8005d92 <__utoa+0x36>
 8005dc2:	7811      	ldrb	r1, [r2, #0]
 8005dc4:	7818      	ldrb	r0, [r3, #0]
 8005dc6:	f802 0b01 	strb.w	r0, [r2], #1
 8005dca:	f803 1901 	strb.w	r1, [r3], #-1
 8005dce:	e7f4      	b.n	8005dba <__utoa+0x5e>
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	e7e2      	b.n	8005d9a <__utoa+0x3e>
 8005dd4:	08005f54 	.word	0x08005f54

08005dd8 <__locale_ctype_ptr_l>:
 8005dd8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005ddc:	4770      	bx	lr

08005dde <__ascii_mbtowc>:
 8005dde:	b082      	sub	sp, #8
 8005de0:	b901      	cbnz	r1, 8005de4 <__ascii_mbtowc+0x6>
 8005de2:	a901      	add	r1, sp, #4
 8005de4:	b142      	cbz	r2, 8005df8 <__ascii_mbtowc+0x1a>
 8005de6:	b14b      	cbz	r3, 8005dfc <__ascii_mbtowc+0x1e>
 8005de8:	7813      	ldrb	r3, [r2, #0]
 8005dea:	600b      	str	r3, [r1, #0]
 8005dec:	7812      	ldrb	r2, [r2, #0]
 8005dee:	1c10      	adds	r0, r2, #0
 8005df0:	bf18      	it	ne
 8005df2:	2001      	movne	r0, #1
 8005df4:	b002      	add	sp, #8
 8005df6:	4770      	bx	lr
 8005df8:	4610      	mov	r0, r2
 8005dfa:	e7fb      	b.n	8005df4 <__ascii_mbtowc+0x16>
 8005dfc:	f06f 0001 	mvn.w	r0, #1
 8005e00:	e7f8      	b.n	8005df4 <__ascii_mbtowc+0x16>

08005e02 <__ascii_wctomb>:
 8005e02:	b149      	cbz	r1, 8005e18 <__ascii_wctomb+0x16>
 8005e04:	2aff      	cmp	r2, #255	; 0xff
 8005e06:	bf85      	ittet	hi
 8005e08:	238a      	movhi	r3, #138	; 0x8a
 8005e0a:	6003      	strhi	r3, [r0, #0]
 8005e0c:	700a      	strbls	r2, [r1, #0]
 8005e0e:	f04f 30ff 	movhi.w	r0, #4294967295
 8005e12:	bf98      	it	ls
 8005e14:	2001      	movls	r0, #1
 8005e16:	4770      	bx	lr
 8005e18:	4608      	mov	r0, r1
 8005e1a:	4770      	bx	lr

08005e1c <_init>:
 8005e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1e:	bf00      	nop
 8005e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e22:	bc08      	pop	{r3}
 8005e24:	469e      	mov	lr, r3
 8005e26:	4770      	bx	lr

08005e28 <_fini>:
 8005e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2a:	bf00      	nop
 8005e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e2e:	bc08      	pop	{r3}
 8005e30:	469e      	mov	lr, r3
 8005e32:	4770      	bx	lr
