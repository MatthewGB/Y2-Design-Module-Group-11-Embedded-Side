
First_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009134  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  080092d0  080092d0  000192d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097c0  080097c0  00020bec  2**0
                  CONTENTS
  4 .ARM          00000000  080097c0  080097c0  00020bec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080097c0  080097c0  00020bec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097c0  080097c0  000197c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097c4  080097c4  000197c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000bec  20000000  080097c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c5e4  20000bec  0800a3b4  00020bec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d1d0  0800a3b4  0002d1d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020bec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b5d  00000000  00000000  00020c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024e0  00000000  00000000  00033779  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  00035c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001010  00000000  00000000  00036d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000228e7  00000000  00000000  00037d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010e85  00000000  00000000  0005a65f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d60a1  00000000  00000000  0006b4e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00141585  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052b0  00000000  00000000  00141600  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000bec 	.word	0x20000bec
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080092b4 	.word	0x080092b4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000bf0 	.word	0x20000bf0
 80001d4:	080092b4 	.word	0x080092b4

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	; 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033a:	f1a4 0401 	sub.w	r4, r4, #1
 800033e:	d1e9      	bne.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_dmul>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000582:	bf1d      	ittte	ne
 8000584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000588:	ea94 0f0c 	teqne	r4, ip
 800058c:	ea95 0f0c 	teqne	r5, ip
 8000590:	f000 f8de 	bleq	8000750 <__aeabi_dmul+0x1dc>
 8000594:	442c      	add	r4, r5
 8000596:	ea81 0603 	eor.w	r6, r1, r3
 800059a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a6:	bf18      	it	ne
 80005a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b4:	d038      	beq.n	8000628 <__aeabi_dmul+0xb4>
 80005b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ca:	f04f 0600 	mov.w	r6, #0
 80005ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d2:	f09c 0f00 	teq	ip, #0
 80005d6:	bf18      	it	ne
 80005d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e8:	d204      	bcs.n	80005f4 <__aeabi_dmul+0x80>
 80005ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ee:	416d      	adcs	r5, r5
 80005f0:	eb46 0606 	adc.w	r6, r6, r6
 80005f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000608:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800060c:	bf88      	it	hi
 800060e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000612:	d81e      	bhi.n	8000652 <__aeabi_dmul+0xde>
 8000614:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800062c:	ea46 0101 	orr.w	r1, r6, r1
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	ea81 0103 	eor.w	r1, r1, r3
 8000638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800063c:	bfc2      	ittt	gt
 800063e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000646:	bd70      	popgt	{r4, r5, r6, pc}
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f04f 0e00 	mov.w	lr, #0
 8000650:	3c01      	subs	r4, #1
 8000652:	f300 80ab 	bgt.w	80007ac <__aeabi_dmul+0x238>
 8000656:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065a:	bfde      	ittt	le
 800065c:	2000      	movle	r0, #0
 800065e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000662:	bd70      	pople	{r4, r5, r6, pc}
 8000664:	f1c4 0400 	rsb	r4, r4, #0
 8000668:	3c20      	subs	r4, #32
 800066a:	da35      	bge.n	80006d8 <__aeabi_dmul+0x164>
 800066c:	340c      	adds	r4, #12
 800066e:	dc1b      	bgt.n	80006a8 <__aeabi_dmul+0x134>
 8000670:	f104 0414 	add.w	r4, r4, #20
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f305 	lsl.w	r3, r0, r5
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	fa21 f604 	lsr.w	r6, r1, r4
 8000698:	eb42 0106 	adc.w	r1, r2, r6
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 040c 	rsb	r4, r4, #12
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f304 	lsl.w	r3, r0, r4
 80006b4:	fa20 f005 	lsr.w	r0, r0, r5
 80006b8:	fa01 f204 	lsl.w	r2, r1, r4
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	f141 0100 	adc.w	r1, r1, #0
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f205 	lsl.w	r2, r0, r5
 80006e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e4:	fa20 f304 	lsr.w	r3, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea43 0302 	orr.w	r3, r3, r2
 80006f0:	fa21 f004 	lsr.w	r0, r1, r4
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	fa21 f204 	lsr.w	r2, r1, r4
 80006fc:	ea20 0002 	bic.w	r0, r0, r2
 8000700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f094 0f00 	teq	r4, #0
 8000714:	d10f      	bne.n	8000736 <__aeabi_dmul+0x1c2>
 8000716:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071a:	0040      	lsls	r0, r0, #1
 800071c:	eb41 0101 	adc.w	r1, r1, r1
 8000720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3c01      	subeq	r4, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1a6>
 800072a:	ea41 0106 	orr.w	r1, r1, r6
 800072e:	f095 0f00 	teq	r5, #0
 8000732:	bf18      	it	ne
 8000734:	4770      	bxne	lr
 8000736:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	eb43 0303 	adc.w	r3, r3, r3
 8000740:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000744:	bf08      	it	eq
 8000746:	3d01      	subeq	r5, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1c6>
 800074a:	ea43 0306 	orr.w	r3, r3, r6
 800074e:	4770      	bx	lr
 8000750:	ea94 0f0c 	teq	r4, ip
 8000754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000758:	bf18      	it	ne
 800075a:	ea95 0f0c 	teqne	r5, ip
 800075e:	d00c      	beq.n	800077a <__aeabi_dmul+0x206>
 8000760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076a:	d1d1      	bne.n	8000710 <__aeabi_dmul+0x19c>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077e:	bf06      	itte	eq
 8000780:	4610      	moveq	r0, r2
 8000782:	4619      	moveq	r1, r3
 8000784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000788:	d019      	beq.n	80007be <__aeabi_dmul+0x24a>
 800078a:	ea94 0f0c 	teq	r4, ip
 800078e:	d102      	bne.n	8000796 <__aeabi_dmul+0x222>
 8000790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000794:	d113      	bne.n	80007be <__aeabi_dmul+0x24a>
 8000796:	ea95 0f0c 	teq	r5, ip
 800079a:	d105      	bne.n	80007a8 <__aeabi_dmul+0x234>
 800079c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a0:	bf1c      	itt	ne
 80007a2:	4610      	movne	r0, r2
 80007a4:	4619      	movne	r1, r3
 80007a6:	d10a      	bne.n	80007be <__aeabi_dmul+0x24a>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__aeabi_ddiv>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d6:	bf1d      	ittte	ne
 80007d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007dc:	ea94 0f0c 	teqne	r4, ip
 80007e0:	ea95 0f0c 	teqne	r5, ip
 80007e4:	f000 f8a7 	bleq	8000936 <__aeabi_ddiv+0x16e>
 80007e8:	eba4 0405 	sub.w	r4, r4, r5
 80007ec:	ea81 0e03 	eor.w	lr, r1, r3
 80007f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f8:	f000 8088 	beq.w	800090c <__aeabi_ddiv+0x144>
 80007fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000800:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800080c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000818:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800081c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000820:	429d      	cmp	r5, r3
 8000822:	bf08      	it	eq
 8000824:	4296      	cmpeq	r6, r2
 8000826:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082e:	d202      	bcs.n	8000836 <__aeabi_ddiv+0x6e>
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	1ab6      	subs	r6, r6, r2
 8000838:	eb65 0503 	sbc.w	r5, r5, r3
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000846:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 000c 	orrcs.w	r0, r0, ip
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a8:	d018      	beq.n	80008dc <__aeabi_ddiv+0x114>
 80008aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c6:	d1c0      	bne.n	800084a <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	d10b      	bne.n	80008e6 <__aeabi_ddiv+0x11e>
 80008ce:	ea41 0100 	orr.w	r1, r1, r0
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008da:	e7b6      	b.n	800084a <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	bf04      	itt	eq
 80008e2:	4301      	orreq	r1, r0
 80008e4:	2000      	moveq	r0, #0
 80008e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ea:	bf88      	it	hi
 80008ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f0:	f63f aeaf 	bhi.w	8000652 <__aeabi_dmul+0xde>
 80008f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f8:	bf04      	itt	eq
 80008fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000918:	bfc2      	ittt	gt
 800091a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000922:	bd70      	popgt	{r4, r5, r6, pc}
 8000924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000928:	f04f 0e00 	mov.w	lr, #0
 800092c:	3c01      	subs	r4, #1
 800092e:	e690      	b.n	8000652 <__aeabi_dmul+0xde>
 8000930:	ea45 0e06 	orr.w	lr, r5, r6
 8000934:	e68d      	b.n	8000652 <__aeabi_dmul+0xde>
 8000936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093a:	ea94 0f0c 	teq	r4, ip
 800093e:	bf08      	it	eq
 8000940:	ea95 0f0c 	teqeq	r5, ip
 8000944:	f43f af3b 	beq.w	80007be <__aeabi_dmul+0x24a>
 8000948:	ea94 0f0c 	teq	r4, ip
 800094c:	d10a      	bne.n	8000964 <__aeabi_ddiv+0x19c>
 800094e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000952:	f47f af34 	bne.w	80007be <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	f47f af25 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e72c      	b.n	80007be <__aeabi_dmul+0x24a>
 8000964:	ea95 0f0c 	teq	r5, ip
 8000968:	d106      	bne.n	8000978 <__aeabi_ddiv+0x1b0>
 800096a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096e:	f43f aefd 	beq.w	800076c <__aeabi_dmul+0x1f8>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e722      	b.n	80007be <__aeabi_dmul+0x24a>
 8000978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000982:	f47f aec5 	bne.w	8000710 <__aeabi_dmul+0x19c>
 8000986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098a:	f47f af0d 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800098e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000992:	f47f aeeb 	bne.w	800076c <__aeabi_dmul+0x1f8>
 8000996:	e712      	b.n	80007be <__aeabi_dmul+0x24a>

08000998 <__gedf2>:
 8000998:	f04f 3cff 	mov.w	ip, #4294967295
 800099c:	e006      	b.n	80009ac <__cmpdf2+0x4>
 800099e:	bf00      	nop

080009a0 <__ledf2>:
 80009a0:	f04f 0c01 	mov.w	ip, #1
 80009a4:	e002      	b.n	80009ac <__cmpdf2+0x4>
 80009a6:	bf00      	nop

080009a8 <__cmpdf2>:
 80009a8:	f04f 0c01 	mov.w	ip, #1
 80009ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009bc:	bf18      	it	ne
 80009be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c2:	d01b      	beq.n	80009fc <__cmpdf2+0x54>
 80009c4:	b001      	add	sp, #4
 80009c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ca:	bf0c      	ite	eq
 80009cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d0:	ea91 0f03 	teqne	r1, r3
 80009d4:	bf02      	ittt	eq
 80009d6:	ea90 0f02 	teqeq	r0, r2
 80009da:	2000      	moveq	r0, #0
 80009dc:	4770      	bxeq	lr
 80009de:	f110 0f00 	cmn.w	r0, #0
 80009e2:	ea91 0f03 	teq	r1, r3
 80009e6:	bf58      	it	pl
 80009e8:	4299      	cmppl	r1, r3
 80009ea:	bf08      	it	eq
 80009ec:	4290      	cmpeq	r0, r2
 80009ee:	bf2c      	ite	cs
 80009f0:	17d8      	asrcs	r0, r3, #31
 80009f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009f6:	f040 0001 	orr.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__cmpdf2+0x64>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d107      	bne.n	8000a1c <__cmpdf2+0x74>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d1d6      	bne.n	80009c4 <__cmpdf2+0x1c>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d0d3      	beq.n	80009c4 <__cmpdf2+0x1c>
 8000a1c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdrcmple>:
 8000a24:	4684      	mov	ip, r0
 8000a26:	4610      	mov	r0, r2
 8000a28:	4662      	mov	r2, ip
 8000a2a:	468c      	mov	ip, r1
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4663      	mov	r3, ip
 8000a30:	e000      	b.n	8000a34 <__aeabi_cdcmpeq>
 8000a32:	bf00      	nop

08000a34 <__aeabi_cdcmpeq>:
 8000a34:	b501      	push	{r0, lr}
 8000a36:	f7ff ffb7 	bl	80009a8 <__cmpdf2>
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	bf48      	it	mi
 8000a3e:	f110 0f00 	cmnmi.w	r0, #0
 8000a42:	bd01      	pop	{r0, pc}

08000a44 <__aeabi_dcmpeq>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff fff4 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a4c:	bf0c      	ite	eq
 8000a4e:	2001      	moveq	r0, #1
 8000a50:	2000      	movne	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmplt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffea 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmple>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffe0 	bl	8000a34 <__aeabi_cdcmpeq>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpge>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffce 	bl	8000a24 <__aeabi_cdrcmple>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpgt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffc4 	bl	8000a24 <__aeabi_cdrcmple>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2uiz>:
 8000af8:	004a      	lsls	r2, r1, #1
 8000afa:	d211      	bcs.n	8000b20 <__aeabi_d2uiz+0x28>
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d211      	bcs.n	8000b26 <__aeabi_d2uiz+0x2e>
 8000b02:	d50d      	bpl.n	8000b20 <__aeabi_d2uiz+0x28>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d40e      	bmi.n	8000b2c <__aeabi_d2uiz+0x34>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d102      	bne.n	8000b32 <__aeabi_d2uiz+0x3a>
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	4770      	bx	lr
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	4770      	bx	lr

08000b38 <serialOut>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void serialOut(UART_HandleTypeDef *huart, char _out[], uint32_t len){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(huart, (uint8_t *) _out, len, 100);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	2364      	movs	r3, #100	; 0x64
 8000b4a:	68b9      	ldr	r1, [r7, #8]
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	f005 ffdd 	bl	8006b0c <HAL_UART_Transmit>
}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <printStr>:

void printStr(char str[])
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	serialOut(&huart2, str, strlen(str));
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff fb41 	bl	80001ec <strlen>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	4803      	ldr	r0, [pc, #12]	; (8000b80 <printStr+0x24>)
 8000b72:	f7ff ffe1 	bl	8000b38 <serialOut>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000d100 	.word	0x2000d100

08000b84 <printChar>:

void printChar(char chr)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	char str1[2] = {chr , '\0'};
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	753b      	strb	r3, [r7, #20]
 8000b92:	2300      	movs	r3, #0
 8000b94:	757b      	strb	r3, [r7, #21]
	char str2[5] = "";
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	743b      	strb	r3, [r7, #16]
	strcpy(str2,str1);
 8000b9e:	f107 0214 	add.w	r2, r7, #20
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f006 fc9d 	bl	80074e8 <strcpy>
	serialOut(&huart2, str2, strlen(str2));
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fb1a 	bl	80001ec <strlen>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <printChar+0x4c>)
 8000bc2:	f7ff ffb9 	bl	8000b38 <serialOut>
}
 8000bc6:	bf00      	nop
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000d100 	.word	0x2000d100

08000bd4 <printInt>:

void printInt(int i)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	char str[5];
	itoa(i, str, 10);
 8000bdc:	f107 0308 	add.w	r3, r7, #8
 8000be0:	220a      	movs	r2, #10
 8000be2:	4619      	mov	r1, r3
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f006 fc75 	bl	80074d4 <itoa>
	serialOut(&huart2, str, strlen(str));
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fafc 	bl	80001ec <strlen>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4803      	ldr	r0, [pc, #12]	; (8000c0c <printInt+0x38>)
 8000bfe:	f7ff ff9b 	bl	8000b38 <serialOut>
}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	2000d100 	.word	0x2000d100

08000c10 <printStrLn>:

/**
 * Print string and go to next line (currently broken)
 */
void printStrLn(char str[])
{
 8000c10:	b5b0      	push	{r4, r5, r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	466b      	mov	r3, sp
 8000c1a:	461d      	mov	r5, r3
	char newstr[strlen(str)+5];
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff fae5 	bl	80001ec <strlen>
 8000c22:	4603      	mov	r3, r0
 8000c24:	1d58      	adds	r0, r3, #5
 8000c26:	4603      	mov	r3, r0
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	4601      	mov	r1, r0
 8000c2e:	f04f 0200 	mov.w	r2, #0
 8000c32:	f04f 0300 	mov.w	r3, #0
 8000c36:	f04f 0400 	mov.w	r4, #0
 8000c3a:	00d4      	lsls	r4, r2, #3
 8000c3c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000c40:	00cb      	lsls	r3, r1, #3
 8000c42:	4601      	mov	r1, r0
 8000c44:	f04f 0200 	mov.w	r2, #0
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	f04f 0400 	mov.w	r4, #0
 8000c50:	00d4      	lsls	r4, r2, #3
 8000c52:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000c56:	00cb      	lsls	r3, r1, #3
 8000c58:	1dc3      	adds	r3, r0, #7
 8000c5a:	08db      	lsrs	r3, r3, #3
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	ebad 0d03 	sub.w	sp, sp, r3
 8000c62:	466b      	mov	r3, sp
 8000c64:	3300      	adds	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
	strcpy(newstr, str);
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f006 fc3b 	bl	80074e8 <strcpy>
	strcat(newstr, "\r\n");
 8000c72:	68bc      	ldr	r4, [r7, #8]
 8000c74:	4620      	mov	r0, r4
 8000c76:	f7ff fab9 	bl	80001ec <strlen>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4423      	add	r3, r4
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <printStrLn+0x98>)
 8000c80:	8811      	ldrh	r1, [r2, #0]
 8000c82:	7892      	ldrb	r2, [r2, #2]
 8000c84:	8019      	strh	r1, [r3, #0]
 8000c86:	709a      	strb	r2, [r3, #2]
	serialOut(&huart2, str, strlen(newstr));
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff faae 	bl	80001ec <strlen>
 8000c90:	4603      	mov	r3, r0
 8000c92:	461a      	mov	r2, r3
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <printStrLn+0x9c>)
 8000c98:	f7ff ff4e 	bl	8000b38 <serialOut>
 8000c9c:	46ad      	mov	sp, r5
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	080092d0 	.word	0x080092d0
 8000cac:	2000d100 	.word	0x2000d100

08000cb0 <printWaveform>:

void printWaveform(short data[], int size)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
	for(int i = 0; i<size; i++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	e00e      	b.n	8000cde <printWaveform+0x2e>
	{
		printStr("|");
 8000cc0:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <printWaveform+0x40>)
 8000cc2:	f7ff ff4b 	bl	8000b5c <printStr>
		printInt(data[i]);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff7e 	bl	8000bd4 <printInt>
	for(int i = 0; i<size; i++)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	dbec      	blt.n	8000cc0 <printWaveform+0x10>
	}
}
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	080092d4 	.word	0x080092d4

08000cf4 <readSerial>:
 * Read "readsize" number of characters from serial port, and outputs to outputString
 * Returns 1 if timed out, else 0
 * printchar echoes the typed character back to the PC
 */
int readSerial(char* outputString, int readsize, int timeout, int printchar)
{
 8000cf4:	b5b0      	push	{r4, r5, r7, lr}
 8000cf6:	b08c      	sub	sp, #48	; 0x30
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	466b      	mov	r3, sp
 8000d04:	461d      	mov	r5, r3
	int starttime = HAL_GetTick();
 8000d06:	f001 faf3 	bl	80022f0 <HAL_GetTick>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	61fb      	str	r3, [r7, #28]
	char rxedString[readsize+1];
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	1c58      	adds	r0, r3, #1
 8000d12:	1e43      	subs	r3, r0, #1
 8000d14:	61bb      	str	r3, [r7, #24]
 8000d16:	4603      	mov	r3, r0
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f04f 0200 	mov.w	r2, #0
 8000d1e:	f04f 0300 	mov.w	r3, #0
 8000d22:	f04f 0400 	mov.w	r4, #0
 8000d26:	00d4      	lsls	r4, r2, #3
 8000d28:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000d2c:	00cb      	lsls	r3, r1, #3
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4619      	mov	r1, r3
 8000d32:	f04f 0200 	mov.w	r2, #0
 8000d36:	f04f 0300 	mov.w	r3, #0
 8000d3a:	f04f 0400 	mov.w	r4, #0
 8000d3e:	00d4      	lsls	r4, r2, #3
 8000d40:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000d44:	00cb      	lsls	r3, r1, #3
 8000d46:	4603      	mov	r3, r0
 8000d48:	3307      	adds	r3, #7
 8000d4a:	08db      	lsrs	r3, r3, #3
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	ebad 0d03 	sub.w	sp, sp, r3
 8000d52:	466b      	mov	r3, sp
 8000d54:	3300      	adds	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
	for(int i = 0; i<readsize; i++)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d5c:	e007      	b.n	8000d6e <readSerial+0x7a>
	{
		rxedString[i] = '#';
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	4413      	add	r3, r2
 8000d64:	2223      	movs	r2, #35	; 0x23
 8000d66:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<readsize; i++)
 8000d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	dbf3      	blt.n	8000d5e <readSerial+0x6a>
	}
	char rxedChar[1] = "#";
 8000d76:	2323      	movs	r3, #35	; 0x23
 8000d78:	743b      	strb	r3, [r7, #16]
	int charnum = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
	while (1)
	{
		  HAL_UART_Receive(&huart2, (uint8_t *)rxedChar, 1, 100);
 8000d7e:	f107 0110 	add.w	r1, r7, #16
 8000d82:	2364      	movs	r3, #100	; 0x64
 8000d84:	2201      	movs	r2, #1
 8000d86:	482a      	ldr	r0, [pc, #168]	; (8000e30 <readSerial+0x13c>)
 8000d88:	f005 ff54 	bl	8006c34 <HAL_UART_Receive>

		  if (rxedChar[0] == '\n' || rxedChar[0] == '\r') {
 8000d8c:	7c3b      	ldrb	r3, [r7, #16]
 8000d8e:	2b0a      	cmp	r3, #10
 8000d90:	d028      	beq.n	8000de4 <readSerial+0xf0>
 8000d92:	7c3b      	ldrb	r3, [r7, #16]
 8000d94:	2b0d      	cmp	r3, #13
 8000d96:	d025      	beq.n	8000de4 <readSerial+0xf0>
			  break;
		  }

		  if(rxedChar[0] != '#')
 8000d98:	7c3b      	ldrb	r3, [r7, #16]
 8000d9a:	2b23      	cmp	r3, #35	; 0x23
 8000d9c:	d011      	beq.n	8000dc2 <readSerial+0xce>
		  {
			  rxedString[charnum] = rxedChar[0];
 8000d9e:	7c39      	ldrb	r1, [r7, #16]
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da4:	4413      	add	r3, r2
 8000da6:	460a      	mov	r2, r1
 8000da8:	701a      	strb	r2, [r3, #0]
			  charnum += 1;
 8000daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dac:	3301      	adds	r3, #1
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
			  if(printchar == 1)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d103      	bne.n	8000dbe <readSerial+0xca>
			  {
				  printChar(rxedChar[0]);
 8000db6:	7c3b      	ldrb	r3, [r7, #16]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fee3 	bl	8000b84 <printChar>
			  }
			  rxedChar[0] = '#';
 8000dbe:	2323      	movs	r3, #35	; 0x23
 8000dc0:	743b      	strb	r3, [r7, #16]
		  }

		  if(rxedString[readsize-1] != '#')
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	5cd3      	ldrb	r3, [r2, r3]
 8000dca:	2b23      	cmp	r3, #35	; 0x23
 8000dcc:	d109      	bne.n	8000de2 <readSerial+0xee>
		  {
			  break; //String is full
		  }

		  if(HAL_GetTick()-starttime > timeout)
 8000dce:	f001 fa8f 	bl	80022f0 <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	1ad2      	subs	r2, r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d9cf      	bls.n	8000d7e <readSerial+0x8a>
		  {
			  return 1;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e020      	b.n	8000e24 <readSerial+0x130>
			  break; //String is full
 8000de2:	bf00      	nop
		  }
	}

	int truesize = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i<readsize; i++)
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
 8000dec:	e00b      	b.n	8000e06 <readSerial+0x112>
	{
		if(rxedString[i] != '#')
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	6a3b      	ldr	r3, [r7, #32]
 8000df2:	4413      	add	r3, r2
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b23      	cmp	r3, #35	; 0x23
 8000df8:	d002      	beq.n	8000e00 <readSerial+0x10c>
		{
			truesize += 1;
 8000dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i<readsize; i++)
 8000e00:	6a3b      	ldr	r3, [r7, #32]
 8000e02:	3301      	adds	r3, #1
 8000e04:	623b      	str	r3, [r7, #32]
 8000e06:	6a3a      	ldr	r2, [r7, #32]
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	dbef      	blt.n	8000dee <readSerial+0xfa>
		}
	}
	rxedString[truesize] = 0; //Terminates string correctly
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e12:	4413      	add	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]

	strcpy(outputString, rxedString);
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	68f8      	ldr	r0, [r7, #12]
 8000e1e:	f006 fb63 	bl	80074e8 <strcpy>
	return 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	46ad      	mov	sp, r5
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3730      	adds	r7, #48	; 0x30
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	2000d100 	.word	0x2000d100

08000e34 <compressWaveform>:

/**
 * Either extrapolates between samples to fit resolution_x or uses multiple samples per pixel
 */
void compressWaveform(short* data, short *newdata, int samples_taken, int resolution_x, int output_offset)
{
 8000e34:	b5b0      	push	{r4, r5, r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
 8000e40:	603b      	str	r3, [r7, #0]
	if(debug)
 8000e42:	4b25      	ldr	r3, [pc, #148]	; (8000ed8 <compressWaveform+0xa4>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d002      	beq.n	8000e50 <compressWaveform+0x1c>
	{
		printStrLn("Compressing waveform...");
 8000e4a:	4824      	ldr	r0, [pc, #144]	; (8000edc <compressWaveform+0xa8>)
 8000e4c:	f7ff fee0 	bl	8000c10 <printStrLn>
	}
	for(int current_pixel = 0; current_pixel<resolution_x; current_pixel++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	e030      	b.n	8000eb8 <compressWaveform+0x84>
	{
		newdata[current_pixel+output_offset] = data[(int)(((double)current_pixel/resolution_x)*samples_taken)];
 8000e56:	6978      	ldr	r0, [r7, #20]
 8000e58:	f7ff fb22 	bl	80004a0 <__aeabi_i2d>
 8000e5c:	4604      	mov	r4, r0
 8000e5e:	460d      	mov	r5, r1
 8000e60:	6838      	ldr	r0, [r7, #0]
 8000e62:	f7ff fb1d 	bl	80004a0 <__aeabi_i2d>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	4629      	mov	r1, r5
 8000e6e:	f7ff fcab 	bl	80007c8 <__aeabi_ddiv>
 8000e72:	4603      	mov	r3, r0
 8000e74:	460c      	mov	r4, r1
 8000e76:	4625      	mov	r5, r4
 8000e78:	461c      	mov	r4, r3
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff fb10 	bl	80004a0 <__aeabi_i2d>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4620      	mov	r0, r4
 8000e86:	4629      	mov	r1, r5
 8000e88:	f7ff fb74 	bl	8000574 <__aeabi_dmul>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	460c      	mov	r4, r1
 8000e90:	4618      	mov	r0, r3
 8000e92:	4621      	mov	r1, r4
 8000e94:	f7ff fe08 	bl	8000aa8 <__aeabi_d2iz>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	441a      	add	r2, r3
 8000ea0:	6979      	ldr	r1, [r7, #20]
 8000ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea4:	440b      	add	r3, r1
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	68b9      	ldr	r1, [r7, #8]
 8000eaa:	440b      	add	r3, r1
 8000eac:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000eb0:	801a      	strh	r2, [r3, #0]
	for(int current_pixel = 0; current_pixel<resolution_x; current_pixel++)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dbca      	blt.n	8000e56 <compressWaveform+0x22>
	}
	if(debug)
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <compressWaveform+0xa4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d002      	beq.n	8000ece <compressWaveform+0x9a>
	{
		printStrLn("Compression complete \n\r");
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <compressWaveform+0xac>)
 8000eca:	f7ff fea1 	bl	8000c10 <printStrLn>
			current_pixel++;
		}
		newdata[current_pixel] += data[current_sample];
		current_sample++;
	}*/
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000c08 	.word	0x20000c08
 8000edc:	080092d8 	.word	0x080092d8
 8000ee0:	080092f0 	.word	0x080092f0

08000ee4 <getDataAndWait>:

void getDataAndWait(short* data, int samples)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	sample_completed = 0;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <getDataAndWait+0x38>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)data, samples);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	4809      	ldr	r0, [pc, #36]	; (8000f20 <getDataAndWait+0x3c>)
 8000efc:	f001 fc1c 	bl	8002738 <HAL_ADC_Start_DMA>
	while(sample_completed == 0)
 8000f00:	e001      	b.n	8000f06 <getDataAndWait+0x22>
	{
		int a = 1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	60fb      	str	r3, [r7, #12]
	while(sample_completed == 0)
 8000f06:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <getDataAndWait+0x38>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0f9      	beq.n	8000f02 <getDataAndWait+0x1e>
	}
	HAL_ADC_Stop_DMA(&hadc1);
 8000f0e:	4804      	ldr	r0, [pc, #16]	; (8000f20 <getDataAndWait+0x3c>)
 8000f10:	f001 fd2e 	bl	8002970 <HAL_ADC_Stop_DMA>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000c14 	.word	0x20000c14
 8000f20:	20000cd0 	.word	0x20000cd0
 8000f24:	00000000 	.word	0x00000000

08000f28 <getWaveform>:

/**
 * Get the set amount of samples in the timeframe, and store in data
 */
void getWaveform(short* data_out, int resolution_x, double sample_time)
{
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b090      	sub	sp, #64	; 0x40
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	ed87 0b00 	vstr	d0, [r7]

	//samples_needed = 220000*timeframe*0.001;
	//printInt(samples_needed);
	//int samples_needed = (double)samples_per_ms*timeframe;

	int samples_needed = (sample_time/25.1)*MAX_SAMPLES; //At 61.5 cycles per reading, 25000 samples are taken in 25.1ms
 8000f36:	a396      	add	r3, pc, #600	; (adr r3, 8001190 <getWaveform+0x268>)
 8000f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f40:	f7ff fc42 	bl	80007c8 <__aeabi_ddiv>
 8000f44:	4603      	mov	r3, r0
 8000f46:	460c      	mov	r4, r1
 8000f48:	4625      	mov	r5, r4
 8000f4a:	461c      	mov	r4, r3
 8000f4c:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff faa5 	bl	80004a0 <__aeabi_i2d>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	4629      	mov	r1, r5
 8000f5e:	f7ff fb09 	bl	8000574 <__aeabi_dmul>
 8000f62:	4603      	mov	r3, r0
 8000f64:	460c      	mov	r4, r1
 8000f66:	4618      	mov	r0, r3
 8000f68:	4621      	mov	r1, r4
 8000f6a:	f7ff fd9d 	bl	8000aa8 <__aeabi_d2iz>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
	if(samples_needed < MAX_SAMPLES)
 8000f72:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	da3b      	bge.n	8000ff4 <getWaveform+0xcc>
	{
		if(debug)
 8000f7c:	4b7a      	ldr	r3, [pc, #488]	; (8001168 <getWaveform+0x240>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d008      	beq.n	8000f96 <getWaveform+0x6e>
		{
			printStr("High sample rate mode\n\r");
 8000f84:	4879      	ldr	r0, [pc, #484]	; (800116c <getWaveform+0x244>)
 8000f86:	f7ff fde9 	bl	8000b5c <printStr>
			printInt(samples_needed);
 8000f8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f8c:	f7ff fe22 	bl	8000bd4 <printInt>
			printStr(" samples needed\n\r");
 8000f90:	4877      	ldr	r0, [pc, #476]	; (8001170 <getWaveform+0x248>)
 8000f92:	f7ff fde3 	bl	8000b5c <printStr>
		}
		sample_completed = 0;
 8000f96:	4b77      	ldr	r3, [pc, #476]	; (8001174 <getWaveform+0x24c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)data, samples_needed);
 8000f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4975      	ldr	r1, [pc, #468]	; (8001178 <getWaveform+0x250>)
 8000fa2:	4876      	ldr	r0, [pc, #472]	; (800117c <getWaveform+0x254>)
 8000fa4:	f001 fbc8 	bl	8002738 <HAL_ADC_Start_DMA>
		unsigned long t1 = DWT->CYCCNT; //32400
 8000fa8:	4b75      	ldr	r3, [pc, #468]	; (8001180 <getWaveform+0x258>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	61fb      	str	r3, [r7, #28]
		while(sample_completed == 0)
 8000fae:	e001      	b.n	8000fb4 <getWaveform+0x8c>
		{
			int a = 1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
		while(sample_completed == 0)
 8000fb4:	4b6f      	ldr	r3, [pc, #444]	; (8001174 <getWaveform+0x24c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0f9      	beq.n	8000fb0 <getWaveform+0x88>
		}
		unsigned long time2 = (DWT->CYCCNT);
 8000fbc:	4b70      	ldr	r3, [pc, #448]	; (8001180 <getWaveform+0x258>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	61bb      	str	r3, [r7, #24]
		HAL_ADC_Stop_DMA(&hadc1);
 8000fc2:	486e      	ldr	r0, [pc, #440]	; (800117c <getWaveform+0x254>)
 8000fc4:	f001 fcd4 	bl	8002970 <HAL_ADC_Stop_DMA>
		//printStr("Time:");
		//printInt(time2);
		/*
		printStr("Time2:");
		printInt(t1);*/
		if(debug)
 8000fc8:	4b67      	ldr	r3, [pc, #412]	; (8001168 <getWaveform+0x240>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d008      	beq.n	8000fe2 <getWaveform+0xba>
		{
			printStr("time delta:");
 8000fd0:	486c      	ldr	r0, [pc, #432]	; (8001184 <getWaveform+0x25c>)
 8000fd2:	f7ff fdc3 	bl	8000b5c <printStr>
			printInt(time2-t1);
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fdf9 	bl	8000bd4 <printInt>

		//HAL_ADC_Start_IT(&hadc1);
		//printStr("Data:");
		//printInt(data[0]);

		compressWaveform(data, data_out, samples_needed, resolution_x, 0);
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fea:	68f9      	ldr	r1, [r7, #12]
 8000fec:	4862      	ldr	r0, [pc, #392]	; (8001178 <getWaveform+0x250>)
 8000fee:	f7ff ff21 	bl	8000e34 <compressWaveform>
			printInt(datasets_done);
			printStr(" out of ");
			printInt(datasets_needed);*/
		}
	}
}
 8000ff2:	e0b4      	b.n	800115e <getWaveform+0x236>
		if(debug)
 8000ff4:	4b5c      	ldr	r3, [pc, #368]	; (8001168 <getWaveform+0x240>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d008      	beq.n	800100e <getWaveform+0xe6>
			printStr("mode 2\n\r");
 8000ffc:	4862      	ldr	r0, [pc, #392]	; (8001188 <getWaveform+0x260>)
 8000ffe:	f7ff fdad 	bl	8000b5c <printStr>
			printInt(samples_needed);
 8001002:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001004:	f7ff fde6 	bl	8000bd4 <printInt>
			printStr(" samples needed\n\r");
 8001008:	4859      	ldr	r0, [pc, #356]	; (8001170 <getWaveform+0x248>)
 800100a:	f7ff fda7 	bl	8000b5c <printStr>
		double datasets_needed = (double)samples_needed/MAX_SAMPLES;
 800100e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001010:	f7ff fa46 	bl	80004a0 <__aeabi_i2d>
 8001014:	4604      	mov	r4, r0
 8001016:	460d      	mov	r5, r1
 8001018:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fa3f 	bl	80004a0 <__aeabi_i2d>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4620      	mov	r0, r4
 8001028:	4629      	mov	r1, r5
 800102a:	f7ff fbcd 	bl	80007c8 <__aeabi_ddiv>
 800102e:	4603      	mov	r3, r0
 8001030:	460c      	mov	r4, r1
 8001032:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		int datasets_done = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	637b      	str	r3, [r7, #52]	; 0x34
		int samples_per_dataset = ((double)MAX_SAMPLES/samples_needed)*resolution_x;
 800103a:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fa2e 	bl	80004a0 <__aeabi_i2d>
 8001044:	4604      	mov	r4, r0
 8001046:	460d      	mov	r5, r1
 8001048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800104a:	f7ff fa29 	bl	80004a0 <__aeabi_i2d>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4620      	mov	r0, r4
 8001054:	4629      	mov	r1, r5
 8001056:	f7ff fbb7 	bl	80007c8 <__aeabi_ddiv>
 800105a:	4603      	mov	r3, r0
 800105c:	460c      	mov	r4, r1
 800105e:	4625      	mov	r5, r4
 8001060:	461c      	mov	r4, r3
 8001062:	68b8      	ldr	r0, [r7, #8]
 8001064:	f7ff fa1c 	bl	80004a0 <__aeabi_i2d>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4620      	mov	r0, r4
 800106e:	4629      	mov	r1, r5
 8001070:	f7ff fa80 	bl	8000574 <__aeabi_dmul>
 8001074:	4603      	mov	r3, r0
 8001076:	460c      	mov	r4, r1
 8001078:	4618      	mov	r0, r3
 800107a:	4621      	mov	r1, r4
 800107c:	f7ff fd14 	bl	8000aa8 <__aeabi_d2iz>
 8001080:	4603      	mov	r3, r0
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
		while(datasets_done < datasets_needed)
 8001084:	e05d      	b.n	8001142 <getWaveform+0x21a>
			sample_completed = 0;
 8001086:	4b3b      	ldr	r3, [pc, #236]	; (8001174 <getWaveform+0x24c>)
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
			if(datasets_needed - datasets_done > 1)
 800108c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800108e:	f7ff fa07 	bl	80004a0 <__aeabi_i2d>
 8001092:	4603      	mov	r3, r0
 8001094:	460c      	mov	r4, r1
 8001096:	461a      	mov	r2, r3
 8001098:	4623      	mov	r3, r4
 800109a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800109e:	f7ff f8b1 	bl	8000204 <__aeabi_dsub>
 80010a2:	4603      	mov	r3, r0
 80010a4:	460c      	mov	r4, r1
 80010a6:	4618      	mov	r0, r3
 80010a8:	4621      	mov	r1, r4
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	4b37      	ldr	r3, [pc, #220]	; (800118c <getWaveform+0x264>)
 80010b0:	f7ff fcf0 	bl	8000a94 <__aeabi_dcmpgt>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d013      	beq.n	80010e2 <getWaveform+0x1ba>
				getDataAndWait(data, MAX_SAMPLES);
 80010ba:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80010be:	4619      	mov	r1, r3
 80010c0:	482d      	ldr	r0, [pc, #180]	; (8001178 <getWaveform+0x250>)
 80010c2:	f7ff ff0f 	bl	8000ee4 <getDataAndWait>
				compressWaveform(data, data_out, MAX_SAMPLES, samples_per_dataset, datasets_done * samples_per_dataset);
 80010c6:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80010ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ce:	fb02 f303 	mul.w	r3, r2, r3
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	460a      	mov	r2, r1
 80010d8:	68f9      	ldr	r1, [r7, #12]
 80010da:	4827      	ldr	r0, [pc, #156]	; (8001178 <getWaveform+0x250>)
 80010dc:	f7ff feaa 	bl	8000e34 <compressWaveform>
 80010e0:	e02c      	b.n	800113c <getWaveform+0x214>
				int samples_current_dataset = MAX_SAMPLES*(datasets_needed - datasets_done);
 80010e2:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff f9da 	bl	80004a0 <__aeabi_i2d>
 80010ec:	4604      	mov	r4, r0
 80010ee:	460d      	mov	r5, r1
 80010f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80010f2:	f7ff f9d5 	bl	80004a0 <__aeabi_i2d>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80010fe:	f7ff f881 	bl	8000204 <__aeabi_dsub>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4620      	mov	r0, r4
 8001108:	4629      	mov	r1, r5
 800110a:	f7ff fa33 	bl	8000574 <__aeabi_dmul>
 800110e:	4603      	mov	r3, r0
 8001110:	460c      	mov	r4, r1
 8001112:	4618      	mov	r0, r3
 8001114:	4621      	mov	r1, r4
 8001116:	f7ff fcc7 	bl	8000aa8 <__aeabi_d2iz>
 800111a:	4603      	mov	r3, r0
 800111c:	623b      	str	r3, [r7, #32]
				getDataAndWait(data, samples_current_dataset);
 800111e:	6a39      	ldr	r1, [r7, #32]
 8001120:	4815      	ldr	r0, [pc, #84]	; (8001178 <getWaveform+0x250>)
 8001122:	f7ff fedf 	bl	8000ee4 <getDataAndWait>
				compressWaveform(data, data_out, samples_current_dataset, samples_per_dataset, datasets_done * samples_per_dataset);
 8001126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800112a:	fb02 f303 	mul.w	r3, r2, r3
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001132:	6a3a      	ldr	r2, [r7, #32]
 8001134:	68f9      	ldr	r1, [r7, #12]
 8001136:	4810      	ldr	r0, [pc, #64]	; (8001178 <getWaveform+0x250>)
 8001138:	f7ff fe7c 	bl	8000e34 <compressWaveform>
			datasets_done++;
 800113c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800113e:	3301      	adds	r3, #1
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
		while(datasets_done < datasets_needed)
 8001142:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001144:	f7ff f9ac 	bl	80004a0 <__aeabi_i2d>
 8001148:	4603      	mov	r3, r0
 800114a:	460c      	mov	r4, r1
 800114c:	461a      	mov	r2, r3
 800114e:	4623      	mov	r3, r4
 8001150:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001154:	f7ff fc9e 	bl	8000a94 <__aeabi_dcmpgt>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d193      	bne.n	8001086 <getWaveform+0x15e>
}
 800115e:	bf00      	nop
 8001160:	3738      	adds	r7, #56	; 0x38
 8001162:	46bd      	mov	sp, r7
 8001164:	bdb0      	pop	{r4, r5, r7, pc}
 8001166:	bf00      	nop
 8001168:	20000c08 	.word	0x20000c08
 800116c:	08009308 	.word	0x08009308
 8001170:	08009320 	.word	0x08009320
 8001174:	20000c14 	.word	0x20000c14
 8001178:	20000d64 	.word	0x20000d64
 800117c:	20000cd0 	.word	0x20000cd0
 8001180:	e0001000 	.word	0xe0001000
 8001184:	08009334 	.word	0x08009334
 8001188:	08009340 	.word	0x08009340
 800118c:	3ff00000 	.word	0x3ff00000
 8001190:	9999999a 	.word	0x9999999a
 8001194:	40391999 	.word	0x40391999

08001198 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	sample_completed = 1;
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	601a      	str	r2, [r3, #0]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000c14 	.word	0x20000c14

080011b8 <afgAmplitudeAdjustment>:
{
    HAL_ADC_IRQHandler(&hadc1);
}

void afgAmplitudeAdjustment(int new_amplitude)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	AFG_Amplitude = new_amplitude;
 80011c0:	4a2f      	ldr	r2, [pc, #188]	; (8001280 <afgAmplitudeAdjustment+0xc8>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
	float ratio = AFG_Amplitude/3300.0f;
 80011c6:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <afgAmplitudeAdjustment+0xc8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d2:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001284 <afgAmplitudeAdjustment+0xcc>
 80011d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011da:	edc7 7a04 	vstr	s15, [r7, #16]
	printInt(ratio*100);
 80011de:	edd7 7a04 	vldr	s15, [r7, #16]
 80011e2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001288 <afgAmplitudeAdjustment+0xd0>
 80011e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ee:	ee17 0a90 	vmov	r0, s15
 80011f2:	f7ff fcef 	bl	8000bd4 <printInt>
	for(int i = 0; i<128; i++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	e03a      	b.n	8001272 <afgAmplitudeAdjustment+0xba>
	{
		int previous_amplitude = LUT_CurrentWave[i];
 80011fc:	4a23      	ldr	r2, [pc, #140]	; (800128c <afgAmplitudeAdjustment+0xd4>)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001204:	60fb      	str	r3, [r7, #12]
		if(previous_amplitude > 2048)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800120c:	dd17      	ble.n	800123e <afgAmplitudeAdjustment+0x86>
		{
			LUT_CurrentWave[i] = 2048+((previous_amplitude-2048)*ratio);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001214:	ee07 3a90 	vmov	s15, r3
 8001218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001224:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001290 <afgAmplitudeAdjustment+0xd8>
 8001228:	ee77 7a87 	vadd.f32	s15, s15, s14
 800122c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001230:	ee17 1a90 	vmov	r1, s15
 8001234:	4a15      	ldr	r2, [pc, #84]	; (800128c <afgAmplitudeAdjustment+0xd4>)
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800123c:	e016      	b.n	800126c <afgAmplitudeAdjustment+0xb4>
		}
		else
		{
			LUT_CurrentWave[i] = 2048-((2048-previous_amplitude)*ratio);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800124c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001254:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001290 <afgAmplitudeAdjustment+0xd8>
 8001258:	ee77 7a67 	vsub.f32	s15, s14, s15
 800125c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001260:	ee17 1a90 	vmov	r1, s15
 8001264:	4a09      	ldr	r2, [pc, #36]	; (800128c <afgAmplitudeAdjustment+0xd4>)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<128; i++)
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	3301      	adds	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	2b7f      	cmp	r3, #127	; 0x7f
 8001276:	ddc1      	ble.n	80011fc <afgAmplitudeAdjustment+0x44>
		}
	}
}
 8001278:	bf00      	nop
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000c10 	.word	0x20000c10
 8001284:	454e4000 	.word	0x454e4000
 8001288:	42c80000 	.word	0x42c80000
 800128c:	20000800 	.word	0x20000800
 8001290:	45000000 	.word	0x45000000

08001294 <changeAFGWaveform>:

void changeAFGWaveform(char* name)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	if(strcmp(name, "square") == 0)
 800129c:	4935      	ldr	r1, [pc, #212]	; (8001374 <changeAFGWaveform+0xe0>)
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7fe ff9a 	bl	80001d8 <strcmp>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d111      	bne.n	80012ce <changeAFGWaveform+0x3a>
	{
		for(int i = 0; i<128; i++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	e00a      	b.n	80012c6 <changeAFGWaveform+0x32>
		{
			LUT_CurrentWave[i] = LUT_SquareWave[i];
 80012b0:	4a31      	ldr	r2, [pc, #196]	; (8001378 <changeAFGWaveform+0xe4>)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012b8:	4930      	ldr	r1, [pc, #192]	; (800137c <changeAFGWaveform+0xe8>)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i<128; i++)
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3301      	adds	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	2b7f      	cmp	r3, #127	; 0x7f
 80012ca:	ddf1      	ble.n	80012b0 <changeAFGWaveform+0x1c>
	}
	else
	{
		printStr("Invalid waveform name");
	}
}
 80012cc:	e04d      	b.n	800136a <changeAFGWaveform+0xd6>
	else if(strcmp(name, "sine") == 0)
 80012ce:	492c      	ldr	r1, [pc, #176]	; (8001380 <changeAFGWaveform+0xec>)
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7fe ff81 	bl	80001d8 <strcmp>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d111      	bne.n	8001300 <changeAFGWaveform+0x6c>
		for(int i = 0; i<128; i++)
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	e00a      	b.n	80012f8 <changeAFGWaveform+0x64>
			LUT_CurrentWave[i] = LUT_SineWave[i];
 80012e2:	4a28      	ldr	r2, [pc, #160]	; (8001384 <changeAFGWaveform+0xf0>)
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012ea:	4924      	ldr	r1, [pc, #144]	; (800137c <changeAFGWaveform+0xe8>)
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i<128; i++)
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	3301      	adds	r3, #1
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	2b7f      	cmp	r3, #127	; 0x7f
 80012fc:	ddf1      	ble.n	80012e2 <changeAFGWaveform+0x4e>
}
 80012fe:	e034      	b.n	800136a <changeAFGWaveform+0xd6>
	else if(strcmp(name, "sawtooth") == 0)
 8001300:	4921      	ldr	r1, [pc, #132]	; (8001388 <changeAFGWaveform+0xf4>)
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7fe ff68 	bl	80001d8 <strcmp>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d111      	bne.n	8001332 <changeAFGWaveform+0x9e>
		for(int i = 0; i<128; i++)
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	e00a      	b.n	800132a <changeAFGWaveform+0x96>
			LUT_CurrentWave[i] = LUT_SawtoothWave[i];
 8001314:	4a1d      	ldr	r2, [pc, #116]	; (800138c <changeAFGWaveform+0xf8>)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800131c:	4917      	ldr	r1, [pc, #92]	; (800137c <changeAFGWaveform+0xe8>)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i<128; i++)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3301      	adds	r3, #1
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2b7f      	cmp	r3, #127	; 0x7f
 800132e:	ddf1      	ble.n	8001314 <changeAFGWaveform+0x80>
}
 8001330:	e01b      	b.n	800136a <changeAFGWaveform+0xd6>
	else if(strcmp(name, "noise") == 0)
 8001332:	4917      	ldr	r1, [pc, #92]	; (8001390 <changeAFGWaveform+0xfc>)
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7fe ff4f 	bl	80001d8 <strcmp>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d111      	bne.n	8001364 <changeAFGWaveform+0xd0>
		for(int i = 0; i<128; i++)
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	e00a      	b.n	800135c <changeAFGWaveform+0xc8>
			LUT_CurrentWave[i] = LUT_Noise[i];
 8001346:	4a13      	ldr	r2, [pc, #76]	; (8001394 <changeAFGWaveform+0x100>)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800134e:	490b      	ldr	r1, [pc, #44]	; (800137c <changeAFGWaveform+0xe8>)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i<128; i++)
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	3301      	adds	r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	2b7f      	cmp	r3, #127	; 0x7f
 8001360:	ddf1      	ble.n	8001346 <changeAFGWaveform+0xb2>
}
 8001362:	e002      	b.n	800136a <changeAFGWaveform+0xd6>
		printStr("Invalid waveform name");
 8001364:	480c      	ldr	r0, [pc, #48]	; (8001398 <changeAFGWaveform+0x104>)
 8001366:	f7ff fbf9 	bl	8000b5c <printStr>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	0800934c 	.word	0x0800934c
 8001378:	20000200 	.word	0x20000200
 800137c:	20000800 	.word	0x20000800
 8001380:	08009354 	.word	0x08009354
 8001384:	20000000 	.word	0x20000000
 8001388:	0800935c 	.word	0x0800935c
 800138c:	20000400 	.word	0x20000400
 8001390:	08009368 	.word	0x08009368
 8001394:	20000600 	.word	0x20000600
 8001398:	08009370 	.word	0x08009370

0800139c <startAFG>:

void startAFG()
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af02      	add	r7, sp, #8
    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)LUT_CurrentWave, 128, DAC_ALIGN_12B_R);
 80013a2:	2300      	movs	r3, #0
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <startAFG+0x24>)
 80013aa:	2100      	movs	r1, #0
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <startAFG+0x28>)
 80013ae:	f002 fdd1 	bl	8003f54 <HAL_DAC_Start_DMA>
    HAL_TIM_Base_Start(&htim2);
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <startAFG+0x2c>)
 80013b4:	f004 ff08 	bl	80061c8 <HAL_TIM_Base_Start>
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000800 	.word	0x20000800
 80013c4:	20000c28 	.word	0x20000c28
 80013c8:	2000d0b4 	.word	0x2000d0b4

080013cc <stopAFG>:

void stopAFG()
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80013d0:	2100      	movs	r1, #0
 80013d2:	4802      	ldr	r0, [pc, #8]	; (80013dc <stopAFG+0x10>)
 80013d4:	f002 fd45 	bl	8003e62 <HAL_DAC_Stop_DMA>
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000c28 	.word	0x20000c28

080013e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e0:	b5b0      	push	{r4, r5, r7, lr}
 80013e2:	b09e      	sub	sp, #120	; 0x78
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e6:	f000 ff29 	bl	800223c <HAL_Init>

  /* USER CODE BEGIN Init */

  //Enable clock cycle counter
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80013ea:	4bbb      	ldr	r3, [pc, #748]	; (80016d8 <main+0x2f8>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	4aba      	ldr	r2, [pc, #744]	; (80016d8 <main+0x2f8>)
 80013f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013f4:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 80013f6:	4bb9      	ldr	r3, [pc, #740]	; (80016dc <main+0x2fc>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80013fc:	4bb7      	ldr	r3, [pc, #732]	; (80016dc <main+0x2fc>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4ab6      	ldr	r2, [pc, #728]	; (80016dc <main+0x2fc>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6013      	str	r3, [r2, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001408:	f000 f9bc 	bl	8001784 <SystemClock_Config>
  // RCC->APB1ENR |= RCC_APB1ENR_DAC1EN;

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800140c:	f000 fbd0 	bl	8001bb0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001410:	f000 fb94 	bl	8001b3c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001414:	f000 fb62 	bl	8001adc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001418:	f000 fa1a 	bl	8001850 <MX_ADC1_Init>
  MX_DAC1_Init();
 800141c:	f000 fae6 	bl	80019ec <MX_DAC1_Init>
  MX_TIM2_Init();
 8001420:	f000 fb0e 	bl	8001a40 <MX_TIM2_Init>
  MX_ADC2_Init();
 8001424:	f000 fa84 	bl	8001930 <MX_ADC2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  if(debug) { printStr("Ready\n\r"); }
 8001428:	4bad      	ldr	r3, [pc, #692]	; (80016e0 <main+0x300>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d002      	beq.n	8001436 <main+0x56>
 8001430:	48ac      	ldr	r0, [pc, #688]	; (80016e4 <main+0x304>)
 8001432:	f7ff fb93 	bl	8000b5c <printStr>

  while(1)
  {
	  printStr(">");
 8001436:	48ac      	ldr	r0, [pc, #688]	; (80016e8 <main+0x308>)
 8001438:	f7ff fb90 	bl	8000b5c <printStr>
	  char input[2];
	  while(readSerial(input, 1, 100000, debug) == 1)
 800143c:	e002      	b.n	8001444 <main+0x64>
	  {
		  printStr(">");
 800143e:	48aa      	ldr	r0, [pc, #680]	; (80016e8 <main+0x308>)
 8001440:	f7ff fb8c 	bl	8000b5c <printStr>
	  while(readSerial(input, 1, 100000, debug) == 1)
 8001444:	4ba6      	ldr	r3, [pc, #664]	; (80016e0 <main+0x300>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800144c:	4aa7      	ldr	r2, [pc, #668]	; (80016ec <main+0x30c>)
 800144e:	2101      	movs	r1, #1
 8001450:	f7ff fc50 	bl	8000cf4 <readSerial>
 8001454:	4603      	mov	r3, r0
 8001456:	2b01      	cmp	r3, #1
 8001458:	d0f1      	beq.n	800143e <main+0x5e>
	  }

	  if(input[0] == 'A') //Acquire data
 800145a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800145e:	2b41      	cmp	r3, #65	; 0x41
 8001460:	d150      	bne.n	8001504 <main+0x124>
	  {
 8001462:	466b      	mov	r3, sp
 8001464:	461d      	mov	r5, r3
		  short newdata[resolution_x];
 8001466:	4ba2      	ldr	r3, [pc, #648]	; (80016f0 <main+0x310>)
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	1e43      	subs	r3, r0, #1
 800146c:	657b      	str	r3, [r7, #84]	; 0x54
 800146e:	4603      	mov	r3, r0
 8001470:	4619      	mov	r1, r3
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	f04f 0400 	mov.w	r4, #0
 800147e:	0114      	lsls	r4, r2, #4
 8001480:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8001484:	010b      	lsls	r3, r1, #4
 8001486:	4603      	mov	r3, r0
 8001488:	4619      	mov	r1, r3
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	f04f 0300 	mov.w	r3, #0
 8001492:	f04f 0400 	mov.w	r4, #0
 8001496:	0114      	lsls	r4, r2, #4
 8001498:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 800149c:	010b      	lsls	r3, r1, #4
 800149e:	4603      	mov	r3, r0
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	3301      	adds	r3, #1
 80014a4:	3307      	adds	r3, #7
 80014a6:	08db      	lsrs	r3, r3, #3
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	ebad 0d03 	sub.w	sp, sp, r3
 80014ae:	466b      	mov	r3, sp
 80014b0:	3301      	adds	r3, #1
 80014b2:	085b      	lsrs	r3, r3, #1
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	653b      	str	r3, [r7, #80]	; 0x50
		  for(int i = 0; i<resolution_x; i++)
 80014b8:	2300      	movs	r3, #0
 80014ba:	677b      	str	r3, [r7, #116]	; 0x74
 80014bc:	e007      	b.n	80014ce <main+0xee>
		  {
			  newdata[i] = 0;
 80014be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014c0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80014c2:	2100      	movs	r1, #0
 80014c4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  for(int i = 0; i<resolution_x; i++)
 80014c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014ca:	3301      	adds	r3, #1
 80014cc:	677b      	str	r3, [r7, #116]	; 0x74
 80014ce:	4b88      	ldr	r3, [pc, #544]	; (80016f0 <main+0x310>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbf2      	blt.n	80014be <main+0xde>
		  }
		  getWaveform(newdata, resolution_x, sample_time);
 80014d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80014da:	4b85      	ldr	r3, [pc, #532]	; (80016f0 <main+0x310>)
 80014dc:	6819      	ldr	r1, [r3, #0]
 80014de:	4b85      	ldr	r3, [pc, #532]	; (80016f4 <main+0x314>)
 80014e0:	ed93 7b00 	vldr	d7, [r3]
 80014e4:	eeb0 0a47 	vmov.f32	s0, s14
 80014e8:	eef0 0a67 	vmov.f32	s1, s15
 80014ec:	4610      	mov	r0, r2
 80014ee:	f7ff fd1b 	bl	8000f28 <getWaveform>
		  printWaveform(newdata, resolution_x);
 80014f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80014f4:	4b7e      	ldr	r3, [pc, #504]	; (80016f0 <main+0x310>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	4610      	mov	r0, r2
 80014fc:	f7ff fbd8 	bl	8000cb0 <printWaveform>
 8001500:	46ad      	mov	sp, r5
 8001502:	e798      	b.n	8001436 <main+0x56>
		  //printInt(measureFrequency(newdata, 1920, sample_time, 3000));
	  }
	  else if(input[0] == 'S') //Set variable
 8001504:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001508:	2b53      	cmp	r3, #83	; 0x53
 800150a:	f040 812d 	bne.w	8001768 <main+0x388>
	  {
		  if(debug) { printStr("SetVar"); }
 800150e:	4b74      	ldr	r3, [pc, #464]	; (80016e0 <main+0x300>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d002      	beq.n	800151c <main+0x13c>
 8001516:	4878      	ldr	r0, [pc, #480]	; (80016f8 <main+0x318>)
 8001518:	f7ff fb20 	bl	8000b5c <printStr>

		  char variable_name[21];
		  readSerial(variable_name, 20, 20000, 1);
 800151c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001520:	2301      	movs	r3, #1
 8001522:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001526:	2114      	movs	r1, #20
 8001528:	f7ff fbe4 	bl	8000cf4 <readSerial>
		  variable_name[20] = '\0';
 800152c:	2300      	movs	r3, #0
 800152e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

		  char variable_value[21];
		  readSerial(variable_value, 20, 20000, 1);
 8001532:	f107 001c 	add.w	r0, r7, #28
 8001536:	2301      	movs	r3, #1
 8001538:	f644 6220 	movw	r2, #20000	; 0x4e20
 800153c:	2114      	movs	r1, #20
 800153e:	f7ff fbd9 	bl	8000cf4 <readSerial>
		  variable_value[20] = '\0';
 8001542:	2300      	movs	r3, #0
 8001544:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

		  if(strcmp(variable_name, "resolution_x") == 0)
 8001548:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800154c:	496b      	ldr	r1, [pc, #428]	; (80016fc <main+0x31c>)
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe fe42 	bl	80001d8 <strcmp>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d113      	bne.n	8001582 <main+0x1a2>
		  {
			  char *end;
			  int newval = strtol(variable_value, &end, 10);
 800155a:	f107 0118 	add.w	r1, r7, #24
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	220a      	movs	r2, #10
 8001564:	4618      	mov	r0, r3
 8001566:	f006 fe67 	bl	8008238 <strtol>
 800156a:	65b8      	str	r0, [r7, #88]	; 0x58
			  if(newval == 0)
 800156c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800156e:	2b00      	cmp	r3, #0
 8001570:	d103      	bne.n	800157a <main+0x19a>
			  {
				  printStr("Invalid number");
 8001572:	4863      	ldr	r0, [pc, #396]	; (8001700 <main+0x320>)
 8001574:	f7ff faf2 	bl	8000b5c <printStr>
 8001578:	e75d      	b.n	8001436 <main+0x56>
			  }
			  else
			  {
				  resolution_x = newval;
 800157a:	4a5d      	ldr	r2, [pc, #372]	; (80016f0 <main+0x310>)
 800157c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	e759      	b.n	8001436 <main+0x56>
			  }
		  }
		  else if(strcmp(variable_name, "resolution_y") == 0)
 8001582:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001586:	495f      	ldr	r1, [pc, #380]	; (8001704 <main+0x324>)
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe fe25 	bl	80001d8 <strcmp>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d113      	bne.n	80015bc <main+0x1dc>
		  {
			  char *end;
			  int newval = strtol(variable_value, &end, 10);
 8001594:	f107 0114 	add.w	r1, r7, #20
 8001598:	f107 031c 	add.w	r3, r7, #28
 800159c:	220a      	movs	r2, #10
 800159e:	4618      	mov	r0, r3
 80015a0:	f006 fe4a 	bl	8008238 <strtol>
 80015a4:	65f8      	str	r0, [r7, #92]	; 0x5c
			  if(newval == 0)
 80015a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d103      	bne.n	80015b4 <main+0x1d4>
			  {
				  printStr("Invalid number");
 80015ac:	4854      	ldr	r0, [pc, #336]	; (8001700 <main+0x320>)
 80015ae:	f7ff fad5 	bl	8000b5c <printStr>
 80015b2:	e740      	b.n	8001436 <main+0x56>
			  }
			  else
			  {
				  resolution_y = newval;
 80015b4:	4a54      	ldr	r2, [pc, #336]	; (8001708 <main+0x328>)
 80015b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	e73c      	b.n	8001436 <main+0x56>
			  }
		  }
		  else if(strcmp(variable_name, "sample_time") == 0)
 80015bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015c0:	4952      	ldr	r1, [pc, #328]	; (800170c <main+0x32c>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe fe08 	bl	80001d8 <strcmp>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d11e      	bne.n	800160c <main+0x22c>
		  {
			  char *end;
			  double newval = strtod(variable_value, &end);
 80015ce:	f107 0210 	add.w	r2, r7, #16
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f006 fd9d 	bl	8008118 <strtod>
 80015de:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
			  if(newval == 0)
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	f04f 0300 	mov.w	r3, #0
 80015ea:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80015ee:	f7ff fa29 	bl	8000a44 <__aeabi_dcmpeq>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <main+0x220>
			  {
				  printStr("Invalid number");
 80015f8:	4841      	ldr	r0, [pc, #260]	; (8001700 <main+0x320>)
 80015fa:	f7ff faaf 	bl	8000b5c <printStr>
 80015fe:	e71a      	b.n	8001436 <main+0x56>
			  }
			  else
			  {
				  sample_time = newval;
 8001600:	4a3c      	ldr	r2, [pc, #240]	; (80016f4 <main+0x314>)
 8001602:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001606:	e9c2 3400 	strd	r3, r4, [r2]
 800160a:	e714      	b.n	8001436 <main+0x56>
			  }
		  }
		  else if(strcmp(variable_name, "afg_freq") == 0)
 800160c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001610:	493f      	ldr	r1, [pc, #252]	; (8001710 <main+0x330>)
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe fde0 	bl	80001d8 <strcmp>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d12e      	bne.n	800167c <main+0x29c>
		  {
			  char *endptr;
			  int newval = strtol(variable_value, &endptr, 10);
 800161e:	f107 010c 	add.w	r1, r7, #12
 8001622:	f107 031c 	add.w	r3, r7, #28
 8001626:	220a      	movs	r2, #10
 8001628:	4618      	mov	r0, r3
 800162a:	f006 fe05 	bl	8008238 <strtol>
 800162e:	66b8      	str	r0, [r7, #104]	; 0x68
			  if(endptr == variable_value)
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	429a      	cmp	r2, r3
 8001638:	d103      	bne.n	8001642 <main+0x262>
			  {
				  printStr("Invalid number");
 800163a:	4831      	ldr	r0, [pc, #196]	; (8001700 <main+0x320>)
 800163c:	f7ff fa8e 	bl	8000b5c <printStr>
 8001640:	e6f9      	b.n	8001436 <main+0x56>
			  }
			  else
			  {
				  if(newval>0)
 8001642:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001644:	2b00      	cmp	r3, #0
 8001646:	dd16      	ble.n	8001676 <main+0x296>
				  {
					  TIM2->ARR = round(TIMER_FREQ_TIMES_ARR/newval);
 8001648:	4a32      	ldr	r2, [pc, #200]	; (8001714 <main+0x334>)
 800164a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800164c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff25 	bl	80004a0 <__aeabi_i2d>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	f7ff fa49 	bl	8000af8 <__aeabi_d2uiz>
 8001666:	4603      	mov	r3, r0
 8001668:	62e3      	str	r3, [r4, #44]	; 0x2c
					  AFG_Freq = newval;
 800166a:	4a2b      	ldr	r2, [pc, #172]	; (8001718 <main+0x338>)
 800166c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800166e:	6013      	str	r3, [r2, #0]
					  startAFG();
 8001670:	f7ff fe94 	bl	800139c <startAFG>
 8001674:	e6df      	b.n	8001436 <main+0x56>
				  }
				  else
				  {
					  stopAFG();
 8001676:	f7ff fea9 	bl	80013cc <stopAFG>
 800167a:	e6dc      	b.n	8001436 <main+0x56>
				  }
			  }
		  }
		  else if(strcmp(variable_name, "afg_amplitude") == 0)
 800167c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001680:	4926      	ldr	r1, [pc, #152]	; (800171c <main+0x33c>)
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe fda8 	bl	80001d8 <strcmp>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d115      	bne.n	80016ba <main+0x2da>
		  {
			  char *endptr;
			  int newval = strtol(variable_value, &endptr, 10);
 800168e:	f107 0108 	add.w	r1, r7, #8
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	220a      	movs	r2, #10
 8001698:	4618      	mov	r0, r3
 800169a:	f006 fdcd 	bl	8008238 <strtol>
 800169e:	66f8      	str	r0, [r7, #108]	; 0x6c
			  if(endptr == variable_value)
 80016a0:	68ba      	ldr	r2, [r7, #8]
 80016a2:	f107 031c 	add.w	r3, r7, #28
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d103      	bne.n	80016b2 <main+0x2d2>
			  {
				  printStr("Invalid number");
 80016aa:	4815      	ldr	r0, [pc, #84]	; (8001700 <main+0x320>)
 80016ac:	f7ff fa56 	bl	8000b5c <printStr>
 80016b0:	e6c1      	b.n	8001436 <main+0x56>
			  }
			  else
			  {
				  afgAmplitudeAdjustment(newval);
 80016b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80016b4:	f7ff fd80 	bl	80011b8 <afgAmplitudeAdjustment>
 80016b8:	e6bd      	b.n	8001436 <main+0x56>
			  }
		  }
		  else if(strcmp(variable_name, "afg_waveform") == 0)
 80016ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016be:	4918      	ldr	r1, [pc, #96]	; (8001720 <main+0x340>)
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe fd89 	bl	80001d8 <strcmp>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d12b      	bne.n	8001724 <main+0x344>
		  {
			  changeAFGWaveform(variable_value);
 80016cc:	f107 031c 	add.w	r3, r7, #28
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fddf 	bl	8001294 <changeAFGWaveform>
 80016d6:	e6ae      	b.n	8001436 <main+0x56>
 80016d8:	e000edf0 	.word	0xe000edf0
 80016dc:	e0001000 	.word	0xe0001000
 80016e0:	20000c08 	.word	0x20000c08
 80016e4:	08009388 	.word	0x08009388
 80016e8:	08009390 	.word	0x08009390
 80016ec:	000186a0 	.word	0x000186a0
 80016f0:	20000a00 	.word	0x20000a00
 80016f4:	20000a08 	.word	0x20000a08
 80016f8:	08009394 	.word	0x08009394
 80016fc:	0800939c 	.word	0x0800939c
 8001700:	080093ac 	.word	0x080093ac
 8001704:	080093bc 	.word	0x080093bc
 8001708:	20000a04 	.word	0x20000a04
 800170c:	080093cc 	.word	0x080093cc
 8001710:	080093d8 	.word	0x080093d8
 8001714:	00088b80 	.word	0x00088b80
 8001718:	20000c0c 	.word	0x20000c0c
 800171c:	080093e4 	.word	0x080093e4
 8001720:	080093f4 	.word	0x080093f4
		  }
		  else if(strcmp(variable_name, "DEBUG") == 0)
 8001724:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001728:	4911      	ldr	r1, [pc, #68]	; (8001770 <main+0x390>)
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe fd54 	bl	80001d8 <strcmp>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d114      	bne.n	8001760 <main+0x380>
		  {
			  char *endptr;
			  int newval = strtol(variable_value, &endptr, 10);
 8001736:	1d39      	adds	r1, r7, #4
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	220a      	movs	r2, #10
 800173e:	4618      	mov	r0, r3
 8001740:	f006 fd7a 	bl	8008238 <strtol>
 8001744:	6738      	str	r0, [r7, #112]	; 0x70
			  if(endptr == variable_value)
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	429a      	cmp	r2, r3
 800174e:	d103      	bne.n	8001758 <main+0x378>
			  {
				  printStr("Invalid number");
 8001750:	4808      	ldr	r0, [pc, #32]	; (8001774 <main+0x394>)
 8001752:	f7ff fa03 	bl	8000b5c <printStr>
 8001756:	e66e      	b.n	8001436 <main+0x56>
			  }
			  else
			  {
				  debug = newval;
 8001758:	4a07      	ldr	r2, [pc, #28]	; (8001778 <main+0x398>)
 800175a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e66a      	b.n	8001436 <main+0x56>
			  }
		  }
		  else
		  {
			  printStr("Variable not found. Valid variables are resolution_x, sample_time, afg_freq, afg_waveform, afg_amplitude and DEBUG");
 8001760:	4806      	ldr	r0, [pc, #24]	; (800177c <main+0x39c>)
 8001762:	f7ff f9fb 	bl	8000b5c <printStr>
 8001766:	e666      	b.n	8001436 <main+0x56>
		  }
	  }
	  else
	  {
		  printStr("Invalid command. Use A to acquire data or S to set a variable");
 8001768:	4805      	ldr	r0, [pc, #20]	; (8001780 <main+0x3a0>)
 800176a:	f7ff f9f7 	bl	8000b5c <printStr>
  {
 800176e:	e662      	b.n	8001436 <main+0x56>
 8001770:	08009404 	.word	0x08009404
 8001774:	080093ac 	.word	0x080093ac
 8001778:	20000c08 	.word	0x20000c08
 800177c:	0800940c 	.word	0x0800940c
 8001780:	08009480 	.word	0x08009480

08001784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b0a6      	sub	sp, #152	; 0x98
 8001788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800178e:	2228      	movs	r2, #40	; 0x28
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f005 fea0 	bl	80074d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001798:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	2258      	movs	r2, #88	; 0x58
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f005 fe92 	bl	80074d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017b4:	2302      	movs	r3, #2
 80017b6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b8:	2301      	movs	r3, #1
 80017ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017bc:	2310      	movs	r3, #16
 80017be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c2:	2302      	movs	r3, #2
 80017c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017d0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80017d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80017d8:	2300      	movs	r3, #0
 80017da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017e2:	4618      	mov	r0, r3
 80017e4:	f003 f92e 	bl	8004a44 <HAL_RCC_OscConfig>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80017ee:	f000 fa47 	bl	8001c80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f2:	230f      	movs	r3, #15
 80017f4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f6:	2302      	movs	r3, #2
 80017f8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fa:	2300      	movs	r3, #0
 80017fc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001802:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001804:	2300      	movs	r3, #0
 8001806:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001808:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800180c:	2102      	movs	r1, #2
 800180e:	4618      	mov	r0, r3
 8001810:	f004 f82e 	bl	8005870 <HAL_RCC_ClockConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800181a:	f000 fa31 	bl	8001c80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <SystemClock_Config+0xc8>)
 8001820:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800182c:	2300      	movs	r3, #0
 800182e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	4618      	mov	r0, r3
 8001834:	f004 fa52 	bl	8005cdc <HAL_RCCEx_PeriphCLKConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800183e:	f000 fa1f 	bl	8001c80 <Error_Handler>
  }
}
 8001842:	bf00      	nop
 8001844:	3798      	adds	r7, #152	; 0x98
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	00100082 	.word	0x00100082

08001850 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001856:	f107 031c 	add.w	r3, r7, #28
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
 8001870:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001872:	4b2e      	ldr	r3, [pc, #184]	; (800192c <MX_ADC1_Init+0xdc>)
 8001874:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001878:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800187a:	4b2c      	ldr	r3, [pc, #176]	; (800192c <MX_ADC1_Init+0xdc>)
 800187c:	2200      	movs	r2, #0
 800187e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001880:	4b2a      	ldr	r3, [pc, #168]	; (800192c <MX_ADC1_Init+0xdc>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001886:	4b29      	ldr	r3, [pc, #164]	; (800192c <MX_ADC1_Init+0xdc>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800188c:	4b27      	ldr	r3, [pc, #156]	; (800192c <MX_ADC1_Init+0xdc>)
 800188e:	2201      	movs	r2, #1
 8001890:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001892:	4b26      	ldr	r3, [pc, #152]	; (800192c <MX_ADC1_Init+0xdc>)
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800189a:	4b24      	ldr	r3, [pc, #144]	; (800192c <MX_ADC1_Init+0xdc>)
 800189c:	2200      	movs	r2, #0
 800189e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018a0:	4b22      	ldr	r3, [pc, #136]	; (800192c <MX_ADC1_Init+0xdc>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018a6:	4b21      	ldr	r3, [pc, #132]	; (800192c <MX_ADC1_Init+0xdc>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80018ac:	4b1f      	ldr	r3, [pc, #124]	; (800192c <MX_ADC1_Init+0xdc>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80018b2:	4b1e      	ldr	r3, [pc, #120]	; (800192c <MX_ADC1_Init+0xdc>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018ba:	4b1c      	ldr	r3, [pc, #112]	; (800192c <MX_ADC1_Init+0xdc>)
 80018bc:	2204      	movs	r2, #4
 80018be:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018c0:	4b1a      	ldr	r3, [pc, #104]	; (800192c <MX_ADC1_Init+0xdc>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80018c6:	4b19      	ldr	r3, [pc, #100]	; (800192c <MX_ADC1_Init+0xdc>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018cc:	4817      	ldr	r0, [pc, #92]	; (800192c <MX_ADC1_Init+0xdc>)
 80018ce:	f000 fd39 	bl	8002344 <HAL_ADC_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80018d8:	f000 f9d2 	bl	8001c80 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80018e0:	f107 031c 	add.w	r3, r7, #28
 80018e4:	4619      	mov	r1, r3
 80018e6:	4811      	ldr	r0, [pc, #68]	; (800192c <MX_ADC1_Init+0xdc>)
 80018e8:	f001 fec4 	bl	8003674 <HAL_ADCEx_MultiModeConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80018f2:	f000 f9c5 	bl	8001c80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018f6:	2301      	movs	r3, #1
 80018f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018fa:	2301      	movs	r3, #1
 80018fc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8001902:	2305      	movs	r3, #5
 8001904:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	4619      	mov	r1, r3
 8001912:	4806      	ldr	r0, [pc, #24]	; (800192c <MX_ADC1_Init+0xdc>)
 8001914:	f001 fbc2 	bl	800309c <HAL_ADC_ConfigChannel>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800191e:	f000 f9af 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	3728      	adds	r7, #40	; 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000cd0 	.word	0x20000cd0

08001930 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001936:	463b      	mov	r3, r7
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
 8001944:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001946:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <MX_ADC2_Init+0xb4>)
 8001948:	4a27      	ldr	r2, [pc, #156]	; (80019e8 <MX_ADC2_Init+0xb8>)
 800194a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800194c:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <MX_ADC2_Init+0xb4>)
 800194e:	2200      	movs	r2, #0
 8001950:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001952:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <MX_ADC2_Init+0xb4>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001958:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <MX_ADC2_Init+0xb4>)
 800195a:	2200      	movs	r2, #0
 800195c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800195e:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <MX_ADC2_Init+0xb4>)
 8001960:	2201      	movs	r2, #1
 8001962:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001964:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <MX_ADC2_Init+0xb4>)
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800196c:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <MX_ADC2_Init+0xb4>)
 800196e:	2200      	movs	r2, #0
 8001970:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001972:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <MX_ADC2_Init+0xb4>)
 8001974:	2201      	movs	r2, #1
 8001976:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001978:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <MX_ADC2_Init+0xb4>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800197e:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <MX_ADC2_Init+0xb4>)
 8001980:	2201      	movs	r2, #1
 8001982:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001984:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <MX_ADC2_Init+0xb4>)
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800198c:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <MX_ADC2_Init+0xb4>)
 800198e:	2204      	movs	r2, #4
 8001990:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001992:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <MX_ADC2_Init+0xb4>)
 8001994:	2200      	movs	r2, #0
 8001996:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <MX_ADC2_Init+0xb4>)
 800199a:	2200      	movs	r2, #0
 800199c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800199e:	4811      	ldr	r0, [pc, #68]	; (80019e4 <MX_ADC2_Init+0xb4>)
 80019a0:	f000 fcd0 	bl	8002344 <HAL_ADC_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80019aa:	f000 f969 	bl	8001c80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80019ae:	2303      	movs	r3, #3
 80019b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019b2:	2301      	movs	r3, #1
 80019b4:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80019c6:	463b      	mov	r3, r7
 80019c8:	4619      	mov	r1, r3
 80019ca:	4806      	ldr	r0, [pc, #24]	; (80019e4 <MX_ADC2_Init+0xb4>)
 80019cc:	f001 fb66 	bl	800309c <HAL_ADC_ConfigChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80019d6:	f000 f953 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80019da:	bf00      	nop
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000c3c 	.word	0x20000c3c
 80019e8:	50000100 	.word	0x50000100

080019ec <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80019fc:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <MX_DAC1_Init+0x4c>)
 80019fe:	4a0f      	ldr	r2, [pc, #60]	; (8001a3c <MX_DAC1_Init+0x50>)
 8001a00:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001a02:	480d      	ldr	r0, [pc, #52]	; (8001a38 <MX_DAC1_Init+0x4c>)
 8001a04:	f002 fa0b 	bl	8003e1e <HAL_DAC_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8001a0e:	f000 f937 	bl	8001c80 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001a12:	2324      	movs	r3, #36	; 0x24
 8001a14:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4805      	ldr	r0, [pc, #20]	; (8001a38 <MX_DAC1_Init+0x4c>)
 8001a22:	f002 fb9f 	bl	8004164 <HAL_DAC_ConfigChannel>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8001a2c:	f000 f928 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001a30:	bf00      	nop
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000c28 	.word	0x20000c28
 8001a3c:	40007400 	.word	0x40007400

08001a40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a46:	f107 0310 	add.w	r3, r7, #16
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001a60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 8001a72:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001a74:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001a78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a80:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a86:	4814      	ldr	r0, [pc, #80]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001a88:	f004 fb46 	bl	8006118 <HAL_TIM_Base_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a92:	f000 f8f5 	bl	8001c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	480d      	ldr	r0, [pc, #52]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001aa4:	f004 fd17 	bl	80064d6 <HAL_TIM_ConfigClockSource>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001aae:	f000 f8e7 	bl	8001c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ab2:	2320      	movs	r3, #32
 8001ab4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	4619      	mov	r1, r3
 8001abe:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001ac0:	f004 ff2c 	bl	800691c <HAL_TIMEx_MasterConfigSynchronization>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001aca:	f000 f8d9 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	3720      	adds	r7, #32
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	2000d0b4 	.word	0x2000d0b4

08001adc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001ae2:	4a15      	ldr	r2, [pc, #84]	; (8001b38 <MX_USART2_UART_Init+0x5c>)
 8001ae4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001b02:	220c      	movs	r2, #12
 8001b04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001b20:	f004 ffa6 	bl	8006a70 <HAL_UART_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b2a:	f000 f8a9 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	2000d100 	.word	0x2000d100
 8001b38:	40004400 	.word	0x40004400

08001b3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b42:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <MX_DMA_Init+0x70>)
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	4a19      	ldr	r2, [pc, #100]	; (8001bac <MX_DMA_Init+0x70>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6153      	str	r3, [r2, #20]
 8001b4e:	4b17      	ldr	r3, [pc, #92]	; (8001bac <MX_DMA_Init+0x70>)
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b5a:	4b14      	ldr	r3, [pc, #80]	; (8001bac <MX_DMA_Init+0x70>)
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	4a13      	ldr	r2, [pc, #76]	; (8001bac <MX_DMA_Init+0x70>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	6153      	str	r3, [r2, #20]
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <MX_DMA_Init+0x70>)
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	200b      	movs	r0, #11
 8001b78:	f002 f91b 	bl	8003db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b7c:	200b      	movs	r0, #11
 8001b7e:	f002 f934 	bl	8003dea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	200d      	movs	r0, #13
 8001b88:	f002 f913 	bl	8003db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001b8c:	200d      	movs	r0, #13
 8001b8e:	f002 f92c 	bl	8003dea <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	2038      	movs	r0, #56	; 0x38
 8001b98:	f002 f90b 	bl	8003db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001b9c:	2038      	movs	r0, #56	; 0x38
 8001b9e:	f002 f924 	bl	8003dea <HAL_NVIC_EnableIRQ>

}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40021000 	.word	0x40021000

08001bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc6:	4b2b      	ldr	r3, [pc, #172]	; (8001c74 <MX_GPIO_Init+0xc4>)
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	4a2a      	ldr	r2, [pc, #168]	; (8001c74 <MX_GPIO_Init+0xc4>)
 8001bcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bd0:	6153      	str	r3, [r2, #20]
 8001bd2:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <MX_GPIO_Init+0xc4>)
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bde:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <MX_GPIO_Init+0xc4>)
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	4a24      	ldr	r2, [pc, #144]	; (8001c74 <MX_GPIO_Init+0xc4>)
 8001be4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001be8:	6153      	str	r3, [r2, #20]
 8001bea:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <MX_GPIO_Init+0xc4>)
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <MX_GPIO_Init+0xc4>)
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	4a1e      	ldr	r2, [pc, #120]	; (8001c74 <MX_GPIO_Init+0xc4>)
 8001bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c00:	6153      	str	r3, [r2, #20]
 8001c02:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <MX_GPIO_Init+0xc4>)
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <MX_GPIO_Init+0xc4>)
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	4a18      	ldr	r2, [pc, #96]	; (8001c74 <MX_GPIO_Init+0xc4>)
 8001c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c18:	6153      	str	r3, [r2, #20]
 8001c1a:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <MX_GPIO_Init+0xc4>)
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2120      	movs	r1, #32
 8001c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c2e:	f002 fef1 	bl	8004a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <MX_GPIO_Init+0xc8>)
 8001c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	4619      	mov	r1, r3
 8001c46:	480d      	ldr	r0, [pc, #52]	; (8001c7c <MX_GPIO_Init+0xcc>)
 8001c48:	f002 fd5a 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c4c:	2320      	movs	r3, #32
 8001c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c50:	2301      	movs	r3, #1
 8001c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	4619      	mov	r1, r3
 8001c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c66:	f002 fd4b 	bl	8004700 <HAL_GPIO_Init>

}
 8001c6a:	bf00      	nop
 8001c6c:	3728      	adds	r7, #40	; 0x28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	10210000 	.word	0x10210000
 8001c7c:	48000800 	.word	0x48000800

08001c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c84:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <Error_Handler+0x6>

08001c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <HAL_MspInit+0x44>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	4a0e      	ldr	r2, [pc, #56]	; (8001ccc <HAL_MspInit+0x44>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6193      	str	r3, [r2, #24]
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <HAL_MspInit+0x44>)
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_MspInit+0x44>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	4a08      	ldr	r2, [pc, #32]	; (8001ccc <HAL_MspInit+0x44>)
 8001cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	61d3      	str	r3, [r2, #28]
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_MspInit+0x44>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cbe:	2007      	movs	r0, #7
 8001cc0:	f002 f86c 	bl	8003d9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40021000 	.word	0x40021000

08001cd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08c      	sub	sp, #48	; 0x30
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 031c 	add.w	r3, r7, #28
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cf0:	d15e      	bne.n	8001db0 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001cf2:	4b63      	ldr	r3, [pc, #396]	; (8001e80 <HAL_ADC_MspInit+0x1b0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	4a61      	ldr	r2, [pc, #388]	; (8001e80 <HAL_ADC_MspInit+0x1b0>)
 8001cfa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001cfc:	4b60      	ldr	r3, [pc, #384]	; (8001e80 <HAL_ADC_MspInit+0x1b0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d10b      	bne.n	8001d1c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001d04:	4b5f      	ldr	r3, [pc, #380]	; (8001e84 <HAL_ADC_MspInit+0x1b4>)
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	4a5e      	ldr	r2, [pc, #376]	; (8001e84 <HAL_ADC_MspInit+0x1b4>)
 8001d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	6153      	str	r3, [r2, #20]
 8001d10:	4b5c      	ldr	r3, [pc, #368]	; (8001e84 <HAL_ADC_MspInit+0x1b4>)
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1c:	4b59      	ldr	r3, [pc, #356]	; (8001e84 <HAL_ADC_MspInit+0x1b4>)
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	4a58      	ldr	r2, [pc, #352]	; (8001e84 <HAL_ADC_MspInit+0x1b4>)
 8001d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d26:	6153      	str	r3, [r2, #20]
 8001d28:	4b56      	ldr	r3, [pc, #344]	; (8001e84 <HAL_ADC_MspInit+0x1b4>)
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d34:	2301      	movs	r3, #1
 8001d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	4619      	mov	r1, r3
 8001d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4a:	f002 fcd9 	bl	8004700 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001d4e:	4b4e      	ldr	r3, [pc, #312]	; (8001e88 <HAL_ADC_MspInit+0x1b8>)
 8001d50:	4a4e      	ldr	r2, [pc, #312]	; (8001e8c <HAL_ADC_MspInit+0x1bc>)
 8001d52:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d54:	4b4c      	ldr	r3, [pc, #304]	; (8001e88 <HAL_ADC_MspInit+0x1b8>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d5a:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <HAL_ADC_MspInit+0x1b8>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d60:	4b49      	ldr	r3, [pc, #292]	; (8001e88 <HAL_ADC_MspInit+0x1b8>)
 8001d62:	2280      	movs	r2, #128	; 0x80
 8001d64:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d66:	4b48      	ldr	r3, [pc, #288]	; (8001e88 <HAL_ADC_MspInit+0x1b8>)
 8001d68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d6c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d6e:	4b46      	ldr	r3, [pc, #280]	; (8001e88 <HAL_ADC_MspInit+0x1b8>)
 8001d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d74:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d76:	4b44      	ldr	r3, [pc, #272]	; (8001e88 <HAL_ADC_MspInit+0x1b8>)
 8001d78:	2220      	movs	r2, #32
 8001d7a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d7c:	4b42      	ldr	r3, [pc, #264]	; (8001e88 <HAL_ADC_MspInit+0x1b8>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d82:	4841      	ldr	r0, [pc, #260]	; (8001e88 <HAL_ADC_MspInit+0x1b8>)
 8001d84:	f002 facf 	bl	8004326 <HAL_DMA_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8001d8e:	f7ff ff77 	bl	8001c80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a3c      	ldr	r2, [pc, #240]	; (8001e88 <HAL_ADC_MspInit+0x1b8>)
 8001d96:	639a      	str	r2, [r3, #56]	; 0x38
 8001d98:	4a3b      	ldr	r2, [pc, #236]	; (8001e88 <HAL_ADC_MspInit+0x1b8>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2100      	movs	r1, #0
 8001da2:	2012      	movs	r0, #18
 8001da4:	f002 f805 	bl	8003db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001da8:	2012      	movs	r0, #18
 8001daa:	f002 f81e 	bl	8003dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001dae:	e062      	b.n	8001e76 <HAL_ADC_MspInit+0x1a6>
  else if(hadc->Instance==ADC2)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a36      	ldr	r2, [pc, #216]	; (8001e90 <HAL_ADC_MspInit+0x1c0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d15d      	bne.n	8001e76 <HAL_ADC_MspInit+0x1a6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001dba:	4b31      	ldr	r3, [pc, #196]	; (8001e80 <HAL_ADC_MspInit+0x1b0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	4a2f      	ldr	r2, [pc, #188]	; (8001e80 <HAL_ADC_MspInit+0x1b0>)
 8001dc2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001dc4:	4b2e      	ldr	r3, [pc, #184]	; (8001e80 <HAL_ADC_MspInit+0x1b0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d10b      	bne.n	8001de4 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <HAL_ADC_MspInit+0x1b4>)
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	4a2c      	ldr	r2, [pc, #176]	; (8001e84 <HAL_ADC_MspInit+0x1b4>)
 8001dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	6153      	str	r3, [r2, #20]
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <HAL_ADC_MspInit+0x1b4>)
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_ADC_MspInit+0x1b4>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4a26      	ldr	r2, [pc, #152]	; (8001e84 <HAL_ADC_MspInit+0x1b4>)
 8001dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dee:	6153      	str	r3, [r2, #20]
 8001df0:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <HAL_ADC_MspInit+0x1b4>)
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dfc:	2340      	movs	r3, #64	; 0x40
 8001dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e00:	2303      	movs	r3, #3
 8001e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e12:	f002 fc75 	bl	8004700 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8001e16:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <HAL_ADC_MspInit+0x1c4>)
 8001e18:	4a1f      	ldr	r2, [pc, #124]	; (8001e98 <HAL_ADC_MspInit+0x1c8>)
 8001e1a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <HAL_ADC_MspInit+0x1c4>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e22:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <HAL_ADC_MspInit+0x1c4>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001e28:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <HAL_ADC_MspInit+0x1c4>)
 8001e2a:	2280      	movs	r2, #128	; 0x80
 8001e2c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e2e:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <HAL_ADC_MspInit+0x1c4>)
 8001e30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e34:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e36:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <HAL_ADC_MspInit+0x1c4>)
 8001e38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e3c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <HAL_ADC_MspInit+0x1c4>)
 8001e40:	2220      	movs	r2, #32
 8001e42:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001e44:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <HAL_ADC_MspInit+0x1c4>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001e4a:	4812      	ldr	r0, [pc, #72]	; (8001e94 <HAL_ADC_MspInit+0x1c4>)
 8001e4c:	f002 fa6b 	bl	8004326 <HAL_DMA_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_ADC_MspInit+0x18a>
      Error_Handler();
 8001e56:	f7ff ff13 	bl	8001c80 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	; (8001e94 <HAL_ADC_MspInit+0x1c4>)
 8001e5e:	639a      	str	r2, [r3, #56]	; 0x38
 8001e60:	4a0c      	ldr	r2, [pc, #48]	; (8001e94 <HAL_ADC_MspInit+0x1c4>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2100      	movs	r1, #0
 8001e6a:	2012      	movs	r0, #18
 8001e6c:	f001 ffa1 	bl	8003db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001e70:	2012      	movs	r0, #18
 8001e72:	f001 ffba 	bl	8003dea <HAL_NVIC_EnableIRQ>
}
 8001e76:	bf00      	nop
 8001e78:	3730      	adds	r7, #48	; 0x30
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000c18 	.word	0x20000c18
 8001e84:	40021000 	.word	0x40021000
 8001e88:	20000d20 	.word	0x20000d20
 8001e8c:	40020008 	.word	0x40020008
 8001e90:	50000100 	.word	0x50000100
 8001e94:	2000d184 	.word	0x2000d184
 8001e98:	40020408 	.word	0x40020408

08001e9c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08a      	sub	sp, #40	; 0x28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a31      	ldr	r2, [pc, #196]	; (8001f80 <HAL_DAC_MspInit+0xe4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d15b      	bne.n	8001f76 <HAL_DAC_MspInit+0xda>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001ebe:	4b31      	ldr	r3, [pc, #196]	; (8001f84 <HAL_DAC_MspInit+0xe8>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	4a30      	ldr	r2, [pc, #192]	; (8001f84 <HAL_DAC_MspInit+0xe8>)
 8001ec4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ec8:	61d3      	str	r3, [r2, #28]
 8001eca:	4b2e      	ldr	r3, [pc, #184]	; (8001f84 <HAL_DAC_MspInit+0xe8>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed6:	4b2b      	ldr	r3, [pc, #172]	; (8001f84 <HAL_DAC_MspInit+0xe8>)
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	4a2a      	ldr	r2, [pc, #168]	; (8001f84 <HAL_DAC_MspInit+0xe8>)
 8001edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee0:	6153      	str	r3, [r2, #20]
 8001ee2:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <HAL_DAC_MspInit+0xe8>)
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001eee:	2310      	movs	r3, #16
 8001ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f04:	f002 fbfc 	bl	8004700 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8001f08:	4b1f      	ldr	r3, [pc, #124]	; (8001f88 <HAL_DAC_MspInit+0xec>)
 8001f0a:	4a20      	ldr	r2, [pc, #128]	; (8001f8c <HAL_DAC_MspInit+0xf0>)
 8001f0c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f0e:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <HAL_DAC_MspInit+0xec>)
 8001f10:	2210      	movs	r2, #16
 8001f12:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f14:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <HAL_DAC_MspInit+0xec>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f1a:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <HAL_DAC_MspInit+0xec>)
 8001f1c:	2280      	movs	r2, #128	; 0x80
 8001f1e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <HAL_DAC_MspInit+0xec>)
 8001f22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f26:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f28:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <HAL_DAC_MspInit+0xec>)
 8001f2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f2e:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001f30:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <HAL_DAC_MspInit+0xec>)
 8001f32:	2220      	movs	r2, #32
 8001f34:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001f36:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <HAL_DAC_MspInit+0xec>)
 8001f38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f3c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001f3e:	4812      	ldr	r0, [pc, #72]	; (8001f88 <HAL_DAC_MspInit+0xec>)
 8001f40:	f002 f9f1 	bl	8004326 <HAL_DMA_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8001f4a:	f7ff fe99 	bl	8001c80 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <HAL_DAC_MspInit+0xf4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a0f      	ldr	r2, [pc, #60]	; (8001f90 <HAL_DAC_MspInit+0xf4>)
 8001f54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f58:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <HAL_DAC_MspInit+0xec>)
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	4a09      	ldr	r2, [pc, #36]	; (8001f88 <HAL_DAC_MspInit+0xec>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6253      	str	r3, [r2, #36]	; 0x24

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2036      	movs	r0, #54	; 0x36
 8001f6c:	f001 ff21 	bl	8003db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f70:	2036      	movs	r0, #54	; 0x36
 8001f72:	f001 ff3a 	bl	8003dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001f76:	bf00      	nop
 8001f78:	3728      	adds	r7, #40	; 0x28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40007400 	.word	0x40007400
 8001f84:	40021000 	.word	0x40021000
 8001f88:	20000c8c 	.word	0x20000c8c
 8001f8c:	40020030 	.word	0x40020030
 8001f90:	40010000 	.word	0x40010000

08001f94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa4:	d113      	bne.n	8001fce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <HAL_TIM_Base_MspInit+0x44>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	4a0b      	ldr	r2, [pc, #44]	; (8001fd8 <HAL_TIM_Base_MspInit+0x44>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	61d3      	str	r3, [r2, #28]
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_TIM_Base_MspInit+0x44>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	201c      	movs	r0, #28
 8001fc4:	f001 fef5 	bl	8003db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fc8:	201c      	movs	r0, #28
 8001fca:	f001 ff0e 	bl	8003dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000

08001fdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08a      	sub	sp, #40	; 0x28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a17      	ldr	r2, [pc, #92]	; (8002058 <HAL_UART_MspInit+0x7c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d128      	bne.n	8002050 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ffe:	4b17      	ldr	r3, [pc, #92]	; (800205c <HAL_UART_MspInit+0x80>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	4a16      	ldr	r2, [pc, #88]	; (800205c <HAL_UART_MspInit+0x80>)
 8002004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002008:	61d3      	str	r3, [r2, #28]
 800200a:	4b14      	ldr	r3, [pc, #80]	; (800205c <HAL_UART_MspInit+0x80>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002016:	4b11      	ldr	r3, [pc, #68]	; (800205c <HAL_UART_MspInit+0x80>)
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	4a10      	ldr	r2, [pc, #64]	; (800205c <HAL_UART_MspInit+0x80>)
 800201c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002020:	6153      	str	r3, [r2, #20]
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <HAL_UART_MspInit+0x80>)
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800202e:	230c      	movs	r3, #12
 8002030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002032:	2302      	movs	r3, #2
 8002034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800203e:	2307      	movs	r3, #7
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800204c:	f002 fb58 	bl	8004700 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002050:	bf00      	nop
 8002052:	3728      	adds	r7, #40	; 0x28
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40004400 	.word	0x40004400
 800205c:	40021000 	.word	0x40021000

08002060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002064:	e7fe      	b.n	8002064 <NMI_Handler+0x4>
	...

08002068 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printStr("Error: Hard fault");
 800206c:	4801      	ldr	r0, [pc, #4]	; (8002074 <HardFault_Handler+0xc>)
 800206e:	f7fe fd75 	bl	8000b5c <printStr>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002072:	e7fe      	b.n	8002072 <HardFault_Handler+0xa>
 8002074:	080094c0 	.word	0x080094c0

08002078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800207c:	e7fe      	b.n	800207c <MemManage_Handler+0x4>
	...

08002080 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  printStr("Error: Bus fault");
 8002084:	4801      	ldr	r0, [pc, #4]	; (800208c <BusFault_Handler+0xc>)
 8002086:	f7fe fd69 	bl	8000b5c <printStr>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800208a:	e7fe      	b.n	800208a <BusFault_Handler+0xa>
 800208c:	080094d4 	.word	0x080094d4

08002090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  printStr("Error: Usage fault");
 8002094:	4801      	ldr	r0, [pc, #4]	; (800209c <UsageFault_Handler+0xc>)
 8002096:	f7fe fd61 	bl	8000b5c <printStr>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800209a:	e7fe      	b.n	800209a <UsageFault_Handler+0xa>
 800209c:	080094e8 	.word	0x080094e8

080020a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ce:	f000 f8fb 	bl	80022c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020dc:	4802      	ldr	r0, [pc, #8]	; (80020e8 <DMA1_Channel1_IRQHandler+0x10>)
 80020de:	f002 fa01 	bl	80044e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000d20 	.word	0x20000d20

080020ec <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80020f0:	4802      	ldr	r0, [pc, #8]	; (80020fc <DMA1_Channel3_IRQHandler+0x10>)
 80020f2:	f002 f9f7 	bl	80044e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000c8c 	.word	0x20000c8c

08002100 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002104:	4803      	ldr	r0, [pc, #12]	; (8002114 <ADC1_2_IRQHandler+0x14>)
 8002106:	f000 fc95 	bl	8002a34 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800210a:	4803      	ldr	r0, [pc, #12]	; (8002118 <ADC1_2_IRQHandler+0x18>)
 800210c:	f000 fc92 	bl	8002a34 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000cd0 	.word	0x20000cd0
 8002118:	20000c3c 	.word	0x20000c3c

0800211c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002120:	4802      	ldr	r0, [pc, #8]	; (800212c <TIM2_IRQHandler+0x10>)
 8002122:	f004 f8b9 	bl	8006298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	2000d0b4 	.word	0x2000d0b4

08002130 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8002134:	4802      	ldr	r0, [pc, #8]	; (8002140 <TIM6_DAC_IRQHandler+0x10>)
 8002136:	f001 ffbb 	bl	80040b0 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000c28 	.word	0x20000c28

08002144 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <DMA2_Channel1_IRQHandler+0x10>)
 800214a:	f002 f9cb 	bl	80044e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	2000d184 	.word	0x2000d184

08002158 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002160:	4a14      	ldr	r2, [pc, #80]	; (80021b4 <_sbrk+0x5c>)
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <_sbrk+0x60>)
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800216c:	4b13      	ldr	r3, [pc, #76]	; (80021bc <_sbrk+0x64>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d102      	bne.n	800217a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <_sbrk+0x64>)
 8002176:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <_sbrk+0x68>)
 8002178:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <_sbrk+0x64>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	429a      	cmp	r2, r3
 8002186:	d207      	bcs.n	8002198 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002188:	f005 f962 	bl	8007450 <__errno>
 800218c:	4602      	mov	r2, r0
 800218e:	230c      	movs	r3, #12
 8002190:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002192:	f04f 33ff 	mov.w	r3, #4294967295
 8002196:	e009      	b.n	80021ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002198:	4b08      	ldr	r3, [pc, #32]	; (80021bc <_sbrk+0x64>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800219e:	4b07      	ldr	r3, [pc, #28]	; (80021bc <_sbrk+0x64>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	4a05      	ldr	r2, [pc, #20]	; (80021bc <_sbrk+0x64>)
 80021a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021aa:	68fb      	ldr	r3, [r7, #12]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20010000 	.word	0x20010000
 80021b8:	00000400 	.word	0x00000400
 80021bc:	20000c1c 	.word	0x20000c1c
 80021c0:	2000d1d0 	.word	0x2000d1d0

080021c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <SystemInit+0x20>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ce:	4a05      	ldr	r2, [pc, #20]	; (80021e4 <SystemInit+0x20>)
 80021d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002220 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021ec:	480d      	ldr	r0, [pc, #52]	; (8002224 <LoopForever+0x6>)
  ldr r1, =_edata
 80021ee:	490e      	ldr	r1, [pc, #56]	; (8002228 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021f0:	4a0e      	ldr	r2, [pc, #56]	; (800222c <LoopForever+0xe>)
  movs r3, #0
 80021f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f4:	e002      	b.n	80021fc <LoopCopyDataInit>

080021f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021fa:	3304      	adds	r3, #4

080021fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002200:	d3f9      	bcc.n	80021f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002202:	4a0b      	ldr	r2, [pc, #44]	; (8002230 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002204:	4c0b      	ldr	r4, [pc, #44]	; (8002234 <LoopForever+0x16>)
  movs r3, #0
 8002206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002208:	e001      	b.n	800220e <LoopFillZerobss>

0800220a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800220a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800220c:	3204      	adds	r2, #4

0800220e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800220e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002210:	d3fb      	bcc.n	800220a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002212:	f7ff ffd7 	bl	80021c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002216:	f005 f921 	bl	800745c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800221a:	f7ff f8e1 	bl	80013e0 <main>

0800221e <LoopForever>:

LoopForever:
    b LoopForever
 800221e:	e7fe      	b.n	800221e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002220:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002228:	20000bec 	.word	0x20000bec
  ldr r2, =_sidata
 800222c:	080097c8 	.word	0x080097c8
  ldr r2, =_sbss
 8002230:	20000bec 	.word	0x20000bec
  ldr r4, =_ebss
 8002234:	2000d1d0 	.word	0x2000d1d0

08002238 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002238:	e7fe      	b.n	8002238 <ADC3_IRQHandler>
	...

0800223c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002240:	4b08      	ldr	r3, [pc, #32]	; (8002264 <HAL_Init+0x28>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a07      	ldr	r2, [pc, #28]	; (8002264 <HAL_Init+0x28>)
 8002246:	f043 0310 	orr.w	r3, r3, #16
 800224a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800224c:	2003      	movs	r0, #3
 800224e:	f001 fda5 	bl	8003d9c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002252:	2000      	movs	r0, #0
 8002254:	f000 f808 	bl	8002268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002258:	f7ff fd16 	bl	8001c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40022000 	.word	0x40022000

08002268 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002270:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_InitTick+0x54>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <HAL_InitTick+0x58>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	4619      	mov	r1, r3
 800227a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800227e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002282:	fbb2 f3f3 	udiv	r3, r2, r3
 8002286:	4618      	mov	r0, r3
 8002288:	f001 fdbd 	bl	8003e06 <HAL_SYSTICK_Config>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e00e      	b.n	80022b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b0f      	cmp	r3, #15
 800229a:	d80a      	bhi.n	80022b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800229c:	2200      	movs	r2, #0
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	f04f 30ff 	mov.w	r0, #4294967295
 80022a4:	f001 fd85 	bl	8003db2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022a8:	4a06      	ldr	r2, [pc, #24]	; (80022c4 <HAL_InitTick+0x5c>)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	e000      	b.n	80022b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20000a10 	.word	0x20000a10
 80022c0:	20000a18 	.word	0x20000a18
 80022c4:	20000a14 	.word	0x20000a14

080022c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_IncTick+0x20>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_IncTick+0x24>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4413      	add	r3, r2
 80022d8:	4a04      	ldr	r2, [pc, #16]	; (80022ec <HAL_IncTick+0x24>)
 80022da:	6013      	str	r3, [r2, #0]
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000a18 	.word	0x20000a18
 80022ec:	2000d1c8 	.word	0x2000d1c8

080022f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80022f4:	4b03      	ldr	r3, [pc, #12]	; (8002304 <HAL_GetTick+0x14>)
 80022f6:	681b      	ldr	r3, [r3, #0]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	2000d1c8 	.word	0x2000d1c8

08002308 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b09a      	sub	sp, #104	; 0x68
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e1e3      	b.n	800272c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	2b00      	cmp	r3, #0
 8002374:	d176      	bne.n	8002464 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	2b00      	cmp	r3, #0
 800237c:	d152      	bne.n	8002424 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff fc99 	bl	8001cd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d13b      	bne.n	8002424 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f001 fb17 	bl	80039e0 <ADC_Disable>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	f003 0310 	and.w	r3, r3, #16
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d12f      	bne.n	8002424 <HAL_ADC_Init+0xe0>
 80023c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d12b      	bne.n	8002424 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023d4:	f023 0302 	bic.w	r3, r3, #2
 80023d8:	f043 0202 	orr.w	r2, r3, #2
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023ee:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023fe:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002400:	4b92      	ldr	r3, [pc, #584]	; (800264c <HAL_ADC_Init+0x308>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a92      	ldr	r2, [pc, #584]	; (8002650 <HAL_ADC_Init+0x30c>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	0c9a      	lsrs	r2, r3, #18
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002416:	e002      	b.n	800241e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	3b01      	subs	r3, #1
 800241c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f9      	bne.n	8002418 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d007      	beq.n	8002442 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800243c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002440:	d110      	bne.n	8002464 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f023 0312 	bic.w	r3, r3, #18
 800244a:	f043 0210 	orr.w	r2, r3, #16
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	f043 0201 	orr.w	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	f003 0310 	and.w	r3, r3, #16
 800246c:	2b00      	cmp	r3, #0
 800246e:	f040 8150 	bne.w	8002712 <HAL_ADC_Init+0x3ce>
 8002472:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002476:	2b00      	cmp	r3, #0
 8002478:	f040 814b 	bne.w	8002712 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002486:	2b00      	cmp	r3, #0
 8002488:	f040 8143 	bne.w	8002712 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002494:	f043 0202 	orr.w	r2, r3, #2
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024a4:	d004      	beq.n	80024b0 <HAL_ADC_Init+0x16c>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a6a      	ldr	r2, [pc, #424]	; (8002654 <HAL_ADC_Init+0x310>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d101      	bne.n	80024b4 <HAL_ADC_Init+0x170>
 80024b0:	4b69      	ldr	r3, [pc, #420]	; (8002658 <HAL_ADC_Init+0x314>)
 80024b2:	e000      	b.n	80024b6 <HAL_ADC_Init+0x172>
 80024b4:	4b69      	ldr	r3, [pc, #420]	; (800265c <HAL_ADC_Init+0x318>)
 80024b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024c0:	d102      	bne.n	80024c8 <HAL_ADC_Init+0x184>
 80024c2:	4b64      	ldr	r3, [pc, #400]	; (8002654 <HAL_ADC_Init+0x310>)
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	e01a      	b.n	80024fe <HAL_ADC_Init+0x1ba>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a61      	ldr	r2, [pc, #388]	; (8002654 <HAL_ADC_Init+0x310>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d103      	bne.n	80024da <HAL_ADC_Init+0x196>
 80024d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	e011      	b.n	80024fe <HAL_ADC_Init+0x1ba>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a60      	ldr	r2, [pc, #384]	; (8002660 <HAL_ADC_Init+0x31c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d102      	bne.n	80024ea <HAL_ADC_Init+0x1a6>
 80024e4:	4b5f      	ldr	r3, [pc, #380]	; (8002664 <HAL_ADC_Init+0x320>)
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	e009      	b.n	80024fe <HAL_ADC_Init+0x1ba>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a5d      	ldr	r2, [pc, #372]	; (8002664 <HAL_ADC_Init+0x320>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d102      	bne.n	80024fa <HAL_ADC_Init+0x1b6>
 80024f4:	4b5a      	ldr	r3, [pc, #360]	; (8002660 <HAL_ADC_Init+0x31c>)
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	e001      	b.n	80024fe <HAL_ADC_Init+0x1ba>
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	2b01      	cmp	r3, #1
 800250a:	d108      	bne.n	800251e <HAL_ADC_Init+0x1da>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_ADC_Init+0x1da>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <HAL_ADC_Init+0x1dc>
 800251e:	2300      	movs	r3, #0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d11c      	bne.n	800255e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002524:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002526:	2b00      	cmp	r3, #0
 8002528:	d010      	beq.n	800254c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d107      	bne.n	8002546 <HAL_ADC_Init+0x202>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_ADC_Init+0x202>
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <HAL_ADC_Init+0x204>
 8002546:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002548:	2b00      	cmp	r3, #0
 800254a:	d108      	bne.n	800255e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800254c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	431a      	orrs	r2, r3
 800255a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800255c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	7e5b      	ldrb	r3, [r3, #25]
 8002562:	035b      	lsls	r3, r3, #13
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002568:	2a01      	cmp	r2, #1
 800256a:	d002      	beq.n	8002572 <HAL_ADC_Init+0x22e>
 800256c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002570:	e000      	b.n	8002574 <HAL_ADC_Init+0x230>
 8002572:	2200      	movs	r2, #0
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	4313      	orrs	r3, r2
 8002582:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002584:	4313      	orrs	r3, r2
 8002586:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d11b      	bne.n	80025ca <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	7e5b      	ldrb	r3, [r3, #25]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	3b01      	subs	r3, #1
 80025a0:	045a      	lsls	r2, r3, #17
 80025a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025aa:	663b      	str	r3, [r7, #96]	; 0x60
 80025ac:	e00d      	b.n	80025ca <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80025b6:	f043 0220 	orr.w	r2, r3, #32
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	f043 0201 	orr.w	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d054      	beq.n	800267c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a22      	ldr	r2, [pc, #136]	; (8002660 <HAL_ADC_Init+0x31c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d004      	beq.n	80025e6 <HAL_ADC_Init+0x2a2>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a20      	ldr	r2, [pc, #128]	; (8002664 <HAL_ADC_Init+0x320>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d140      	bne.n	8002668 <HAL_ADC_Init+0x324>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ea:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80025ee:	d02a      	beq.n	8002646 <HAL_ADC_Init+0x302>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025f8:	d022      	beq.n	8002640 <HAL_ADC_Init+0x2fc>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fe:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002602:	d01a      	beq.n	800263a <HAL_ADC_Init+0x2f6>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002608:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 800260c:	d012      	beq.n	8002634 <HAL_ADC_Init+0x2f0>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002612:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002616:	d00a      	beq.n	800262e <HAL_ADC_Init+0x2ea>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002620:	d002      	beq.n	8002628 <HAL_ADC_Init+0x2e4>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002626:	e023      	b.n	8002670 <HAL_ADC_Init+0x32c>
 8002628:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800262c:	e020      	b.n	8002670 <HAL_ADC_Init+0x32c>
 800262e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002632:	e01d      	b.n	8002670 <HAL_ADC_Init+0x32c>
 8002634:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002638:	e01a      	b.n	8002670 <HAL_ADC_Init+0x32c>
 800263a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800263e:	e017      	b.n	8002670 <HAL_ADC_Init+0x32c>
 8002640:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002644:	e014      	b.n	8002670 <HAL_ADC_Init+0x32c>
 8002646:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800264a:	e011      	b.n	8002670 <HAL_ADC_Init+0x32c>
 800264c:	20000a10 	.word	0x20000a10
 8002650:	431bde83 	.word	0x431bde83
 8002654:	50000100 	.word	0x50000100
 8002658:	50000300 	.word	0x50000300
 800265c:	50000700 	.word	0x50000700
 8002660:	50000400 	.word	0x50000400
 8002664:	50000500 	.word	0x50000500
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002674:	4313      	orrs	r3, r2
 8002676:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002678:	4313      	orrs	r3, r2
 800267a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b00      	cmp	r3, #0
 8002688:	d114      	bne.n	80026b4 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002698:	f023 0302 	bic.w	r3, r3, #2
 800269c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	7e1b      	ldrb	r3, [r3, #24]
 80026a2:	039a      	lsls	r2, r3, #14
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4313      	orrs	r3, r2
 80026ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026b0:	4313      	orrs	r3, r2
 80026b2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	4b1e      	ldr	r3, [pc, #120]	; (8002734 <HAL_ADC_Init+0x3f0>)
 80026bc:	4013      	ands	r3, r2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80026c4:	430b      	orrs	r3, r1
 80026c6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d10c      	bne.n	80026ea <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f023 010f 	bic.w	r1, r3, #15
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	1e5a      	subs	r2, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
 80026e8:	e007      	b.n	80026fa <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 020f 	bic.w	r2, r2, #15
 80026f8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	f023 0303 	bic.w	r3, r3, #3
 8002708:	f043 0201 	orr.w	r2, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	641a      	str	r2, [r3, #64]	; 0x40
 8002710:	e00a      	b.n	8002728 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f023 0312 	bic.w	r3, r3, #18
 800271a:	f043 0210 	orr.w	r2, r3, #16
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002722:	2301      	movs	r3, #1
 8002724:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002728:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800272c:	4618      	mov	r0, r3
 800272e:	3768      	adds	r7, #104	; 0x68
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	fff0c007 	.word	0xfff0c007

08002738 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b00      	cmp	r3, #0
 8002754:	f040 80f7 	bne.w	8002946 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_ADC_Start_DMA+0x2e>
 8002762:	2302      	movs	r3, #2
 8002764:	e0f2      	b.n	800294c <HAL_ADC_Start_DMA+0x214>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002776:	d004      	beq.n	8002782 <HAL_ADC_Start_DMA+0x4a>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a75      	ldr	r2, [pc, #468]	; (8002954 <HAL_ADC_Start_DMA+0x21c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d109      	bne.n	8002796 <HAL_ADC_Start_DMA+0x5e>
 8002782:	4b75      	ldr	r3, [pc, #468]	; (8002958 <HAL_ADC_Start_DMA+0x220>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 031f 	and.w	r3, r3, #31
 800278a:	2b00      	cmp	r3, #0
 800278c:	bf0c      	ite	eq
 800278e:	2301      	moveq	r3, #1
 8002790:	2300      	movne	r3, #0
 8002792:	b2db      	uxtb	r3, r3
 8002794:	e008      	b.n	80027a8 <HAL_ADC_Start_DMA+0x70>
 8002796:	4b71      	ldr	r3, [pc, #452]	; (800295c <HAL_ADC_Start_DMA+0x224>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	2b00      	cmp	r3, #0
 80027a0:	bf0c      	ite	eq
 80027a2:	2301      	moveq	r3, #1
 80027a4:	2300      	movne	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80c5 	beq.w	8002938 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f001 f8b8 	bl	8003924 <ADC_Enable>
 80027b4:	4603      	mov	r3, r0
 80027b6:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80027b8:	7dfb      	ldrb	r3, [r7, #23]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f040 80b7 	bne.w	800292e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027dc:	d004      	beq.n	80027e8 <HAL_ADC_Start_DMA+0xb0>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a5c      	ldr	r2, [pc, #368]	; (8002954 <HAL_ADC_Start_DMA+0x21c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d106      	bne.n	80027f6 <HAL_ADC_Start_DMA+0xbe>
 80027e8:	4b5b      	ldr	r3, [pc, #364]	; (8002958 <HAL_ADC_Start_DMA+0x220>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d010      	beq.n	8002816 <HAL_ADC_Start_DMA+0xde>
 80027f4:	e005      	b.n	8002802 <HAL_ADC_Start_DMA+0xca>
 80027f6:	4b59      	ldr	r3, [pc, #356]	; (800295c <HAL_ADC_Start_DMA+0x224>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 031f 	and.w	r3, r3, #31
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_ADC_Start_DMA+0xde>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800280a:	d004      	beq.n	8002816 <HAL_ADC_Start_DMA+0xde>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a53      	ldr	r2, [pc, #332]	; (8002960 <HAL_ADC_Start_DMA+0x228>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d115      	bne.n	8002842 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d036      	beq.n	800289e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002838:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002840:	e02d      	b.n	800289e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002856:	d004      	beq.n	8002862 <HAL_ADC_Start_DMA+0x12a>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a3d      	ldr	r2, [pc, #244]	; (8002954 <HAL_ADC_Start_DMA+0x21c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d10a      	bne.n	8002878 <HAL_ADC_Start_DMA+0x140>
 8002862:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	bf14      	ite	ne
 8002870:	2301      	movne	r3, #1
 8002872:	2300      	moveq	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	e008      	b.n	800288a <HAL_ADC_Start_DMA+0x152>
 8002878:	4b39      	ldr	r3, [pc, #228]	; (8002960 <HAL_ADC_Start_DMA+0x228>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf14      	ite	ne
 8002884:	2301      	movne	r3, #1
 8002886:	2300      	moveq	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002896:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028aa:	d106      	bne.n	80028ba <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b0:	f023 0206 	bic.w	r2, r3, #6
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	645a      	str	r2, [r3, #68]	; 0x44
 80028b8:	e002      	b.n	80028c0 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028cc:	4a25      	ldr	r2, [pc, #148]	; (8002964 <HAL_ADC_Start_DMA+0x22c>)
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d4:	4a24      	ldr	r2, [pc, #144]	; (8002968 <HAL_ADC_Start_DMA+0x230>)
 80028d6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028dc:	4a23      	ldr	r2, [pc, #140]	; (800296c <HAL_ADC_Start_DMA+0x234>)
 80028de:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	221c      	movs	r2, #28
 80028e6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0210 	orr.w	r2, r2, #16
 80028f6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3340      	adds	r3, #64	; 0x40
 8002912:	4619      	mov	r1, r3
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f001 fd4c 	bl	80043b4 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0204 	orr.w	r2, r2, #4
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	e00d      	b.n	800294a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002936:	e008      	b.n	800294a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002944:	e001      	b.n	800294a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002946:	2302      	movs	r3, #2
 8002948:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800294a:	7dfb      	ldrb	r3, [r7, #23]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	50000100 	.word	0x50000100
 8002958:	50000300 	.word	0x50000300
 800295c:	50000700 	.word	0x50000700
 8002960:	50000400 	.word	0x50000400
 8002964:	08003859 	.word	0x08003859
 8002968:	080038d3 	.word	0x080038d3
 800296c:	080038ef 	.word	0x080038ef

08002970 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002978:	2300      	movs	r3, #0
 800297a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002982:	2b01      	cmp	r3, #1
 8002984:	d101      	bne.n	800298a <HAL_ADC_Stop_DMA+0x1a>
 8002986:	2302      	movs	r3, #2
 8002988:	e050      	b.n	8002a2c <HAL_ADC_Stop_DMA+0xbc>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002992:	216c      	movs	r1, #108	; 0x6c
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f001 f883 	bl	8003aa0 <ADC_ConversionStop>
 800299a:	4603      	mov	r3, r0
 800299c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d13e      	bne.n	8002a22 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0201 	bic.w	r2, r2, #1
 80029b2:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d10f      	bne.n	80029e0 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c4:	4618      	mov	r0, r3
 80029c6:	f001 fd54 	bl	8004472 <HAL_DMA_Abort>
 80029ca:	4603      	mov	r3, r0
 80029cc:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0210 	bic.w	r2, r2, #16
 80029ee:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d105      	bne.n	8002a02 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fff2 	bl	80039e0 <ADC_Disable>
 80029fc:	4603      	mov	r3, r0
 80029fe:	73fb      	strb	r3, [r7, #15]
 8002a00:	e002      	b.n	8002a08 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 ffec 	bl	80039e0 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a16:	f023 0301 	bic.w	r3, r3, #1
 8002a1a:	f043 0201 	orr.w	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d106      	bne.n	8002a64 <HAL_ADC_IRQHandler+0x30>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d00f      	beq.n	8002a84 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	f040 80c0 	bne.w	8002bf4 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	f040 80b8 	bne.w	8002bf4 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d105      	bne.n	8002a9c <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa4:	d004      	beq.n	8002ab0 <HAL_ADC_IRQHandler+0x7c>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a95      	ldr	r2, [pc, #596]	; (8002d00 <HAL_ADC_IRQHandler+0x2cc>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d106      	bne.n	8002abe <HAL_ADC_IRQHandler+0x8a>
 8002ab0:	4b94      	ldr	r3, [pc, #592]	; (8002d04 <HAL_ADC_IRQHandler+0x2d0>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d03e      	beq.n	8002b3a <HAL_ADC_IRQHandler+0x106>
 8002abc:	e005      	b.n	8002aca <HAL_ADC_IRQHandler+0x96>
 8002abe:	4b92      	ldr	r3, [pc, #584]	; (8002d08 <HAL_ADC_IRQHandler+0x2d4>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d037      	beq.n	8002b3a <HAL_ADC_IRQHandler+0x106>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ad2:	d004      	beq.n	8002ade <HAL_ADC_IRQHandler+0xaa>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a89      	ldr	r2, [pc, #548]	; (8002d00 <HAL_ADC_IRQHandler+0x2cc>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d106      	bne.n	8002aec <HAL_ADC_IRQHandler+0xb8>
 8002ade:	4b89      	ldr	r3, [pc, #548]	; (8002d04 <HAL_ADC_IRQHandler+0x2d0>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	2b05      	cmp	r3, #5
 8002ae8:	d027      	beq.n	8002b3a <HAL_ADC_IRQHandler+0x106>
 8002aea:	e005      	b.n	8002af8 <HAL_ADC_IRQHandler+0xc4>
 8002aec:	4b86      	ldr	r3, [pc, #536]	; (8002d08 <HAL_ADC_IRQHandler+0x2d4>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	d020      	beq.n	8002b3a <HAL_ADC_IRQHandler+0x106>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b00:	d004      	beq.n	8002b0c <HAL_ADC_IRQHandler+0xd8>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a7e      	ldr	r2, [pc, #504]	; (8002d00 <HAL_ADC_IRQHandler+0x2cc>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d106      	bne.n	8002b1a <HAL_ADC_IRQHandler+0xe6>
 8002b0c:	4b7d      	ldr	r3, [pc, #500]	; (8002d04 <HAL_ADC_IRQHandler+0x2d0>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 031f 	and.w	r3, r3, #31
 8002b14:	2b09      	cmp	r3, #9
 8002b16:	d010      	beq.n	8002b3a <HAL_ADC_IRQHandler+0x106>
 8002b18:	e005      	b.n	8002b26 <HAL_ADC_IRQHandler+0xf2>
 8002b1a:	4b7b      	ldr	r3, [pc, #492]	; (8002d08 <HAL_ADC_IRQHandler+0x2d4>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 031f 	and.w	r3, r3, #31
 8002b22:	2b09      	cmp	r3, #9
 8002b24:	d009      	beq.n	8002b3a <HAL_ADC_IRQHandler+0x106>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b2e:	d004      	beq.n	8002b3a <HAL_ADC_IRQHandler+0x106>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a75      	ldr	r2, [pc, #468]	; (8002d0c <HAL_ADC_IRQHandler+0x2d8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d104      	bne.n	8002b44 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	e00f      	b.n	8002b64 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b4c:	d004      	beq.n	8002b58 <HAL_ADC_IRQHandler+0x124>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a6b      	ldr	r2, [pc, #428]	; (8002d00 <HAL_ADC_IRQHandler+0x2cc>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d102      	bne.n	8002b5e <HAL_ADC_IRQHandler+0x12a>
 8002b58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b5c:	e000      	b.n	8002b60 <HAL_ADC_IRQHandler+0x12c>
 8002b5e:	4b6b      	ldr	r3, [pc, #428]	; (8002d0c <HAL_ADC_IRQHandler+0x2d8>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d139      	bne.n	8002be6 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d134      	bne.n	8002be6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d12d      	bne.n	8002be6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d11a      	bne.n	8002bce <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 020c 	bic.w	r2, r2, #12
 8002ba6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d112      	bne.n	8002be6 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	f043 0201 	orr.w	r2, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40
 8002bcc:	e00b      	b.n	8002be6 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f043 0210 	orr.w	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	f043 0201 	orr.w	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fe fad6 	bl	8001198 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	220c      	movs	r2, #12
 8002bf2:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	2b20      	cmp	r3, #32
 8002c00:	d106      	bne.n	8002c10 <HAL_ADC_IRQHandler+0x1dc>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	d00f      	beq.n	8002c30 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002c1a:	2b40      	cmp	r3, #64	; 0x40
 8002c1c:	f040 813c 	bne.w	8002e98 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2a:	2b40      	cmp	r3, #64	; 0x40
 8002c2c:	f040 8134 	bne.w	8002e98 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c44:	d004      	beq.n	8002c50 <HAL_ADC_IRQHandler+0x21c>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a2d      	ldr	r2, [pc, #180]	; (8002d00 <HAL_ADC_IRQHandler+0x2cc>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d106      	bne.n	8002c5e <HAL_ADC_IRQHandler+0x22a>
 8002c50:	4b2c      	ldr	r3, [pc, #176]	; (8002d04 <HAL_ADC_IRQHandler+0x2d0>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d03e      	beq.n	8002cda <HAL_ADC_IRQHandler+0x2a6>
 8002c5c:	e005      	b.n	8002c6a <HAL_ADC_IRQHandler+0x236>
 8002c5e:	4b2a      	ldr	r3, [pc, #168]	; (8002d08 <HAL_ADC_IRQHandler+0x2d4>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 031f 	and.w	r3, r3, #31
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d037      	beq.n	8002cda <HAL_ADC_IRQHandler+0x2a6>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c72:	d004      	beq.n	8002c7e <HAL_ADC_IRQHandler+0x24a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a21      	ldr	r2, [pc, #132]	; (8002d00 <HAL_ADC_IRQHandler+0x2cc>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d106      	bne.n	8002c8c <HAL_ADC_IRQHandler+0x258>
 8002c7e:	4b21      	ldr	r3, [pc, #132]	; (8002d04 <HAL_ADC_IRQHandler+0x2d0>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	2b05      	cmp	r3, #5
 8002c88:	d027      	beq.n	8002cda <HAL_ADC_IRQHandler+0x2a6>
 8002c8a:	e005      	b.n	8002c98 <HAL_ADC_IRQHandler+0x264>
 8002c8c:	4b1e      	ldr	r3, [pc, #120]	; (8002d08 <HAL_ADC_IRQHandler+0x2d4>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	2b05      	cmp	r3, #5
 8002c96:	d020      	beq.n	8002cda <HAL_ADC_IRQHandler+0x2a6>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ca0:	d004      	beq.n	8002cac <HAL_ADC_IRQHandler+0x278>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a16      	ldr	r2, [pc, #88]	; (8002d00 <HAL_ADC_IRQHandler+0x2cc>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d106      	bne.n	8002cba <HAL_ADC_IRQHandler+0x286>
 8002cac:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <HAL_ADC_IRQHandler+0x2d0>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	2b09      	cmp	r3, #9
 8002cb6:	d010      	beq.n	8002cda <HAL_ADC_IRQHandler+0x2a6>
 8002cb8:	e005      	b.n	8002cc6 <HAL_ADC_IRQHandler+0x292>
 8002cba:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <HAL_ADC_IRQHandler+0x2d4>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 031f 	and.w	r3, r3, #31
 8002cc2:	2b09      	cmp	r3, #9
 8002cc4:	d009      	beq.n	8002cda <HAL_ADC_IRQHandler+0x2a6>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cce:	d004      	beq.n	8002cda <HAL_ADC_IRQHandler+0x2a6>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0d      	ldr	r2, [pc, #52]	; (8002d0c <HAL_ADC_IRQHandler+0x2d8>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d104      	bne.n	8002ce4 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	e018      	b.n	8002d16 <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cec:	d004      	beq.n	8002cf8 <HAL_ADC_IRQHandler+0x2c4>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a03      	ldr	r2, [pc, #12]	; (8002d00 <HAL_ADC_IRQHandler+0x2cc>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d10b      	bne.n	8002d10 <HAL_ADC_IRQHandler+0x2dc>
 8002cf8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002cfc:	e009      	b.n	8002d12 <HAL_ADC_IRQHandler+0x2de>
 8002cfe:	bf00      	nop
 8002d00:	50000100 	.word	0x50000100
 8002d04:	50000300 	.word	0x50000300
 8002d08:	50000700 	.word	0x50000700
 8002d0c:	50000400 	.word	0x50000400
 8002d10:	4b9d      	ldr	r3, [pc, #628]	; (8002f88 <HAL_ADC_IRQHandler+0x554>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f040 80b2 	bne.w	8002e8a <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00d      	beq.n	8002d4c <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f040 80a5 	bne.w	8002e8a <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f040 809f 	bne.w	8002e8a <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d56:	2b40      	cmp	r3, #64	; 0x40
 8002d58:	f040 8097 	bne.w	8002e8a <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d64:	d004      	beq.n	8002d70 <HAL_ADC_IRQHandler+0x33c>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a88      	ldr	r2, [pc, #544]	; (8002f8c <HAL_ADC_IRQHandler+0x558>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d106      	bne.n	8002d7e <HAL_ADC_IRQHandler+0x34a>
 8002d70:	4b87      	ldr	r3, [pc, #540]	; (8002f90 <HAL_ADC_IRQHandler+0x55c>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d03e      	beq.n	8002dfa <HAL_ADC_IRQHandler+0x3c6>
 8002d7c:	e005      	b.n	8002d8a <HAL_ADC_IRQHandler+0x356>
 8002d7e:	4b85      	ldr	r3, [pc, #532]	; (8002f94 <HAL_ADC_IRQHandler+0x560>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 031f 	and.w	r3, r3, #31
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d037      	beq.n	8002dfa <HAL_ADC_IRQHandler+0x3c6>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d92:	d004      	beq.n	8002d9e <HAL_ADC_IRQHandler+0x36a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a7c      	ldr	r2, [pc, #496]	; (8002f8c <HAL_ADC_IRQHandler+0x558>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d106      	bne.n	8002dac <HAL_ADC_IRQHandler+0x378>
 8002d9e:	4b7c      	ldr	r3, [pc, #496]	; (8002f90 <HAL_ADC_IRQHandler+0x55c>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 031f 	and.w	r3, r3, #31
 8002da6:	2b06      	cmp	r3, #6
 8002da8:	d027      	beq.n	8002dfa <HAL_ADC_IRQHandler+0x3c6>
 8002daa:	e005      	b.n	8002db8 <HAL_ADC_IRQHandler+0x384>
 8002dac:	4b79      	ldr	r3, [pc, #484]	; (8002f94 <HAL_ADC_IRQHandler+0x560>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	2b06      	cmp	r3, #6
 8002db6:	d020      	beq.n	8002dfa <HAL_ADC_IRQHandler+0x3c6>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dc0:	d004      	beq.n	8002dcc <HAL_ADC_IRQHandler+0x398>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a71      	ldr	r2, [pc, #452]	; (8002f8c <HAL_ADC_IRQHandler+0x558>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d106      	bne.n	8002dda <HAL_ADC_IRQHandler+0x3a6>
 8002dcc:	4b70      	ldr	r3, [pc, #448]	; (8002f90 <HAL_ADC_IRQHandler+0x55c>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	2b07      	cmp	r3, #7
 8002dd6:	d010      	beq.n	8002dfa <HAL_ADC_IRQHandler+0x3c6>
 8002dd8:	e005      	b.n	8002de6 <HAL_ADC_IRQHandler+0x3b2>
 8002dda:	4b6e      	ldr	r3, [pc, #440]	; (8002f94 <HAL_ADC_IRQHandler+0x560>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 031f 	and.w	r3, r3, #31
 8002de2:	2b07      	cmp	r3, #7
 8002de4:	d009      	beq.n	8002dfa <HAL_ADC_IRQHandler+0x3c6>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dee:	d004      	beq.n	8002dfa <HAL_ADC_IRQHandler+0x3c6>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a64      	ldr	r2, [pc, #400]	; (8002f88 <HAL_ADC_IRQHandler+0x554>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d104      	bne.n	8002e04 <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	e00f      	b.n	8002e24 <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e0c:	d004      	beq.n	8002e18 <HAL_ADC_IRQHandler+0x3e4>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a5e      	ldr	r2, [pc, #376]	; (8002f8c <HAL_ADC_IRQHandler+0x558>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d102      	bne.n	8002e1e <HAL_ADC_IRQHandler+0x3ea>
 8002e18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e1c:	e000      	b.n	8002e20 <HAL_ADC_IRQHandler+0x3ec>
 8002e1e:	4b5a      	ldr	r3, [pc, #360]	; (8002f88 <HAL_ADC_IRQHandler+0x554>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d12d      	bne.n	8002e8a <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d11a      	bne.n	8002e72 <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e4a:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d112      	bne.n	8002e8a <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	f043 0201 	orr.w	r2, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40
 8002e70:	e00b      	b.n	8002e8a <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	f043 0210 	orr.w	r2, r3, #16
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e82:	f043 0201 	orr.w	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f8de 	bl	800304c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2260      	movs	r2, #96	; 0x60
 8002e96:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea2:	2b80      	cmp	r3, #128	; 0x80
 8002ea4:	d113      	bne.n	8002ece <HAL_ADC_IRQHandler+0x49a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb0:	2b80      	cmp	r3, #128	; 0x80
 8002eb2:	d10c      	bne.n	8002ece <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7ff fa2b 	bl	800231c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2280      	movs	r2, #128	; 0x80
 8002ecc:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002edc:	d115      	bne.n	8002f0a <HAL_ADC_IRQHandler+0x4d6>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eec:	d10d      	bne.n	8002f0a <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f8ba 	bl	8003074 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f08:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f18:	d115      	bne.n	8002f46 <HAL_ADC_IRQHandler+0x512>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f28:	d10d      	bne.n	8002f46 <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f8a6 	bl	8003088 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f44:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b10      	cmp	r3, #16
 8002f52:	d151      	bne.n	8002ff8 <HAL_ADC_IRQHandler+0x5c4>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	2b10      	cmp	r3, #16
 8002f60:	d14a      	bne.n	8002ff8 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d102      	bne.n	8002f70 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	e02d      	b.n	8002fcc <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f78:	d004      	beq.n	8002f84 <HAL_ADC_IRQHandler+0x550>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a03      	ldr	r2, [pc, #12]	; (8002f8c <HAL_ADC_IRQHandler+0x558>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d109      	bne.n	8002f98 <HAL_ADC_IRQHandler+0x564>
 8002f84:	4b02      	ldr	r3, [pc, #8]	; (8002f90 <HAL_ADC_IRQHandler+0x55c>)
 8002f86:	e008      	b.n	8002f9a <HAL_ADC_IRQHandler+0x566>
 8002f88:	50000400 	.word	0x50000400
 8002f8c:	50000100 	.word	0x50000100
 8002f90:	50000300 	.word	0x50000300
 8002f94:	50000700 	.word	0x50000700
 8002f98:	4b2b      	ldr	r3, [pc, #172]	; (8003048 <HAL_ADC_IRQHandler+0x614>)
 8002f9a:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d109      	bne.n	8002fbc <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d10a      	bne.n	8002fcc <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	e007      	b.n	8002fcc <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8002fc8:	2301      	movs	r3, #1
 8002fca:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d10e      	bne.n	8002ff0 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	f043 0202 	orr.w	r2, r3, #2
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff f9a0 	bl	8002330 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2210      	movs	r2, #16
 8002ff6:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003006:	d11b      	bne.n	8003040 <HAL_ADC_IRQHandler+0x60c>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003016:	d113      	bne.n	8003040 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003028:	f043 0208 	orr.w	r2, r3, #8
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003038:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f810 	bl	8003060 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8003040:	bf00      	nop
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	50000700 	.word	0x50000700

0800304c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800309c:	b480      	push	{r7}
 800309e:	b09b      	sub	sp, #108	; 0x6c
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_ADC_ConfigChannel+0x22>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e2cb      	b.n	8003656 <HAL_ADC_ConfigChannel+0x5ba>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f040 82af 	bne.w	8003634 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d81c      	bhi.n	8003118 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	4413      	add	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	461a      	mov	r2, r3
 80030f2:	231f      	movs	r3, #31
 80030f4:	4093      	lsls	r3, r2
 80030f6:	43db      	mvns	r3, r3
 80030f8:	4019      	ands	r1, r3
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	4413      	add	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	fa00 f203 	lsl.w	r2, r0, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	631a      	str	r2, [r3, #48]	; 0x30
 8003116:	e063      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b09      	cmp	r3, #9
 800311e:	d81e      	bhi.n	800315e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	4413      	add	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	3b1e      	subs	r3, #30
 8003134:	221f      	movs	r2, #31
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	4019      	ands	r1, r3
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	4413      	add	r3, r2
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	3b1e      	subs	r3, #30
 8003150:	fa00 f203 	lsl.w	r2, r0, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	635a      	str	r2, [r3, #52]	; 0x34
 800315c:	e040      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b0e      	cmp	r3, #14
 8003164:	d81e      	bhi.n	80031a4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	3b3c      	subs	r3, #60	; 0x3c
 800317a:	221f      	movs	r2, #31
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	4019      	ands	r1, r3
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	3b3c      	subs	r3, #60	; 0x3c
 8003196:	fa00 f203 	lsl.w	r2, r0, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	639a      	str	r2, [r3, #56]	; 0x38
 80031a2:	e01d      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	4413      	add	r3, r2
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	3b5a      	subs	r3, #90	; 0x5a
 80031b8:	221f      	movs	r2, #31
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	4019      	ands	r1, r3
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4413      	add	r3, r2
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	3b5a      	subs	r3, #90	; 0x5a
 80031d4:	fa00 f203 	lsl.w	r2, r0, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f040 80e5 	bne.w	80033ba <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b09      	cmp	r3, #9
 80031f6:	d91c      	bls.n	8003232 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6999      	ldr	r1, [r3, #24]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4613      	mov	r3, r2
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4413      	add	r3, r2
 8003208:	3b1e      	subs	r3, #30
 800320a:	2207      	movs	r2, #7
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	4019      	ands	r1, r3
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	6898      	ldr	r0, [r3, #8]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	4613      	mov	r3, r2
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	4413      	add	r3, r2
 8003222:	3b1e      	subs	r3, #30
 8003224:	fa00 f203 	lsl.w	r2, r0, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	619a      	str	r2, [r3, #24]
 8003230:	e019      	b.n	8003266 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6959      	ldr	r1, [r3, #20]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4613      	mov	r3, r2
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	4413      	add	r3, r2
 8003242:	2207      	movs	r2, #7
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	4019      	ands	r1, r3
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	6898      	ldr	r0, [r3, #8]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4413      	add	r3, r2
 800325a:	fa00 f203 	lsl.w	r2, r0, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	08db      	lsrs	r3, r3, #3
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	3b01      	subs	r3, #1
 8003284:	2b03      	cmp	r3, #3
 8003286:	d84f      	bhi.n	8003328 <HAL_ADC_ConfigChannel+0x28c>
 8003288:	a201      	add	r2, pc, #4	; (adr r2, 8003290 <HAL_ADC_ConfigChannel+0x1f4>)
 800328a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328e:	bf00      	nop
 8003290:	080032a1 	.word	0x080032a1
 8003294:	080032c3 	.word	0x080032c3
 8003298:	080032e5 	.word	0x080032e5
 800329c:	08003307 	.word	0x08003307
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032a6:	4b9f      	ldr	r3, [pc, #636]	; (8003524 <HAL_ADC_ConfigChannel+0x488>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	0691      	lsls	r1, r2, #26
 80032b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032b2:	430a      	orrs	r2, r1
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80032be:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80032c0:	e07e      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80032c8:	4b96      	ldr	r3, [pc, #600]	; (8003524 <HAL_ADC_ConfigChannel+0x488>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	6812      	ldr	r2, [r2, #0]
 80032d0:	0691      	lsls	r1, r2, #26
 80032d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032d4:	430a      	orrs	r2, r1
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80032e0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80032e2:	e06d      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80032ea:	4b8e      	ldr	r3, [pc, #568]	; (8003524 <HAL_ADC_ConfigChannel+0x488>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	6812      	ldr	r2, [r2, #0]
 80032f2:	0691      	lsls	r1, r2, #26
 80032f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032f6:	430a      	orrs	r2, r1
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003302:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003304:	e05c      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800330c:	4b85      	ldr	r3, [pc, #532]	; (8003524 <HAL_ADC_ConfigChannel+0x488>)
 800330e:	4013      	ands	r3, r2
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	0691      	lsls	r1, r2, #26
 8003316:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003318:	430a      	orrs	r2, r1
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003324:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003326:	e04b      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800332e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	069b      	lsls	r3, r3, #26
 8003338:	429a      	cmp	r2, r3
 800333a:	d107      	bne.n	800334c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800334a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003352:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	069b      	lsls	r3, r3, #26
 800335c:	429a      	cmp	r2, r3
 800335e:	d107      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800336e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003376:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	069b      	lsls	r3, r3, #26
 8003380:	429a      	cmp	r2, r3
 8003382:	d107      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003392:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800339a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	069b      	lsls	r3, r3, #26
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d10a      	bne.n	80033be <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033b6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80033b8:	e001      	b.n	80033be <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80033ba:	bf00      	nop
 80033bc:	e000      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80033be:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d108      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x344>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x344>
 80033dc:	2301      	movs	r3, #1
 80033de:	e000      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x346>
 80033e0:	2300      	movs	r3, #0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f040 8131 	bne.w	800364a <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d00f      	beq.n	8003410 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2201      	movs	r2, #1
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43da      	mvns	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	400a      	ands	r2, r1
 800340a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800340e:	e049      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2201      	movs	r2, #1
 800341e:	409a      	lsls	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b09      	cmp	r3, #9
 8003430:	d91c      	bls.n	800346c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6999      	ldr	r1, [r3, #24]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4613      	mov	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4413      	add	r3, r2
 8003442:	3b1b      	subs	r3, #27
 8003444:	2207      	movs	r2, #7
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43db      	mvns	r3, r3
 800344c:	4019      	ands	r1, r3
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	6898      	ldr	r0, [r3, #8]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4613      	mov	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4413      	add	r3, r2
 800345c:	3b1b      	subs	r3, #27
 800345e:	fa00 f203 	lsl.w	r2, r0, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	619a      	str	r2, [r3, #24]
 800346a:	e01b      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6959      	ldr	r1, [r3, #20]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	4613      	mov	r3, r2
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	4413      	add	r3, r2
 800347e:	2207      	movs	r2, #7
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	4019      	ands	r1, r3
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	6898      	ldr	r0, [r3, #8]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	4613      	mov	r3, r2
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	4413      	add	r3, r2
 8003498:	fa00 f203 	lsl.w	r2, r0, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034ac:	d004      	beq.n	80034b8 <HAL_ADC_ConfigChannel+0x41c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1d      	ldr	r2, [pc, #116]	; (8003528 <HAL_ADC_ConfigChannel+0x48c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d101      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x420>
 80034b8:	4b1c      	ldr	r3, [pc, #112]	; (800352c <HAL_ADC_ConfigChannel+0x490>)
 80034ba:	e000      	b.n	80034be <HAL_ADC_ConfigChannel+0x422>
 80034bc:	4b1c      	ldr	r3, [pc, #112]	; (8003530 <HAL_ADC_ConfigChannel+0x494>)
 80034be:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b10      	cmp	r3, #16
 80034c6:	d105      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80034c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d015      	beq.n	8003500 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80034d8:	2b11      	cmp	r3, #17
 80034da:	d105      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80034dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00b      	beq.n	8003500 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80034ec:	2b12      	cmp	r3, #18
 80034ee:	f040 80ac 	bne.w	800364a <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80034f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f040 80a5 	bne.w	800364a <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003508:	d102      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x474>
 800350a:	4b07      	ldr	r3, [pc, #28]	; (8003528 <HAL_ADC_ConfigChannel+0x48c>)
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	e023      	b.n	8003558 <HAL_ADC_ConfigChannel+0x4bc>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a04      	ldr	r2, [pc, #16]	; (8003528 <HAL_ADC_ConfigChannel+0x48c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d10c      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x498>
 800351a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	e01a      	b.n	8003558 <HAL_ADC_ConfigChannel+0x4bc>
 8003522:	bf00      	nop
 8003524:	83fff000 	.word	0x83fff000
 8003528:	50000100 	.word	0x50000100
 800352c:	50000300 	.word	0x50000300
 8003530:	50000700 	.word	0x50000700
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a4a      	ldr	r2, [pc, #296]	; (8003664 <HAL_ADC_ConfigChannel+0x5c8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d102      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x4a8>
 800353e:	4b4a      	ldr	r3, [pc, #296]	; (8003668 <HAL_ADC_ConfigChannel+0x5cc>)
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	e009      	b.n	8003558 <HAL_ADC_ConfigChannel+0x4bc>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a47      	ldr	r2, [pc, #284]	; (8003668 <HAL_ADC_ConfigChannel+0x5cc>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d102      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x4b8>
 800354e:	4b45      	ldr	r3, [pc, #276]	; (8003664 <HAL_ADC_ConfigChannel+0x5c8>)
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	e001      	b.n	8003558 <HAL_ADC_ConfigChannel+0x4bc>
 8003554:	2300      	movs	r3, #0
 8003556:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	2b01      	cmp	r3, #1
 8003564:	d108      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x4dc>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x4dc>
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <HAL_ADC_ConfigChannel+0x4de>
 8003578:	2300      	movs	r3, #0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d150      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800357e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003580:	2b00      	cmp	r3, #0
 8003582:	d010      	beq.n	80035a6 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	2b01      	cmp	r3, #1
 800358e:	d107      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x504>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x504>
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <HAL_ADC_ConfigChannel+0x506>
 80035a0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d13c      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b10      	cmp	r3, #16
 80035ac:	d11d      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x54e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035b6:	d118      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80035b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035c2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035c4:	4b29      	ldr	r3, [pc, #164]	; (800366c <HAL_ADC_ConfigChannel+0x5d0>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a29      	ldr	r2, [pc, #164]	; (8003670 <HAL_ADC_ConfigChannel+0x5d4>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	0c9a      	lsrs	r2, r3, #18
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035da:	e002      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	3b01      	subs	r3, #1
 80035e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f9      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80035e8:	e02e      	b.n	8003648 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b11      	cmp	r3, #17
 80035f0:	d10b      	bne.n	800360a <HAL_ADC_ConfigChannel+0x56e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035fa:	d106      	bne.n	800360a <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80035fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003606:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003608:	e01e      	b.n	8003648 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b12      	cmp	r3, #18
 8003610:	d11a      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800361a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800361c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800361e:	e013      	b.n	8003648 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	f043 0220 	orr.w	r2, r3, #32
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003632:	e00a      	b.n	800364a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	f043 0220 	orr.w	r2, r3, #32
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003646:	e000      	b.n	800364a <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003648:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003652:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003656:	4618      	mov	r0, r3
 8003658:	376c      	adds	r7, #108	; 0x6c
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	50000400 	.word	0x50000400
 8003668:	50000500 	.word	0x50000500
 800366c:	20000a10 	.word	0x20000a10
 8003670:	431bde83 	.word	0x431bde83

08003674 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003674:	b480      	push	{r7}
 8003676:	b099      	sub	sp, #100	; 0x64
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800368c:	d102      	bne.n	8003694 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800368e:	4b6d      	ldr	r3, [pc, #436]	; (8003844 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	e01a      	b.n	80036ca <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a6a      	ldr	r2, [pc, #424]	; (8003844 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d103      	bne.n	80036a6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800369e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80036a2:	60bb      	str	r3, [r7, #8]
 80036a4:	e011      	b.n	80036ca <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a67      	ldr	r2, [pc, #412]	; (8003848 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d102      	bne.n	80036b6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80036b0:	4b66      	ldr	r3, [pc, #408]	; (800384c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80036b2:	60bb      	str	r3, [r7, #8]
 80036b4:	e009      	b.n	80036ca <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a64      	ldr	r2, [pc, #400]	; (800384c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d102      	bne.n	80036c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80036c0:	4b61      	ldr	r3, [pc, #388]	; (8003848 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80036c2:	60bb      	str	r3, [r7, #8]
 80036c4:	e001      	b.n	80036ca <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80036c6:	2300      	movs	r3, #0
 80036c8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0b0      	b.n	8003836 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80036de:	2302      	movs	r3, #2
 80036e0:	e0a9      	b.n	8003836 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f040 808d 	bne.w	8003814 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b00      	cmp	r3, #0
 8003704:	f040 8086 	bne.w	8003814 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003710:	d004      	beq.n	800371c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a4b      	ldr	r2, [pc, #300]	; (8003844 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d101      	bne.n	8003720 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800371c:	4b4c      	ldr	r3, [pc, #304]	; (8003850 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800371e:	e000      	b.n	8003722 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003720:	4b4c      	ldr	r3, [pc, #304]	; (8003854 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003722:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d040      	beq.n	80037ae <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800372c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	6859      	ldr	r1, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800373e:	035b      	lsls	r3, r3, #13
 8003740:	430b      	orrs	r3, r1
 8003742:	431a      	orrs	r2, r3
 8003744:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003746:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	2b01      	cmp	r3, #1
 8003754:	d108      	bne.n	8003768 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003768:	2300      	movs	r3, #0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d15c      	bne.n	8003828 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	2b01      	cmp	r3, #1
 8003778:	d107      	bne.n	800378a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800378a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800378c:	2b00      	cmp	r3, #0
 800378e:	d14b      	bne.n	8003828 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003798:	f023 030f 	bic.w	r3, r3, #15
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	6811      	ldr	r1, [r2, #0]
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	6892      	ldr	r2, [r2, #8]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	431a      	orrs	r2, r3
 80037a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037aa:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80037ac:	e03c      	b.n	8003828 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80037ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037b8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 0303 	and.w	r3, r3, #3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d108      	bne.n	80037da <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80037da:	2300      	movs	r3, #0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d123      	bne.n	8003828 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 0303 	and.w	r3, r3, #3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d107      	bne.n	80037fc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80037fc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d112      	bne.n	8003828 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003802:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800380a:	f023 030f 	bic.w	r3, r3, #15
 800380e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003810:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003812:	e009      	b.n	8003828 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	f043 0220 	orr.w	r2, r3, #32
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003826:	e000      	b.n	800382a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003828:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003832:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003836:	4618      	mov	r0, r3
 8003838:	3764      	adds	r7, #100	; 0x64
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	50000100 	.word	0x50000100
 8003848:	50000400 	.word	0x50000400
 800384c:	50000500 	.word	0x50000500
 8003850:	50000300 	.word	0x50000300
 8003854:	50000700 	.word	0x50000700

08003858 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800386e:	2b00      	cmp	r3, #0
 8003870:	d126      	bne.n	80038c0 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003888:	2b00      	cmp	r3, #0
 800388a:	d115      	bne.n	80038b8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003890:	2b00      	cmp	r3, #0
 8003892:	d111      	bne.n	80038b8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d105      	bne.n	80038b8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f043 0201 	orr.w	r2, r3, #1
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f7fd fc6d 	bl	8001198 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80038be:	e004      	b.n	80038ca <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	4798      	blx	r3
}
 80038ca:	bf00      	nop
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b084      	sub	sp, #16
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f7fe fd11 	bl	8002308 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80038e6:	bf00      	nop
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390c:	f043 0204 	orr.w	r2, r3, #4
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f7fe fd0b 	bl	8002330 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800391a:	bf00      	nop
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	2b01      	cmp	r3, #1
 800393c:	d108      	bne.n	8003950 <ADC_Enable+0x2c>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <ADC_Enable+0x2c>
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <ADC_Enable+0x2e>
 8003950:	2300      	movs	r3, #0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d13c      	bne.n	80039d0 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	4b1f      	ldr	r3, [pc, #124]	; (80039dc <ADC_Enable+0xb8>)
 800395e:	4013      	ands	r3, r2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00d      	beq.n	8003980 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	f043 0210 	orr.w	r2, r3, #16
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003974:	f043 0201 	orr.w	r2, r3, #1
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e028      	b.n	80039d2 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0201 	orr.w	r2, r2, #1
 800398e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003990:	f7fe fcae 	bl	80022f0 <HAL_GetTick>
 8003994:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003996:	e014      	b.n	80039c2 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003998:	f7fe fcaa 	bl	80022f0 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d90d      	bls.n	80039c2 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f043 0210 	orr.w	r2, r3, #16
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	f043 0201 	orr.w	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e007      	b.n	80039d2 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d1e3      	bne.n	8003998 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	8000003f 	.word	0x8000003f

080039e0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d108      	bne.n	8003a0c <ADC_Disable+0x2c>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <ADC_Disable+0x2c>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <ADC_Disable+0x2e>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d040      	beq.n	8003a94 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 030d 	and.w	r3, r3, #13
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d10f      	bne.n	8003a40 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0202 	orr.w	r2, r2, #2
 8003a2e:	609a      	str	r2, [r3, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2203      	movs	r2, #3
 8003a36:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003a38:	f7fe fc5a 	bl	80022f0 <HAL_GetTick>
 8003a3c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003a3e:	e022      	b.n	8003a86 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	f043 0210 	orr.w	r2, r3, #16
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a50:	f043 0201 	orr.w	r2, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e01c      	b.n	8003a96 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a5c:	f7fe fc48 	bl	80022f0 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d90d      	bls.n	8003a86 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	f043 0210 	orr.w	r2, r3, #16
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	f043 0201 	orr.w	r2, r3, #1
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e007      	b.n	8003a96 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d0e3      	beq.n	8003a5c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 030c 	and.w	r3, r3, #12
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 8093 	beq.w	8003bec <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ad4:	d12a      	bne.n	8003b2c <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d126      	bne.n	8003b2c <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d122      	bne.n	8003b2c <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8003ae6:	230c      	movs	r3, #12
 8003ae8:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003aea:	e014      	b.n	8003b16 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4a42      	ldr	r2, [pc, #264]	; (8003bf8 <ADC_ConversionStop+0x158>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d90d      	bls.n	8003b10 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	f043 0210 	orr.w	r2, r3, #16
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b04:	f043 0201 	orr.w	r2, r3, #1
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e06e      	b.n	8003bee <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	3301      	adds	r3, #1
 8003b14:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b20:	2b40      	cmp	r3, #64	; 0x40
 8003b22:	d1e3      	bne.n	8003aec <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2240      	movs	r2, #64	; 0x40
 8003b2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b60      	cmp	r3, #96	; 0x60
 8003b30:	d015      	beq.n	8003b5e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d10e      	bne.n	8003b5e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d107      	bne.n	8003b5e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 0210 	orr.w	r2, r2, #16
 8003b5c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b0c      	cmp	r3, #12
 8003b62:	d015      	beq.n	8003b90 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d10e      	bne.n	8003b90 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d107      	bne.n	8003b90 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0220 	orr.w	r2, r2, #32
 8003b8e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2b60      	cmp	r3, #96	; 0x60
 8003b94:	d004      	beq.n	8003ba0 <ADC_ConversionStop+0x100>
 8003b96:	2b6c      	cmp	r3, #108	; 0x6c
 8003b98:	d105      	bne.n	8003ba6 <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003b9a:	230c      	movs	r3, #12
 8003b9c:	617b      	str	r3, [r7, #20]
        break;
 8003b9e:	e005      	b.n	8003bac <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003ba0:	2308      	movs	r3, #8
 8003ba2:	617b      	str	r3, [r7, #20]
        break;
 8003ba4:	e002      	b.n	8003bac <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003ba6:	2304      	movs	r3, #4
 8003ba8:	617b      	str	r3, [r7, #20]
        break;
 8003baa:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003bac:	f7fe fba0 	bl	80022f0 <HAL_GetTick>
 8003bb0:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003bb2:	e014      	b.n	8003bde <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003bb4:	f7fe fb9c 	bl	80022f0 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b0b      	cmp	r3, #11
 8003bc0:	d90d      	bls.n	8003bde <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f043 0210 	orr.w	r2, r3, #16
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd2:	f043 0201 	orr.w	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e007      	b.n	8003bee <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e3      	bne.n	8003bb4 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	000993ff 	.word	0x000993ff

08003bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c0c:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <__NVIC_SetPriorityGrouping+0x44>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c18:	4013      	ands	r3, r2
 8003c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c2e:	4a04      	ldr	r2, [pc, #16]	; (8003c40 <__NVIC_SetPriorityGrouping+0x44>)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	60d3      	str	r3, [r2, #12]
}
 8003c34:	bf00      	nop
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	e000ed00 	.word	0xe000ed00

08003c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c48:	4b04      	ldr	r3, [pc, #16]	; (8003c5c <__NVIC_GetPriorityGrouping+0x18>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	0a1b      	lsrs	r3, r3, #8
 8003c4e:	f003 0307 	and.w	r3, r3, #7
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	e000ed00 	.word	0xe000ed00

08003c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	4603      	mov	r3, r0
 8003c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	db0b      	blt.n	8003c8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c72:	79fb      	ldrb	r3, [r7, #7]
 8003c74:	f003 021f 	and.w	r2, r3, #31
 8003c78:	4907      	ldr	r1, [pc, #28]	; (8003c98 <__NVIC_EnableIRQ+0x38>)
 8003c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	2001      	movs	r0, #1
 8003c82:	fa00 f202 	lsl.w	r2, r0, r2
 8003c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	e000e100 	.word	0xe000e100

08003c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	6039      	str	r1, [r7, #0]
 8003ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	db0a      	blt.n	8003cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	490c      	ldr	r1, [pc, #48]	; (8003ce8 <__NVIC_SetPriority+0x4c>)
 8003cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cba:	0112      	lsls	r2, r2, #4
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cc4:	e00a      	b.n	8003cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	4908      	ldr	r1, [pc, #32]	; (8003cec <__NVIC_SetPriority+0x50>)
 8003ccc:	79fb      	ldrb	r3, [r7, #7]
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	3b04      	subs	r3, #4
 8003cd4:	0112      	lsls	r2, r2, #4
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	440b      	add	r3, r1
 8003cda:	761a      	strb	r2, [r3, #24]
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	e000e100 	.word	0xe000e100
 8003cec:	e000ed00 	.word	0xe000ed00

08003cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b089      	sub	sp, #36	; 0x24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f1c3 0307 	rsb	r3, r3, #7
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	bf28      	it	cs
 8003d0e:	2304      	movcs	r3, #4
 8003d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	3304      	adds	r3, #4
 8003d16:	2b06      	cmp	r3, #6
 8003d18:	d902      	bls.n	8003d20 <NVIC_EncodePriority+0x30>
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3b03      	subs	r3, #3
 8003d1e:	e000      	b.n	8003d22 <NVIC_EncodePriority+0x32>
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d24:	f04f 32ff 	mov.w	r2, #4294967295
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43da      	mvns	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	401a      	ands	r2, r3
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d38:	f04f 31ff 	mov.w	r1, #4294967295
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d42:	43d9      	mvns	r1, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d48:	4313      	orrs	r3, r2
         );
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3724      	adds	r7, #36	; 0x24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
	...

08003d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d68:	d301      	bcc.n	8003d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e00f      	b.n	8003d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d6e:	4a0a      	ldr	r2, [pc, #40]	; (8003d98 <SysTick_Config+0x40>)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d76:	210f      	movs	r1, #15
 8003d78:	f04f 30ff 	mov.w	r0, #4294967295
 8003d7c:	f7ff ff8e 	bl	8003c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d80:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <SysTick_Config+0x40>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d86:	4b04      	ldr	r3, [pc, #16]	; (8003d98 <SysTick_Config+0x40>)
 8003d88:	2207      	movs	r2, #7
 8003d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	e000e010 	.word	0xe000e010

08003d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff ff29 	bl	8003bfc <__NVIC_SetPriorityGrouping>
}
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b086      	sub	sp, #24
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	4603      	mov	r3, r0
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	607a      	str	r2, [r7, #4]
 8003dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dc4:	f7ff ff3e 	bl	8003c44 <__NVIC_GetPriorityGrouping>
 8003dc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	68b9      	ldr	r1, [r7, #8]
 8003dce:	6978      	ldr	r0, [r7, #20]
 8003dd0:	f7ff ff8e 	bl	8003cf0 <NVIC_EncodePriority>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dda:	4611      	mov	r1, r2
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff ff5d 	bl	8003c9c <__NVIC_SetPriority>
}
 8003de2:	bf00      	nop
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	4603      	mov	r3, r0
 8003df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff ff31 	bl	8003c60 <__NVIC_EnableIRQ>
}
 8003dfe:	bf00      	nop
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b082      	sub	sp, #8
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff ffa2 	bl	8003d58 <SysTick_Config>
 8003e14:	4603      	mov	r3, r0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e014      	b.n	8003e5a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	791b      	ldrb	r3, [r3, #4]
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d105      	bne.n	8003e46 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7fe f82b 	bl	8001e9c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2202      	movs	r2, #2
 8003e4a:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	73fb      	strb	r3, [r7, #15]
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6819      	ldr	r1, [r3, #0]
 8003e76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	43da      	mvns	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	400a      	ands	r2, r1
 8003e88:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6819      	ldr	r1, [r3, #0]
 8003e90:	2201      	movs	r2, #1
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43da      	mvns	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	400a      	ands	r2, r1
 8003ea0:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10f      	bne.n	8003ec8 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fae0 	bl	8004472 <HAL_DMA_Abort>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	e00e      	b.n	8003ee6 <HAL_DAC_Stop_DMA+0x84>
  /* For all products including channel 2U */
  /* DAC channel 2 is available on top of DAC channel 1U */
  else /* Channel2 is used */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 fad0 	bl	8004472 <HAL_DMA_Abort>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003ee4:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <HAL_DAC_Stop_DMA+0x92>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2204      	movs	r2, #4
 8003ef0:	711a      	strb	r2, [r3, #4]
 8003ef2:	e002      	b.n	8003efa <HAL_DAC_Stop_DMA+0x98>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	711a      	strb	r2, [r3, #4]
  }
  
  /* Return function status */
  return status;
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	795b      	ldrb	r3, [r3, #5]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_DAC_Start_DMA+0x1e>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e08e      	b.n	8004090 <HAL_DAC_Start_DMA+0x13c>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d12a      	bne.n	8003fda <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	4a43      	ldr	r2, [pc, #268]	; (8004098 <HAL_DAC_Start_DMA+0x144>)
 8003f8a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	4a42      	ldr	r2, [pc, #264]	; (800409c <HAL_DAC_Start_DMA+0x148>)
 8003f92:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	4a41      	ldr	r2, [pc, #260]	; (80040a0 <HAL_DAC_Start_DMA+0x14c>)
 8003f9a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003faa:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d009      	beq.n	8003fc6 <HAL_DAC_Start_DMA+0x72>
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d00c      	beq.n	8003fd0 <HAL_DAC_Start_DMA+0x7c>
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d000      	beq.n	8003fbc <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003fba:	e039      	b.n	8004030 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3308      	adds	r3, #8
 8003fc2:	617b      	str	r3, [r7, #20]
        break;
 8003fc4:	e034      	b.n	8004030 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	330c      	adds	r3, #12
 8003fcc:	617b      	str	r3, [r7, #20]
        break;
 8003fce:	e02f      	b.n	8004030 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3310      	adds	r3, #16
 8003fd6:	617b      	str	r3, [r7, #20]
        break;
 8003fd8:	e02a      	b.n	8004030 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	4a31      	ldr	r2, [pc, #196]	; (80040a4 <HAL_DAC_Start_DMA+0x150>)
 8003fe0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	4a30      	ldr	r2, [pc, #192]	; (80040a8 <HAL_DAC_Start_DMA+0x154>)
 8003fe8:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	4a2f      	ldr	r2, [pc, #188]	; (80040ac <HAL_DAC_Start_DMA+0x158>)
 8003ff0:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004000:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	2b04      	cmp	r3, #4
 8004006:	d009      	beq.n	800401c <HAL_DAC_Start_DMA+0xc8>
 8004008:	2b08      	cmp	r3, #8
 800400a:	d00c      	beq.n	8004026 <HAL_DAC_Start_DMA+0xd2>
 800400c:	2b00      	cmp	r3, #0
 800400e:	d000      	beq.n	8004012 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004010:	e00e      	b.n	8004030 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3314      	adds	r3, #20
 8004018:	617b      	str	r3, [r7, #20]
        break;
 800401a:	e009      	b.n	8004030 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3318      	adds	r3, #24
 8004022:	617b      	str	r3, [r7, #20]
        break;
 8004024:	e004      	b.n	8004030 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	331c      	adds	r3, #28
 800402c:	617b      	str	r3, [r7, #20]
        break;
 800402e:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10f      	bne.n	8004056 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004044:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6898      	ldr	r0, [r3, #8]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	f000 f9b0 	bl	80043b4 <HAL_DMA_Start_IT>
 8004054:	e00e      	b.n	8004074 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004064:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	68d8      	ldr	r0, [r3, #12]
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	f000 f9a0 	bl	80043b4 <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6819      	ldr	r1, [r3, #0]
 8004080:	2201      	movs	r2, #1
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	409a      	lsls	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	0800424f 	.word	0x0800424f
 800409c:	08004271 	.word	0x08004271
 80040a0:	0800428d 	.word	0x0800428d
 80040a4:	080042bb 	.word	0x080042bb
 80040a8:	080042dd 	.word	0x080042dd
 80040ac:	080042f9 	.word	0x080042f9

080040b0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c6:	d120      	bne.n	800410a <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040d6:	d118      	bne.n	800410a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2204      	movs	r2, #4
 80040dc:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f043 0201 	orr.w	r2, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	611a      	str	r2, [r3, #16]
          
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040f2:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004102:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff ff1b 	bl	8003f40 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif
    }
  }
  
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004118:	d120      	bne.n	800415c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004120:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004128:	d118      	bne.n	800415c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2204      	movs	r2, #4
 800412e:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	f043 0202 	orr.w	r2, r3, #2
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004144:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004154:	601a      	str	r2, [r3, #0]
   
      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f86f 	bl	800423a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif
    }
  }
}
 800415c:	bf00      	nop
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	2300      	movs	r3, #0
 8004176:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	795b      	ldrb	r3, [r3, #5]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_DAC_ConfigChannel+0x20>
 8004180:	2302      	movs	r3, #2
 8004182:	e036      	b.n	80041f2 <HAL_DAC_ConfigChannel+0x8e>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2201      	movs	r2, #1
 8004188:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2202      	movs	r2, #2
 800418e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004198:	f640 72fe 	movw	r2, #4094	; 0xffe
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	43db      	mvns	r3, r3
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4013      	ands	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6819      	ldr	r1, [r3, #0]
 80041d2:	22c0      	movs	r2, #192	; 0xc0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	43da      	mvns	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	400a      	ands	r2, r1
 80041e2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	371c      	adds	r7, #28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b084      	sub	sp, #16
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f7ff fe51 	bl	8003f04 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2201      	movs	r2, #1
 8004266:	711a      	strb	r2, [r3, #4]
}
 8004268:	bf00      	nop
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f7ff fe4a 	bl	8003f18 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8004284:	bf00      	nop
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f043 0204 	orr.w	r2, r3, #4
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f7ff fe40 	bl	8003f2c <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2201      	movs	r2, #1
 80042b0:	711a      	strb	r2, [r3, #4]
}
 80042b2:	bf00      	nop
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f7ff ff98 	bl	80041fe <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2201      	movs	r2, #1
 80042d2:	711a      	strb	r2, [r3, #4]
}
 80042d4:	bf00      	nop
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f7ff ff91 	bl	8004212 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 80042f0:	bf00      	nop
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f043 0204 	orr.w	r2, r3, #4
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f7ff ff87 	bl	8004226 <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2201      	movs	r2, #1
 800431c:	711a      	strb	r2, [r3, #4]
}
 800431e:	bf00      	nop
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e037      	b.n	80043ac <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004352:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004356:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004360:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800436c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004378:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	4313      	orrs	r3, r2
 8004384:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f97a 	bl	8004688 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}  
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
 80043c0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <HAL_DMA_Start_IT+0x20>
 80043d0:	2302      	movs	r3, #2
 80043d2:	e04a      	b.n	800446a <HAL_DMA_Start_IT+0xb6>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d13a      	bne.n	800445c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2202      	movs	r2, #2
 80043ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0201 	bic.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	68b9      	ldr	r1, [r7, #8]
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f90d 	bl	800462a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	2b00      	cmp	r3, #0
 8004416:	d008      	beq.n	800442a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 020e 	orr.w	r2, r2, #14
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	e00f      	b.n	800444a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 020a 	orr.w	r2, r2, #10
 8004438:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0204 	bic.w	r2, r2, #4
 8004448:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f042 0201 	orr.w	r2, r2, #1
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	e005      	b.n	8004468 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004464:	2302      	movs	r3, #2
 8004466:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004468:	7dfb      	ldrb	r3, [r7, #23]
} 
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004480:	2b02      	cmp	r3, #2
 8004482:	d008      	beq.n	8004496 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2204      	movs	r2, #4
 8004488:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e020      	b.n	80044d8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 020e 	bic.w	r2, r2, #14
 80044a4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0201 	bic.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	2101      	movs	r1, #1
 80044c0:	fa01 f202 	lsl.w	r2, r1, r2
 80044c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	2204      	movs	r2, #4
 8004502:	409a      	lsls	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4013      	ands	r3, r2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d024      	beq.n	8004556 <HAL_DMA_IRQHandler+0x72>
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	2b00      	cmp	r3, #0
 8004514:	d01f      	beq.n	8004556 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	2b00      	cmp	r3, #0
 8004522:	d107      	bne.n	8004534 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0204 	bic.w	r2, r2, #4
 8004532:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453c:	2104      	movs	r1, #4
 800453e:	fa01 f202 	lsl.w	r2, r1, r2
 8004542:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	2b00      	cmp	r3, #0
 800454a:	d06a      	beq.n	8004622 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004554:	e065      	b.n	8004622 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	2202      	movs	r2, #2
 800455c:	409a      	lsls	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4013      	ands	r3, r2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d02c      	beq.n	80045c0 <HAL_DMA_IRQHandler+0xdc>
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d027      	beq.n	80045c0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0320 	and.w	r3, r3, #32
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10b      	bne.n	8004596 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 020a 	bic.w	r2, r2, #10
 800458c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459e:	2102      	movs	r1, #2
 80045a0:	fa01 f202 	lsl.w	r2, r1, r2
 80045a4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d035      	beq.n	8004622 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80045be:	e030      	b.n	8004622 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	2208      	movs	r2, #8
 80045c6:	409a      	lsls	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4013      	ands	r3, r2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d028      	beq.n	8004622 <HAL_DMA_IRQHandler+0x13e>
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d023      	beq.n	8004622 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 020e 	bic.w	r2, r2, #14
 80045e8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f2:	2101      	movs	r1, #1
 80045f4:	fa01 f202 	lsl.w	r2, r1, r2
 80045f8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004614:	2b00      	cmp	r3, #0
 8004616:	d004      	beq.n	8004622 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	4798      	blx	r3
    }
  }
}  
 8004620:	e7ff      	b.n	8004622 <HAL_DMA_IRQHandler+0x13e>
 8004622:	bf00      	nop
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800462a:	b480      	push	{r7}
 800462c:	b085      	sub	sp, #20
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	607a      	str	r2, [r7, #4]
 8004636:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004640:	2101      	movs	r1, #1
 8004642:	fa01 f202 	lsl.w	r2, r1, r2
 8004646:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2b10      	cmp	r3, #16
 8004656:	d108      	bne.n	800466a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004668:	e007      	b.n	800467a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	60da      	str	r2, [r3, #12]
}
 800467a:	bf00      	nop
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
	...

08004688 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	4b14      	ldr	r3, [pc, #80]	; (80046e8 <DMA_CalcBaseAndBitshift+0x60>)
 8004698:	429a      	cmp	r2, r3
 800469a:	d80f      	bhi.n	80046bc <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	461a      	mov	r2, r3
 80046a2:	4b12      	ldr	r3, [pc, #72]	; (80046ec <DMA_CalcBaseAndBitshift+0x64>)
 80046a4:	4413      	add	r3, r2
 80046a6:	4a12      	ldr	r2, [pc, #72]	; (80046f0 <DMA_CalcBaseAndBitshift+0x68>)
 80046a8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ac:	091b      	lsrs	r3, r3, #4
 80046ae:	009a      	lsls	r2, r3, #2
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a0f      	ldr	r2, [pc, #60]	; (80046f4 <DMA_CalcBaseAndBitshift+0x6c>)
 80046b8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80046ba:	e00e      	b.n	80046da <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <DMA_CalcBaseAndBitshift+0x70>)
 80046c4:	4413      	add	r3, r2
 80046c6:	4a0a      	ldr	r2, [pc, #40]	; (80046f0 <DMA_CalcBaseAndBitshift+0x68>)
 80046c8:	fba2 2303 	umull	r2, r3, r2, r3
 80046cc:	091b      	lsrs	r3, r3, #4
 80046ce:	009a      	lsls	r2, r3, #2
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a09      	ldr	r2, [pc, #36]	; (80046fc <DMA_CalcBaseAndBitshift+0x74>)
 80046d8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40020407 	.word	0x40020407
 80046ec:	bffdfff8 	.word	0xbffdfff8
 80046f0:	cccccccd 	.word	0xcccccccd
 80046f4:	40020000 	.word	0x40020000
 80046f8:	bffdfbf8 	.word	0xbffdfbf8
 80046fc:	40020400 	.word	0x40020400

08004700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800470e:	e160      	b.n	80049d2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	2101      	movs	r1, #1
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	fa01 f303 	lsl.w	r3, r1, r3
 800471c:	4013      	ands	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 8152 	beq.w	80049cc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d00b      	beq.n	8004748 <HAL_GPIO_Init+0x48>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b02      	cmp	r3, #2
 8004736:	d007      	beq.n	8004748 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800473c:	2b11      	cmp	r3, #17
 800473e:	d003      	beq.n	8004748 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b12      	cmp	r3, #18
 8004746:	d130      	bne.n	80047aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	2203      	movs	r2, #3
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4013      	ands	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	4313      	orrs	r3, r2
 8004770:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800477e:	2201      	movs	r2, #1
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	43db      	mvns	r3, r3
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4013      	ands	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	091b      	lsrs	r3, r3, #4
 8004794:	f003 0201 	and.w	r2, r3, #1
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	2203      	movs	r2, #3
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	43db      	mvns	r3, r3
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4013      	ands	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d003      	beq.n	80047ea <HAL_GPIO_Init+0xea>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b12      	cmp	r3, #18
 80047e8:	d123      	bne.n	8004832 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	08da      	lsrs	r2, r3, #3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3208      	adds	r2, #8
 80047f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	220f      	movs	r2, #15
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	43db      	mvns	r3, r3
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	4013      	ands	r3, r2
 800480c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	691a      	ldr	r2, [r3, #16]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	08da      	lsrs	r2, r3, #3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3208      	adds	r2, #8
 800482c:	6939      	ldr	r1, [r7, #16]
 800482e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	2203      	movs	r2, #3
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	43db      	mvns	r3, r3
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	4013      	ands	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f003 0203 	and.w	r2, r3, #3
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4313      	orrs	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 80ac 	beq.w	80049cc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004874:	4b5e      	ldr	r3, [pc, #376]	; (80049f0 <HAL_GPIO_Init+0x2f0>)
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	4a5d      	ldr	r2, [pc, #372]	; (80049f0 <HAL_GPIO_Init+0x2f0>)
 800487a:	f043 0301 	orr.w	r3, r3, #1
 800487e:	6193      	str	r3, [r2, #24]
 8004880:	4b5b      	ldr	r3, [pc, #364]	; (80049f0 <HAL_GPIO_Init+0x2f0>)
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800488c:	4a59      	ldr	r2, [pc, #356]	; (80049f4 <HAL_GPIO_Init+0x2f4>)
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	089b      	lsrs	r3, r3, #2
 8004892:	3302      	adds	r3, #2
 8004894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004898:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f003 0303 	and.w	r3, r3, #3
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	220f      	movs	r2, #15
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	43db      	mvns	r3, r3
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4013      	ands	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80048b6:	d025      	beq.n	8004904 <HAL_GPIO_Init+0x204>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a4f      	ldr	r2, [pc, #316]	; (80049f8 <HAL_GPIO_Init+0x2f8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d01f      	beq.n	8004900 <HAL_GPIO_Init+0x200>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a4e      	ldr	r2, [pc, #312]	; (80049fc <HAL_GPIO_Init+0x2fc>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d019      	beq.n	80048fc <HAL_GPIO_Init+0x1fc>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a4d      	ldr	r2, [pc, #308]	; (8004a00 <HAL_GPIO_Init+0x300>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d013      	beq.n	80048f8 <HAL_GPIO_Init+0x1f8>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a4c      	ldr	r2, [pc, #304]	; (8004a04 <HAL_GPIO_Init+0x304>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00d      	beq.n	80048f4 <HAL_GPIO_Init+0x1f4>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a4b      	ldr	r2, [pc, #300]	; (8004a08 <HAL_GPIO_Init+0x308>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d007      	beq.n	80048f0 <HAL_GPIO_Init+0x1f0>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a4a      	ldr	r2, [pc, #296]	; (8004a0c <HAL_GPIO_Init+0x30c>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d101      	bne.n	80048ec <HAL_GPIO_Init+0x1ec>
 80048e8:	2306      	movs	r3, #6
 80048ea:	e00c      	b.n	8004906 <HAL_GPIO_Init+0x206>
 80048ec:	2307      	movs	r3, #7
 80048ee:	e00a      	b.n	8004906 <HAL_GPIO_Init+0x206>
 80048f0:	2305      	movs	r3, #5
 80048f2:	e008      	b.n	8004906 <HAL_GPIO_Init+0x206>
 80048f4:	2304      	movs	r3, #4
 80048f6:	e006      	b.n	8004906 <HAL_GPIO_Init+0x206>
 80048f8:	2303      	movs	r3, #3
 80048fa:	e004      	b.n	8004906 <HAL_GPIO_Init+0x206>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e002      	b.n	8004906 <HAL_GPIO_Init+0x206>
 8004900:	2301      	movs	r3, #1
 8004902:	e000      	b.n	8004906 <HAL_GPIO_Init+0x206>
 8004904:	2300      	movs	r3, #0
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	f002 0203 	and.w	r2, r2, #3
 800490c:	0092      	lsls	r2, r2, #2
 800490e:	4093      	lsls	r3, r2
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004916:	4937      	ldr	r1, [pc, #220]	; (80049f4 <HAL_GPIO_Init+0x2f4>)
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	089b      	lsrs	r3, r3, #2
 800491c:	3302      	adds	r3, #2
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004924:	4b3a      	ldr	r3, [pc, #232]	; (8004a10 <HAL_GPIO_Init+0x310>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	43db      	mvns	r3, r3
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4013      	ands	r3, r2
 8004932:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004948:	4a31      	ldr	r2, [pc, #196]	; (8004a10 <HAL_GPIO_Init+0x310>)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800494e:	4b30      	ldr	r3, [pc, #192]	; (8004a10 <HAL_GPIO_Init+0x310>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	43db      	mvns	r3, r3
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4013      	ands	r3, r2
 800495c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004972:	4a27      	ldr	r2, [pc, #156]	; (8004a10 <HAL_GPIO_Init+0x310>)
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004978:	4b25      	ldr	r3, [pc, #148]	; (8004a10 <HAL_GPIO_Init+0x310>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	43db      	mvns	r3, r3
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4013      	ands	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800499c:	4a1c      	ldr	r2, [pc, #112]	; (8004a10 <HAL_GPIO_Init+0x310>)
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049a2:	4b1b      	ldr	r3, [pc, #108]	; (8004a10 <HAL_GPIO_Init+0x310>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	43db      	mvns	r3, r3
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	4013      	ands	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80049c6:	4a12      	ldr	r2, [pc, #72]	; (8004a10 <HAL_GPIO_Init+0x310>)
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	3301      	adds	r3, #1
 80049d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	fa22 f303 	lsr.w	r3, r2, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f47f ae97 	bne.w	8004710 <HAL_GPIO_Init+0x10>
  }
}
 80049e2:	bf00      	nop
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40021000 	.word	0x40021000
 80049f4:	40010000 	.word	0x40010000
 80049f8:	48000400 	.word	0x48000400
 80049fc:	48000800 	.word	0x48000800
 8004a00:	48000c00 	.word	0x48000c00
 8004a04:	48001000 	.word	0x48001000
 8004a08:	48001400 	.word	0x48001400
 8004a0c:	48001800 	.word	0x48001800
 8004a10:	40010400 	.word	0x40010400

08004a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	807b      	strh	r3, [r7, #2]
 8004a20:	4613      	mov	r3, r2
 8004a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a24:	787b      	ldrb	r3, [r7, #1]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a2a:	887a      	ldrh	r2, [r7, #2]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a30:	e002      	b.n	8004a38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a32:	887a      	ldrh	r2, [r7, #2]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	1d3b      	adds	r3, r7, #4
 8004a4e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a50:	1d3b      	adds	r3, r7, #4
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d102      	bne.n	8004a5e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f000 bf01 	b.w	8005860 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a5e:	1d3b      	adds	r3, r7, #4
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 8160 	beq.w	8004d2e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004a6e:	4bae      	ldr	r3, [pc, #696]	; (8004d28 <HAL_RCC_OscConfig+0x2e4>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f003 030c 	and.w	r3, r3, #12
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d00c      	beq.n	8004a94 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a7a:	4bab      	ldr	r3, [pc, #684]	; (8004d28 <HAL_RCC_OscConfig+0x2e4>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f003 030c 	and.w	r3, r3, #12
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d159      	bne.n	8004b3a <HAL_RCC_OscConfig+0xf6>
 8004a86:	4ba8      	ldr	r3, [pc, #672]	; (8004d28 <HAL_RCC_OscConfig+0x2e4>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a92:	d152      	bne.n	8004b3a <HAL_RCC_OscConfig+0xf6>
 8004a94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a98:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004aa0:	fa93 f3a3 	rbit	r3, r3
 8004aa4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004aa8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aac:	fab3 f383 	clz	r3, r3
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	f043 0301 	orr.w	r3, r3, #1
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d102      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x82>
 8004ac0:	4b99      	ldr	r3, [pc, #612]	; (8004d28 <HAL_RCC_OscConfig+0x2e4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	e015      	b.n	8004af2 <HAL_RCC_OscConfig+0xae>
 8004ac6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004aca:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ace:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004ad2:	fa93 f3a3 	rbit	r3, r3
 8004ad6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004ada:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ade:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004ae2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004ae6:	fa93 f3a3 	rbit	r3, r3
 8004aea:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004aee:	4b8e      	ldr	r3, [pc, #568]	; (8004d28 <HAL_RCC_OscConfig+0x2e4>)
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004af6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004afa:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004afe:	fa92 f2a2 	rbit	r2, r2
 8004b02:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004b06:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004b0a:	fab2 f282 	clz	r2, r2
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	f042 0220 	orr.w	r2, r2, #32
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	f002 021f 	and.w	r2, r2, #31
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b20:	4013      	ands	r3, r2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 8102 	beq.w	8004d2c <HAL_RCC_OscConfig+0x2e8>
 8004b28:	1d3b      	adds	r3, r7, #4
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f040 80fc 	bne.w	8004d2c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	f000 be93 	b.w	8005860 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b3a:	1d3b      	adds	r3, r7, #4
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b44:	d106      	bne.n	8004b54 <HAL_RCC_OscConfig+0x110>
 8004b46:	4b78      	ldr	r3, [pc, #480]	; (8004d28 <HAL_RCC_OscConfig+0x2e4>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a77      	ldr	r2, [pc, #476]	; (8004d28 <HAL_RCC_OscConfig+0x2e4>)
 8004b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	e030      	b.n	8004bb6 <HAL_RCC_OscConfig+0x172>
 8004b54:	1d3b      	adds	r3, r7, #4
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10c      	bne.n	8004b78 <HAL_RCC_OscConfig+0x134>
 8004b5e:	4b72      	ldr	r3, [pc, #456]	; (8004d28 <HAL_RCC_OscConfig+0x2e4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a71      	ldr	r2, [pc, #452]	; (8004d28 <HAL_RCC_OscConfig+0x2e4>)
 8004b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	4b6f      	ldr	r3, [pc, #444]	; (8004d28 <HAL_RCC_OscConfig+0x2e4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a6e      	ldr	r2, [pc, #440]	; (8004d28 <HAL_RCC_OscConfig+0x2e4>)
 8004b70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	e01e      	b.n	8004bb6 <HAL_RCC_OscConfig+0x172>
 8004b78:	1d3b      	adds	r3, r7, #4
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b82:	d10c      	bne.n	8004b9e <HAL_RCC_OscConfig+0x15a>
 8004b84:	4b68      	ldr	r3, [pc, #416]	; (8004d28 <HAL_RCC_OscConfig+0x2e4>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a67      	ldr	r2, [pc, #412]	; (8004d28 <HAL_RCC_OscConfig+0x2e4>)
 8004b8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	4b65      	ldr	r3, [pc, #404]	; (8004d28 <HAL_RCC_OscConfig+0x2e4>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a64      	ldr	r2, [pc, #400]	; (8004d28 <HAL_RCC_OscConfig+0x2e4>)
 8004b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	e00b      	b.n	8004bb6 <HAL_RCC_OscConfig+0x172>
 8004b9e:	4b62      	ldr	r3, [pc, #392]	; (8004d28 <HAL_RCC_OscConfig+0x2e4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a61      	ldr	r2, [pc, #388]	; (8004d28 <HAL_RCC_OscConfig+0x2e4>)
 8004ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	4b5f      	ldr	r3, [pc, #380]	; (8004d28 <HAL_RCC_OscConfig+0x2e4>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a5e      	ldr	r2, [pc, #376]	; (8004d28 <HAL_RCC_OscConfig+0x2e4>)
 8004bb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bb4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bb6:	1d3b      	adds	r3, r7, #4
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d059      	beq.n	8004c74 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc0:	f7fd fb96 	bl	80022f0 <HAL_GetTick>
 8004bc4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bc8:	e00a      	b.n	8004be0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bca:	f7fd fb91 	bl	80022f0 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b64      	cmp	r3, #100	; 0x64
 8004bd8:	d902      	bls.n	8004be0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	f000 be40 	b.w	8005860 <HAL_RCC_OscConfig+0xe1c>
 8004be0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004be4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004bec:	fa93 f3a3 	rbit	r3, r3
 8004bf0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004bf4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bf8:	fab3 f383 	clz	r3, r3
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	f043 0301 	orr.w	r3, r3, #1
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d102      	bne.n	8004c12 <HAL_RCC_OscConfig+0x1ce>
 8004c0c:	4b46      	ldr	r3, [pc, #280]	; (8004d28 <HAL_RCC_OscConfig+0x2e4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	e015      	b.n	8004c3e <HAL_RCC_OscConfig+0x1fa>
 8004c12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c16:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8004c1e:	fa93 f3a3 	rbit	r3, r3
 8004c22:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004c26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c2a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004c2e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004c32:	fa93 f3a3 	rbit	r3, r3
 8004c36:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004c3a:	4b3b      	ldr	r3, [pc, #236]	; (8004d28 <HAL_RCC_OscConfig+0x2e4>)
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c42:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004c46:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004c4a:	fa92 f2a2 	rbit	r2, r2
 8004c4e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004c52:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004c56:	fab2 f282 	clz	r2, r2
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	f042 0220 	orr.w	r2, r2, #32
 8004c60:	b2d2      	uxtb	r2, r2
 8004c62:	f002 021f 	and.w	r2, r2, #31
 8004c66:	2101      	movs	r1, #1
 8004c68:	fa01 f202 	lsl.w	r2, r1, r2
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0ab      	beq.n	8004bca <HAL_RCC_OscConfig+0x186>
 8004c72:	e05c      	b.n	8004d2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c74:	f7fd fb3c 	bl	80022f0 <HAL_GetTick>
 8004c78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c7c:	e00a      	b.n	8004c94 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c7e:	f7fd fb37 	bl	80022f0 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b64      	cmp	r3, #100	; 0x64
 8004c8c:	d902      	bls.n	8004c94 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	f000 bde6 	b.w	8005860 <HAL_RCC_OscConfig+0xe1c>
 8004c94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c98:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004ca0:	fa93 f3a3 	rbit	r3, r3
 8004ca4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8004ca8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cac:	fab3 f383 	clz	r3, r3
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	f043 0301 	orr.w	r3, r3, #1
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d102      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x282>
 8004cc0:	4b19      	ldr	r3, [pc, #100]	; (8004d28 <HAL_RCC_OscConfig+0x2e4>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	e015      	b.n	8004cf2 <HAL_RCC_OscConfig+0x2ae>
 8004cc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004cd2:	fa93 f3a3 	rbit	r3, r3
 8004cd6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004cda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cde:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004ce2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004ce6:	fa93 f3a3 	rbit	r3, r3
 8004cea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004cee:	4b0e      	ldr	r3, [pc, #56]	; (8004d28 <HAL_RCC_OscConfig+0x2e4>)
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004cf6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004cfa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004cfe:	fa92 f2a2 	rbit	r2, r2
 8004d02:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004d06:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004d0a:	fab2 f282 	clz	r2, r2
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	f042 0220 	orr.w	r2, r2, #32
 8004d14:	b2d2      	uxtb	r2, r2
 8004d16:	f002 021f 	and.w	r2, r2, #31
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d20:	4013      	ands	r3, r2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1ab      	bne.n	8004c7e <HAL_RCC_OscConfig+0x23a>
 8004d26:	e002      	b.n	8004d2e <HAL_RCC_OscConfig+0x2ea>
 8004d28:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d2e:	1d3b      	adds	r3, r7, #4
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 8170 	beq.w	800501e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004d3e:	4bd0      	ldr	r3, [pc, #832]	; (8005080 <HAL_RCC_OscConfig+0x63c>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f003 030c 	and.w	r3, r3, #12
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00c      	beq.n	8004d64 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004d4a:	4bcd      	ldr	r3, [pc, #820]	; (8005080 <HAL_RCC_OscConfig+0x63c>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f003 030c 	and.w	r3, r3, #12
 8004d52:	2b08      	cmp	r3, #8
 8004d54:	d16d      	bne.n	8004e32 <HAL_RCC_OscConfig+0x3ee>
 8004d56:	4bca      	ldr	r3, [pc, #808]	; (8005080 <HAL_RCC_OscConfig+0x63c>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d62:	d166      	bne.n	8004e32 <HAL_RCC_OscConfig+0x3ee>
 8004d64:	2302      	movs	r3, #2
 8004d66:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004d6e:	fa93 f3a3 	rbit	r3, r3
 8004d72:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004d76:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d7a:	fab3 f383 	clz	r3, r3
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	f043 0301 	orr.w	r3, r3, #1
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d102      	bne.n	8004d94 <HAL_RCC_OscConfig+0x350>
 8004d8e:	4bbc      	ldr	r3, [pc, #752]	; (8005080 <HAL_RCC_OscConfig+0x63c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	e013      	b.n	8004dbc <HAL_RCC_OscConfig+0x378>
 8004d94:	2302      	movs	r3, #2
 8004d96:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004d9e:	fa93 f3a3 	rbit	r3, r3
 8004da2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004da6:	2302      	movs	r3, #2
 8004da8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004dac:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004db0:	fa93 f3a3 	rbit	r3, r3
 8004db4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004db8:	4bb1      	ldr	r3, [pc, #708]	; (8005080 <HAL_RCC_OscConfig+0x63c>)
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004dc2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004dc6:	fa92 f2a2 	rbit	r2, r2
 8004dca:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004dce:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004dd2:	fab2 f282 	clz	r2, r2
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	f042 0220 	orr.w	r2, r2, #32
 8004ddc:	b2d2      	uxtb	r2, r2
 8004dde:	f002 021f 	and.w	r2, r2, #31
 8004de2:	2101      	movs	r1, #1
 8004de4:	fa01 f202 	lsl.w	r2, r1, r2
 8004de8:	4013      	ands	r3, r2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d007      	beq.n	8004dfe <HAL_RCC_OscConfig+0x3ba>
 8004dee:	1d3b      	adds	r3, r7, #4
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d002      	beq.n	8004dfe <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	f000 bd31 	b.w	8005860 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfe:	4ba0      	ldr	r3, [pc, #640]	; (8005080 <HAL_RCC_OscConfig+0x63c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e06:	1d3b      	adds	r3, r7, #4
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	21f8      	movs	r1, #248	; 0xf8
 8004e0e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e12:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004e16:	fa91 f1a1 	rbit	r1, r1
 8004e1a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004e1e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004e22:	fab1 f181 	clz	r1, r1
 8004e26:	b2c9      	uxtb	r1, r1
 8004e28:	408b      	lsls	r3, r1
 8004e2a:	4995      	ldr	r1, [pc, #596]	; (8005080 <HAL_RCC_OscConfig+0x63c>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e30:	e0f5      	b.n	800501e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e32:	1d3b      	adds	r3, r7, #4
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 8085 	beq.w	8004f48 <HAL_RCC_OscConfig+0x504>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e44:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004e48:	fa93 f3a3 	rbit	r3, r3
 8004e4c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004e50:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e54:	fab3 f383 	clz	r3, r3
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e5e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	461a      	mov	r2, r3
 8004e66:	2301      	movs	r3, #1
 8004e68:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6a:	f7fd fa41 	bl	80022f0 <HAL_GetTick>
 8004e6e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e72:	e00a      	b.n	8004e8a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e74:	f7fd fa3c 	bl	80022f0 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d902      	bls.n	8004e8a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	f000 bceb 	b.w	8005860 <HAL_RCC_OscConfig+0xe1c>
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e90:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004e94:	fa93 f3a3 	rbit	r3, r3
 8004e98:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004e9c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea0:	fab3 f383 	clz	r3, r3
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f043 0301 	orr.w	r3, r3, #1
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d102      	bne.n	8004eba <HAL_RCC_OscConfig+0x476>
 8004eb4:	4b72      	ldr	r3, [pc, #456]	; (8005080 <HAL_RCC_OscConfig+0x63c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	e013      	b.n	8004ee2 <HAL_RCC_OscConfig+0x49e>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004ec4:	fa93 f3a3 	rbit	r3, r3
 8004ec8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004ecc:	2302      	movs	r3, #2
 8004ece:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004ed2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004ed6:	fa93 f3a3 	rbit	r3, r3
 8004eda:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004ede:	4b68      	ldr	r3, [pc, #416]	; (8005080 <HAL_RCC_OscConfig+0x63c>)
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004ee8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004eec:	fa92 f2a2 	rbit	r2, r2
 8004ef0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004ef4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004ef8:	fab2 f282 	clz	r2, r2
 8004efc:	b2d2      	uxtb	r2, r2
 8004efe:	f042 0220 	orr.w	r2, r2, #32
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	f002 021f 	and.w	r2, r2, #31
 8004f08:	2101      	movs	r1, #1
 8004f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f0e:	4013      	ands	r3, r2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0af      	beq.n	8004e74 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f14:	4b5a      	ldr	r3, [pc, #360]	; (8005080 <HAL_RCC_OscConfig+0x63c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f1c:	1d3b      	adds	r3, r7, #4
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	21f8      	movs	r1, #248	; 0xf8
 8004f24:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f28:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004f2c:	fa91 f1a1 	rbit	r1, r1
 8004f30:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004f34:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004f38:	fab1 f181 	clz	r1, r1
 8004f3c:	b2c9      	uxtb	r1, r1
 8004f3e:	408b      	lsls	r3, r1
 8004f40:	494f      	ldr	r1, [pc, #316]	; (8005080 <HAL_RCC_OscConfig+0x63c>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	600b      	str	r3, [r1, #0]
 8004f46:	e06a      	b.n	800501e <HAL_RCC_OscConfig+0x5da>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004f52:	fa93 f3a3 	rbit	r3, r3
 8004f56:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004f5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f5e:	fab3 f383 	clz	r3, r3
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	461a      	mov	r2, r3
 8004f70:	2300      	movs	r3, #0
 8004f72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f74:	f7fd f9bc 	bl	80022f0 <HAL_GetTick>
 8004f78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f7c:	e00a      	b.n	8004f94 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f7e:	f7fd f9b7 	bl	80022f0 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d902      	bls.n	8004f94 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	f000 bc66 	b.w	8005860 <HAL_RCC_OscConfig+0xe1c>
 8004f94:	2302      	movs	r3, #2
 8004f96:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f9e:	fa93 f3a3 	rbit	r3, r3
 8004fa2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004fa6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004faa:	fab3 f383 	clz	r3, r3
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	095b      	lsrs	r3, r3, #5
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	f043 0301 	orr.w	r3, r3, #1
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d102      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x580>
 8004fbe:	4b30      	ldr	r3, [pc, #192]	; (8005080 <HAL_RCC_OscConfig+0x63c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	e013      	b.n	8004fec <HAL_RCC_OscConfig+0x5a8>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fce:	fa93 f3a3 	rbit	r3, r3
 8004fd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004fdc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004fe0:	fa93 f3a3 	rbit	r3, r3
 8004fe4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004fe8:	4b25      	ldr	r3, [pc, #148]	; (8005080 <HAL_RCC_OscConfig+0x63c>)
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	2202      	movs	r2, #2
 8004fee:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004ff2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004ff6:	fa92 f2a2 	rbit	r2, r2
 8004ffa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004ffe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005002:	fab2 f282 	clz	r2, r2
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	f042 0220 	orr.w	r2, r2, #32
 800500c:	b2d2      	uxtb	r2, r2
 800500e:	f002 021f 	and.w	r2, r2, #31
 8005012:	2101      	movs	r1, #1
 8005014:	fa01 f202 	lsl.w	r2, r1, r2
 8005018:	4013      	ands	r3, r2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1af      	bne.n	8004f7e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800501e:	1d3b      	adds	r3, r7, #4
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 80da 	beq.w	80051e2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800502e:	1d3b      	adds	r3, r7, #4
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d069      	beq.n	800510c <HAL_RCC_OscConfig+0x6c8>
 8005038:	2301      	movs	r3, #1
 800503a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800503e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005042:	fa93 f3a3 	rbit	r3, r3
 8005046:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800504a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800504e:	fab3 f383 	clz	r3, r3
 8005052:	b2db      	uxtb	r3, r3
 8005054:	461a      	mov	r2, r3
 8005056:	4b0b      	ldr	r3, [pc, #44]	; (8005084 <HAL_RCC_OscConfig+0x640>)
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	461a      	mov	r2, r3
 800505e:	2301      	movs	r3, #1
 8005060:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005062:	f7fd f945 	bl	80022f0 <HAL_GetTick>
 8005066:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800506a:	e00d      	b.n	8005088 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800506c:	f7fd f940 	bl	80022f0 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d905      	bls.n	8005088 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e3ef      	b.n	8005860 <HAL_RCC_OscConfig+0xe1c>
 8005080:	40021000 	.word	0x40021000
 8005084:	10908120 	.word	0x10908120
 8005088:	2302      	movs	r3, #2
 800508a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005092:	fa93 f2a3 	rbit	r2, r3
 8005096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80050a0:	2202      	movs	r2, #2
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	fa93 f2a3 	rbit	r2, r3
 80050ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80050b8:	2202      	movs	r2, #2
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	fa93 f2a3 	rbit	r2, r3
 80050c6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80050ca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050cc:	4ba4      	ldr	r3, [pc, #656]	; (8005360 <HAL_RCC_OscConfig+0x91c>)
 80050ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050d0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80050d4:	2102      	movs	r1, #2
 80050d6:	6019      	str	r1, [r3, #0]
 80050d8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	fa93 f1a3 	rbit	r1, r3
 80050e2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80050e6:	6019      	str	r1, [r3, #0]
  return result;
 80050e8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	fab3 f383 	clz	r3, r3
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	f003 031f 	and.w	r3, r3, #31
 80050fe:	2101      	movs	r1, #1
 8005100:	fa01 f303 	lsl.w	r3, r1, r3
 8005104:	4013      	ands	r3, r2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0b0      	beq.n	800506c <HAL_RCC_OscConfig+0x628>
 800510a:	e06a      	b.n	80051e2 <HAL_RCC_OscConfig+0x79e>
 800510c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005110:	2201      	movs	r2, #1
 8005112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005114:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	fa93 f2a3 	rbit	r2, r3
 800511e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005122:	601a      	str	r2, [r3, #0]
  return result;
 8005124:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005128:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800512a:	fab3 f383 	clz	r3, r3
 800512e:	b2db      	uxtb	r3, r3
 8005130:	461a      	mov	r2, r3
 8005132:	4b8c      	ldr	r3, [pc, #560]	; (8005364 <HAL_RCC_OscConfig+0x920>)
 8005134:	4413      	add	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	461a      	mov	r2, r3
 800513a:	2300      	movs	r3, #0
 800513c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800513e:	f7fd f8d7 	bl	80022f0 <HAL_GetTick>
 8005142:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005146:	e009      	b.n	800515c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005148:	f7fd f8d2 	bl	80022f0 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d901      	bls.n	800515c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e381      	b.n	8005860 <HAL_RCC_OscConfig+0xe1c>
 800515c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005160:	2202      	movs	r2, #2
 8005162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005164:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	fa93 f2a3 	rbit	r2, r3
 800516e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005178:	2202      	movs	r2, #2
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	fa93 f2a3 	rbit	r2, r3
 8005186:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005190:	2202      	movs	r2, #2
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	fa93 f2a3 	rbit	r2, r3
 800519e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80051a2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051a4:	4b6e      	ldr	r3, [pc, #440]	; (8005360 <HAL_RCC_OscConfig+0x91c>)
 80051a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80051ac:	2102      	movs	r1, #2
 80051ae:	6019      	str	r1, [r3, #0]
 80051b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	fa93 f1a3 	rbit	r1, r3
 80051ba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80051be:	6019      	str	r1, [r3, #0]
  return result;
 80051c0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	fab3 f383 	clz	r3, r3
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	f003 031f 	and.w	r3, r3, #31
 80051d6:	2101      	movs	r1, #1
 80051d8:	fa01 f303 	lsl.w	r3, r1, r3
 80051dc:	4013      	ands	r3, r2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1b2      	bne.n	8005148 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e2:	1d3b      	adds	r3, r7, #4
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 8157 	beq.w	80054a0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051f2:	2300      	movs	r3, #0
 80051f4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051f8:	4b59      	ldr	r3, [pc, #356]	; (8005360 <HAL_RCC_OscConfig+0x91c>)
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d112      	bne.n	800522a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005204:	4b56      	ldr	r3, [pc, #344]	; (8005360 <HAL_RCC_OscConfig+0x91c>)
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	4a55      	ldr	r2, [pc, #340]	; (8005360 <HAL_RCC_OscConfig+0x91c>)
 800520a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800520e:	61d3      	str	r3, [r2, #28]
 8005210:	4b53      	ldr	r3, [pc, #332]	; (8005360 <HAL_RCC_OscConfig+0x91c>)
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005218:	f107 030c 	add.w	r3, r7, #12
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	f107 030c 	add.w	r3, r7, #12
 8005222:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005224:	2301      	movs	r3, #1
 8005226:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800522a:	4b4f      	ldr	r3, [pc, #316]	; (8005368 <HAL_RCC_OscConfig+0x924>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005232:	2b00      	cmp	r3, #0
 8005234:	d11a      	bne.n	800526c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005236:	4b4c      	ldr	r3, [pc, #304]	; (8005368 <HAL_RCC_OscConfig+0x924>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a4b      	ldr	r2, [pc, #300]	; (8005368 <HAL_RCC_OscConfig+0x924>)
 800523c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005240:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005242:	f7fd f855 	bl	80022f0 <HAL_GetTick>
 8005246:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800524a:	e009      	b.n	8005260 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800524c:	f7fd f850 	bl	80022f0 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b64      	cmp	r3, #100	; 0x64
 800525a:	d901      	bls.n	8005260 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e2ff      	b.n	8005860 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005260:	4b41      	ldr	r3, [pc, #260]	; (8005368 <HAL_RCC_OscConfig+0x924>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0ef      	beq.n	800524c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800526c:	1d3b      	adds	r3, r7, #4
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d106      	bne.n	8005284 <HAL_RCC_OscConfig+0x840>
 8005276:	4b3a      	ldr	r3, [pc, #232]	; (8005360 <HAL_RCC_OscConfig+0x91c>)
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	4a39      	ldr	r2, [pc, #228]	; (8005360 <HAL_RCC_OscConfig+0x91c>)
 800527c:	f043 0301 	orr.w	r3, r3, #1
 8005280:	6213      	str	r3, [r2, #32]
 8005282:	e02f      	b.n	80052e4 <HAL_RCC_OscConfig+0x8a0>
 8005284:	1d3b      	adds	r3, r7, #4
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10c      	bne.n	80052a8 <HAL_RCC_OscConfig+0x864>
 800528e:	4b34      	ldr	r3, [pc, #208]	; (8005360 <HAL_RCC_OscConfig+0x91c>)
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	4a33      	ldr	r2, [pc, #204]	; (8005360 <HAL_RCC_OscConfig+0x91c>)
 8005294:	f023 0301 	bic.w	r3, r3, #1
 8005298:	6213      	str	r3, [r2, #32]
 800529a:	4b31      	ldr	r3, [pc, #196]	; (8005360 <HAL_RCC_OscConfig+0x91c>)
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	4a30      	ldr	r2, [pc, #192]	; (8005360 <HAL_RCC_OscConfig+0x91c>)
 80052a0:	f023 0304 	bic.w	r3, r3, #4
 80052a4:	6213      	str	r3, [r2, #32]
 80052a6:	e01d      	b.n	80052e4 <HAL_RCC_OscConfig+0x8a0>
 80052a8:	1d3b      	adds	r3, r7, #4
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	2b05      	cmp	r3, #5
 80052b0:	d10c      	bne.n	80052cc <HAL_RCC_OscConfig+0x888>
 80052b2:	4b2b      	ldr	r3, [pc, #172]	; (8005360 <HAL_RCC_OscConfig+0x91c>)
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	4a2a      	ldr	r2, [pc, #168]	; (8005360 <HAL_RCC_OscConfig+0x91c>)
 80052b8:	f043 0304 	orr.w	r3, r3, #4
 80052bc:	6213      	str	r3, [r2, #32]
 80052be:	4b28      	ldr	r3, [pc, #160]	; (8005360 <HAL_RCC_OscConfig+0x91c>)
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	4a27      	ldr	r2, [pc, #156]	; (8005360 <HAL_RCC_OscConfig+0x91c>)
 80052c4:	f043 0301 	orr.w	r3, r3, #1
 80052c8:	6213      	str	r3, [r2, #32]
 80052ca:	e00b      	b.n	80052e4 <HAL_RCC_OscConfig+0x8a0>
 80052cc:	4b24      	ldr	r3, [pc, #144]	; (8005360 <HAL_RCC_OscConfig+0x91c>)
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	4a23      	ldr	r2, [pc, #140]	; (8005360 <HAL_RCC_OscConfig+0x91c>)
 80052d2:	f023 0301 	bic.w	r3, r3, #1
 80052d6:	6213      	str	r3, [r2, #32]
 80052d8:	4b21      	ldr	r3, [pc, #132]	; (8005360 <HAL_RCC_OscConfig+0x91c>)
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	4a20      	ldr	r2, [pc, #128]	; (8005360 <HAL_RCC_OscConfig+0x91c>)
 80052de:	f023 0304 	bic.w	r3, r3, #4
 80052e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052e4:	1d3b      	adds	r3, r7, #4
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d06a      	beq.n	80053c4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ee:	f7fc ffff 	bl	80022f0 <HAL_GetTick>
 80052f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f6:	e00b      	b.n	8005310 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052f8:	f7fc fffa 	bl	80022f0 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	f241 3288 	movw	r2, #5000	; 0x1388
 8005308:	4293      	cmp	r3, r2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e2a7      	b.n	8005860 <HAL_RCC_OscConfig+0xe1c>
 8005310:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005314:	2202      	movs	r2, #2
 8005316:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005318:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	fa93 f2a3 	rbit	r2, r3
 8005322:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800532c:	2202      	movs	r2, #2
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	fa93 f2a3 	rbit	r2, r3
 800533a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800533e:	601a      	str	r2, [r3, #0]
  return result;
 8005340:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005344:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005346:	fab3 f383 	clz	r3, r3
 800534a:	b2db      	uxtb	r3, r3
 800534c:	095b      	lsrs	r3, r3, #5
 800534e:	b2db      	uxtb	r3, r3
 8005350:	f043 0302 	orr.w	r3, r3, #2
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d108      	bne.n	800536c <HAL_RCC_OscConfig+0x928>
 800535a:	4b01      	ldr	r3, [pc, #4]	; (8005360 <HAL_RCC_OscConfig+0x91c>)
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	e013      	b.n	8005388 <HAL_RCC_OscConfig+0x944>
 8005360:	40021000 	.word	0x40021000
 8005364:	10908120 	.word	0x10908120
 8005368:	40007000 	.word	0x40007000
 800536c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005370:	2202      	movs	r2, #2
 8005372:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005374:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	fa93 f2a3 	rbit	r2, r3
 800537e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	4bc0      	ldr	r3, [pc, #768]	; (8005688 <HAL_RCC_OscConfig+0xc44>)
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800538c:	2102      	movs	r1, #2
 800538e:	6011      	str	r1, [r2, #0]
 8005390:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005394:	6812      	ldr	r2, [r2, #0]
 8005396:	fa92 f1a2 	rbit	r1, r2
 800539a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800539e:	6011      	str	r1, [r2, #0]
  return result;
 80053a0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80053a4:	6812      	ldr	r2, [r2, #0]
 80053a6:	fab2 f282 	clz	r2, r2
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	f002 021f 	and.w	r2, r2, #31
 80053b6:	2101      	movs	r1, #1
 80053b8:	fa01 f202 	lsl.w	r2, r1, r2
 80053bc:	4013      	ands	r3, r2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d09a      	beq.n	80052f8 <HAL_RCC_OscConfig+0x8b4>
 80053c2:	e063      	b.n	800548c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053c4:	f7fc ff94 	bl	80022f0 <HAL_GetTick>
 80053c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053cc:	e00b      	b.n	80053e6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ce:	f7fc ff8f 	bl	80022f0 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	f241 3288 	movw	r2, #5000	; 0x1388
 80053de:	4293      	cmp	r3, r2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e23c      	b.n	8005860 <HAL_RCC_OscConfig+0xe1c>
 80053e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80053ea:	2202      	movs	r2, #2
 80053ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	fa93 f2a3 	rbit	r2, r3
 80053f8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005402:	2202      	movs	r2, #2
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	fa93 f2a3 	rbit	r2, r3
 8005410:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005414:	601a      	str	r2, [r3, #0]
  return result;
 8005416:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800541a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800541c:	fab3 f383 	clz	r3, r3
 8005420:	b2db      	uxtb	r3, r3
 8005422:	095b      	lsrs	r3, r3, #5
 8005424:	b2db      	uxtb	r3, r3
 8005426:	f043 0302 	orr.w	r3, r3, #2
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d102      	bne.n	8005436 <HAL_RCC_OscConfig+0x9f2>
 8005430:	4b95      	ldr	r3, [pc, #596]	; (8005688 <HAL_RCC_OscConfig+0xc44>)
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	e00d      	b.n	8005452 <HAL_RCC_OscConfig+0xa0e>
 8005436:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800543a:	2202      	movs	r2, #2
 800543c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800543e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	fa93 f2a3 	rbit	r2, r3
 8005448:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	4b8e      	ldr	r3, [pc, #568]	; (8005688 <HAL_RCC_OscConfig+0xc44>)
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8005456:	2102      	movs	r1, #2
 8005458:	6011      	str	r1, [r2, #0]
 800545a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800545e:	6812      	ldr	r2, [r2, #0]
 8005460:	fa92 f1a2 	rbit	r1, r2
 8005464:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005468:	6011      	str	r1, [r2, #0]
  return result;
 800546a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800546e:	6812      	ldr	r2, [r2, #0]
 8005470:	fab2 f282 	clz	r2, r2
 8005474:	b2d2      	uxtb	r2, r2
 8005476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	f002 021f 	and.w	r2, r2, #31
 8005480:	2101      	movs	r1, #1
 8005482:	fa01 f202 	lsl.w	r2, r1, r2
 8005486:	4013      	ands	r3, r2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1a0      	bne.n	80053ce <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800548c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8005490:	2b01      	cmp	r3, #1
 8005492:	d105      	bne.n	80054a0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005494:	4b7c      	ldr	r3, [pc, #496]	; (8005688 <HAL_RCC_OscConfig+0xc44>)
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	4a7b      	ldr	r2, [pc, #492]	; (8005688 <HAL_RCC_OscConfig+0xc44>)
 800549a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800549e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054a0:	1d3b      	adds	r3, r7, #4
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 81d9 	beq.w	800585e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054ac:	4b76      	ldr	r3, [pc, #472]	; (8005688 <HAL_RCC_OscConfig+0xc44>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f003 030c 	and.w	r3, r3, #12
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	f000 81a6 	beq.w	8005806 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054ba:	1d3b      	adds	r3, r7, #4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	f040 811e 	bne.w	8005702 <HAL_RCC_OscConfig+0xcbe>
 80054c6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80054ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	fa93 f2a3 	rbit	r2, r3
 80054da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80054de:	601a      	str	r2, [r3, #0]
  return result;
 80054e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80054e4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054e6:	fab3 f383 	clz	r3, r3
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80054f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	461a      	mov	r2, r3
 80054f8:	2300      	movs	r3, #0
 80054fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054fc:	f7fc fef8 	bl	80022f0 <HAL_GetTick>
 8005500:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005504:	e009      	b.n	800551a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005506:	f7fc fef3 	bl	80022f0 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e1a2      	b.n	8005860 <HAL_RCC_OscConfig+0xe1c>
 800551a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800551e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005522:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005524:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	fa93 f2a3 	rbit	r2, r3
 800552e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005532:	601a      	str	r2, [r3, #0]
  return result;
 8005534:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005538:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800553a:	fab3 f383 	clz	r3, r3
 800553e:	b2db      	uxtb	r3, r3
 8005540:	095b      	lsrs	r3, r3, #5
 8005542:	b2db      	uxtb	r3, r3
 8005544:	f043 0301 	orr.w	r3, r3, #1
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b01      	cmp	r3, #1
 800554c:	d102      	bne.n	8005554 <HAL_RCC_OscConfig+0xb10>
 800554e:	4b4e      	ldr	r3, [pc, #312]	; (8005688 <HAL_RCC_OscConfig+0xc44>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	e01b      	b.n	800558c <HAL_RCC_OscConfig+0xb48>
 8005554:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005558:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800555c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	fa93 f2a3 	rbit	r2, r3
 8005568:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005572:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	fa93 f2a3 	rbit	r2, r3
 8005582:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	4b3f      	ldr	r3, [pc, #252]	; (8005688 <HAL_RCC_OscConfig+0xc44>)
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005590:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005594:	6011      	str	r1, [r2, #0]
 8005596:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800559a:	6812      	ldr	r2, [r2, #0]
 800559c:	fa92 f1a2 	rbit	r1, r2
 80055a0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80055a4:	6011      	str	r1, [r2, #0]
  return result;
 80055a6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80055aa:	6812      	ldr	r2, [r2, #0]
 80055ac:	fab2 f282 	clz	r2, r2
 80055b0:	b2d2      	uxtb	r2, r2
 80055b2:	f042 0220 	orr.w	r2, r2, #32
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	f002 021f 	and.w	r2, r2, #31
 80055bc:	2101      	movs	r1, #1
 80055be:	fa01 f202 	lsl.w	r2, r1, r2
 80055c2:	4013      	ands	r3, r2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d19e      	bne.n	8005506 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055c8:	4b2f      	ldr	r3, [pc, #188]	; (8005688 <HAL_RCC_OscConfig+0xc44>)
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	f023 020f 	bic.w	r2, r3, #15
 80055d0:	1d3b      	adds	r3, r7, #4
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	492c      	ldr	r1, [pc, #176]	; (8005688 <HAL_RCC_OscConfig+0xc44>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	62cb      	str	r3, [r1, #44]	; 0x2c
 80055dc:	4b2a      	ldr	r3, [pc, #168]	; (8005688 <HAL_RCC_OscConfig+0xc44>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80055e4:	1d3b      	adds	r3, r7, #4
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6a19      	ldr	r1, [r3, #32]
 80055ea:	1d3b      	adds	r3, r7, #4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	430b      	orrs	r3, r1
 80055f2:	4925      	ldr	r1, [pc, #148]	; (8005688 <HAL_RCC_OscConfig+0xc44>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	604b      	str	r3, [r1, #4]
 80055f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80055fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005600:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005602:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	fa93 f2a3 	rbit	r2, r3
 800560c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005610:	601a      	str	r2, [r3, #0]
  return result;
 8005612:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005616:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005618:	fab3 f383 	clz	r3, r3
 800561c:	b2db      	uxtb	r3, r3
 800561e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005622:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	461a      	mov	r2, r3
 800562a:	2301      	movs	r3, #1
 800562c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800562e:	f7fc fe5f 	bl	80022f0 <HAL_GetTick>
 8005632:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005636:	e009      	b.n	800564c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005638:	f7fc fe5a 	bl	80022f0 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d901      	bls.n	800564c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e109      	b.n	8005860 <HAL_RCC_OscConfig+0xe1c>
 800564c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005650:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005654:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005656:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	fa93 f2a3 	rbit	r2, r3
 8005660:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005664:	601a      	str	r2, [r3, #0]
  return result;
 8005666:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800566a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800566c:	fab3 f383 	clz	r3, r3
 8005670:	b2db      	uxtb	r3, r3
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	b2db      	uxtb	r3, r3
 8005676:	f043 0301 	orr.w	r3, r3, #1
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b01      	cmp	r3, #1
 800567e:	d105      	bne.n	800568c <HAL_RCC_OscConfig+0xc48>
 8005680:	4b01      	ldr	r3, [pc, #4]	; (8005688 <HAL_RCC_OscConfig+0xc44>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	e01e      	b.n	80056c4 <HAL_RCC_OscConfig+0xc80>
 8005686:	bf00      	nop
 8005688:	40021000 	.word	0x40021000
 800568c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005690:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005694:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005696:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	fa93 f2a3 	rbit	r2, r3
 80056a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80056aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	fa93 f2a3 	rbit	r2, r3
 80056ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	4b6a      	ldr	r3, [pc, #424]	; (800586c <HAL_RCC_OscConfig+0xe28>)
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80056c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80056cc:	6011      	str	r1, [r2, #0]
 80056ce:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80056d2:	6812      	ldr	r2, [r2, #0]
 80056d4:	fa92 f1a2 	rbit	r1, r2
 80056d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80056dc:	6011      	str	r1, [r2, #0]
  return result;
 80056de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80056e2:	6812      	ldr	r2, [r2, #0]
 80056e4:	fab2 f282 	clz	r2, r2
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	f042 0220 	orr.w	r2, r2, #32
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	f002 021f 	and.w	r2, r2, #31
 80056f4:	2101      	movs	r1, #1
 80056f6:	fa01 f202 	lsl.w	r2, r1, r2
 80056fa:	4013      	ands	r3, r2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d09b      	beq.n	8005638 <HAL_RCC_OscConfig+0xbf4>
 8005700:	e0ad      	b.n	800585e <HAL_RCC_OscConfig+0xe1a>
 8005702:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005706:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800570a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800570c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	fa93 f2a3 	rbit	r2, r3
 8005716:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800571a:	601a      	str	r2, [r3, #0]
  return result;
 800571c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005720:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005722:	fab3 f383 	clz	r3, r3
 8005726:	b2db      	uxtb	r3, r3
 8005728:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800572c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	461a      	mov	r2, r3
 8005734:	2300      	movs	r3, #0
 8005736:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005738:	f7fc fdda 	bl	80022f0 <HAL_GetTick>
 800573c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005740:	e009      	b.n	8005756 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005742:	f7fc fdd5 	bl	80022f0 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e084      	b.n	8005860 <HAL_RCC_OscConfig+0xe1c>
 8005756:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800575a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800575e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005760:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	fa93 f2a3 	rbit	r2, r3
 800576a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800576e:	601a      	str	r2, [r3, #0]
  return result;
 8005770:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005774:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005776:	fab3 f383 	clz	r3, r3
 800577a:	b2db      	uxtb	r3, r3
 800577c:	095b      	lsrs	r3, r3, #5
 800577e:	b2db      	uxtb	r3, r3
 8005780:	f043 0301 	orr.w	r3, r3, #1
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b01      	cmp	r3, #1
 8005788:	d102      	bne.n	8005790 <HAL_RCC_OscConfig+0xd4c>
 800578a:	4b38      	ldr	r3, [pc, #224]	; (800586c <HAL_RCC_OscConfig+0xe28>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	e01b      	b.n	80057c8 <HAL_RCC_OscConfig+0xd84>
 8005790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005794:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	fa93 f2a3 	rbit	r2, r3
 80057a4:	f107 0320 	add.w	r3, r7, #32
 80057a8:	601a      	str	r2, [r3, #0]
 80057aa:	f107 031c 	add.w	r3, r7, #28
 80057ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	f107 031c 	add.w	r3, r7, #28
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	fa93 f2a3 	rbit	r2, r3
 80057be:	f107 0318 	add.w	r3, r7, #24
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	4b29      	ldr	r3, [pc, #164]	; (800586c <HAL_RCC_OscConfig+0xe28>)
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	f107 0214 	add.w	r2, r7, #20
 80057cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80057d0:	6011      	str	r1, [r2, #0]
 80057d2:	f107 0214 	add.w	r2, r7, #20
 80057d6:	6812      	ldr	r2, [r2, #0]
 80057d8:	fa92 f1a2 	rbit	r1, r2
 80057dc:	f107 0210 	add.w	r2, r7, #16
 80057e0:	6011      	str	r1, [r2, #0]
  return result;
 80057e2:	f107 0210 	add.w	r2, r7, #16
 80057e6:	6812      	ldr	r2, [r2, #0]
 80057e8:	fab2 f282 	clz	r2, r2
 80057ec:	b2d2      	uxtb	r2, r2
 80057ee:	f042 0220 	orr.w	r2, r2, #32
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	f002 021f 	and.w	r2, r2, #31
 80057f8:	2101      	movs	r1, #1
 80057fa:	fa01 f202 	lsl.w	r2, r1, r2
 80057fe:	4013      	ands	r3, r2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d19e      	bne.n	8005742 <HAL_RCC_OscConfig+0xcfe>
 8005804:	e02b      	b.n	800585e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005806:	1d3b      	adds	r3, r7, #4
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e025      	b.n	8005860 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005814:	4b15      	ldr	r3, [pc, #84]	; (800586c <HAL_RCC_OscConfig+0xe28>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800581c:	4b13      	ldr	r3, [pc, #76]	; (800586c <HAL_RCC_OscConfig+0xe28>)
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005824:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005828:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800582c:	1d3b      	adds	r3, r7, #4
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	429a      	cmp	r2, r3
 8005834:	d111      	bne.n	800585a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005836:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800583a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800583e:	1d3b      	adds	r3, r7, #4
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005844:	429a      	cmp	r2, r3
 8005846:	d108      	bne.n	800585a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005848:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800584c:	f003 020f 	and.w	r2, r3, #15
 8005850:	1d3b      	adds	r3, r7, #4
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005856:	429a      	cmp	r2, r3
 8005858:	d001      	beq.n	800585e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40021000 	.word	0x40021000

08005870 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b09e      	sub	sp, #120	; 0x78
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800587a:	2300      	movs	r3, #0
 800587c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e162      	b.n	8005b4e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005888:	4b90      	ldr	r3, [pc, #576]	; (8005acc <HAL_RCC_ClockConfig+0x25c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0307 	and.w	r3, r3, #7
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d910      	bls.n	80058b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005896:	4b8d      	ldr	r3, [pc, #564]	; (8005acc <HAL_RCC_ClockConfig+0x25c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f023 0207 	bic.w	r2, r3, #7
 800589e:	498b      	ldr	r1, [pc, #556]	; (8005acc <HAL_RCC_ClockConfig+0x25c>)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058a6:	4b89      	ldr	r3, [pc, #548]	; (8005acc <HAL_RCC_ClockConfig+0x25c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0307 	and.w	r3, r3, #7
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d001      	beq.n	80058b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e14a      	b.n	8005b4e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d008      	beq.n	80058d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058c4:	4b82      	ldr	r3, [pc, #520]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	497f      	ldr	r1, [pc, #508]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 80dc 	beq.w	8005a9c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d13c      	bne.n	8005966 <HAL_RCC_ClockConfig+0xf6>
 80058ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058f4:	fa93 f3a3 	rbit	r3, r3
 80058f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80058fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058fc:	fab3 f383 	clz	r3, r3
 8005900:	b2db      	uxtb	r3, r3
 8005902:	095b      	lsrs	r3, r3, #5
 8005904:	b2db      	uxtb	r3, r3
 8005906:	f043 0301 	orr.w	r3, r3, #1
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b01      	cmp	r3, #1
 800590e:	d102      	bne.n	8005916 <HAL_RCC_ClockConfig+0xa6>
 8005910:	4b6f      	ldr	r3, [pc, #444]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	e00f      	b.n	8005936 <HAL_RCC_ClockConfig+0xc6>
 8005916:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800591a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800591e:	fa93 f3a3 	rbit	r3, r3
 8005922:	667b      	str	r3, [r7, #100]	; 0x64
 8005924:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005928:	663b      	str	r3, [r7, #96]	; 0x60
 800592a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800592c:	fa93 f3a3 	rbit	r3, r3
 8005930:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005932:	4b67      	ldr	r3, [pc, #412]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800593a:	65ba      	str	r2, [r7, #88]	; 0x58
 800593c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800593e:	fa92 f2a2 	rbit	r2, r2
 8005942:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005944:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005946:	fab2 f282 	clz	r2, r2
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	f042 0220 	orr.w	r2, r2, #32
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	f002 021f 	and.w	r2, r2, #31
 8005956:	2101      	movs	r1, #1
 8005958:	fa01 f202 	lsl.w	r2, r1, r2
 800595c:	4013      	ands	r3, r2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d17b      	bne.n	8005a5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e0f3      	b.n	8005b4e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2b02      	cmp	r3, #2
 800596c:	d13c      	bne.n	80059e8 <HAL_RCC_ClockConfig+0x178>
 800596e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005972:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005976:	fa93 f3a3 	rbit	r3, r3
 800597a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800597c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800597e:	fab3 f383 	clz	r3, r3
 8005982:	b2db      	uxtb	r3, r3
 8005984:	095b      	lsrs	r3, r3, #5
 8005986:	b2db      	uxtb	r3, r3
 8005988:	f043 0301 	orr.w	r3, r3, #1
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b01      	cmp	r3, #1
 8005990:	d102      	bne.n	8005998 <HAL_RCC_ClockConfig+0x128>
 8005992:	4b4f      	ldr	r3, [pc, #316]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	e00f      	b.n	80059b8 <HAL_RCC_ClockConfig+0x148>
 8005998:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800599c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800599e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059a0:	fa93 f3a3 	rbit	r3, r3
 80059a4:	647b      	str	r3, [r7, #68]	; 0x44
 80059a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059aa:	643b      	str	r3, [r7, #64]	; 0x40
 80059ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ae:	fa93 f3a3 	rbit	r3, r3
 80059b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059b4:	4b46      	ldr	r3, [pc, #280]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059bc:	63ba      	str	r2, [r7, #56]	; 0x38
 80059be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059c0:	fa92 f2a2 	rbit	r2, r2
 80059c4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80059c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059c8:	fab2 f282 	clz	r2, r2
 80059cc:	b2d2      	uxtb	r2, r2
 80059ce:	f042 0220 	orr.w	r2, r2, #32
 80059d2:	b2d2      	uxtb	r2, r2
 80059d4:	f002 021f 	and.w	r2, r2, #31
 80059d8:	2101      	movs	r1, #1
 80059da:	fa01 f202 	lsl.w	r2, r1, r2
 80059de:	4013      	ands	r3, r2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d13a      	bne.n	8005a5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e0b2      	b.n	8005b4e <HAL_RCC_ClockConfig+0x2de>
 80059e8:	2302      	movs	r3, #2
 80059ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	fa93 f3a3 	rbit	r3, r3
 80059f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80059f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059f6:	fab3 f383 	clz	r3, r3
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	095b      	lsrs	r3, r3, #5
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	f043 0301 	orr.w	r3, r3, #1
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d102      	bne.n	8005a10 <HAL_RCC_ClockConfig+0x1a0>
 8005a0a:	4b31      	ldr	r3, [pc, #196]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	e00d      	b.n	8005a2c <HAL_RCC_ClockConfig+0x1bc>
 8005a10:	2302      	movs	r3, #2
 8005a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	fa93 f3a3 	rbit	r3, r3
 8005a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	623b      	str	r3, [r7, #32]
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	fa93 f3a3 	rbit	r3, r3
 8005a26:	61fb      	str	r3, [r7, #28]
 8005a28:	4b29      	ldr	r3, [pc, #164]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	61ba      	str	r2, [r7, #24]
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	fa92 f2a2 	rbit	r2, r2
 8005a36:	617a      	str	r2, [r7, #20]
  return result;
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	fab2 f282 	clz	r2, r2
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	f042 0220 	orr.w	r2, r2, #32
 8005a44:	b2d2      	uxtb	r2, r2
 8005a46:	f002 021f 	and.w	r2, r2, #31
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a50:	4013      	ands	r3, r2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e079      	b.n	8005b4e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a5a:	4b1d      	ldr	r3, [pc, #116]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f023 0203 	bic.w	r2, r3, #3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	491a      	ldr	r1, [pc, #104]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a6c:	f7fc fc40 	bl	80022f0 <HAL_GetTick>
 8005a70:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a72:	e00a      	b.n	8005a8a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a74:	f7fc fc3c 	bl	80022f0 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e061      	b.n	8005b4e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a8a:	4b11      	ldr	r3, [pc, #68]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f003 020c 	and.w	r2, r3, #12
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d1eb      	bne.n	8005a74 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a9c:	4b0b      	ldr	r3, [pc, #44]	; (8005acc <HAL_RCC_ClockConfig+0x25c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d214      	bcs.n	8005ad4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aaa:	4b08      	ldr	r3, [pc, #32]	; (8005acc <HAL_RCC_ClockConfig+0x25c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f023 0207 	bic.w	r2, r3, #7
 8005ab2:	4906      	ldr	r1, [pc, #24]	; (8005acc <HAL_RCC_ClockConfig+0x25c>)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aba:	4b04      	ldr	r3, [pc, #16]	; (8005acc <HAL_RCC_ClockConfig+0x25c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0307 	and.w	r3, r3, #7
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d005      	beq.n	8005ad4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e040      	b.n	8005b4e <HAL_RCC_ClockConfig+0x2de>
 8005acc:	40022000 	.word	0x40022000
 8005ad0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d008      	beq.n	8005af2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ae0:	4b1d      	ldr	r3, [pc, #116]	; (8005b58 <HAL_RCC_ClockConfig+0x2e8>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	491a      	ldr	r1, [pc, #104]	; (8005b58 <HAL_RCC_ClockConfig+0x2e8>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d009      	beq.n	8005b12 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005afe:	4b16      	ldr	r3, [pc, #88]	; (8005b58 <HAL_RCC_ClockConfig+0x2e8>)
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	4912      	ldr	r1, [pc, #72]	; (8005b58 <HAL_RCC_ClockConfig+0x2e8>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005b12:	f000 f829 	bl	8005b68 <HAL_RCC_GetSysClockFreq>
 8005b16:	4601      	mov	r1, r0
 8005b18:	4b0f      	ldr	r3, [pc, #60]	; (8005b58 <HAL_RCC_ClockConfig+0x2e8>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b20:	22f0      	movs	r2, #240	; 0xf0
 8005b22:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	fa92 f2a2 	rbit	r2, r2
 8005b2a:	60fa      	str	r2, [r7, #12]
  return result;
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	fab2 f282 	clz	r2, r2
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	40d3      	lsrs	r3, r2
 8005b36:	4a09      	ldr	r2, [pc, #36]	; (8005b5c <HAL_RCC_ClockConfig+0x2ec>)
 8005b38:	5cd3      	ldrb	r3, [r2, r3]
 8005b3a:	fa21 f303 	lsr.w	r3, r1, r3
 8005b3e:	4a08      	ldr	r2, [pc, #32]	; (8005b60 <HAL_RCC_ClockConfig+0x2f0>)
 8005b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005b42:	4b08      	ldr	r3, [pc, #32]	; (8005b64 <HAL_RCC_ClockConfig+0x2f4>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fc fb8e 	bl	8002268 <HAL_InitTick>
  
  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3778      	adds	r7, #120	; 0x78
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	080094fc 	.word	0x080094fc
 8005b60:	20000a10 	.word	0x20000a10
 8005b64:	20000a14 	.word	0x20000a14

08005b68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b08b      	sub	sp, #44	; 0x2c
 8005b6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	61fb      	str	r3, [r7, #28]
 8005b72:	2300      	movs	r3, #0
 8005b74:	61bb      	str	r3, [r7, #24]
 8005b76:	2300      	movs	r3, #0
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005b82:	4b2a      	ldr	r3, [pc, #168]	; (8005c2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	f003 030c 	and.w	r3, r3, #12
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	d002      	beq.n	8005b98 <HAL_RCC_GetSysClockFreq+0x30>
 8005b92:	2b08      	cmp	r3, #8
 8005b94:	d003      	beq.n	8005b9e <HAL_RCC_GetSysClockFreq+0x36>
 8005b96:	e03f      	b.n	8005c18 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b98:	4b25      	ldr	r3, [pc, #148]	; (8005c30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005b9a:	623b      	str	r3, [r7, #32]
      break;
 8005b9c:	e03f      	b.n	8005c1e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005ba4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005ba8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	fa92 f2a2 	rbit	r2, r2
 8005bb0:	607a      	str	r2, [r7, #4]
  return result;
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	fab2 f282 	clz	r2, r2
 8005bb8:	b2d2      	uxtb	r2, r2
 8005bba:	40d3      	lsrs	r3, r2
 8005bbc:	4a1d      	ldr	r2, [pc, #116]	; (8005c34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005bbe:	5cd3      	ldrb	r3, [r2, r3]
 8005bc0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005bc2:	4b1a      	ldr	r3, [pc, #104]	; (8005c2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc6:	f003 030f 	and.w	r3, r3, #15
 8005bca:	220f      	movs	r2, #15
 8005bcc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	fa92 f2a2 	rbit	r2, r2
 8005bd4:	60fa      	str	r2, [r7, #12]
  return result;
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	fab2 f282 	clz	r2, r2
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	40d3      	lsrs	r3, r2
 8005be0:	4a15      	ldr	r2, [pc, #84]	; (8005c38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005be2:	5cd3      	ldrb	r3, [r2, r3]
 8005be4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d008      	beq.n	8005c02 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005bf0:	4a0f      	ldr	r2, [pc, #60]	; (8005c30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	fb02 f303 	mul.w	r3, r2, r3
 8005bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8005c00:	e007      	b.n	8005c12 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005c02:	4a0b      	ldr	r2, [pc, #44]	; (8005c30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	fb02 f303 	mul.w	r3, r2, r3
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	623b      	str	r3, [r7, #32]
      break;
 8005c16:	e002      	b.n	8005c1e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c18:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005c1a:	623b      	str	r3, [r7, #32]
      break;
 8005c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	372c      	adds	r7, #44	; 0x2c
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	40021000 	.word	0x40021000
 8005c30:	007a1200 	.word	0x007a1200
 8005c34:	08009514 	.word	0x08009514
 8005c38:	08009524 	.word	0x08009524

08005c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c40:	4b03      	ldr	r3, [pc, #12]	; (8005c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c42:	681b      	ldr	r3, [r3, #0]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	20000a10 	.word	0x20000a10

08005c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005c5a:	f7ff ffef 	bl	8005c3c <HAL_RCC_GetHCLKFreq>
 8005c5e:	4601      	mov	r1, r0
 8005c60:	4b0b      	ldr	r3, [pc, #44]	; (8005c90 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c68:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005c6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	fa92 f2a2 	rbit	r2, r2
 8005c74:	603a      	str	r2, [r7, #0]
  return result;
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	fab2 f282 	clz	r2, r2
 8005c7c:	b2d2      	uxtb	r2, r2
 8005c7e:	40d3      	lsrs	r3, r2
 8005c80:	4a04      	ldr	r2, [pc, #16]	; (8005c94 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005c82:	5cd3      	ldrb	r3, [r2, r3]
 8005c84:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	40021000 	.word	0x40021000
 8005c94:	0800950c 	.word	0x0800950c

08005c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005c9e:	f7ff ffcd 	bl	8005c3c <HAL_RCC_GetHCLKFreq>
 8005ca2:	4601      	mov	r1, r0
 8005ca4:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005cac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005cb0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	fa92 f2a2 	rbit	r2, r2
 8005cb8:	603a      	str	r2, [r7, #0]
  return result;
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	fab2 f282 	clz	r2, r2
 8005cc0:	b2d2      	uxtb	r2, r2
 8005cc2:	40d3      	lsrs	r3, r2
 8005cc4:	4a04      	ldr	r2, [pc, #16]	; (8005cd8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005cc6:	5cd3      	ldrb	r3, [r2, r3]
 8005cc8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	40021000 	.word	0x40021000
 8005cd8:	0800950c 	.word	0x0800950c

08005cdc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b092      	sub	sp, #72	; 0x48
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005cec:	2300      	movs	r3, #0
 8005cee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 80d4 	beq.w	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d00:	4b4e      	ldr	r3, [pc, #312]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10e      	bne.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d0c:	4b4b      	ldr	r3, [pc, #300]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d0e:	69db      	ldr	r3, [r3, #28]
 8005d10:	4a4a      	ldr	r2, [pc, #296]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d16:	61d3      	str	r3, [r2, #28]
 8005d18:	4b48      	ldr	r3, [pc, #288]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d20:	60bb      	str	r3, [r7, #8]
 8005d22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d24:	2301      	movs	r3, #1
 8005d26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d2a:	4b45      	ldr	r3, [pc, #276]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d118      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d36:	4b42      	ldr	r3, [pc, #264]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a41      	ldr	r2, [pc, #260]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d40:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d42:	f7fc fad5 	bl	80022f0 <HAL_GetTick>
 8005d46:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d48:	e008      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d4a:	f7fc fad1 	bl	80022f0 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b64      	cmp	r3, #100	; 0x64
 8005d56:	d901      	bls.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e1d6      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d5c:	4b38      	ldr	r3, [pc, #224]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d0f0      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d68:	4b34      	ldr	r3, [pc, #208]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d70:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f000 8084 	beq.w	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d07c      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d88:	4b2c      	ldr	r3, [pc, #176]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9a:	fa93 f3a3 	rbit	r3, r3
 8005d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005da2:	fab3 f383 	clz	r3, r3
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	461a      	mov	r2, r3
 8005daa:	4b26      	ldr	r3, [pc, #152]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005dac:	4413      	add	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	461a      	mov	r2, r3
 8005db2:	2301      	movs	r3, #1
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005dba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbe:	fa93 f3a3 	rbit	r3, r3
 8005dc2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dc6:	fab3 f383 	clz	r3, r3
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	461a      	mov	r2, r3
 8005dce:	4b1d      	ldr	r3, [pc, #116]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005dd0:	4413      	add	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005dda:	4a18      	ldr	r2, [pc, #96]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dde:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d04b      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dea:	f7fc fa81 	bl	80022f0 <HAL_GetTick>
 8005dee:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df0:	e00a      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005df2:	f7fc fa7d 	bl	80022f0 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d901      	bls.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e180      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	fa93 f3a3 	rbit	r3, r3
 8005e12:	627b      	str	r3, [r7, #36]	; 0x24
 8005e14:	2302      	movs	r3, #2
 8005e16:	623b      	str	r3, [r7, #32]
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	fa93 f3a3 	rbit	r3, r3
 8005e1e:	61fb      	str	r3, [r7, #28]
  return result;
 8005e20:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e22:	fab3 f383 	clz	r3, r3
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	095b      	lsrs	r3, r3, #5
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	f043 0302 	orr.w	r3, r3, #2
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d108      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005e36:	4b01      	ldr	r3, [pc, #4]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	e00d      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005e3c:	40021000 	.word	0x40021000
 8005e40:	40007000 	.word	0x40007000
 8005e44:	10908100 	.word	0x10908100
 8005e48:	2302      	movs	r3, #2
 8005e4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	fa93 f3a3 	rbit	r3, r3
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	4ba0      	ldr	r3, [pc, #640]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	2202      	movs	r2, #2
 8005e5a:	613a      	str	r2, [r7, #16]
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	fa92 f2a2 	rbit	r2, r2
 8005e62:	60fa      	str	r2, [r7, #12]
  return result;
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	fab2 f282 	clz	r2, r2
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e70:	b2d2      	uxtb	r2, r2
 8005e72:	f002 021f 	and.w	r2, r2, #31
 8005e76:	2101      	movs	r1, #1
 8005e78:	fa01 f202 	lsl.w	r2, r1, r2
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0b7      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005e82:	4b95      	ldr	r3, [pc, #596]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	4992      	ldr	r1, [pc, #584]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d105      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e9c:	4b8e      	ldr	r3, [pc, #568]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	4a8d      	ldr	r2, [pc, #564]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ea6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d008      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005eb4:	4b88      	ldr	r3, [pc, #544]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb8:	f023 0203 	bic.w	r2, r3, #3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	4985      	ldr	r1, [pc, #532]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d008      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ed2:	4b81      	ldr	r3, [pc, #516]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	497e      	ldr	r1, [pc, #504]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d008      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ef0:	4b79      	ldr	r3, [pc, #484]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	4976      	ldr	r1, [pc, #472]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0320 	and.w	r3, r3, #32
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d008      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f0e:	4b72      	ldr	r3, [pc, #456]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f12:	f023 0210 	bic.w	r2, r3, #16
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	496f      	ldr	r1, [pc, #444]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d008      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005f2c:	4b6a      	ldr	r3, [pc, #424]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f38:	4967      	ldr	r1, [pc, #412]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d008      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f4a:	4b63      	ldr	r3, [pc, #396]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4e:	f023 0220 	bic.w	r2, r3, #32
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	4960      	ldr	r1, [pc, #384]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d008      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f68:	4b5b      	ldr	r3, [pc, #364]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f74:	4958      	ldr	r1, [pc, #352]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0308 	and.w	r3, r3, #8
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d008      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f86:	4b54      	ldr	r3, [pc, #336]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	4951      	ldr	r1, [pc, #324]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0310 	and.w	r3, r3, #16
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d008      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005fa4:	4b4c      	ldr	r3, [pc, #304]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	4949      	ldr	r1, [pc, #292]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d008      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005fc2:	4b45      	ldr	r3, [pc, #276]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fce:	4942      	ldr	r1, [pc, #264]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d008      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005fe0:	4b3d      	ldr	r3, [pc, #244]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	493a      	ldr	r1, [pc, #232]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d008      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005ffe:	4b36      	ldr	r3, [pc, #216]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006002:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600a:	4933      	ldr	r1, [pc, #204]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800600c:	4313      	orrs	r3, r2
 800600e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d008      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800601c:	4b2e      	ldr	r3, [pc, #184]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800601e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006020:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006028:	492b      	ldr	r1, [pc, #172]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800602a:	4313      	orrs	r3, r2
 800602c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d008      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800603a:	4b27      	ldr	r3, [pc, #156]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800603c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	4924      	ldr	r1, [pc, #144]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006048:	4313      	orrs	r3, r2
 800604a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d008      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8006058:	4b1f      	ldr	r3, [pc, #124]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800605a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006064:	491c      	ldr	r1, [pc, #112]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006066:	4313      	orrs	r3, r2
 8006068:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d008      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8006076:	4b18      	ldr	r3, [pc, #96]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006082:	4915      	ldr	r1, [pc, #84]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006084:	4313      	orrs	r3, r2
 8006086:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d008      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006094:	4b10      	ldr	r3, [pc, #64]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006098:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a0:	490d      	ldr	r1, [pc, #52]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d008      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80060b2:	4b09      	ldr	r3, [pc, #36]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80060b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060be:	4906      	ldr	r1, [pc, #24]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00c      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80060d0:	4b01      	ldr	r3, [pc, #4]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80060d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d4:	e002      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x400>
 80060d6:	bf00      	nop
 80060d8:	40021000 	.word	0x40021000
 80060dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060e4:	490b      	ldr	r1, [pc, #44]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d008      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80060f6:	4b07      	ldr	r3, [pc, #28]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80060f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006102:	4904      	ldr	r1, [pc, #16]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006104:	4313      	orrs	r3, r2
 8006106:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3748      	adds	r7, #72	; 0x48
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	40021000 	.word	0x40021000

08006118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e049      	b.n	80061be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d106      	bne.n	8006144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7fb ff28 	bl	8001f94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	3304      	adds	r3, #4
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	f000 faa8 	bl	80066ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
	...

080061c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d001      	beq.n	80061e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e047      	b.n	8006270 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a23      	ldr	r2, [pc, #140]	; (800627c <HAL_TIM_Base_Start+0xb4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d01d      	beq.n	800622e <HAL_TIM_Base_Start+0x66>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fa:	d018      	beq.n	800622e <HAL_TIM_Base_Start+0x66>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a1f      	ldr	r2, [pc, #124]	; (8006280 <HAL_TIM_Base_Start+0xb8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d013      	beq.n	800622e <HAL_TIM_Base_Start+0x66>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a1e      	ldr	r2, [pc, #120]	; (8006284 <HAL_TIM_Base_Start+0xbc>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d00e      	beq.n	800622e <HAL_TIM_Base_Start+0x66>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a1c      	ldr	r2, [pc, #112]	; (8006288 <HAL_TIM_Base_Start+0xc0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d009      	beq.n	800622e <HAL_TIM_Base_Start+0x66>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a1b      	ldr	r2, [pc, #108]	; (800628c <HAL_TIM_Base_Start+0xc4>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d004      	beq.n	800622e <HAL_TIM_Base_Start+0x66>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a19      	ldr	r2, [pc, #100]	; (8006290 <HAL_TIM_Base_Start+0xc8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d115      	bne.n	800625a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	4b17      	ldr	r3, [pc, #92]	; (8006294 <HAL_TIM_Base_Start+0xcc>)
 8006236:	4013      	ands	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b06      	cmp	r3, #6
 800623e:	d015      	beq.n	800626c <HAL_TIM_Base_Start+0xa4>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006246:	d011      	beq.n	800626c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0201 	orr.w	r2, r2, #1
 8006256:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006258:	e008      	b.n	800626c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f042 0201 	orr.w	r2, r2, #1
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	e000      	b.n	800626e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	40012c00 	.word	0x40012c00
 8006280:	40000400 	.word	0x40000400
 8006284:	40000800 	.word	0x40000800
 8006288:	40013400 	.word	0x40013400
 800628c:	40014000 	.word	0x40014000
 8006290:	40015000 	.word	0x40015000
 8006294:	00010007 	.word	0x00010007

08006298 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d122      	bne.n	80062f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d11b      	bne.n	80062f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f06f 0202 	mvn.w	r2, #2
 80062c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	f003 0303 	and.w	r3, r3, #3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f9c8 	bl	8006670 <HAL_TIM_IC_CaptureCallback>
 80062e0:	e005      	b.n	80062ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f9ba 	bl	800665c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 f9cb 	bl	8006684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f003 0304 	and.w	r3, r3, #4
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d122      	bne.n	8006348 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f003 0304 	and.w	r3, r3, #4
 800630c:	2b04      	cmp	r3, #4
 800630e:	d11b      	bne.n	8006348 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f06f 0204 	mvn.w	r2, #4
 8006318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2202      	movs	r2, #2
 800631e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f99e 	bl	8006670 <HAL_TIM_IC_CaptureCallback>
 8006334:	e005      	b.n	8006342 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f990 	bl	800665c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f9a1 	bl	8006684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	f003 0308 	and.w	r3, r3, #8
 8006352:	2b08      	cmp	r3, #8
 8006354:	d122      	bne.n	800639c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f003 0308 	and.w	r3, r3, #8
 8006360:	2b08      	cmp	r3, #8
 8006362:	d11b      	bne.n	800639c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f06f 0208 	mvn.w	r2, #8
 800636c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2204      	movs	r2, #4
 8006372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	f003 0303 	and.w	r3, r3, #3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f974 	bl	8006670 <HAL_TIM_IC_CaptureCallback>
 8006388:	e005      	b.n	8006396 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f966 	bl	800665c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f977 	bl	8006684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	f003 0310 	and.w	r3, r3, #16
 80063a6:	2b10      	cmp	r3, #16
 80063a8:	d122      	bne.n	80063f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f003 0310 	and.w	r3, r3, #16
 80063b4:	2b10      	cmp	r3, #16
 80063b6:	d11b      	bne.n	80063f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f06f 0210 	mvn.w	r2, #16
 80063c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2208      	movs	r2, #8
 80063c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f94a 	bl	8006670 <HAL_TIM_IC_CaptureCallback>
 80063dc:	e005      	b.n	80063ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f93c 	bl	800665c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f94d 	bl	8006684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d10e      	bne.n	800641c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b01      	cmp	r3, #1
 800640a:	d107      	bne.n	800641c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f06f 0201 	mvn.w	r2, #1
 8006414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f916 	bl	8006648 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006426:	2b80      	cmp	r3, #128	; 0x80
 8006428:	d10e      	bne.n	8006448 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006434:	2b80      	cmp	r3, #128	; 0x80
 8006436:	d107      	bne.n	8006448 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fb00 	bl	8006a48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006456:	d10e      	bne.n	8006476 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006462:	2b80      	cmp	r3, #128	; 0x80
 8006464:	d107      	bne.n	8006476 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800646e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 faf3 	bl	8006a5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006480:	2b40      	cmp	r3, #64	; 0x40
 8006482:	d10e      	bne.n	80064a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648e:	2b40      	cmp	r3, #64	; 0x40
 8006490:	d107      	bne.n	80064a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800649a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f8fb 	bl	8006698 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	f003 0320 	and.w	r3, r3, #32
 80064ac:	2b20      	cmp	r3, #32
 80064ae:	d10e      	bne.n	80064ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	f003 0320 	and.w	r3, r3, #32
 80064ba:	2b20      	cmp	r3, #32
 80064bc:	d107      	bne.n	80064ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f06f 0220 	mvn.w	r2, #32
 80064c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fab3 	bl	8006a34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064ce:	bf00      	nop
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d101      	bne.n	80064ee <HAL_TIM_ConfigClockSource+0x18>
 80064ea:	2302      	movs	r3, #2
 80064ec:	e0a8      	b.n	8006640 <HAL_TIM_ConfigClockSource+0x16a>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2202      	movs	r2, #2
 80064fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800650c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006510:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006518:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b40      	cmp	r3, #64	; 0x40
 8006528:	d067      	beq.n	80065fa <HAL_TIM_ConfigClockSource+0x124>
 800652a:	2b40      	cmp	r3, #64	; 0x40
 800652c:	d80b      	bhi.n	8006546 <HAL_TIM_ConfigClockSource+0x70>
 800652e:	2b10      	cmp	r3, #16
 8006530:	d073      	beq.n	800661a <HAL_TIM_ConfigClockSource+0x144>
 8006532:	2b10      	cmp	r3, #16
 8006534:	d802      	bhi.n	800653c <HAL_TIM_ConfigClockSource+0x66>
 8006536:	2b00      	cmp	r3, #0
 8006538:	d06f      	beq.n	800661a <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800653a:	e078      	b.n	800662e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800653c:	2b20      	cmp	r3, #32
 800653e:	d06c      	beq.n	800661a <HAL_TIM_ConfigClockSource+0x144>
 8006540:	2b30      	cmp	r3, #48	; 0x30
 8006542:	d06a      	beq.n	800661a <HAL_TIM_ConfigClockSource+0x144>
      break;
 8006544:	e073      	b.n	800662e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006546:	2b70      	cmp	r3, #112	; 0x70
 8006548:	d00d      	beq.n	8006566 <HAL_TIM_ConfigClockSource+0x90>
 800654a:	2b70      	cmp	r3, #112	; 0x70
 800654c:	d804      	bhi.n	8006558 <HAL_TIM_ConfigClockSource+0x82>
 800654e:	2b50      	cmp	r3, #80	; 0x50
 8006550:	d033      	beq.n	80065ba <HAL_TIM_ConfigClockSource+0xe4>
 8006552:	2b60      	cmp	r3, #96	; 0x60
 8006554:	d041      	beq.n	80065da <HAL_TIM_ConfigClockSource+0x104>
      break;
 8006556:	e06a      	b.n	800662e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800655c:	d066      	beq.n	800662c <HAL_TIM_ConfigClockSource+0x156>
 800655e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006562:	d017      	beq.n	8006594 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8006564:	e063      	b.n	800662e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6818      	ldr	r0, [r3, #0]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	6899      	ldr	r1, [r3, #8]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f000 f9b1 	bl	80068dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006588:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	609a      	str	r2, [r3, #8]
      break;
 8006592:	e04c      	b.n	800662e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6818      	ldr	r0, [r3, #0]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	6899      	ldr	r1, [r3, #8]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f000 f99a 	bl	80068dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689a      	ldr	r2, [r3, #8]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065b6:	609a      	str	r2, [r3, #8]
      break;
 80065b8:	e039      	b.n	800662e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6818      	ldr	r0, [r3, #0]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	6859      	ldr	r1, [r3, #4]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	461a      	mov	r2, r3
 80065c8:	f000 f90e 	bl	80067e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2150      	movs	r1, #80	; 0x50
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 f967 	bl	80068a6 <TIM_ITRx_SetConfig>
      break;
 80065d8:	e029      	b.n	800662e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	6859      	ldr	r1, [r3, #4]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	461a      	mov	r2, r3
 80065e8:	f000 f92d 	bl	8006846 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2160      	movs	r1, #96	; 0x60
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 f957 	bl	80068a6 <TIM_ITRx_SetConfig>
      break;
 80065f8:	e019      	b.n	800662e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6818      	ldr	r0, [r3, #0]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	6859      	ldr	r1, [r3, #4]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	461a      	mov	r2, r3
 8006608:	f000 f8ee 	bl	80067e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2140      	movs	r1, #64	; 0x40
 8006612:	4618      	mov	r0, r3
 8006614:	f000 f947 	bl	80068a6 <TIM_ITRx_SetConfig>
      break;
 8006618:	e009      	b.n	800662e <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4619      	mov	r1, r3
 8006624:	4610      	mov	r0, r2
 8006626:	f000 f93e 	bl	80068a6 <TIM_ITRx_SetConfig>
        break;
 800662a:	e000      	b.n	800662e <HAL_TIM_ConfigClockSource+0x158>
      break;
 800662c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a42      	ldr	r2, [pc, #264]	; (80067c8 <TIM_Base_SetConfig+0x11c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d013      	beq.n	80066ec <TIM_Base_SetConfig+0x40>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ca:	d00f      	beq.n	80066ec <TIM_Base_SetConfig+0x40>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a3f      	ldr	r2, [pc, #252]	; (80067cc <TIM_Base_SetConfig+0x120>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d00b      	beq.n	80066ec <TIM_Base_SetConfig+0x40>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a3e      	ldr	r2, [pc, #248]	; (80067d0 <TIM_Base_SetConfig+0x124>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d007      	beq.n	80066ec <TIM_Base_SetConfig+0x40>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a3d      	ldr	r2, [pc, #244]	; (80067d4 <TIM_Base_SetConfig+0x128>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d003      	beq.n	80066ec <TIM_Base_SetConfig+0x40>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a3c      	ldr	r2, [pc, #240]	; (80067d8 <TIM_Base_SetConfig+0x12c>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d108      	bne.n	80066fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a31      	ldr	r2, [pc, #196]	; (80067c8 <TIM_Base_SetConfig+0x11c>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d01f      	beq.n	8006746 <TIM_Base_SetConfig+0x9a>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800670c:	d01b      	beq.n	8006746 <TIM_Base_SetConfig+0x9a>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a2e      	ldr	r2, [pc, #184]	; (80067cc <TIM_Base_SetConfig+0x120>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d017      	beq.n	8006746 <TIM_Base_SetConfig+0x9a>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a2d      	ldr	r2, [pc, #180]	; (80067d0 <TIM_Base_SetConfig+0x124>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d013      	beq.n	8006746 <TIM_Base_SetConfig+0x9a>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a2c      	ldr	r2, [pc, #176]	; (80067d4 <TIM_Base_SetConfig+0x128>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d00f      	beq.n	8006746 <TIM_Base_SetConfig+0x9a>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a2c      	ldr	r2, [pc, #176]	; (80067dc <TIM_Base_SetConfig+0x130>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d00b      	beq.n	8006746 <TIM_Base_SetConfig+0x9a>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a2b      	ldr	r2, [pc, #172]	; (80067e0 <TIM_Base_SetConfig+0x134>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d007      	beq.n	8006746 <TIM_Base_SetConfig+0x9a>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a2a      	ldr	r2, [pc, #168]	; (80067e4 <TIM_Base_SetConfig+0x138>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d003      	beq.n	8006746 <TIM_Base_SetConfig+0x9a>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a25      	ldr	r2, [pc, #148]	; (80067d8 <TIM_Base_SetConfig+0x12c>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d108      	bne.n	8006758 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	4313      	orrs	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	4313      	orrs	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	689a      	ldr	r2, [r3, #8]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a12      	ldr	r2, [pc, #72]	; (80067c8 <TIM_Base_SetConfig+0x11c>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d013      	beq.n	80067ac <TIM_Base_SetConfig+0x100>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a13      	ldr	r2, [pc, #76]	; (80067d4 <TIM_Base_SetConfig+0x128>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d00f      	beq.n	80067ac <TIM_Base_SetConfig+0x100>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a13      	ldr	r2, [pc, #76]	; (80067dc <TIM_Base_SetConfig+0x130>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d00b      	beq.n	80067ac <TIM_Base_SetConfig+0x100>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a12      	ldr	r2, [pc, #72]	; (80067e0 <TIM_Base_SetConfig+0x134>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d007      	beq.n	80067ac <TIM_Base_SetConfig+0x100>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a11      	ldr	r2, [pc, #68]	; (80067e4 <TIM_Base_SetConfig+0x138>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d003      	beq.n	80067ac <TIM_Base_SetConfig+0x100>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a0c      	ldr	r2, [pc, #48]	; (80067d8 <TIM_Base_SetConfig+0x12c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d103      	bne.n	80067b4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	691a      	ldr	r2, [r3, #16]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	615a      	str	r2, [r3, #20]
}
 80067ba:	bf00      	nop
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	40012c00 	.word	0x40012c00
 80067cc:	40000400 	.word	0x40000400
 80067d0:	40000800 	.word	0x40000800
 80067d4:	40013400 	.word	0x40013400
 80067d8:	40015000 	.word	0x40015000
 80067dc:	40014000 	.word	0x40014000
 80067e0:	40014400 	.word	0x40014400
 80067e4:	40014800 	.word	0x40014800

080067e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	f023 0201 	bic.w	r2, r3, #1
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	011b      	lsls	r3, r3, #4
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4313      	orrs	r3, r2
 800681c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f023 030a 	bic.w	r3, r3, #10
 8006824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	4313      	orrs	r3, r2
 800682c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	621a      	str	r2, [r3, #32]
}
 800683a:	bf00      	nop
 800683c:	371c      	adds	r7, #28
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006846:	b480      	push	{r7}
 8006848:	b087      	sub	sp, #28
 800684a:	af00      	add	r7, sp, #0
 800684c:	60f8      	str	r0, [r7, #12]
 800684e:	60b9      	str	r1, [r7, #8]
 8006850:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	f023 0210 	bic.w	r2, r3, #16
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006870:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	031b      	lsls	r3, r3, #12
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	4313      	orrs	r3, r2
 800687a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006882:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	011b      	lsls	r3, r3, #4
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	4313      	orrs	r3, r2
 800688c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	621a      	str	r2, [r3, #32]
}
 800689a:	bf00      	nop
 800689c:	371c      	adds	r7, #28
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b085      	sub	sp, #20
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	f043 0307 	orr.w	r3, r3, #7
 80068c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	609a      	str	r2, [r3, #8]
}
 80068d0:	bf00      	nop
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	021a      	lsls	r2, r3, #8
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	431a      	orrs	r2, r3
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	4313      	orrs	r3, r2
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	4313      	orrs	r3, r2
 8006908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	609a      	str	r2, [r3, #8]
}
 8006910:	bf00      	nop
 8006912:	371c      	adds	r7, #28
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800692c:	2b01      	cmp	r3, #1
 800692e:	d101      	bne.n	8006934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006930:	2302      	movs	r3, #2
 8006932:	e06d      	b.n	8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a30      	ldr	r2, [pc, #192]	; (8006a1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d009      	beq.n	8006972 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a2f      	ldr	r2, [pc, #188]	; (8006a20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d004      	beq.n	8006972 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a2d      	ldr	r2, [pc, #180]	; (8006a24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d108      	bne.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006978:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	4313      	orrs	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4313      	orrs	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a1e      	ldr	r2, [pc, #120]	; (8006a1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d01d      	beq.n	80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b0:	d018      	beq.n	80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a1c      	ldr	r2, [pc, #112]	; (8006a28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d013      	beq.n	80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a1a      	ldr	r2, [pc, #104]	; (8006a2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d00e      	beq.n	80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a15      	ldr	r2, [pc, #84]	; (8006a20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d009      	beq.n	80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a16      	ldr	r2, [pc, #88]	; (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d004      	beq.n	80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a11      	ldr	r2, [pc, #68]	; (8006a24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d10c      	bne.n	80069fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	40012c00 	.word	0x40012c00
 8006a20:	40013400 	.word	0x40013400
 8006a24:	40015000 	.word	0x40015000
 8006a28:	40000400 	.word	0x40000400
 8006a2c:	40000800 	.word	0x40000800
 8006a30:	40014000 	.word	0x40014000

08006a34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e040      	b.n	8006b04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7fb faa2 	bl	8001fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2224      	movs	r2, #36	; 0x24
 8006a9c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f022 0201 	bic.w	r2, r2, #1
 8006aac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f992 	bl	8006dd8 <UART_SetConfig>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d101      	bne.n	8006abe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e022      	b.n	8006b04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fb5a 	bl	8007180 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ada:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006aea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0201 	orr.w	r2, r2, #1
 8006afa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fbe1 	bl	80072c4 <UART_CheckIdleState>
 8006b02:	4603      	mov	r3, r0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08a      	sub	sp, #40	; 0x28
 8006b10:	af02      	add	r7, sp, #8
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	603b      	str	r3, [r7, #0]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b20:	2b20      	cmp	r3, #32
 8006b22:	f040 8082 	bne.w	8006c2a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <HAL_UART_Transmit+0x26>
 8006b2c:	88fb      	ldrh	r3, [r7, #6]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e07a      	b.n	8006c2c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d101      	bne.n	8006b44 <HAL_UART_Transmit+0x38>
 8006b40:	2302      	movs	r3, #2
 8006b42:	e073      	b.n	8006c2c <HAL_UART_Transmit+0x120>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2221      	movs	r2, #33	; 0x21
 8006b58:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b5a:	f7fb fbc9 	bl	80022f0 <HAL_GetTick>
 8006b5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	88fa      	ldrh	r2, [r7, #6]
 8006b64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	88fa      	ldrh	r2, [r7, #6]
 8006b6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b78:	d108      	bne.n	8006b8c <HAL_UART_Transmit+0x80>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d104      	bne.n	8006b8c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	61bb      	str	r3, [r7, #24]
 8006b8a:	e003      	b.n	8006b94 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b90:	2300      	movs	r3, #0
 8006b92:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006b9c:	e02d      	b.n	8006bfa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	2180      	movs	r1, #128	; 0x80
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f000 fbd4 	bl	8007356 <UART_WaitOnFlagUntilTimeout>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e039      	b.n	8006c2c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10b      	bne.n	8006bd6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	881a      	ldrh	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bca:	b292      	uxth	r2, r2
 8006bcc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	3302      	adds	r3, #2
 8006bd2:	61bb      	str	r3, [r7, #24]
 8006bd4:	e008      	b.n	8006be8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	781a      	ldrb	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	b292      	uxth	r2, r2
 8006be0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	3301      	adds	r3, #1
 8006be6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1cb      	bne.n	8006b9e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	2140      	movs	r1, #64	; 0x40
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f000 fba0 	bl	8007356 <UART_WaitOnFlagUntilTimeout>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d001      	beq.n	8006c20 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e005      	b.n	8006c2c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2220      	movs	r2, #32
 8006c24:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	e000      	b.n	8006c2c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006c2a:	2302      	movs	r3, #2
  }
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3720      	adds	r7, #32
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08a      	sub	sp, #40	; 0x28
 8006c38:	af02      	add	r7, sp, #8
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	603b      	str	r3, [r7, #0]
 8006c40:	4613      	mov	r3, r2
 8006c42:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c48:	2b20      	cmp	r3, #32
 8006c4a:	f040 80bf 	bne.w	8006dcc <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d002      	beq.n	8006c5a <HAL_UART_Receive+0x26>
 8006c54:	88fb      	ldrh	r3, [r7, #6]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e0b7      	b.n	8006dce <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d101      	bne.n	8006c6c <HAL_UART_Receive+0x38>
 8006c68:	2302      	movs	r3, #2
 8006c6a:	e0b0      	b.n	8006dce <HAL_UART_Receive+0x19a>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2222      	movs	r2, #34	; 0x22
 8006c80:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c88:	f7fb fb32 	bl	80022f0 <HAL_GetTick>
 8006c8c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	88fa      	ldrh	r2, [r7, #6]
 8006c92:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	88fa      	ldrh	r2, [r7, #6]
 8006c9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ca6:	d10e      	bne.n	8006cc6 <HAL_UART_Receive+0x92>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d105      	bne.n	8006cbc <HAL_UART_Receive+0x88>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006cb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006cba:	e02d      	b.n	8006d18 <HAL_UART_Receive+0xe4>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	22ff      	movs	r2, #255	; 0xff
 8006cc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006cc4:	e028      	b.n	8006d18 <HAL_UART_Receive+0xe4>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10d      	bne.n	8006cea <HAL_UART_Receive+0xb6>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d104      	bne.n	8006ce0 <HAL_UART_Receive+0xac>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	22ff      	movs	r2, #255	; 0xff
 8006cda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006cde:	e01b      	b.n	8006d18 <HAL_UART_Receive+0xe4>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	227f      	movs	r2, #127	; 0x7f
 8006ce4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ce8:	e016      	b.n	8006d18 <HAL_UART_Receive+0xe4>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cf2:	d10d      	bne.n	8006d10 <HAL_UART_Receive+0xdc>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d104      	bne.n	8006d06 <HAL_UART_Receive+0xd2>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	227f      	movs	r2, #127	; 0x7f
 8006d00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d04:	e008      	b.n	8006d18 <HAL_UART_Receive+0xe4>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	223f      	movs	r2, #63	; 0x3f
 8006d0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d0e:	e003      	b.n	8006d18 <HAL_UART_Receive+0xe4>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d1e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d28:	d108      	bne.n	8006d3c <HAL_UART_Receive+0x108>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d104      	bne.n	8006d3c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006d32:	2300      	movs	r3, #0
 8006d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	61bb      	str	r3, [r7, #24]
 8006d3a:	e003      	b.n	8006d44 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d40:	2300      	movs	r3, #0
 8006d42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006d4c:	e033      	b.n	8006db6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2200      	movs	r2, #0
 8006d56:	2120      	movs	r1, #32
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f000 fafc 	bl	8007356 <UART_WaitOnFlagUntilTimeout>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e032      	b.n	8006dce <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10c      	bne.n	8006d88 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	8a7b      	ldrh	r3, [r7, #18]
 8006d78:	4013      	ands	r3, r2
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	3302      	adds	r3, #2
 8006d84:	61bb      	str	r3, [r7, #24]
 8006d86:	e00d      	b.n	8006da4 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	8a7b      	ldrh	r3, [r7, #18]
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	4013      	ands	r3, r2
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	3301      	adds	r3, #1
 8006da2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	3b01      	subs	r3, #1
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1c5      	bne.n	8006d4e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	e000      	b.n	8006dce <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8006dcc:	2302      	movs	r3, #2
  }
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3720      	adds	r7, #32
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
	...

08006dd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b088      	sub	sp, #32
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006de0:	2300      	movs	r3, #0
 8006de2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689a      	ldr	r2, [r3, #8]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	431a      	orrs	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	431a      	orrs	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	69db      	ldr	r3, [r3, #28]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	4baa      	ldr	r3, [pc, #680]	; (80070ac <UART_SetConfig+0x2d4>)
 8006e04:	4013      	ands	r3, r2
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	6812      	ldr	r2, [r2, #0]
 8006e0a:	6979      	ldr	r1, [r7, #20]
 8006e0c:	430b      	orrs	r3, r1
 8006e0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	68da      	ldr	r2, [r3, #12]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a98      	ldr	r2, [pc, #608]	; (80070b0 <UART_SetConfig+0x2d8>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d121      	bne.n	8006e98 <UART_SetConfig+0xc0>
 8006e54:	4b97      	ldr	r3, [pc, #604]	; (80070b4 <UART_SetConfig+0x2dc>)
 8006e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e58:	f003 0303 	and.w	r3, r3, #3
 8006e5c:	2b03      	cmp	r3, #3
 8006e5e:	d817      	bhi.n	8006e90 <UART_SetConfig+0xb8>
 8006e60:	a201      	add	r2, pc, #4	; (adr r2, 8006e68 <UART_SetConfig+0x90>)
 8006e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e66:	bf00      	nop
 8006e68:	08006e79 	.word	0x08006e79
 8006e6c:	08006e85 	.word	0x08006e85
 8006e70:	08006e8b 	.word	0x08006e8b
 8006e74:	08006e7f 	.word	0x08006e7f
 8006e78:	2301      	movs	r3, #1
 8006e7a:	77fb      	strb	r3, [r7, #31]
 8006e7c:	e0b2      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006e7e:	2302      	movs	r3, #2
 8006e80:	77fb      	strb	r3, [r7, #31]
 8006e82:	e0af      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006e84:	2304      	movs	r3, #4
 8006e86:	77fb      	strb	r3, [r7, #31]
 8006e88:	e0ac      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006e8a:	2308      	movs	r3, #8
 8006e8c:	77fb      	strb	r3, [r7, #31]
 8006e8e:	e0a9      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006e90:	2310      	movs	r3, #16
 8006e92:	77fb      	strb	r3, [r7, #31]
 8006e94:	bf00      	nop
 8006e96:	e0a5      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a86      	ldr	r2, [pc, #536]	; (80070b8 <UART_SetConfig+0x2e0>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d123      	bne.n	8006eea <UART_SetConfig+0x112>
 8006ea2:	4b84      	ldr	r3, [pc, #528]	; (80070b4 <UART_SetConfig+0x2dc>)
 8006ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eae:	d012      	beq.n	8006ed6 <UART_SetConfig+0xfe>
 8006eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eb4:	d802      	bhi.n	8006ebc <UART_SetConfig+0xe4>
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d007      	beq.n	8006eca <UART_SetConfig+0xf2>
 8006eba:	e012      	b.n	8006ee2 <UART_SetConfig+0x10a>
 8006ebc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ec0:	d00c      	beq.n	8006edc <UART_SetConfig+0x104>
 8006ec2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ec6:	d003      	beq.n	8006ed0 <UART_SetConfig+0xf8>
 8006ec8:	e00b      	b.n	8006ee2 <UART_SetConfig+0x10a>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	77fb      	strb	r3, [r7, #31]
 8006ece:	e089      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	77fb      	strb	r3, [r7, #31]
 8006ed4:	e086      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006ed6:	2304      	movs	r3, #4
 8006ed8:	77fb      	strb	r3, [r7, #31]
 8006eda:	e083      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006edc:	2308      	movs	r3, #8
 8006ede:	77fb      	strb	r3, [r7, #31]
 8006ee0:	e080      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006ee2:	2310      	movs	r3, #16
 8006ee4:	77fb      	strb	r3, [r7, #31]
 8006ee6:	bf00      	nop
 8006ee8:	e07c      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a73      	ldr	r2, [pc, #460]	; (80070bc <UART_SetConfig+0x2e4>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d123      	bne.n	8006f3c <UART_SetConfig+0x164>
 8006ef4:	4b6f      	ldr	r3, [pc, #444]	; (80070b4 <UART_SetConfig+0x2dc>)
 8006ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006efc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f00:	d012      	beq.n	8006f28 <UART_SetConfig+0x150>
 8006f02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f06:	d802      	bhi.n	8006f0e <UART_SetConfig+0x136>
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d007      	beq.n	8006f1c <UART_SetConfig+0x144>
 8006f0c:	e012      	b.n	8006f34 <UART_SetConfig+0x15c>
 8006f0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006f12:	d00c      	beq.n	8006f2e <UART_SetConfig+0x156>
 8006f14:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006f18:	d003      	beq.n	8006f22 <UART_SetConfig+0x14a>
 8006f1a:	e00b      	b.n	8006f34 <UART_SetConfig+0x15c>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	77fb      	strb	r3, [r7, #31]
 8006f20:	e060      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006f22:	2302      	movs	r3, #2
 8006f24:	77fb      	strb	r3, [r7, #31]
 8006f26:	e05d      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006f28:	2304      	movs	r3, #4
 8006f2a:	77fb      	strb	r3, [r7, #31]
 8006f2c:	e05a      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006f2e:	2308      	movs	r3, #8
 8006f30:	77fb      	strb	r3, [r7, #31]
 8006f32:	e057      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006f34:	2310      	movs	r3, #16
 8006f36:	77fb      	strb	r3, [r7, #31]
 8006f38:	bf00      	nop
 8006f3a:	e053      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a5f      	ldr	r2, [pc, #380]	; (80070c0 <UART_SetConfig+0x2e8>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d123      	bne.n	8006f8e <UART_SetConfig+0x1b6>
 8006f46:	4b5b      	ldr	r3, [pc, #364]	; (80070b4 <UART_SetConfig+0x2dc>)
 8006f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f52:	d012      	beq.n	8006f7a <UART_SetConfig+0x1a2>
 8006f54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f58:	d802      	bhi.n	8006f60 <UART_SetConfig+0x188>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d007      	beq.n	8006f6e <UART_SetConfig+0x196>
 8006f5e:	e012      	b.n	8006f86 <UART_SetConfig+0x1ae>
 8006f60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f64:	d00c      	beq.n	8006f80 <UART_SetConfig+0x1a8>
 8006f66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f6a:	d003      	beq.n	8006f74 <UART_SetConfig+0x19c>
 8006f6c:	e00b      	b.n	8006f86 <UART_SetConfig+0x1ae>
 8006f6e:	2300      	movs	r3, #0
 8006f70:	77fb      	strb	r3, [r7, #31]
 8006f72:	e037      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006f74:	2302      	movs	r3, #2
 8006f76:	77fb      	strb	r3, [r7, #31]
 8006f78:	e034      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006f7a:	2304      	movs	r3, #4
 8006f7c:	77fb      	strb	r3, [r7, #31]
 8006f7e:	e031      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006f80:	2308      	movs	r3, #8
 8006f82:	77fb      	strb	r3, [r7, #31]
 8006f84:	e02e      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006f86:	2310      	movs	r3, #16
 8006f88:	77fb      	strb	r3, [r7, #31]
 8006f8a:	bf00      	nop
 8006f8c:	e02a      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a4c      	ldr	r2, [pc, #304]	; (80070c4 <UART_SetConfig+0x2ec>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d123      	bne.n	8006fe0 <UART_SetConfig+0x208>
 8006f98:	4b46      	ldr	r3, [pc, #280]	; (80070b4 <UART_SetConfig+0x2dc>)
 8006f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006fa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fa4:	d012      	beq.n	8006fcc <UART_SetConfig+0x1f4>
 8006fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006faa:	d802      	bhi.n	8006fb2 <UART_SetConfig+0x1da>
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d007      	beq.n	8006fc0 <UART_SetConfig+0x1e8>
 8006fb0:	e012      	b.n	8006fd8 <UART_SetConfig+0x200>
 8006fb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fb6:	d00c      	beq.n	8006fd2 <UART_SetConfig+0x1fa>
 8006fb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006fbc:	d003      	beq.n	8006fc6 <UART_SetConfig+0x1ee>
 8006fbe:	e00b      	b.n	8006fd8 <UART_SetConfig+0x200>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	77fb      	strb	r3, [r7, #31]
 8006fc4:	e00e      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	77fb      	strb	r3, [r7, #31]
 8006fca:	e00b      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006fcc:	2304      	movs	r3, #4
 8006fce:	77fb      	strb	r3, [r7, #31]
 8006fd0:	e008      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006fd2:	2308      	movs	r3, #8
 8006fd4:	77fb      	strb	r3, [r7, #31]
 8006fd6:	e005      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006fd8:	2310      	movs	r3, #16
 8006fda:	77fb      	strb	r3, [r7, #31]
 8006fdc:	bf00      	nop
 8006fde:	e001      	b.n	8006fe4 <UART_SetConfig+0x20c>
 8006fe0:	2310      	movs	r3, #16
 8006fe2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	69db      	ldr	r3, [r3, #28]
 8006fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fec:	d16e      	bne.n	80070cc <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8006fee:	7ffb      	ldrb	r3, [r7, #31]
 8006ff0:	2b08      	cmp	r3, #8
 8006ff2:	d828      	bhi.n	8007046 <UART_SetConfig+0x26e>
 8006ff4:	a201      	add	r2, pc, #4	; (adr r2, 8006ffc <UART_SetConfig+0x224>)
 8006ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffa:	bf00      	nop
 8006ffc:	08007021 	.word	0x08007021
 8007000:	08007029 	.word	0x08007029
 8007004:	08007031 	.word	0x08007031
 8007008:	08007047 	.word	0x08007047
 800700c:	08007037 	.word	0x08007037
 8007010:	08007047 	.word	0x08007047
 8007014:	08007047 	.word	0x08007047
 8007018:	08007047 	.word	0x08007047
 800701c:	0800703f 	.word	0x0800703f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007020:	f7fe fe18 	bl	8005c54 <HAL_RCC_GetPCLK1Freq>
 8007024:	61b8      	str	r0, [r7, #24]
        break;
 8007026:	e013      	b.n	8007050 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007028:	f7fe fe36 	bl	8005c98 <HAL_RCC_GetPCLK2Freq>
 800702c:	61b8      	str	r0, [r7, #24]
        break;
 800702e:	e00f      	b.n	8007050 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007030:	4b25      	ldr	r3, [pc, #148]	; (80070c8 <UART_SetConfig+0x2f0>)
 8007032:	61bb      	str	r3, [r7, #24]
        break;
 8007034:	e00c      	b.n	8007050 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007036:	f7fe fd97 	bl	8005b68 <HAL_RCC_GetSysClockFreq>
 800703a:	61b8      	str	r0, [r7, #24]
        break;
 800703c:	e008      	b.n	8007050 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800703e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007042:	61bb      	str	r3, [r7, #24]
        break;
 8007044:	e004      	b.n	8007050 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	77bb      	strb	r3, [r7, #30]
        break;
 800704e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	2b00      	cmp	r3, #0
 8007054:	f000 8086 	beq.w	8007164 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	005a      	lsls	r2, r3, #1
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	085b      	lsrs	r3, r3, #1
 8007062:	441a      	add	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	fbb2 f3f3 	udiv	r3, r2, r3
 800706c:	b29b      	uxth	r3, r3
 800706e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	2b0f      	cmp	r3, #15
 8007074:	d916      	bls.n	80070a4 <UART_SetConfig+0x2cc>
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800707c:	d212      	bcs.n	80070a4 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	b29b      	uxth	r3, r3
 8007082:	f023 030f 	bic.w	r3, r3, #15
 8007086:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	085b      	lsrs	r3, r3, #1
 800708c:	b29b      	uxth	r3, r3
 800708e:	f003 0307 	and.w	r3, r3, #7
 8007092:	b29a      	uxth	r2, r3
 8007094:	89fb      	ldrh	r3, [r7, #14]
 8007096:	4313      	orrs	r3, r2
 8007098:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	89fa      	ldrh	r2, [r7, #14]
 80070a0:	60da      	str	r2, [r3, #12]
 80070a2:	e05f      	b.n	8007164 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	77bb      	strb	r3, [r7, #30]
 80070a8:	e05c      	b.n	8007164 <UART_SetConfig+0x38c>
 80070aa:	bf00      	nop
 80070ac:	efff69f3 	.word	0xefff69f3
 80070b0:	40013800 	.word	0x40013800
 80070b4:	40021000 	.word	0x40021000
 80070b8:	40004400 	.word	0x40004400
 80070bc:	40004800 	.word	0x40004800
 80070c0:	40004c00 	.word	0x40004c00
 80070c4:	40005000 	.word	0x40005000
 80070c8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 80070cc:	7ffb      	ldrb	r3, [r7, #31]
 80070ce:	2b08      	cmp	r3, #8
 80070d0:	d827      	bhi.n	8007122 <UART_SetConfig+0x34a>
 80070d2:	a201      	add	r2, pc, #4	; (adr r2, 80070d8 <UART_SetConfig+0x300>)
 80070d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d8:	080070fd 	.word	0x080070fd
 80070dc:	08007105 	.word	0x08007105
 80070e0:	0800710d 	.word	0x0800710d
 80070e4:	08007123 	.word	0x08007123
 80070e8:	08007113 	.word	0x08007113
 80070ec:	08007123 	.word	0x08007123
 80070f0:	08007123 	.word	0x08007123
 80070f4:	08007123 	.word	0x08007123
 80070f8:	0800711b 	.word	0x0800711b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070fc:	f7fe fdaa 	bl	8005c54 <HAL_RCC_GetPCLK1Freq>
 8007100:	61b8      	str	r0, [r7, #24]
        break;
 8007102:	e013      	b.n	800712c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007104:	f7fe fdc8 	bl	8005c98 <HAL_RCC_GetPCLK2Freq>
 8007108:	61b8      	str	r0, [r7, #24]
        break;
 800710a:	e00f      	b.n	800712c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800710c:	4b1b      	ldr	r3, [pc, #108]	; (800717c <UART_SetConfig+0x3a4>)
 800710e:	61bb      	str	r3, [r7, #24]
        break;
 8007110:	e00c      	b.n	800712c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007112:	f7fe fd29 	bl	8005b68 <HAL_RCC_GetSysClockFreq>
 8007116:	61b8      	str	r0, [r7, #24]
        break;
 8007118:	e008      	b.n	800712c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800711a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800711e:	61bb      	str	r3, [r7, #24]
        break;
 8007120:	e004      	b.n	800712c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	77bb      	strb	r3, [r7, #30]
        break;
 800712a:	bf00      	nop
    }

    if (pclk != 0U)
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d018      	beq.n	8007164 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	085a      	lsrs	r2, r3, #1
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	441a      	add	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	fbb2 f3f3 	udiv	r3, r2, r3
 8007144:	b29b      	uxth	r3, r3
 8007146:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	2b0f      	cmp	r3, #15
 800714c:	d908      	bls.n	8007160 <UART_SetConfig+0x388>
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007154:	d204      	bcs.n	8007160 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	60da      	str	r2, [r3, #12]
 800715e:	e001      	b.n	8007164 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007170:	7fbb      	ldrb	r3, [r7, #30]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3720      	adds	r7, #32
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	007a1200 	.word	0x007a1200

08007180 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00a      	beq.n	80071aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	f003 0302 	and.w	r3, r3, #2
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00a      	beq.n	80071cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d0:	f003 0304 	and.w	r3, r3, #4
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00a      	beq.n	80071ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f2:	f003 0308 	and.w	r3, r3, #8
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00a      	beq.n	8007210 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007214:	f003 0310 	and.w	r3, r3, #16
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00a      	beq.n	8007232 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	f003 0320 	and.w	r3, r3, #32
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00a      	beq.n	8007254 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	430a      	orrs	r2, r1
 8007252:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800725c:	2b00      	cmp	r3, #0
 800725e:	d01a      	beq.n	8007296 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	430a      	orrs	r2, r1
 8007274:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800727e:	d10a      	bne.n	8007296 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	430a      	orrs	r2, r1
 8007294:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00a      	beq.n	80072b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	430a      	orrs	r2, r1
 80072b6:	605a      	str	r2, [r3, #4]
  }
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af02      	add	r7, sp, #8
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072d4:	f7fb f80c 	bl	80022f0 <HAL_GetTick>
 80072d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0308 	and.w	r3, r3, #8
 80072e4:	2b08      	cmp	r3, #8
 80072e6:	d10e      	bne.n	8007306 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f82d 	bl	8007356 <UART_WaitOnFlagUntilTimeout>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e023      	b.n	800734e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0304 	and.w	r3, r3, #4
 8007310:	2b04      	cmp	r3, #4
 8007312:	d10e      	bne.n	8007332 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007314:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f817 	bl	8007356 <UART_WaitOnFlagUntilTimeout>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d001      	beq.n	8007332 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e00d      	b.n	800734e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2220      	movs	r2, #32
 8007336:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2220      	movs	r2, #32
 800733c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b084      	sub	sp, #16
 800735a:	af00      	add	r7, sp, #0
 800735c:	60f8      	str	r0, [r7, #12]
 800735e:	60b9      	str	r1, [r7, #8]
 8007360:	603b      	str	r3, [r7, #0]
 8007362:	4613      	mov	r3, r2
 8007364:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007366:	e05e      	b.n	8007426 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736e:	d05a      	beq.n	8007426 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007370:	f7fa ffbe 	bl	80022f0 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	69ba      	ldr	r2, [r7, #24]
 800737c:	429a      	cmp	r2, r3
 800737e:	d302      	bcc.n	8007386 <UART_WaitOnFlagUntilTimeout+0x30>
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d11b      	bne.n	80073be <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007394:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f022 0201 	bic.w	r2, r2, #1
 80073a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2220      	movs	r2, #32
 80073aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2220      	movs	r2, #32
 80073b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e043      	b.n	8007446 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0304 	and.w	r3, r3, #4
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d02c      	beq.n	8007426 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073da:	d124      	bne.n	8007426 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80073f4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689a      	ldr	r2, [r3, #8]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 0201 	bic.w	r2, r2, #1
 8007404:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2220      	movs	r2, #32
 800740a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2220      	movs	r2, #32
 8007410:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2220      	movs	r2, #32
 8007416:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e00f      	b.n	8007446 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	69da      	ldr	r2, [r3, #28]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	4013      	ands	r3, r2
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	429a      	cmp	r2, r3
 8007434:	bf0c      	ite	eq
 8007436:	2301      	moveq	r3, #1
 8007438:	2300      	movne	r3, #0
 800743a:	b2db      	uxtb	r3, r3
 800743c:	461a      	mov	r2, r3
 800743e:	79fb      	ldrb	r3, [r7, #7]
 8007440:	429a      	cmp	r2, r3
 8007442:	d091      	beq.n	8007368 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
	...

08007450 <__errno>:
 8007450:	4b01      	ldr	r3, [pc, #4]	; (8007458 <__errno+0x8>)
 8007452:	6818      	ldr	r0, [r3, #0]
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	20000a1c 	.word	0x20000a1c

0800745c <__libc_init_array>:
 800745c:	b570      	push	{r4, r5, r6, lr}
 800745e:	4e0d      	ldr	r6, [pc, #52]	; (8007494 <__libc_init_array+0x38>)
 8007460:	4c0d      	ldr	r4, [pc, #52]	; (8007498 <__libc_init_array+0x3c>)
 8007462:	1ba4      	subs	r4, r4, r6
 8007464:	10a4      	asrs	r4, r4, #2
 8007466:	2500      	movs	r5, #0
 8007468:	42a5      	cmp	r5, r4
 800746a:	d109      	bne.n	8007480 <__libc_init_array+0x24>
 800746c:	4e0b      	ldr	r6, [pc, #44]	; (800749c <__libc_init_array+0x40>)
 800746e:	4c0c      	ldr	r4, [pc, #48]	; (80074a0 <__libc_init_array+0x44>)
 8007470:	f001 ff20 	bl	80092b4 <_init>
 8007474:	1ba4      	subs	r4, r4, r6
 8007476:	10a4      	asrs	r4, r4, #2
 8007478:	2500      	movs	r5, #0
 800747a:	42a5      	cmp	r5, r4
 800747c:	d105      	bne.n	800748a <__libc_init_array+0x2e>
 800747e:	bd70      	pop	{r4, r5, r6, pc}
 8007480:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007484:	4798      	blx	r3
 8007486:	3501      	adds	r5, #1
 8007488:	e7ee      	b.n	8007468 <__libc_init_array+0xc>
 800748a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800748e:	4798      	blx	r3
 8007490:	3501      	adds	r5, #1
 8007492:	e7f2      	b.n	800747a <__libc_init_array+0x1e>
 8007494:	080097c0 	.word	0x080097c0
 8007498:	080097c0 	.word	0x080097c0
 800749c:	080097c0 	.word	0x080097c0
 80074a0:	080097c4 	.word	0x080097c4

080074a4 <__itoa>:
 80074a4:	1e93      	subs	r3, r2, #2
 80074a6:	2b22      	cmp	r3, #34	; 0x22
 80074a8:	b510      	push	{r4, lr}
 80074aa:	460c      	mov	r4, r1
 80074ac:	d904      	bls.n	80074b8 <__itoa+0x14>
 80074ae:	2300      	movs	r3, #0
 80074b0:	700b      	strb	r3, [r1, #0]
 80074b2:	461c      	mov	r4, r3
 80074b4:	4620      	mov	r0, r4
 80074b6:	bd10      	pop	{r4, pc}
 80074b8:	2a0a      	cmp	r2, #10
 80074ba:	d109      	bne.n	80074d0 <__itoa+0x2c>
 80074bc:	2800      	cmp	r0, #0
 80074be:	da07      	bge.n	80074d0 <__itoa+0x2c>
 80074c0:	232d      	movs	r3, #45	; 0x2d
 80074c2:	700b      	strb	r3, [r1, #0]
 80074c4:	4240      	negs	r0, r0
 80074c6:	2101      	movs	r1, #1
 80074c8:	4421      	add	r1, r4
 80074ca:	f000 fecb 	bl	8008264 <__utoa>
 80074ce:	e7f1      	b.n	80074b4 <__itoa+0x10>
 80074d0:	2100      	movs	r1, #0
 80074d2:	e7f9      	b.n	80074c8 <__itoa+0x24>

080074d4 <itoa>:
 80074d4:	f7ff bfe6 	b.w	80074a4 <__itoa>

080074d8 <memset>:
 80074d8:	4402      	add	r2, r0
 80074da:	4603      	mov	r3, r0
 80074dc:	4293      	cmp	r3, r2
 80074de:	d100      	bne.n	80074e2 <memset+0xa>
 80074e0:	4770      	bx	lr
 80074e2:	f803 1b01 	strb.w	r1, [r3], #1
 80074e6:	e7f9      	b.n	80074dc <memset+0x4>

080074e8 <strcpy>:
 80074e8:	4603      	mov	r3, r0
 80074ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074ee:	f803 2b01 	strb.w	r2, [r3], #1
 80074f2:	2a00      	cmp	r2, #0
 80074f4:	d1f9      	bne.n	80074ea <strcpy+0x2>
 80074f6:	4770      	bx	lr

080074f8 <sulp>:
 80074f8:	b570      	push	{r4, r5, r6, lr}
 80074fa:	4604      	mov	r4, r0
 80074fc:	460d      	mov	r5, r1
 80074fe:	ec45 4b10 	vmov	d0, r4, r5
 8007502:	4616      	mov	r6, r2
 8007504:	f001 fd00 	bl	8008f08 <__ulp>
 8007508:	ec51 0b10 	vmov	r0, r1, d0
 800750c:	b17e      	cbz	r6, 800752e <sulp+0x36>
 800750e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007512:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007516:	2b00      	cmp	r3, #0
 8007518:	dd09      	ble.n	800752e <sulp+0x36>
 800751a:	051b      	lsls	r3, r3, #20
 800751c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007520:	2400      	movs	r4, #0
 8007522:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007526:	4622      	mov	r2, r4
 8007528:	462b      	mov	r3, r5
 800752a:	f7f9 f823 	bl	8000574 <__aeabi_dmul>
 800752e:	bd70      	pop	{r4, r5, r6, pc}

08007530 <_strtod_l>:
 8007530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007534:	461f      	mov	r7, r3
 8007536:	b0a1      	sub	sp, #132	; 0x84
 8007538:	2300      	movs	r3, #0
 800753a:	4681      	mov	r9, r0
 800753c:	4638      	mov	r0, r7
 800753e:	460e      	mov	r6, r1
 8007540:	9217      	str	r2, [sp, #92]	; 0x5c
 8007542:	931c      	str	r3, [sp, #112]	; 0x70
 8007544:	f001 f9f5 	bl	8008932 <__localeconv_l>
 8007548:	4680      	mov	r8, r0
 800754a:	6800      	ldr	r0, [r0, #0]
 800754c:	f7f8 fe4e 	bl	80001ec <strlen>
 8007550:	f04f 0a00 	mov.w	sl, #0
 8007554:	4604      	mov	r4, r0
 8007556:	f04f 0b00 	mov.w	fp, #0
 800755a:	961b      	str	r6, [sp, #108]	; 0x6c
 800755c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800755e:	781a      	ldrb	r2, [r3, #0]
 8007560:	2a0d      	cmp	r2, #13
 8007562:	d832      	bhi.n	80075ca <_strtod_l+0x9a>
 8007564:	2a09      	cmp	r2, #9
 8007566:	d236      	bcs.n	80075d6 <_strtod_l+0xa6>
 8007568:	2a00      	cmp	r2, #0
 800756a:	d03e      	beq.n	80075ea <_strtod_l+0xba>
 800756c:	2300      	movs	r3, #0
 800756e:	930d      	str	r3, [sp, #52]	; 0x34
 8007570:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007572:	782b      	ldrb	r3, [r5, #0]
 8007574:	2b30      	cmp	r3, #48	; 0x30
 8007576:	f040 80ac 	bne.w	80076d2 <_strtod_l+0x1a2>
 800757a:	786b      	ldrb	r3, [r5, #1]
 800757c:	2b58      	cmp	r3, #88	; 0x58
 800757e:	d001      	beq.n	8007584 <_strtod_l+0x54>
 8007580:	2b78      	cmp	r3, #120	; 0x78
 8007582:	d167      	bne.n	8007654 <_strtod_l+0x124>
 8007584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007586:	9301      	str	r3, [sp, #4]
 8007588:	ab1c      	add	r3, sp, #112	; 0x70
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	9702      	str	r7, [sp, #8]
 800758e:	ab1d      	add	r3, sp, #116	; 0x74
 8007590:	4a88      	ldr	r2, [pc, #544]	; (80077b4 <_strtod_l+0x284>)
 8007592:	a91b      	add	r1, sp, #108	; 0x6c
 8007594:	4648      	mov	r0, r9
 8007596:	f000 fef2 	bl	800837e <__gethex>
 800759a:	f010 0407 	ands.w	r4, r0, #7
 800759e:	4606      	mov	r6, r0
 80075a0:	d005      	beq.n	80075ae <_strtod_l+0x7e>
 80075a2:	2c06      	cmp	r4, #6
 80075a4:	d12b      	bne.n	80075fe <_strtod_l+0xce>
 80075a6:	3501      	adds	r5, #1
 80075a8:	2300      	movs	r3, #0
 80075aa:	951b      	str	r5, [sp, #108]	; 0x6c
 80075ac:	930d      	str	r3, [sp, #52]	; 0x34
 80075ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f040 859a 	bne.w	80080ea <_strtod_l+0xbba>
 80075b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075b8:	b1e3      	cbz	r3, 80075f4 <_strtod_l+0xc4>
 80075ba:	4652      	mov	r2, sl
 80075bc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80075c0:	ec43 2b10 	vmov	d0, r2, r3
 80075c4:	b021      	add	sp, #132	; 0x84
 80075c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ca:	2a2b      	cmp	r2, #43	; 0x2b
 80075cc:	d015      	beq.n	80075fa <_strtod_l+0xca>
 80075ce:	2a2d      	cmp	r2, #45	; 0x2d
 80075d0:	d004      	beq.n	80075dc <_strtod_l+0xac>
 80075d2:	2a20      	cmp	r2, #32
 80075d4:	d1ca      	bne.n	800756c <_strtod_l+0x3c>
 80075d6:	3301      	adds	r3, #1
 80075d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80075da:	e7bf      	b.n	800755c <_strtod_l+0x2c>
 80075dc:	2201      	movs	r2, #1
 80075de:	920d      	str	r2, [sp, #52]	; 0x34
 80075e0:	1c5a      	adds	r2, r3, #1
 80075e2:	921b      	str	r2, [sp, #108]	; 0x6c
 80075e4:	785b      	ldrb	r3, [r3, #1]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1c2      	bne.n	8007570 <_strtod_l+0x40>
 80075ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075ec:	961b      	str	r6, [sp, #108]	; 0x6c
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f040 8579 	bne.w	80080e6 <_strtod_l+0xbb6>
 80075f4:	4652      	mov	r2, sl
 80075f6:	465b      	mov	r3, fp
 80075f8:	e7e2      	b.n	80075c0 <_strtod_l+0x90>
 80075fa:	2200      	movs	r2, #0
 80075fc:	e7ef      	b.n	80075de <_strtod_l+0xae>
 80075fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007600:	b13a      	cbz	r2, 8007612 <_strtod_l+0xe2>
 8007602:	2135      	movs	r1, #53	; 0x35
 8007604:	a81e      	add	r0, sp, #120	; 0x78
 8007606:	f001 fd77 	bl	80090f8 <__copybits>
 800760a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800760c:	4648      	mov	r0, r9
 800760e:	f001 f9e3 	bl	80089d8 <_Bfree>
 8007612:	3c01      	subs	r4, #1
 8007614:	2c04      	cmp	r4, #4
 8007616:	d806      	bhi.n	8007626 <_strtod_l+0xf6>
 8007618:	e8df f004 	tbb	[pc, r4]
 800761c:	1714030a 	.word	0x1714030a
 8007620:	0a          	.byte	0x0a
 8007621:	00          	.byte	0x00
 8007622:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8007626:	0730      	lsls	r0, r6, #28
 8007628:	d5c1      	bpl.n	80075ae <_strtod_l+0x7e>
 800762a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800762e:	e7be      	b.n	80075ae <_strtod_l+0x7e>
 8007630:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8007634:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007636:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800763a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800763e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007642:	e7f0      	b.n	8007626 <_strtod_l+0xf6>
 8007644:	f8df b170 	ldr.w	fp, [pc, #368]	; 80077b8 <_strtod_l+0x288>
 8007648:	e7ed      	b.n	8007626 <_strtod_l+0xf6>
 800764a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800764e:	f04f 3aff 	mov.w	sl, #4294967295
 8007652:	e7e8      	b.n	8007626 <_strtod_l+0xf6>
 8007654:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007656:	1c5a      	adds	r2, r3, #1
 8007658:	921b      	str	r2, [sp, #108]	; 0x6c
 800765a:	785b      	ldrb	r3, [r3, #1]
 800765c:	2b30      	cmp	r3, #48	; 0x30
 800765e:	d0f9      	beq.n	8007654 <_strtod_l+0x124>
 8007660:	2b00      	cmp	r3, #0
 8007662:	d0a4      	beq.n	80075ae <_strtod_l+0x7e>
 8007664:	2301      	movs	r3, #1
 8007666:	2500      	movs	r5, #0
 8007668:	9306      	str	r3, [sp, #24]
 800766a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800766c:	9308      	str	r3, [sp, #32]
 800766e:	9507      	str	r5, [sp, #28]
 8007670:	9505      	str	r5, [sp, #20]
 8007672:	220a      	movs	r2, #10
 8007674:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007676:	7807      	ldrb	r7, [r0, #0]
 8007678:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800767c:	b2d9      	uxtb	r1, r3
 800767e:	2909      	cmp	r1, #9
 8007680:	d929      	bls.n	80076d6 <_strtod_l+0x1a6>
 8007682:	4622      	mov	r2, r4
 8007684:	f8d8 1000 	ldr.w	r1, [r8]
 8007688:	f001 fdea 	bl	8009260 <strncmp>
 800768c:	2800      	cmp	r0, #0
 800768e:	d031      	beq.n	80076f4 <_strtod_l+0x1c4>
 8007690:	2000      	movs	r0, #0
 8007692:	9c05      	ldr	r4, [sp, #20]
 8007694:	9004      	str	r0, [sp, #16]
 8007696:	463b      	mov	r3, r7
 8007698:	4602      	mov	r2, r0
 800769a:	2b65      	cmp	r3, #101	; 0x65
 800769c:	d001      	beq.n	80076a2 <_strtod_l+0x172>
 800769e:	2b45      	cmp	r3, #69	; 0x45
 80076a0:	d114      	bne.n	80076cc <_strtod_l+0x19c>
 80076a2:	b924      	cbnz	r4, 80076ae <_strtod_l+0x17e>
 80076a4:	b910      	cbnz	r0, 80076ac <_strtod_l+0x17c>
 80076a6:	9b06      	ldr	r3, [sp, #24]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d09e      	beq.n	80075ea <_strtod_l+0xba>
 80076ac:	2400      	movs	r4, #0
 80076ae:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80076b0:	1c73      	adds	r3, r6, #1
 80076b2:	931b      	str	r3, [sp, #108]	; 0x6c
 80076b4:	7873      	ldrb	r3, [r6, #1]
 80076b6:	2b2b      	cmp	r3, #43	; 0x2b
 80076b8:	d078      	beq.n	80077ac <_strtod_l+0x27c>
 80076ba:	2b2d      	cmp	r3, #45	; 0x2d
 80076bc:	d070      	beq.n	80077a0 <_strtod_l+0x270>
 80076be:	f04f 0c00 	mov.w	ip, #0
 80076c2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80076c6:	2f09      	cmp	r7, #9
 80076c8:	d97c      	bls.n	80077c4 <_strtod_l+0x294>
 80076ca:	961b      	str	r6, [sp, #108]	; 0x6c
 80076cc:	f04f 0e00 	mov.w	lr, #0
 80076d0:	e09a      	b.n	8007808 <_strtod_l+0x2d8>
 80076d2:	2300      	movs	r3, #0
 80076d4:	e7c7      	b.n	8007666 <_strtod_l+0x136>
 80076d6:	9905      	ldr	r1, [sp, #20]
 80076d8:	2908      	cmp	r1, #8
 80076da:	bfdd      	ittte	le
 80076dc:	9907      	ldrle	r1, [sp, #28]
 80076de:	fb02 3301 	mlale	r3, r2, r1, r3
 80076e2:	9307      	strle	r3, [sp, #28]
 80076e4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80076e8:	9b05      	ldr	r3, [sp, #20]
 80076ea:	3001      	adds	r0, #1
 80076ec:	3301      	adds	r3, #1
 80076ee:	9305      	str	r3, [sp, #20]
 80076f0:	901b      	str	r0, [sp, #108]	; 0x6c
 80076f2:	e7bf      	b.n	8007674 <_strtod_l+0x144>
 80076f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076f6:	191a      	adds	r2, r3, r4
 80076f8:	921b      	str	r2, [sp, #108]	; 0x6c
 80076fa:	9a05      	ldr	r2, [sp, #20]
 80076fc:	5d1b      	ldrb	r3, [r3, r4]
 80076fe:	2a00      	cmp	r2, #0
 8007700:	d037      	beq.n	8007772 <_strtod_l+0x242>
 8007702:	9c05      	ldr	r4, [sp, #20]
 8007704:	4602      	mov	r2, r0
 8007706:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800770a:	2909      	cmp	r1, #9
 800770c:	d913      	bls.n	8007736 <_strtod_l+0x206>
 800770e:	2101      	movs	r1, #1
 8007710:	9104      	str	r1, [sp, #16]
 8007712:	e7c2      	b.n	800769a <_strtod_l+0x16a>
 8007714:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	921b      	str	r2, [sp, #108]	; 0x6c
 800771a:	785b      	ldrb	r3, [r3, #1]
 800771c:	3001      	adds	r0, #1
 800771e:	2b30      	cmp	r3, #48	; 0x30
 8007720:	d0f8      	beq.n	8007714 <_strtod_l+0x1e4>
 8007722:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007726:	2a08      	cmp	r2, #8
 8007728:	f200 84e4 	bhi.w	80080f4 <_strtod_l+0xbc4>
 800772c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800772e:	9208      	str	r2, [sp, #32]
 8007730:	4602      	mov	r2, r0
 8007732:	2000      	movs	r0, #0
 8007734:	4604      	mov	r4, r0
 8007736:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800773a:	f100 0101 	add.w	r1, r0, #1
 800773e:	d012      	beq.n	8007766 <_strtod_l+0x236>
 8007740:	440a      	add	r2, r1
 8007742:	eb00 0c04 	add.w	ip, r0, r4
 8007746:	4621      	mov	r1, r4
 8007748:	270a      	movs	r7, #10
 800774a:	458c      	cmp	ip, r1
 800774c:	d113      	bne.n	8007776 <_strtod_l+0x246>
 800774e:	1821      	adds	r1, r4, r0
 8007750:	2908      	cmp	r1, #8
 8007752:	f104 0401 	add.w	r4, r4, #1
 8007756:	4404      	add	r4, r0
 8007758:	dc19      	bgt.n	800778e <_strtod_l+0x25e>
 800775a:	9b07      	ldr	r3, [sp, #28]
 800775c:	210a      	movs	r1, #10
 800775e:	fb01 e303 	mla	r3, r1, r3, lr
 8007762:	9307      	str	r3, [sp, #28]
 8007764:	2100      	movs	r1, #0
 8007766:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007768:	1c58      	adds	r0, r3, #1
 800776a:	901b      	str	r0, [sp, #108]	; 0x6c
 800776c:	785b      	ldrb	r3, [r3, #1]
 800776e:	4608      	mov	r0, r1
 8007770:	e7c9      	b.n	8007706 <_strtod_l+0x1d6>
 8007772:	9805      	ldr	r0, [sp, #20]
 8007774:	e7d3      	b.n	800771e <_strtod_l+0x1ee>
 8007776:	2908      	cmp	r1, #8
 8007778:	f101 0101 	add.w	r1, r1, #1
 800777c:	dc03      	bgt.n	8007786 <_strtod_l+0x256>
 800777e:	9b07      	ldr	r3, [sp, #28]
 8007780:	437b      	muls	r3, r7
 8007782:	9307      	str	r3, [sp, #28]
 8007784:	e7e1      	b.n	800774a <_strtod_l+0x21a>
 8007786:	2910      	cmp	r1, #16
 8007788:	bfd8      	it	le
 800778a:	437d      	mulle	r5, r7
 800778c:	e7dd      	b.n	800774a <_strtod_l+0x21a>
 800778e:	2c10      	cmp	r4, #16
 8007790:	bfdc      	itt	le
 8007792:	210a      	movle	r1, #10
 8007794:	fb01 e505 	mlale	r5, r1, r5, lr
 8007798:	e7e4      	b.n	8007764 <_strtod_l+0x234>
 800779a:	2301      	movs	r3, #1
 800779c:	9304      	str	r3, [sp, #16]
 800779e:	e781      	b.n	80076a4 <_strtod_l+0x174>
 80077a0:	f04f 0c01 	mov.w	ip, #1
 80077a4:	1cb3      	adds	r3, r6, #2
 80077a6:	931b      	str	r3, [sp, #108]	; 0x6c
 80077a8:	78b3      	ldrb	r3, [r6, #2]
 80077aa:	e78a      	b.n	80076c2 <_strtod_l+0x192>
 80077ac:	f04f 0c00 	mov.w	ip, #0
 80077b0:	e7f8      	b.n	80077a4 <_strtod_l+0x274>
 80077b2:	bf00      	nop
 80077b4:	08009540 	.word	0x08009540
 80077b8:	7ff00000 	.word	0x7ff00000
 80077bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077be:	1c5f      	adds	r7, r3, #1
 80077c0:	971b      	str	r7, [sp, #108]	; 0x6c
 80077c2:	785b      	ldrb	r3, [r3, #1]
 80077c4:	2b30      	cmp	r3, #48	; 0x30
 80077c6:	d0f9      	beq.n	80077bc <_strtod_l+0x28c>
 80077c8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80077cc:	2f08      	cmp	r7, #8
 80077ce:	f63f af7d 	bhi.w	80076cc <_strtod_l+0x19c>
 80077d2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80077d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077d8:	930a      	str	r3, [sp, #40]	; 0x28
 80077da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077dc:	1c5f      	adds	r7, r3, #1
 80077de:	971b      	str	r7, [sp, #108]	; 0x6c
 80077e0:	785b      	ldrb	r3, [r3, #1]
 80077e2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80077e6:	f1b8 0f09 	cmp.w	r8, #9
 80077ea:	d937      	bls.n	800785c <_strtod_l+0x32c>
 80077ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80077ee:	1a7f      	subs	r7, r7, r1
 80077f0:	2f08      	cmp	r7, #8
 80077f2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80077f6:	dc37      	bgt.n	8007868 <_strtod_l+0x338>
 80077f8:	45be      	cmp	lr, r7
 80077fa:	bfa8      	it	ge
 80077fc:	46be      	movge	lr, r7
 80077fe:	f1bc 0f00 	cmp.w	ip, #0
 8007802:	d001      	beq.n	8007808 <_strtod_l+0x2d8>
 8007804:	f1ce 0e00 	rsb	lr, lr, #0
 8007808:	2c00      	cmp	r4, #0
 800780a:	d151      	bne.n	80078b0 <_strtod_l+0x380>
 800780c:	2800      	cmp	r0, #0
 800780e:	f47f aece 	bne.w	80075ae <_strtod_l+0x7e>
 8007812:	9a06      	ldr	r2, [sp, #24]
 8007814:	2a00      	cmp	r2, #0
 8007816:	f47f aeca 	bne.w	80075ae <_strtod_l+0x7e>
 800781a:	9a04      	ldr	r2, [sp, #16]
 800781c:	2a00      	cmp	r2, #0
 800781e:	f47f aee4 	bne.w	80075ea <_strtod_l+0xba>
 8007822:	2b4e      	cmp	r3, #78	; 0x4e
 8007824:	d027      	beq.n	8007876 <_strtod_l+0x346>
 8007826:	dc21      	bgt.n	800786c <_strtod_l+0x33c>
 8007828:	2b49      	cmp	r3, #73	; 0x49
 800782a:	f47f aede 	bne.w	80075ea <_strtod_l+0xba>
 800782e:	49a0      	ldr	r1, [pc, #640]	; (8007ab0 <_strtod_l+0x580>)
 8007830:	a81b      	add	r0, sp, #108	; 0x6c
 8007832:	f000 ffd7 	bl	80087e4 <__match>
 8007836:	2800      	cmp	r0, #0
 8007838:	f43f aed7 	beq.w	80075ea <_strtod_l+0xba>
 800783c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800783e:	499d      	ldr	r1, [pc, #628]	; (8007ab4 <_strtod_l+0x584>)
 8007840:	3b01      	subs	r3, #1
 8007842:	a81b      	add	r0, sp, #108	; 0x6c
 8007844:	931b      	str	r3, [sp, #108]	; 0x6c
 8007846:	f000 ffcd 	bl	80087e4 <__match>
 800784a:	b910      	cbnz	r0, 8007852 <_strtod_l+0x322>
 800784c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800784e:	3301      	adds	r3, #1
 8007850:	931b      	str	r3, [sp, #108]	; 0x6c
 8007852:	f8df b274 	ldr.w	fp, [pc, #628]	; 8007ac8 <_strtod_l+0x598>
 8007856:	f04f 0a00 	mov.w	sl, #0
 800785a:	e6a8      	b.n	80075ae <_strtod_l+0x7e>
 800785c:	210a      	movs	r1, #10
 800785e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007862:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007866:	e7b8      	b.n	80077da <_strtod_l+0x2aa>
 8007868:	46be      	mov	lr, r7
 800786a:	e7c8      	b.n	80077fe <_strtod_l+0x2ce>
 800786c:	2b69      	cmp	r3, #105	; 0x69
 800786e:	d0de      	beq.n	800782e <_strtod_l+0x2fe>
 8007870:	2b6e      	cmp	r3, #110	; 0x6e
 8007872:	f47f aeba 	bne.w	80075ea <_strtod_l+0xba>
 8007876:	4990      	ldr	r1, [pc, #576]	; (8007ab8 <_strtod_l+0x588>)
 8007878:	a81b      	add	r0, sp, #108	; 0x6c
 800787a:	f000 ffb3 	bl	80087e4 <__match>
 800787e:	2800      	cmp	r0, #0
 8007880:	f43f aeb3 	beq.w	80075ea <_strtod_l+0xba>
 8007884:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	2b28      	cmp	r3, #40	; 0x28
 800788a:	d10e      	bne.n	80078aa <_strtod_l+0x37a>
 800788c:	aa1e      	add	r2, sp, #120	; 0x78
 800788e:	498b      	ldr	r1, [pc, #556]	; (8007abc <_strtod_l+0x58c>)
 8007890:	a81b      	add	r0, sp, #108	; 0x6c
 8007892:	f000 ffbb 	bl	800880c <__hexnan>
 8007896:	2805      	cmp	r0, #5
 8007898:	d107      	bne.n	80078aa <_strtod_l+0x37a>
 800789a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800789c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80078a0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80078a4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80078a8:	e681      	b.n	80075ae <_strtod_l+0x7e>
 80078aa:	f8df b224 	ldr.w	fp, [pc, #548]	; 8007ad0 <_strtod_l+0x5a0>
 80078ae:	e7d2      	b.n	8007856 <_strtod_l+0x326>
 80078b0:	ebae 0302 	sub.w	r3, lr, r2
 80078b4:	9306      	str	r3, [sp, #24]
 80078b6:	9b05      	ldr	r3, [sp, #20]
 80078b8:	9807      	ldr	r0, [sp, #28]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	bf08      	it	eq
 80078be:	4623      	moveq	r3, r4
 80078c0:	2c10      	cmp	r4, #16
 80078c2:	9305      	str	r3, [sp, #20]
 80078c4:	46a0      	mov	r8, r4
 80078c6:	bfa8      	it	ge
 80078c8:	f04f 0810 	movge.w	r8, #16
 80078cc:	f7f8 fdd8 	bl	8000480 <__aeabi_ui2d>
 80078d0:	2c09      	cmp	r4, #9
 80078d2:	4682      	mov	sl, r0
 80078d4:	468b      	mov	fp, r1
 80078d6:	dc13      	bgt.n	8007900 <_strtod_l+0x3d0>
 80078d8:	9b06      	ldr	r3, [sp, #24]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f43f ae67 	beq.w	80075ae <_strtod_l+0x7e>
 80078e0:	9b06      	ldr	r3, [sp, #24]
 80078e2:	dd7a      	ble.n	80079da <_strtod_l+0x4aa>
 80078e4:	2b16      	cmp	r3, #22
 80078e6:	dc61      	bgt.n	80079ac <_strtod_l+0x47c>
 80078e8:	4a75      	ldr	r2, [pc, #468]	; (8007ac0 <_strtod_l+0x590>)
 80078ea:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80078ee:	e9de 0100 	ldrd	r0, r1, [lr]
 80078f2:	4652      	mov	r2, sl
 80078f4:	465b      	mov	r3, fp
 80078f6:	f7f8 fe3d 	bl	8000574 <__aeabi_dmul>
 80078fa:	4682      	mov	sl, r0
 80078fc:	468b      	mov	fp, r1
 80078fe:	e656      	b.n	80075ae <_strtod_l+0x7e>
 8007900:	4b6f      	ldr	r3, [pc, #444]	; (8007ac0 <_strtod_l+0x590>)
 8007902:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007906:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800790a:	f7f8 fe33 	bl	8000574 <__aeabi_dmul>
 800790e:	4606      	mov	r6, r0
 8007910:	4628      	mov	r0, r5
 8007912:	460f      	mov	r7, r1
 8007914:	f7f8 fdb4 	bl	8000480 <__aeabi_ui2d>
 8007918:	4602      	mov	r2, r0
 800791a:	460b      	mov	r3, r1
 800791c:	4630      	mov	r0, r6
 800791e:	4639      	mov	r1, r7
 8007920:	f7f8 fc72 	bl	8000208 <__adddf3>
 8007924:	2c0f      	cmp	r4, #15
 8007926:	4682      	mov	sl, r0
 8007928:	468b      	mov	fp, r1
 800792a:	ddd5      	ble.n	80078d8 <_strtod_l+0x3a8>
 800792c:	9b06      	ldr	r3, [sp, #24]
 800792e:	eba4 0808 	sub.w	r8, r4, r8
 8007932:	4498      	add	r8, r3
 8007934:	f1b8 0f00 	cmp.w	r8, #0
 8007938:	f340 8096 	ble.w	8007a68 <_strtod_l+0x538>
 800793c:	f018 030f 	ands.w	r3, r8, #15
 8007940:	d00a      	beq.n	8007958 <_strtod_l+0x428>
 8007942:	495f      	ldr	r1, [pc, #380]	; (8007ac0 <_strtod_l+0x590>)
 8007944:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007948:	4652      	mov	r2, sl
 800794a:	465b      	mov	r3, fp
 800794c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007950:	f7f8 fe10 	bl	8000574 <__aeabi_dmul>
 8007954:	4682      	mov	sl, r0
 8007956:	468b      	mov	fp, r1
 8007958:	f038 080f 	bics.w	r8, r8, #15
 800795c:	d073      	beq.n	8007a46 <_strtod_l+0x516>
 800795e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007962:	dd47      	ble.n	80079f4 <_strtod_l+0x4c4>
 8007964:	2400      	movs	r4, #0
 8007966:	46a0      	mov	r8, r4
 8007968:	9407      	str	r4, [sp, #28]
 800796a:	9405      	str	r4, [sp, #20]
 800796c:	2322      	movs	r3, #34	; 0x22
 800796e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007ac8 <_strtod_l+0x598>
 8007972:	f8c9 3000 	str.w	r3, [r9]
 8007976:	f04f 0a00 	mov.w	sl, #0
 800797a:	9b07      	ldr	r3, [sp, #28]
 800797c:	2b00      	cmp	r3, #0
 800797e:	f43f ae16 	beq.w	80075ae <_strtod_l+0x7e>
 8007982:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007984:	4648      	mov	r0, r9
 8007986:	f001 f827 	bl	80089d8 <_Bfree>
 800798a:	9905      	ldr	r1, [sp, #20]
 800798c:	4648      	mov	r0, r9
 800798e:	f001 f823 	bl	80089d8 <_Bfree>
 8007992:	4641      	mov	r1, r8
 8007994:	4648      	mov	r0, r9
 8007996:	f001 f81f 	bl	80089d8 <_Bfree>
 800799a:	9907      	ldr	r1, [sp, #28]
 800799c:	4648      	mov	r0, r9
 800799e:	f001 f81b 	bl	80089d8 <_Bfree>
 80079a2:	4621      	mov	r1, r4
 80079a4:	4648      	mov	r0, r9
 80079a6:	f001 f817 	bl	80089d8 <_Bfree>
 80079aa:	e600      	b.n	80075ae <_strtod_l+0x7e>
 80079ac:	9a06      	ldr	r2, [sp, #24]
 80079ae:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80079b2:	4293      	cmp	r3, r2
 80079b4:	dbba      	blt.n	800792c <_strtod_l+0x3fc>
 80079b6:	4d42      	ldr	r5, [pc, #264]	; (8007ac0 <_strtod_l+0x590>)
 80079b8:	f1c4 040f 	rsb	r4, r4, #15
 80079bc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80079c0:	4652      	mov	r2, sl
 80079c2:	465b      	mov	r3, fp
 80079c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079c8:	f7f8 fdd4 	bl	8000574 <__aeabi_dmul>
 80079cc:	9b06      	ldr	r3, [sp, #24]
 80079ce:	1b1c      	subs	r4, r3, r4
 80079d0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80079d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80079d8:	e78d      	b.n	80078f6 <_strtod_l+0x3c6>
 80079da:	f113 0f16 	cmn.w	r3, #22
 80079de:	dba5      	blt.n	800792c <_strtod_l+0x3fc>
 80079e0:	4a37      	ldr	r2, [pc, #220]	; (8007ac0 <_strtod_l+0x590>)
 80079e2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80079e6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80079ea:	4650      	mov	r0, sl
 80079ec:	4659      	mov	r1, fp
 80079ee:	f7f8 feeb 	bl	80007c8 <__aeabi_ddiv>
 80079f2:	e782      	b.n	80078fa <_strtod_l+0x3ca>
 80079f4:	2300      	movs	r3, #0
 80079f6:	4e33      	ldr	r6, [pc, #204]	; (8007ac4 <_strtod_l+0x594>)
 80079f8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80079fc:	4650      	mov	r0, sl
 80079fe:	4659      	mov	r1, fp
 8007a00:	461d      	mov	r5, r3
 8007a02:	f1b8 0f01 	cmp.w	r8, #1
 8007a06:	dc21      	bgt.n	8007a4c <_strtod_l+0x51c>
 8007a08:	b10b      	cbz	r3, 8007a0e <_strtod_l+0x4de>
 8007a0a:	4682      	mov	sl, r0
 8007a0c:	468b      	mov	fp, r1
 8007a0e:	4b2d      	ldr	r3, [pc, #180]	; (8007ac4 <_strtod_l+0x594>)
 8007a10:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007a14:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007a18:	4652      	mov	r2, sl
 8007a1a:	465b      	mov	r3, fp
 8007a1c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007a20:	f7f8 fda8 	bl	8000574 <__aeabi_dmul>
 8007a24:	4b28      	ldr	r3, [pc, #160]	; (8007ac8 <_strtod_l+0x598>)
 8007a26:	460a      	mov	r2, r1
 8007a28:	400b      	ands	r3, r1
 8007a2a:	4928      	ldr	r1, [pc, #160]	; (8007acc <_strtod_l+0x59c>)
 8007a2c:	428b      	cmp	r3, r1
 8007a2e:	4682      	mov	sl, r0
 8007a30:	d898      	bhi.n	8007964 <_strtod_l+0x434>
 8007a32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007a36:	428b      	cmp	r3, r1
 8007a38:	bf86      	itte	hi
 8007a3a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007ad4 <_strtod_l+0x5a4>
 8007a3e:	f04f 3aff 	movhi.w	sl, #4294967295
 8007a42:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007a46:	2300      	movs	r3, #0
 8007a48:	9304      	str	r3, [sp, #16]
 8007a4a:	e077      	b.n	8007b3c <_strtod_l+0x60c>
 8007a4c:	f018 0f01 	tst.w	r8, #1
 8007a50:	d006      	beq.n	8007a60 <_strtod_l+0x530>
 8007a52:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5a:	f7f8 fd8b 	bl	8000574 <__aeabi_dmul>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	3501      	adds	r5, #1
 8007a62:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007a66:	e7cc      	b.n	8007a02 <_strtod_l+0x4d2>
 8007a68:	d0ed      	beq.n	8007a46 <_strtod_l+0x516>
 8007a6a:	f1c8 0800 	rsb	r8, r8, #0
 8007a6e:	f018 020f 	ands.w	r2, r8, #15
 8007a72:	d00a      	beq.n	8007a8a <_strtod_l+0x55a>
 8007a74:	4b12      	ldr	r3, [pc, #72]	; (8007ac0 <_strtod_l+0x590>)
 8007a76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a7a:	4650      	mov	r0, sl
 8007a7c:	4659      	mov	r1, fp
 8007a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a82:	f7f8 fea1 	bl	80007c8 <__aeabi_ddiv>
 8007a86:	4682      	mov	sl, r0
 8007a88:	468b      	mov	fp, r1
 8007a8a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007a8e:	d0da      	beq.n	8007a46 <_strtod_l+0x516>
 8007a90:	f1b8 0f1f 	cmp.w	r8, #31
 8007a94:	dd20      	ble.n	8007ad8 <_strtod_l+0x5a8>
 8007a96:	2400      	movs	r4, #0
 8007a98:	46a0      	mov	r8, r4
 8007a9a:	9407      	str	r4, [sp, #28]
 8007a9c:	9405      	str	r4, [sp, #20]
 8007a9e:	2322      	movs	r3, #34	; 0x22
 8007aa0:	f04f 0a00 	mov.w	sl, #0
 8007aa4:	f04f 0b00 	mov.w	fp, #0
 8007aa8:	f8c9 3000 	str.w	r3, [r9]
 8007aac:	e765      	b.n	800797a <_strtod_l+0x44a>
 8007aae:	bf00      	nop
 8007ab0:	08009534 	.word	0x08009534
 8007ab4:	08009537 	.word	0x08009537
 8007ab8:	0800953d 	.word	0x0800953d
 8007abc:	08009554 	.word	0x08009554
 8007ac0:	080095e8 	.word	0x080095e8
 8007ac4:	080095c0 	.word	0x080095c0
 8007ac8:	7ff00000 	.word	0x7ff00000
 8007acc:	7ca00000 	.word	0x7ca00000
 8007ad0:	fff80000 	.word	0xfff80000
 8007ad4:	7fefffff 	.word	0x7fefffff
 8007ad8:	f018 0310 	ands.w	r3, r8, #16
 8007adc:	bf18      	it	ne
 8007ade:	236a      	movne	r3, #106	; 0x6a
 8007ae0:	4da0      	ldr	r5, [pc, #640]	; (8007d64 <_strtod_l+0x834>)
 8007ae2:	9304      	str	r3, [sp, #16]
 8007ae4:	4650      	mov	r0, sl
 8007ae6:	4659      	mov	r1, fp
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f1b8 0f00 	cmp.w	r8, #0
 8007aee:	f300 810a 	bgt.w	8007d06 <_strtod_l+0x7d6>
 8007af2:	b10b      	cbz	r3, 8007af8 <_strtod_l+0x5c8>
 8007af4:	4682      	mov	sl, r0
 8007af6:	468b      	mov	fp, r1
 8007af8:	9b04      	ldr	r3, [sp, #16]
 8007afa:	b1bb      	cbz	r3, 8007b2c <_strtod_l+0x5fc>
 8007afc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007b00:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	4659      	mov	r1, fp
 8007b08:	dd10      	ble.n	8007b2c <_strtod_l+0x5fc>
 8007b0a:	2b1f      	cmp	r3, #31
 8007b0c:	f340 8107 	ble.w	8007d1e <_strtod_l+0x7ee>
 8007b10:	2b34      	cmp	r3, #52	; 0x34
 8007b12:	bfde      	ittt	le
 8007b14:	3b20      	suble	r3, #32
 8007b16:	f04f 32ff 	movle.w	r2, #4294967295
 8007b1a:	fa02 f303 	lslle.w	r3, r2, r3
 8007b1e:	f04f 0a00 	mov.w	sl, #0
 8007b22:	bfcc      	ite	gt
 8007b24:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007b28:	ea03 0b01 	andle.w	fp, r3, r1
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	2300      	movs	r3, #0
 8007b30:	4650      	mov	r0, sl
 8007b32:	4659      	mov	r1, fp
 8007b34:	f7f8 ff86 	bl	8000a44 <__aeabi_dcmpeq>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d1ac      	bne.n	8007a96 <_strtod_l+0x566>
 8007b3c:	9b07      	ldr	r3, [sp, #28]
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	9a05      	ldr	r2, [sp, #20]
 8007b42:	9908      	ldr	r1, [sp, #32]
 8007b44:	4623      	mov	r3, r4
 8007b46:	4648      	mov	r0, r9
 8007b48:	f000 ff98 	bl	8008a7c <__s2b>
 8007b4c:	9007      	str	r0, [sp, #28]
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	f43f af08 	beq.w	8007964 <_strtod_l+0x434>
 8007b54:	9a06      	ldr	r2, [sp, #24]
 8007b56:	9b06      	ldr	r3, [sp, #24]
 8007b58:	2a00      	cmp	r2, #0
 8007b5a:	f1c3 0300 	rsb	r3, r3, #0
 8007b5e:	bfa8      	it	ge
 8007b60:	2300      	movge	r3, #0
 8007b62:	930e      	str	r3, [sp, #56]	; 0x38
 8007b64:	2400      	movs	r4, #0
 8007b66:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007b6a:	9316      	str	r3, [sp, #88]	; 0x58
 8007b6c:	46a0      	mov	r8, r4
 8007b6e:	9b07      	ldr	r3, [sp, #28]
 8007b70:	4648      	mov	r0, r9
 8007b72:	6859      	ldr	r1, [r3, #4]
 8007b74:	f000 fefc 	bl	8008970 <_Balloc>
 8007b78:	9005      	str	r0, [sp, #20]
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	f43f aef6 	beq.w	800796c <_strtod_l+0x43c>
 8007b80:	9b07      	ldr	r3, [sp, #28]
 8007b82:	691a      	ldr	r2, [r3, #16]
 8007b84:	3202      	adds	r2, #2
 8007b86:	f103 010c 	add.w	r1, r3, #12
 8007b8a:	0092      	lsls	r2, r2, #2
 8007b8c:	300c      	adds	r0, #12
 8007b8e:	f000 fee4 	bl	800895a <memcpy>
 8007b92:	aa1e      	add	r2, sp, #120	; 0x78
 8007b94:	a91d      	add	r1, sp, #116	; 0x74
 8007b96:	ec4b ab10 	vmov	d0, sl, fp
 8007b9a:	4648      	mov	r0, r9
 8007b9c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007ba0:	f001 fa28 	bl	8008ff4 <__d2b>
 8007ba4:	901c      	str	r0, [sp, #112]	; 0x70
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	f43f aee0 	beq.w	800796c <_strtod_l+0x43c>
 8007bac:	2101      	movs	r1, #1
 8007bae:	4648      	mov	r0, r9
 8007bb0:	f000 fff0 	bl	8008b94 <__i2b>
 8007bb4:	4680      	mov	r8, r0
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	f43f aed8 	beq.w	800796c <_strtod_l+0x43c>
 8007bbc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007bbe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007bc0:	2e00      	cmp	r6, #0
 8007bc2:	bfab      	itete	ge
 8007bc4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007bc6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007bc8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007bca:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8007bcc:	bfac      	ite	ge
 8007bce:	18f7      	addge	r7, r6, r3
 8007bd0:	1b9d      	sublt	r5, r3, r6
 8007bd2:	9b04      	ldr	r3, [sp, #16]
 8007bd4:	1af6      	subs	r6, r6, r3
 8007bd6:	4416      	add	r6, r2
 8007bd8:	4b63      	ldr	r3, [pc, #396]	; (8007d68 <_strtod_l+0x838>)
 8007bda:	3e01      	subs	r6, #1
 8007bdc:	429e      	cmp	r6, r3
 8007bde:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007be2:	f280 80af 	bge.w	8007d44 <_strtod_l+0x814>
 8007be6:	1b9b      	subs	r3, r3, r6
 8007be8:	2b1f      	cmp	r3, #31
 8007bea:	eba2 0203 	sub.w	r2, r2, r3
 8007bee:	f04f 0101 	mov.w	r1, #1
 8007bf2:	f300 809b 	bgt.w	8007d2c <_strtod_l+0x7fc>
 8007bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8007bfa:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	930a      	str	r3, [sp, #40]	; 0x28
 8007c00:	18be      	adds	r6, r7, r2
 8007c02:	9b04      	ldr	r3, [sp, #16]
 8007c04:	42b7      	cmp	r7, r6
 8007c06:	4415      	add	r5, r2
 8007c08:	441d      	add	r5, r3
 8007c0a:	463b      	mov	r3, r7
 8007c0c:	bfa8      	it	ge
 8007c0e:	4633      	movge	r3, r6
 8007c10:	42ab      	cmp	r3, r5
 8007c12:	bfa8      	it	ge
 8007c14:	462b      	movge	r3, r5
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	bfc2      	ittt	gt
 8007c1a:	1af6      	subgt	r6, r6, r3
 8007c1c:	1aed      	subgt	r5, r5, r3
 8007c1e:	1aff      	subgt	r7, r7, r3
 8007c20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c22:	b1bb      	cbz	r3, 8007c54 <_strtod_l+0x724>
 8007c24:	4641      	mov	r1, r8
 8007c26:	461a      	mov	r2, r3
 8007c28:	4648      	mov	r0, r9
 8007c2a:	f001 f853 	bl	8008cd4 <__pow5mult>
 8007c2e:	4680      	mov	r8, r0
 8007c30:	2800      	cmp	r0, #0
 8007c32:	f43f ae9b 	beq.w	800796c <_strtod_l+0x43c>
 8007c36:	4601      	mov	r1, r0
 8007c38:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007c3a:	4648      	mov	r0, r9
 8007c3c:	f000 ffb3 	bl	8008ba6 <__multiply>
 8007c40:	900c      	str	r0, [sp, #48]	; 0x30
 8007c42:	2800      	cmp	r0, #0
 8007c44:	f43f ae92 	beq.w	800796c <_strtod_l+0x43c>
 8007c48:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007c4a:	4648      	mov	r0, r9
 8007c4c:	f000 fec4 	bl	80089d8 <_Bfree>
 8007c50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c52:	931c      	str	r3, [sp, #112]	; 0x70
 8007c54:	2e00      	cmp	r6, #0
 8007c56:	dc7a      	bgt.n	8007d4e <_strtod_l+0x81e>
 8007c58:	9b06      	ldr	r3, [sp, #24]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	dd08      	ble.n	8007c70 <_strtod_l+0x740>
 8007c5e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007c60:	9905      	ldr	r1, [sp, #20]
 8007c62:	4648      	mov	r0, r9
 8007c64:	f001 f836 	bl	8008cd4 <__pow5mult>
 8007c68:	9005      	str	r0, [sp, #20]
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	f43f ae7e 	beq.w	800796c <_strtod_l+0x43c>
 8007c70:	2d00      	cmp	r5, #0
 8007c72:	dd08      	ble.n	8007c86 <_strtod_l+0x756>
 8007c74:	462a      	mov	r2, r5
 8007c76:	9905      	ldr	r1, [sp, #20]
 8007c78:	4648      	mov	r0, r9
 8007c7a:	f001 f879 	bl	8008d70 <__lshift>
 8007c7e:	9005      	str	r0, [sp, #20]
 8007c80:	2800      	cmp	r0, #0
 8007c82:	f43f ae73 	beq.w	800796c <_strtod_l+0x43c>
 8007c86:	2f00      	cmp	r7, #0
 8007c88:	dd08      	ble.n	8007c9c <_strtod_l+0x76c>
 8007c8a:	4641      	mov	r1, r8
 8007c8c:	463a      	mov	r2, r7
 8007c8e:	4648      	mov	r0, r9
 8007c90:	f001 f86e 	bl	8008d70 <__lshift>
 8007c94:	4680      	mov	r8, r0
 8007c96:	2800      	cmp	r0, #0
 8007c98:	f43f ae68 	beq.w	800796c <_strtod_l+0x43c>
 8007c9c:	9a05      	ldr	r2, [sp, #20]
 8007c9e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007ca0:	4648      	mov	r0, r9
 8007ca2:	f001 f8d3 	bl	8008e4c <__mdiff>
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	f43f ae5f 	beq.w	800796c <_strtod_l+0x43c>
 8007cae:	68c3      	ldr	r3, [r0, #12]
 8007cb0:	930c      	str	r3, [sp, #48]	; 0x30
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60c3      	str	r3, [r0, #12]
 8007cb6:	4641      	mov	r1, r8
 8007cb8:	f001 f8ae 	bl	8008e18 <__mcmp>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	da55      	bge.n	8007d6c <_strtod_l+0x83c>
 8007cc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cc2:	b9e3      	cbnz	r3, 8007cfe <_strtod_l+0x7ce>
 8007cc4:	f1ba 0f00 	cmp.w	sl, #0
 8007cc8:	d119      	bne.n	8007cfe <_strtod_l+0x7ce>
 8007cca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cce:	b9b3      	cbnz	r3, 8007cfe <_strtod_l+0x7ce>
 8007cd0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007cd4:	0d1b      	lsrs	r3, r3, #20
 8007cd6:	051b      	lsls	r3, r3, #20
 8007cd8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007cdc:	d90f      	bls.n	8007cfe <_strtod_l+0x7ce>
 8007cde:	6963      	ldr	r3, [r4, #20]
 8007ce0:	b913      	cbnz	r3, 8007ce8 <_strtod_l+0x7b8>
 8007ce2:	6923      	ldr	r3, [r4, #16]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	dd0a      	ble.n	8007cfe <_strtod_l+0x7ce>
 8007ce8:	4621      	mov	r1, r4
 8007cea:	2201      	movs	r2, #1
 8007cec:	4648      	mov	r0, r9
 8007cee:	f001 f83f 	bl	8008d70 <__lshift>
 8007cf2:	4641      	mov	r1, r8
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	f001 f88f 	bl	8008e18 <__mcmp>
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	dc67      	bgt.n	8007dce <_strtod_l+0x89e>
 8007cfe:	9b04      	ldr	r3, [sp, #16]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d171      	bne.n	8007de8 <_strtod_l+0x8b8>
 8007d04:	e63d      	b.n	8007982 <_strtod_l+0x452>
 8007d06:	f018 0f01 	tst.w	r8, #1
 8007d0a:	d004      	beq.n	8007d16 <_strtod_l+0x7e6>
 8007d0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d10:	f7f8 fc30 	bl	8000574 <__aeabi_dmul>
 8007d14:	2301      	movs	r3, #1
 8007d16:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007d1a:	3508      	adds	r5, #8
 8007d1c:	e6e5      	b.n	8007aea <_strtod_l+0x5ba>
 8007d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d22:	fa02 f303 	lsl.w	r3, r2, r3
 8007d26:	ea03 0a0a 	and.w	sl, r3, sl
 8007d2a:	e6ff      	b.n	8007b2c <_strtod_l+0x5fc>
 8007d2c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007d30:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007d34:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007d38:	36e2      	adds	r6, #226	; 0xe2
 8007d3a:	fa01 f306 	lsl.w	r3, r1, r6
 8007d3e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d40:	910f      	str	r1, [sp, #60]	; 0x3c
 8007d42:	e75d      	b.n	8007c00 <_strtod_l+0x6d0>
 8007d44:	2300      	movs	r3, #0
 8007d46:	930a      	str	r3, [sp, #40]	; 0x28
 8007d48:	2301      	movs	r3, #1
 8007d4a:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d4c:	e758      	b.n	8007c00 <_strtod_l+0x6d0>
 8007d4e:	4632      	mov	r2, r6
 8007d50:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007d52:	4648      	mov	r0, r9
 8007d54:	f001 f80c 	bl	8008d70 <__lshift>
 8007d58:	901c      	str	r0, [sp, #112]	; 0x70
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	f47f af7c 	bne.w	8007c58 <_strtod_l+0x728>
 8007d60:	e604      	b.n	800796c <_strtod_l+0x43c>
 8007d62:	bf00      	nop
 8007d64:	08009568 	.word	0x08009568
 8007d68:	fffffc02 	.word	0xfffffc02
 8007d6c:	465d      	mov	r5, fp
 8007d6e:	f040 8086 	bne.w	8007e7e <_strtod_l+0x94e>
 8007d72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d78:	b32a      	cbz	r2, 8007dc6 <_strtod_l+0x896>
 8007d7a:	4aaf      	ldr	r2, [pc, #700]	; (8008038 <_strtod_l+0xb08>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d153      	bne.n	8007e28 <_strtod_l+0x8f8>
 8007d80:	9b04      	ldr	r3, [sp, #16]
 8007d82:	4650      	mov	r0, sl
 8007d84:	b1d3      	cbz	r3, 8007dbc <_strtod_l+0x88c>
 8007d86:	4aad      	ldr	r2, [pc, #692]	; (800803c <_strtod_l+0xb0c>)
 8007d88:	402a      	ands	r2, r5
 8007d8a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007d8e:	f04f 31ff 	mov.w	r1, #4294967295
 8007d92:	d816      	bhi.n	8007dc2 <_strtod_l+0x892>
 8007d94:	0d12      	lsrs	r2, r2, #20
 8007d96:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d9e:	4298      	cmp	r0, r3
 8007da0:	d142      	bne.n	8007e28 <_strtod_l+0x8f8>
 8007da2:	4ba7      	ldr	r3, [pc, #668]	; (8008040 <_strtod_l+0xb10>)
 8007da4:	429d      	cmp	r5, r3
 8007da6:	d102      	bne.n	8007dae <_strtod_l+0x87e>
 8007da8:	3001      	adds	r0, #1
 8007daa:	f43f addf 	beq.w	800796c <_strtod_l+0x43c>
 8007dae:	4ba3      	ldr	r3, [pc, #652]	; (800803c <_strtod_l+0xb0c>)
 8007db0:	402b      	ands	r3, r5
 8007db2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007db6:	f04f 0a00 	mov.w	sl, #0
 8007dba:	e7a0      	b.n	8007cfe <_strtod_l+0x7ce>
 8007dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc0:	e7ed      	b.n	8007d9e <_strtod_l+0x86e>
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	e7eb      	b.n	8007d9e <_strtod_l+0x86e>
 8007dc6:	bb7b      	cbnz	r3, 8007e28 <_strtod_l+0x8f8>
 8007dc8:	f1ba 0f00 	cmp.w	sl, #0
 8007dcc:	d12c      	bne.n	8007e28 <_strtod_l+0x8f8>
 8007dce:	9904      	ldr	r1, [sp, #16]
 8007dd0:	4a9a      	ldr	r2, [pc, #616]	; (800803c <_strtod_l+0xb0c>)
 8007dd2:	465b      	mov	r3, fp
 8007dd4:	b1f1      	cbz	r1, 8007e14 <_strtod_l+0x8e4>
 8007dd6:	ea02 010b 	and.w	r1, r2, fp
 8007dda:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007dde:	dc19      	bgt.n	8007e14 <_strtod_l+0x8e4>
 8007de0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007de4:	f77f ae5b 	ble.w	8007a9e <_strtod_l+0x56e>
 8007de8:	4a96      	ldr	r2, [pc, #600]	; (8008044 <_strtod_l+0xb14>)
 8007dea:	2300      	movs	r3, #0
 8007dec:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007df0:	4650      	mov	r0, sl
 8007df2:	4659      	mov	r1, fp
 8007df4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007df8:	f7f8 fbbc 	bl	8000574 <__aeabi_dmul>
 8007dfc:	4682      	mov	sl, r0
 8007dfe:	468b      	mov	fp, r1
 8007e00:	2900      	cmp	r1, #0
 8007e02:	f47f adbe 	bne.w	8007982 <_strtod_l+0x452>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	f47f adbb 	bne.w	8007982 <_strtod_l+0x452>
 8007e0c:	2322      	movs	r3, #34	; 0x22
 8007e0e:	f8c9 3000 	str.w	r3, [r9]
 8007e12:	e5b6      	b.n	8007982 <_strtod_l+0x452>
 8007e14:	4013      	ands	r3, r2
 8007e16:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007e1a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007e1e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007e22:	f04f 3aff 	mov.w	sl, #4294967295
 8007e26:	e76a      	b.n	8007cfe <_strtod_l+0x7ce>
 8007e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e2a:	b193      	cbz	r3, 8007e52 <_strtod_l+0x922>
 8007e2c:	422b      	tst	r3, r5
 8007e2e:	f43f af66 	beq.w	8007cfe <_strtod_l+0x7ce>
 8007e32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e34:	9a04      	ldr	r2, [sp, #16]
 8007e36:	4650      	mov	r0, sl
 8007e38:	4659      	mov	r1, fp
 8007e3a:	b173      	cbz	r3, 8007e5a <_strtod_l+0x92a>
 8007e3c:	f7ff fb5c 	bl	80074f8 <sulp>
 8007e40:	4602      	mov	r2, r0
 8007e42:	460b      	mov	r3, r1
 8007e44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e48:	f7f8 f9de 	bl	8000208 <__adddf3>
 8007e4c:	4682      	mov	sl, r0
 8007e4e:	468b      	mov	fp, r1
 8007e50:	e755      	b.n	8007cfe <_strtod_l+0x7ce>
 8007e52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e54:	ea13 0f0a 	tst.w	r3, sl
 8007e58:	e7e9      	b.n	8007e2e <_strtod_l+0x8fe>
 8007e5a:	f7ff fb4d 	bl	80074f8 <sulp>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	460b      	mov	r3, r1
 8007e62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e66:	f7f8 f9cd 	bl	8000204 <__aeabi_dsub>
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	4682      	mov	sl, r0
 8007e70:	468b      	mov	fp, r1
 8007e72:	f7f8 fde7 	bl	8000a44 <__aeabi_dcmpeq>
 8007e76:	2800      	cmp	r0, #0
 8007e78:	f47f ae11 	bne.w	8007a9e <_strtod_l+0x56e>
 8007e7c:	e73f      	b.n	8007cfe <_strtod_l+0x7ce>
 8007e7e:	4641      	mov	r1, r8
 8007e80:	4620      	mov	r0, r4
 8007e82:	f001 f906 	bl	8009092 <__ratio>
 8007e86:	ec57 6b10 	vmov	r6, r7, d0
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e90:	ee10 0a10 	vmov	r0, s0
 8007e94:	4639      	mov	r1, r7
 8007e96:	f7f8 fde9 	bl	8000a6c <__aeabi_dcmple>
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	d077      	beq.n	8007f8e <_strtod_l+0xa5e>
 8007e9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d04a      	beq.n	8007f3a <_strtod_l+0xa0a>
 8007ea4:	4b68      	ldr	r3, [pc, #416]	; (8008048 <_strtod_l+0xb18>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007eac:	4f66      	ldr	r7, [pc, #408]	; (8008048 <_strtod_l+0xb18>)
 8007eae:	2600      	movs	r6, #0
 8007eb0:	4b62      	ldr	r3, [pc, #392]	; (800803c <_strtod_l+0xb0c>)
 8007eb2:	402b      	ands	r3, r5
 8007eb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007eb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007eb8:	4b64      	ldr	r3, [pc, #400]	; (800804c <_strtod_l+0xb1c>)
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	f040 80ce 	bne.w	800805c <_strtod_l+0xb2c>
 8007ec0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007ec4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ec8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8007ecc:	ec4b ab10 	vmov	d0, sl, fp
 8007ed0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007ed4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007ed8:	f001 f816 	bl	8008f08 <__ulp>
 8007edc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ee0:	ec53 2b10 	vmov	r2, r3, d0
 8007ee4:	f7f8 fb46 	bl	8000574 <__aeabi_dmul>
 8007ee8:	4652      	mov	r2, sl
 8007eea:	465b      	mov	r3, fp
 8007eec:	f7f8 f98c 	bl	8000208 <__adddf3>
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4952      	ldr	r1, [pc, #328]	; (800803c <_strtod_l+0xb0c>)
 8007ef4:	4a56      	ldr	r2, [pc, #344]	; (8008050 <_strtod_l+0xb20>)
 8007ef6:	4019      	ands	r1, r3
 8007ef8:	4291      	cmp	r1, r2
 8007efa:	4682      	mov	sl, r0
 8007efc:	d95b      	bls.n	8007fb6 <_strtod_l+0xa86>
 8007efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f00:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d103      	bne.n	8007f10 <_strtod_l+0x9e0>
 8007f08:	9b08      	ldr	r3, [sp, #32]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	f43f ad2e 	beq.w	800796c <_strtod_l+0x43c>
 8007f10:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008040 <_strtod_l+0xb10>
 8007f14:	f04f 3aff 	mov.w	sl, #4294967295
 8007f18:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007f1a:	4648      	mov	r0, r9
 8007f1c:	f000 fd5c 	bl	80089d8 <_Bfree>
 8007f20:	9905      	ldr	r1, [sp, #20]
 8007f22:	4648      	mov	r0, r9
 8007f24:	f000 fd58 	bl	80089d8 <_Bfree>
 8007f28:	4641      	mov	r1, r8
 8007f2a:	4648      	mov	r0, r9
 8007f2c:	f000 fd54 	bl	80089d8 <_Bfree>
 8007f30:	4621      	mov	r1, r4
 8007f32:	4648      	mov	r0, r9
 8007f34:	f000 fd50 	bl	80089d8 <_Bfree>
 8007f38:	e619      	b.n	8007b6e <_strtod_l+0x63e>
 8007f3a:	f1ba 0f00 	cmp.w	sl, #0
 8007f3e:	d11a      	bne.n	8007f76 <_strtod_l+0xa46>
 8007f40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f44:	b9eb      	cbnz	r3, 8007f82 <_strtod_l+0xa52>
 8007f46:	2200      	movs	r2, #0
 8007f48:	4b3f      	ldr	r3, [pc, #252]	; (8008048 <_strtod_l+0xb18>)
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	4639      	mov	r1, r7
 8007f4e:	f7f8 fd83 	bl	8000a58 <__aeabi_dcmplt>
 8007f52:	b9c8      	cbnz	r0, 8007f88 <_strtod_l+0xa58>
 8007f54:	4630      	mov	r0, r6
 8007f56:	4639      	mov	r1, r7
 8007f58:	2200      	movs	r2, #0
 8007f5a:	4b3e      	ldr	r3, [pc, #248]	; (8008054 <_strtod_l+0xb24>)
 8007f5c:	f7f8 fb0a 	bl	8000574 <__aeabi_dmul>
 8007f60:	4606      	mov	r6, r0
 8007f62:	460f      	mov	r7, r1
 8007f64:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007f68:	9618      	str	r6, [sp, #96]	; 0x60
 8007f6a:	9319      	str	r3, [sp, #100]	; 0x64
 8007f6c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007f70:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007f74:	e79c      	b.n	8007eb0 <_strtod_l+0x980>
 8007f76:	f1ba 0f01 	cmp.w	sl, #1
 8007f7a:	d102      	bne.n	8007f82 <_strtod_l+0xa52>
 8007f7c:	2d00      	cmp	r5, #0
 8007f7e:	f43f ad8e 	beq.w	8007a9e <_strtod_l+0x56e>
 8007f82:	2200      	movs	r2, #0
 8007f84:	4b34      	ldr	r3, [pc, #208]	; (8008058 <_strtod_l+0xb28>)
 8007f86:	e78f      	b.n	8007ea8 <_strtod_l+0x978>
 8007f88:	2600      	movs	r6, #0
 8007f8a:	4f32      	ldr	r7, [pc, #200]	; (8008054 <_strtod_l+0xb24>)
 8007f8c:	e7ea      	b.n	8007f64 <_strtod_l+0xa34>
 8007f8e:	4b31      	ldr	r3, [pc, #196]	; (8008054 <_strtod_l+0xb24>)
 8007f90:	4630      	mov	r0, r6
 8007f92:	4639      	mov	r1, r7
 8007f94:	2200      	movs	r2, #0
 8007f96:	f7f8 faed 	bl	8000574 <__aeabi_dmul>
 8007f9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f9c:	4606      	mov	r6, r0
 8007f9e:	460f      	mov	r7, r1
 8007fa0:	b933      	cbnz	r3, 8007fb0 <_strtod_l+0xa80>
 8007fa2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fa6:	9010      	str	r0, [sp, #64]	; 0x40
 8007fa8:	9311      	str	r3, [sp, #68]	; 0x44
 8007faa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007fae:	e7df      	b.n	8007f70 <_strtod_l+0xa40>
 8007fb0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007fb4:	e7f9      	b.n	8007faa <_strtod_l+0xa7a>
 8007fb6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007fba:	9b04      	ldr	r3, [sp, #16]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1ab      	bne.n	8007f18 <_strtod_l+0x9e8>
 8007fc0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007fc4:	0d1b      	lsrs	r3, r3, #20
 8007fc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007fc8:	051b      	lsls	r3, r3, #20
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	465d      	mov	r5, fp
 8007fce:	d1a3      	bne.n	8007f18 <_strtod_l+0x9e8>
 8007fd0:	4639      	mov	r1, r7
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	f7f8 fd68 	bl	8000aa8 <__aeabi_d2iz>
 8007fd8:	f7f8 fa62 	bl	80004a0 <__aeabi_i2d>
 8007fdc:	460b      	mov	r3, r1
 8007fde:	4602      	mov	r2, r0
 8007fe0:	4639      	mov	r1, r7
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	f7f8 f90e 	bl	8000204 <__aeabi_dsub>
 8007fe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fea:	4606      	mov	r6, r0
 8007fec:	460f      	mov	r7, r1
 8007fee:	b933      	cbnz	r3, 8007ffe <_strtod_l+0xace>
 8007ff0:	f1ba 0f00 	cmp.w	sl, #0
 8007ff4:	d103      	bne.n	8007ffe <_strtod_l+0xace>
 8007ff6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8007ffa:	2d00      	cmp	r5, #0
 8007ffc:	d06d      	beq.n	80080da <_strtod_l+0xbaa>
 8007ffe:	a30a      	add	r3, pc, #40	; (adr r3, 8008028 <_strtod_l+0xaf8>)
 8008000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008004:	4630      	mov	r0, r6
 8008006:	4639      	mov	r1, r7
 8008008:	f7f8 fd26 	bl	8000a58 <__aeabi_dcmplt>
 800800c:	2800      	cmp	r0, #0
 800800e:	f47f acb8 	bne.w	8007982 <_strtod_l+0x452>
 8008012:	a307      	add	r3, pc, #28	; (adr r3, 8008030 <_strtod_l+0xb00>)
 8008014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008018:	4630      	mov	r0, r6
 800801a:	4639      	mov	r1, r7
 800801c:	f7f8 fd3a 	bl	8000a94 <__aeabi_dcmpgt>
 8008020:	2800      	cmp	r0, #0
 8008022:	f43f af79 	beq.w	8007f18 <_strtod_l+0x9e8>
 8008026:	e4ac      	b.n	8007982 <_strtod_l+0x452>
 8008028:	94a03595 	.word	0x94a03595
 800802c:	3fdfffff 	.word	0x3fdfffff
 8008030:	35afe535 	.word	0x35afe535
 8008034:	3fe00000 	.word	0x3fe00000
 8008038:	000fffff 	.word	0x000fffff
 800803c:	7ff00000 	.word	0x7ff00000
 8008040:	7fefffff 	.word	0x7fefffff
 8008044:	39500000 	.word	0x39500000
 8008048:	3ff00000 	.word	0x3ff00000
 800804c:	7fe00000 	.word	0x7fe00000
 8008050:	7c9fffff 	.word	0x7c9fffff
 8008054:	3fe00000 	.word	0x3fe00000
 8008058:	bff00000 	.word	0xbff00000
 800805c:	9b04      	ldr	r3, [sp, #16]
 800805e:	b333      	cbz	r3, 80080ae <_strtod_l+0xb7e>
 8008060:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008062:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008066:	d822      	bhi.n	80080ae <_strtod_l+0xb7e>
 8008068:	a327      	add	r3, pc, #156	; (adr r3, 8008108 <_strtod_l+0xbd8>)
 800806a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806e:	4630      	mov	r0, r6
 8008070:	4639      	mov	r1, r7
 8008072:	f7f8 fcfb 	bl	8000a6c <__aeabi_dcmple>
 8008076:	b1a0      	cbz	r0, 80080a2 <_strtod_l+0xb72>
 8008078:	4639      	mov	r1, r7
 800807a:	4630      	mov	r0, r6
 800807c:	f7f8 fd3c 	bl	8000af8 <__aeabi_d2uiz>
 8008080:	2800      	cmp	r0, #0
 8008082:	bf08      	it	eq
 8008084:	2001      	moveq	r0, #1
 8008086:	f7f8 f9fb 	bl	8000480 <__aeabi_ui2d>
 800808a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800808c:	4606      	mov	r6, r0
 800808e:	460f      	mov	r7, r1
 8008090:	bb03      	cbnz	r3, 80080d4 <_strtod_l+0xba4>
 8008092:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008096:	9012      	str	r0, [sp, #72]	; 0x48
 8008098:	9313      	str	r3, [sp, #76]	; 0x4c
 800809a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800809e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80080a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080a6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80080aa:	1a9b      	subs	r3, r3, r2
 80080ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80080ae:	ed9d 0b08 	vldr	d0, [sp, #32]
 80080b2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80080b6:	f000 ff27 	bl	8008f08 <__ulp>
 80080ba:	4650      	mov	r0, sl
 80080bc:	ec53 2b10 	vmov	r2, r3, d0
 80080c0:	4659      	mov	r1, fp
 80080c2:	f7f8 fa57 	bl	8000574 <__aeabi_dmul>
 80080c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80080ca:	f7f8 f89d 	bl	8000208 <__adddf3>
 80080ce:	4682      	mov	sl, r0
 80080d0:	468b      	mov	fp, r1
 80080d2:	e772      	b.n	8007fba <_strtod_l+0xa8a>
 80080d4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80080d8:	e7df      	b.n	800809a <_strtod_l+0xb6a>
 80080da:	a30d      	add	r3, pc, #52	; (adr r3, 8008110 <_strtod_l+0xbe0>)
 80080dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e0:	f7f8 fcba 	bl	8000a58 <__aeabi_dcmplt>
 80080e4:	e79c      	b.n	8008020 <_strtod_l+0xaf0>
 80080e6:	2300      	movs	r3, #0
 80080e8:	930d      	str	r3, [sp, #52]	; 0x34
 80080ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80080ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080ee:	6013      	str	r3, [r2, #0]
 80080f0:	f7ff ba61 	b.w	80075b6 <_strtod_l+0x86>
 80080f4:	2b65      	cmp	r3, #101	; 0x65
 80080f6:	f04f 0200 	mov.w	r2, #0
 80080fa:	f43f ab4e 	beq.w	800779a <_strtod_l+0x26a>
 80080fe:	2101      	movs	r1, #1
 8008100:	4614      	mov	r4, r2
 8008102:	9104      	str	r1, [sp, #16]
 8008104:	f7ff bacb 	b.w	800769e <_strtod_l+0x16e>
 8008108:	ffc00000 	.word	0xffc00000
 800810c:	41dfffff 	.word	0x41dfffff
 8008110:	94a03595 	.word	0x94a03595
 8008114:	3fcfffff 	.word	0x3fcfffff

08008118 <strtod>:
 8008118:	4b07      	ldr	r3, [pc, #28]	; (8008138 <strtod+0x20>)
 800811a:	4a08      	ldr	r2, [pc, #32]	; (800813c <strtod+0x24>)
 800811c:	b410      	push	{r4}
 800811e:	681c      	ldr	r4, [r3, #0]
 8008120:	6a23      	ldr	r3, [r4, #32]
 8008122:	2b00      	cmp	r3, #0
 8008124:	bf08      	it	eq
 8008126:	4613      	moveq	r3, r2
 8008128:	460a      	mov	r2, r1
 800812a:	4601      	mov	r1, r0
 800812c:	4620      	mov	r0, r4
 800812e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008132:	f7ff b9fd 	b.w	8007530 <_strtod_l>
 8008136:	bf00      	nop
 8008138:	20000a1c 	.word	0x20000a1c
 800813c:	20000a80 	.word	0x20000a80

08008140 <_strtol_l.isra.0>:
 8008140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008144:	4680      	mov	r8, r0
 8008146:	4689      	mov	r9, r1
 8008148:	4692      	mov	sl, r2
 800814a:	461e      	mov	r6, r3
 800814c:	460f      	mov	r7, r1
 800814e:	463d      	mov	r5, r7
 8008150:	9808      	ldr	r0, [sp, #32]
 8008152:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008156:	f000 fbe9 	bl	800892c <__locale_ctype_ptr_l>
 800815a:	4420      	add	r0, r4
 800815c:	7843      	ldrb	r3, [r0, #1]
 800815e:	f013 0308 	ands.w	r3, r3, #8
 8008162:	d132      	bne.n	80081ca <_strtol_l.isra.0+0x8a>
 8008164:	2c2d      	cmp	r4, #45	; 0x2d
 8008166:	d132      	bne.n	80081ce <_strtol_l.isra.0+0x8e>
 8008168:	787c      	ldrb	r4, [r7, #1]
 800816a:	1cbd      	adds	r5, r7, #2
 800816c:	2201      	movs	r2, #1
 800816e:	2e00      	cmp	r6, #0
 8008170:	d05d      	beq.n	800822e <_strtol_l.isra.0+0xee>
 8008172:	2e10      	cmp	r6, #16
 8008174:	d109      	bne.n	800818a <_strtol_l.isra.0+0x4a>
 8008176:	2c30      	cmp	r4, #48	; 0x30
 8008178:	d107      	bne.n	800818a <_strtol_l.isra.0+0x4a>
 800817a:	782b      	ldrb	r3, [r5, #0]
 800817c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008180:	2b58      	cmp	r3, #88	; 0x58
 8008182:	d14f      	bne.n	8008224 <_strtol_l.isra.0+0xe4>
 8008184:	786c      	ldrb	r4, [r5, #1]
 8008186:	2610      	movs	r6, #16
 8008188:	3502      	adds	r5, #2
 800818a:	2a00      	cmp	r2, #0
 800818c:	bf14      	ite	ne
 800818e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008192:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008196:	2700      	movs	r7, #0
 8008198:	fbb1 fcf6 	udiv	ip, r1, r6
 800819c:	4638      	mov	r0, r7
 800819e:	fb06 1e1c 	mls	lr, r6, ip, r1
 80081a2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80081a6:	2b09      	cmp	r3, #9
 80081a8:	d817      	bhi.n	80081da <_strtol_l.isra.0+0x9a>
 80081aa:	461c      	mov	r4, r3
 80081ac:	42a6      	cmp	r6, r4
 80081ae:	dd23      	ble.n	80081f8 <_strtol_l.isra.0+0xb8>
 80081b0:	1c7b      	adds	r3, r7, #1
 80081b2:	d007      	beq.n	80081c4 <_strtol_l.isra.0+0x84>
 80081b4:	4584      	cmp	ip, r0
 80081b6:	d31c      	bcc.n	80081f2 <_strtol_l.isra.0+0xb2>
 80081b8:	d101      	bne.n	80081be <_strtol_l.isra.0+0x7e>
 80081ba:	45a6      	cmp	lr, r4
 80081bc:	db19      	blt.n	80081f2 <_strtol_l.isra.0+0xb2>
 80081be:	fb00 4006 	mla	r0, r0, r6, r4
 80081c2:	2701      	movs	r7, #1
 80081c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081c8:	e7eb      	b.n	80081a2 <_strtol_l.isra.0+0x62>
 80081ca:	462f      	mov	r7, r5
 80081cc:	e7bf      	b.n	800814e <_strtol_l.isra.0+0xe>
 80081ce:	2c2b      	cmp	r4, #43	; 0x2b
 80081d0:	bf04      	itt	eq
 80081d2:	1cbd      	addeq	r5, r7, #2
 80081d4:	787c      	ldrbeq	r4, [r7, #1]
 80081d6:	461a      	mov	r2, r3
 80081d8:	e7c9      	b.n	800816e <_strtol_l.isra.0+0x2e>
 80081da:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80081de:	2b19      	cmp	r3, #25
 80081e0:	d801      	bhi.n	80081e6 <_strtol_l.isra.0+0xa6>
 80081e2:	3c37      	subs	r4, #55	; 0x37
 80081e4:	e7e2      	b.n	80081ac <_strtol_l.isra.0+0x6c>
 80081e6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80081ea:	2b19      	cmp	r3, #25
 80081ec:	d804      	bhi.n	80081f8 <_strtol_l.isra.0+0xb8>
 80081ee:	3c57      	subs	r4, #87	; 0x57
 80081f0:	e7dc      	b.n	80081ac <_strtol_l.isra.0+0x6c>
 80081f2:	f04f 37ff 	mov.w	r7, #4294967295
 80081f6:	e7e5      	b.n	80081c4 <_strtol_l.isra.0+0x84>
 80081f8:	1c7b      	adds	r3, r7, #1
 80081fa:	d108      	bne.n	800820e <_strtol_l.isra.0+0xce>
 80081fc:	2322      	movs	r3, #34	; 0x22
 80081fe:	f8c8 3000 	str.w	r3, [r8]
 8008202:	4608      	mov	r0, r1
 8008204:	f1ba 0f00 	cmp.w	sl, #0
 8008208:	d107      	bne.n	800821a <_strtol_l.isra.0+0xda>
 800820a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800820e:	b102      	cbz	r2, 8008212 <_strtol_l.isra.0+0xd2>
 8008210:	4240      	negs	r0, r0
 8008212:	f1ba 0f00 	cmp.w	sl, #0
 8008216:	d0f8      	beq.n	800820a <_strtol_l.isra.0+0xca>
 8008218:	b10f      	cbz	r7, 800821e <_strtol_l.isra.0+0xde>
 800821a:	f105 39ff 	add.w	r9, r5, #4294967295
 800821e:	f8ca 9000 	str.w	r9, [sl]
 8008222:	e7f2      	b.n	800820a <_strtol_l.isra.0+0xca>
 8008224:	2430      	movs	r4, #48	; 0x30
 8008226:	2e00      	cmp	r6, #0
 8008228:	d1af      	bne.n	800818a <_strtol_l.isra.0+0x4a>
 800822a:	2608      	movs	r6, #8
 800822c:	e7ad      	b.n	800818a <_strtol_l.isra.0+0x4a>
 800822e:	2c30      	cmp	r4, #48	; 0x30
 8008230:	d0a3      	beq.n	800817a <_strtol_l.isra.0+0x3a>
 8008232:	260a      	movs	r6, #10
 8008234:	e7a9      	b.n	800818a <_strtol_l.isra.0+0x4a>
	...

08008238 <strtol>:
 8008238:	4b08      	ldr	r3, [pc, #32]	; (800825c <strtol+0x24>)
 800823a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800823c:	681c      	ldr	r4, [r3, #0]
 800823e:	4d08      	ldr	r5, [pc, #32]	; (8008260 <strtol+0x28>)
 8008240:	6a23      	ldr	r3, [r4, #32]
 8008242:	2b00      	cmp	r3, #0
 8008244:	bf08      	it	eq
 8008246:	462b      	moveq	r3, r5
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	4613      	mov	r3, r2
 800824c:	460a      	mov	r2, r1
 800824e:	4601      	mov	r1, r0
 8008250:	4620      	mov	r0, r4
 8008252:	f7ff ff75 	bl	8008140 <_strtol_l.isra.0>
 8008256:	b003      	add	sp, #12
 8008258:	bd30      	pop	{r4, r5, pc}
 800825a:	bf00      	nop
 800825c:	20000a1c 	.word	0x20000a1c
 8008260:	20000a80 	.word	0x20000a80

08008264 <__utoa>:
 8008264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008266:	4b1d      	ldr	r3, [pc, #116]	; (80082dc <__utoa+0x78>)
 8008268:	b08b      	sub	sp, #44	; 0x2c
 800826a:	4605      	mov	r5, r0
 800826c:	460c      	mov	r4, r1
 800826e:	466e      	mov	r6, sp
 8008270:	f103 0c20 	add.w	ip, r3, #32
 8008274:	6818      	ldr	r0, [r3, #0]
 8008276:	6859      	ldr	r1, [r3, #4]
 8008278:	4637      	mov	r7, r6
 800827a:	c703      	stmia	r7!, {r0, r1}
 800827c:	3308      	adds	r3, #8
 800827e:	4563      	cmp	r3, ip
 8008280:	463e      	mov	r6, r7
 8008282:	d1f7      	bne.n	8008274 <__utoa+0x10>
 8008284:	6818      	ldr	r0, [r3, #0]
 8008286:	791b      	ldrb	r3, [r3, #4]
 8008288:	713b      	strb	r3, [r7, #4]
 800828a:	1e93      	subs	r3, r2, #2
 800828c:	2b22      	cmp	r3, #34	; 0x22
 800828e:	6038      	str	r0, [r7, #0]
 8008290:	f04f 0300 	mov.w	r3, #0
 8008294:	d904      	bls.n	80082a0 <__utoa+0x3c>
 8008296:	7023      	strb	r3, [r4, #0]
 8008298:	461c      	mov	r4, r3
 800829a:	4620      	mov	r0, r4
 800829c:	b00b      	add	sp, #44	; 0x2c
 800829e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082a0:	1e66      	subs	r6, r4, #1
 80082a2:	fbb5 f0f2 	udiv	r0, r5, r2
 80082a6:	af0a      	add	r7, sp, #40	; 0x28
 80082a8:	fb02 5510 	mls	r5, r2, r0, r5
 80082ac:	443d      	add	r5, r7
 80082ae:	1c59      	adds	r1, r3, #1
 80082b0:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80082b4:	f806 5f01 	strb.w	r5, [r6, #1]!
 80082b8:	4605      	mov	r5, r0
 80082ba:	b968      	cbnz	r0, 80082d8 <__utoa+0x74>
 80082bc:	5460      	strb	r0, [r4, r1]
 80082be:	4423      	add	r3, r4
 80082c0:	4622      	mov	r2, r4
 80082c2:	1b19      	subs	r1, r3, r4
 80082c4:	1b10      	subs	r0, r2, r4
 80082c6:	4281      	cmp	r1, r0
 80082c8:	dde7      	ble.n	800829a <__utoa+0x36>
 80082ca:	7811      	ldrb	r1, [r2, #0]
 80082cc:	7818      	ldrb	r0, [r3, #0]
 80082ce:	f802 0b01 	strb.w	r0, [r2], #1
 80082d2:	f803 1901 	strb.w	r1, [r3], #-1
 80082d6:	e7f4      	b.n	80082c2 <__utoa+0x5e>
 80082d8:	460b      	mov	r3, r1
 80082da:	e7e2      	b.n	80082a2 <__utoa+0x3e>
 80082dc:	08009590 	.word	0x08009590

080082e0 <rshift>:
 80082e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082e2:	6906      	ldr	r6, [r0, #16]
 80082e4:	114b      	asrs	r3, r1, #5
 80082e6:	429e      	cmp	r6, r3
 80082e8:	f100 0414 	add.w	r4, r0, #20
 80082ec:	dd30      	ble.n	8008350 <rshift+0x70>
 80082ee:	f011 011f 	ands.w	r1, r1, #31
 80082f2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80082f6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80082fa:	d108      	bne.n	800830e <rshift+0x2e>
 80082fc:	4621      	mov	r1, r4
 80082fe:	42b2      	cmp	r2, r6
 8008300:	460b      	mov	r3, r1
 8008302:	d211      	bcs.n	8008328 <rshift+0x48>
 8008304:	f852 3b04 	ldr.w	r3, [r2], #4
 8008308:	f841 3b04 	str.w	r3, [r1], #4
 800830c:	e7f7      	b.n	80082fe <rshift+0x1e>
 800830e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008312:	f1c1 0c20 	rsb	ip, r1, #32
 8008316:	40cd      	lsrs	r5, r1
 8008318:	3204      	adds	r2, #4
 800831a:	4623      	mov	r3, r4
 800831c:	42b2      	cmp	r2, r6
 800831e:	4617      	mov	r7, r2
 8008320:	d30c      	bcc.n	800833c <rshift+0x5c>
 8008322:	601d      	str	r5, [r3, #0]
 8008324:	b105      	cbz	r5, 8008328 <rshift+0x48>
 8008326:	3304      	adds	r3, #4
 8008328:	1b1a      	subs	r2, r3, r4
 800832a:	42a3      	cmp	r3, r4
 800832c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008330:	bf08      	it	eq
 8008332:	2300      	moveq	r3, #0
 8008334:	6102      	str	r2, [r0, #16]
 8008336:	bf08      	it	eq
 8008338:	6143      	streq	r3, [r0, #20]
 800833a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800833c:	683f      	ldr	r7, [r7, #0]
 800833e:	fa07 f70c 	lsl.w	r7, r7, ip
 8008342:	433d      	orrs	r5, r7
 8008344:	f843 5b04 	str.w	r5, [r3], #4
 8008348:	f852 5b04 	ldr.w	r5, [r2], #4
 800834c:	40cd      	lsrs	r5, r1
 800834e:	e7e5      	b.n	800831c <rshift+0x3c>
 8008350:	4623      	mov	r3, r4
 8008352:	e7e9      	b.n	8008328 <rshift+0x48>

08008354 <__hexdig_fun>:
 8008354:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008358:	2b09      	cmp	r3, #9
 800835a:	d802      	bhi.n	8008362 <__hexdig_fun+0xe>
 800835c:	3820      	subs	r0, #32
 800835e:	b2c0      	uxtb	r0, r0
 8008360:	4770      	bx	lr
 8008362:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008366:	2b05      	cmp	r3, #5
 8008368:	d801      	bhi.n	800836e <__hexdig_fun+0x1a>
 800836a:	3847      	subs	r0, #71	; 0x47
 800836c:	e7f7      	b.n	800835e <__hexdig_fun+0xa>
 800836e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008372:	2b05      	cmp	r3, #5
 8008374:	d801      	bhi.n	800837a <__hexdig_fun+0x26>
 8008376:	3827      	subs	r0, #39	; 0x27
 8008378:	e7f1      	b.n	800835e <__hexdig_fun+0xa>
 800837a:	2000      	movs	r0, #0
 800837c:	4770      	bx	lr

0800837e <__gethex>:
 800837e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008382:	b08b      	sub	sp, #44	; 0x2c
 8008384:	468a      	mov	sl, r1
 8008386:	9002      	str	r0, [sp, #8]
 8008388:	9816      	ldr	r0, [sp, #88]	; 0x58
 800838a:	9306      	str	r3, [sp, #24]
 800838c:	4690      	mov	r8, r2
 800838e:	f000 fad0 	bl	8008932 <__localeconv_l>
 8008392:	6803      	ldr	r3, [r0, #0]
 8008394:	9303      	str	r3, [sp, #12]
 8008396:	4618      	mov	r0, r3
 8008398:	f7f7 ff28 	bl	80001ec <strlen>
 800839c:	9b03      	ldr	r3, [sp, #12]
 800839e:	9001      	str	r0, [sp, #4]
 80083a0:	4403      	add	r3, r0
 80083a2:	f04f 0b00 	mov.w	fp, #0
 80083a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80083aa:	9307      	str	r3, [sp, #28]
 80083ac:	f8da 3000 	ldr.w	r3, [sl]
 80083b0:	3302      	adds	r3, #2
 80083b2:	461f      	mov	r7, r3
 80083b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80083b8:	2830      	cmp	r0, #48	; 0x30
 80083ba:	d06c      	beq.n	8008496 <__gethex+0x118>
 80083bc:	f7ff ffca 	bl	8008354 <__hexdig_fun>
 80083c0:	4604      	mov	r4, r0
 80083c2:	2800      	cmp	r0, #0
 80083c4:	d16a      	bne.n	800849c <__gethex+0x11e>
 80083c6:	9a01      	ldr	r2, [sp, #4]
 80083c8:	9903      	ldr	r1, [sp, #12]
 80083ca:	4638      	mov	r0, r7
 80083cc:	f000 ff48 	bl	8009260 <strncmp>
 80083d0:	2800      	cmp	r0, #0
 80083d2:	d166      	bne.n	80084a2 <__gethex+0x124>
 80083d4:	9b01      	ldr	r3, [sp, #4]
 80083d6:	5cf8      	ldrb	r0, [r7, r3]
 80083d8:	18fe      	adds	r6, r7, r3
 80083da:	f7ff ffbb 	bl	8008354 <__hexdig_fun>
 80083de:	2800      	cmp	r0, #0
 80083e0:	d062      	beq.n	80084a8 <__gethex+0x12a>
 80083e2:	4633      	mov	r3, r6
 80083e4:	7818      	ldrb	r0, [r3, #0]
 80083e6:	2830      	cmp	r0, #48	; 0x30
 80083e8:	461f      	mov	r7, r3
 80083ea:	f103 0301 	add.w	r3, r3, #1
 80083ee:	d0f9      	beq.n	80083e4 <__gethex+0x66>
 80083f0:	f7ff ffb0 	bl	8008354 <__hexdig_fun>
 80083f4:	fab0 f580 	clz	r5, r0
 80083f8:	096d      	lsrs	r5, r5, #5
 80083fa:	4634      	mov	r4, r6
 80083fc:	f04f 0b01 	mov.w	fp, #1
 8008400:	463a      	mov	r2, r7
 8008402:	4616      	mov	r6, r2
 8008404:	3201      	adds	r2, #1
 8008406:	7830      	ldrb	r0, [r6, #0]
 8008408:	f7ff ffa4 	bl	8008354 <__hexdig_fun>
 800840c:	2800      	cmp	r0, #0
 800840e:	d1f8      	bne.n	8008402 <__gethex+0x84>
 8008410:	9a01      	ldr	r2, [sp, #4]
 8008412:	9903      	ldr	r1, [sp, #12]
 8008414:	4630      	mov	r0, r6
 8008416:	f000 ff23 	bl	8009260 <strncmp>
 800841a:	b950      	cbnz	r0, 8008432 <__gethex+0xb4>
 800841c:	b954      	cbnz	r4, 8008434 <__gethex+0xb6>
 800841e:	9b01      	ldr	r3, [sp, #4]
 8008420:	18f4      	adds	r4, r6, r3
 8008422:	4622      	mov	r2, r4
 8008424:	4616      	mov	r6, r2
 8008426:	3201      	adds	r2, #1
 8008428:	7830      	ldrb	r0, [r6, #0]
 800842a:	f7ff ff93 	bl	8008354 <__hexdig_fun>
 800842e:	2800      	cmp	r0, #0
 8008430:	d1f8      	bne.n	8008424 <__gethex+0xa6>
 8008432:	b10c      	cbz	r4, 8008438 <__gethex+0xba>
 8008434:	1ba4      	subs	r4, r4, r6
 8008436:	00a4      	lsls	r4, r4, #2
 8008438:	7833      	ldrb	r3, [r6, #0]
 800843a:	2b50      	cmp	r3, #80	; 0x50
 800843c:	d001      	beq.n	8008442 <__gethex+0xc4>
 800843e:	2b70      	cmp	r3, #112	; 0x70
 8008440:	d140      	bne.n	80084c4 <__gethex+0x146>
 8008442:	7873      	ldrb	r3, [r6, #1]
 8008444:	2b2b      	cmp	r3, #43	; 0x2b
 8008446:	d031      	beq.n	80084ac <__gethex+0x12e>
 8008448:	2b2d      	cmp	r3, #45	; 0x2d
 800844a:	d033      	beq.n	80084b4 <__gethex+0x136>
 800844c:	1c71      	adds	r1, r6, #1
 800844e:	f04f 0900 	mov.w	r9, #0
 8008452:	7808      	ldrb	r0, [r1, #0]
 8008454:	f7ff ff7e 	bl	8008354 <__hexdig_fun>
 8008458:	1e43      	subs	r3, r0, #1
 800845a:	b2db      	uxtb	r3, r3
 800845c:	2b18      	cmp	r3, #24
 800845e:	d831      	bhi.n	80084c4 <__gethex+0x146>
 8008460:	f1a0 0210 	sub.w	r2, r0, #16
 8008464:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008468:	f7ff ff74 	bl	8008354 <__hexdig_fun>
 800846c:	1e43      	subs	r3, r0, #1
 800846e:	b2db      	uxtb	r3, r3
 8008470:	2b18      	cmp	r3, #24
 8008472:	d922      	bls.n	80084ba <__gethex+0x13c>
 8008474:	f1b9 0f00 	cmp.w	r9, #0
 8008478:	d000      	beq.n	800847c <__gethex+0xfe>
 800847a:	4252      	negs	r2, r2
 800847c:	4414      	add	r4, r2
 800847e:	f8ca 1000 	str.w	r1, [sl]
 8008482:	b30d      	cbz	r5, 80084c8 <__gethex+0x14a>
 8008484:	f1bb 0f00 	cmp.w	fp, #0
 8008488:	bf0c      	ite	eq
 800848a:	2706      	moveq	r7, #6
 800848c:	2700      	movne	r7, #0
 800848e:	4638      	mov	r0, r7
 8008490:	b00b      	add	sp, #44	; 0x2c
 8008492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008496:	f10b 0b01 	add.w	fp, fp, #1
 800849a:	e78a      	b.n	80083b2 <__gethex+0x34>
 800849c:	2500      	movs	r5, #0
 800849e:	462c      	mov	r4, r5
 80084a0:	e7ae      	b.n	8008400 <__gethex+0x82>
 80084a2:	463e      	mov	r6, r7
 80084a4:	2501      	movs	r5, #1
 80084a6:	e7c7      	b.n	8008438 <__gethex+0xba>
 80084a8:	4604      	mov	r4, r0
 80084aa:	e7fb      	b.n	80084a4 <__gethex+0x126>
 80084ac:	f04f 0900 	mov.w	r9, #0
 80084b0:	1cb1      	adds	r1, r6, #2
 80084b2:	e7ce      	b.n	8008452 <__gethex+0xd4>
 80084b4:	f04f 0901 	mov.w	r9, #1
 80084b8:	e7fa      	b.n	80084b0 <__gethex+0x132>
 80084ba:	230a      	movs	r3, #10
 80084bc:	fb03 0202 	mla	r2, r3, r2, r0
 80084c0:	3a10      	subs	r2, #16
 80084c2:	e7cf      	b.n	8008464 <__gethex+0xe6>
 80084c4:	4631      	mov	r1, r6
 80084c6:	e7da      	b.n	800847e <__gethex+0x100>
 80084c8:	1bf3      	subs	r3, r6, r7
 80084ca:	3b01      	subs	r3, #1
 80084cc:	4629      	mov	r1, r5
 80084ce:	2b07      	cmp	r3, #7
 80084d0:	dc49      	bgt.n	8008566 <__gethex+0x1e8>
 80084d2:	9802      	ldr	r0, [sp, #8]
 80084d4:	f000 fa4c 	bl	8008970 <_Balloc>
 80084d8:	9b01      	ldr	r3, [sp, #4]
 80084da:	f100 0914 	add.w	r9, r0, #20
 80084de:	f04f 0b00 	mov.w	fp, #0
 80084e2:	f1c3 0301 	rsb	r3, r3, #1
 80084e6:	4605      	mov	r5, r0
 80084e8:	f8cd 9010 	str.w	r9, [sp, #16]
 80084ec:	46da      	mov	sl, fp
 80084ee:	9308      	str	r3, [sp, #32]
 80084f0:	42b7      	cmp	r7, r6
 80084f2:	d33b      	bcc.n	800856c <__gethex+0x1ee>
 80084f4:	9804      	ldr	r0, [sp, #16]
 80084f6:	f840 ab04 	str.w	sl, [r0], #4
 80084fa:	eba0 0009 	sub.w	r0, r0, r9
 80084fe:	1080      	asrs	r0, r0, #2
 8008500:	6128      	str	r0, [r5, #16]
 8008502:	0147      	lsls	r7, r0, #5
 8008504:	4650      	mov	r0, sl
 8008506:	f000 faf7 	bl	8008af8 <__hi0bits>
 800850a:	f8d8 6000 	ldr.w	r6, [r8]
 800850e:	1a3f      	subs	r7, r7, r0
 8008510:	42b7      	cmp	r7, r6
 8008512:	dd64      	ble.n	80085de <__gethex+0x260>
 8008514:	1bbf      	subs	r7, r7, r6
 8008516:	4639      	mov	r1, r7
 8008518:	4628      	mov	r0, r5
 800851a:	f000 fe07 	bl	800912c <__any_on>
 800851e:	4682      	mov	sl, r0
 8008520:	b178      	cbz	r0, 8008542 <__gethex+0x1c4>
 8008522:	1e7b      	subs	r3, r7, #1
 8008524:	1159      	asrs	r1, r3, #5
 8008526:	f003 021f 	and.w	r2, r3, #31
 800852a:	f04f 0a01 	mov.w	sl, #1
 800852e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008532:	fa0a f202 	lsl.w	r2, sl, r2
 8008536:	420a      	tst	r2, r1
 8008538:	d003      	beq.n	8008542 <__gethex+0x1c4>
 800853a:	4553      	cmp	r3, sl
 800853c:	dc46      	bgt.n	80085cc <__gethex+0x24e>
 800853e:	f04f 0a02 	mov.w	sl, #2
 8008542:	4639      	mov	r1, r7
 8008544:	4628      	mov	r0, r5
 8008546:	f7ff fecb 	bl	80082e0 <rshift>
 800854a:	443c      	add	r4, r7
 800854c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008550:	42a3      	cmp	r3, r4
 8008552:	da52      	bge.n	80085fa <__gethex+0x27c>
 8008554:	4629      	mov	r1, r5
 8008556:	9802      	ldr	r0, [sp, #8]
 8008558:	f000 fa3e 	bl	80089d8 <_Bfree>
 800855c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800855e:	2300      	movs	r3, #0
 8008560:	6013      	str	r3, [r2, #0]
 8008562:	27a3      	movs	r7, #163	; 0xa3
 8008564:	e793      	b.n	800848e <__gethex+0x110>
 8008566:	3101      	adds	r1, #1
 8008568:	105b      	asrs	r3, r3, #1
 800856a:	e7b0      	b.n	80084ce <__gethex+0x150>
 800856c:	1e73      	subs	r3, r6, #1
 800856e:	9305      	str	r3, [sp, #20]
 8008570:	9a07      	ldr	r2, [sp, #28]
 8008572:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008576:	4293      	cmp	r3, r2
 8008578:	d018      	beq.n	80085ac <__gethex+0x22e>
 800857a:	f1bb 0f20 	cmp.w	fp, #32
 800857e:	d107      	bne.n	8008590 <__gethex+0x212>
 8008580:	9b04      	ldr	r3, [sp, #16]
 8008582:	f8c3 a000 	str.w	sl, [r3]
 8008586:	3304      	adds	r3, #4
 8008588:	f04f 0a00 	mov.w	sl, #0
 800858c:	9304      	str	r3, [sp, #16]
 800858e:	46d3      	mov	fp, sl
 8008590:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008594:	f7ff fede 	bl	8008354 <__hexdig_fun>
 8008598:	f000 000f 	and.w	r0, r0, #15
 800859c:	fa00 f00b 	lsl.w	r0, r0, fp
 80085a0:	ea4a 0a00 	orr.w	sl, sl, r0
 80085a4:	f10b 0b04 	add.w	fp, fp, #4
 80085a8:	9b05      	ldr	r3, [sp, #20]
 80085aa:	e00d      	b.n	80085c8 <__gethex+0x24a>
 80085ac:	9b05      	ldr	r3, [sp, #20]
 80085ae:	9a08      	ldr	r2, [sp, #32]
 80085b0:	4413      	add	r3, r2
 80085b2:	42bb      	cmp	r3, r7
 80085b4:	d3e1      	bcc.n	800857a <__gethex+0x1fc>
 80085b6:	4618      	mov	r0, r3
 80085b8:	9a01      	ldr	r2, [sp, #4]
 80085ba:	9903      	ldr	r1, [sp, #12]
 80085bc:	9309      	str	r3, [sp, #36]	; 0x24
 80085be:	f000 fe4f 	bl	8009260 <strncmp>
 80085c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085c4:	2800      	cmp	r0, #0
 80085c6:	d1d8      	bne.n	800857a <__gethex+0x1fc>
 80085c8:	461e      	mov	r6, r3
 80085ca:	e791      	b.n	80084f0 <__gethex+0x172>
 80085cc:	1eb9      	subs	r1, r7, #2
 80085ce:	4628      	mov	r0, r5
 80085d0:	f000 fdac 	bl	800912c <__any_on>
 80085d4:	2800      	cmp	r0, #0
 80085d6:	d0b2      	beq.n	800853e <__gethex+0x1c0>
 80085d8:	f04f 0a03 	mov.w	sl, #3
 80085dc:	e7b1      	b.n	8008542 <__gethex+0x1c4>
 80085de:	da09      	bge.n	80085f4 <__gethex+0x276>
 80085e0:	1bf7      	subs	r7, r6, r7
 80085e2:	4629      	mov	r1, r5
 80085e4:	463a      	mov	r2, r7
 80085e6:	9802      	ldr	r0, [sp, #8]
 80085e8:	f000 fbc2 	bl	8008d70 <__lshift>
 80085ec:	1be4      	subs	r4, r4, r7
 80085ee:	4605      	mov	r5, r0
 80085f0:	f100 0914 	add.w	r9, r0, #20
 80085f4:	f04f 0a00 	mov.w	sl, #0
 80085f8:	e7a8      	b.n	800854c <__gethex+0x1ce>
 80085fa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80085fe:	42a0      	cmp	r0, r4
 8008600:	dd6a      	ble.n	80086d8 <__gethex+0x35a>
 8008602:	1b04      	subs	r4, r0, r4
 8008604:	42a6      	cmp	r6, r4
 8008606:	dc2e      	bgt.n	8008666 <__gethex+0x2e8>
 8008608:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800860c:	2b02      	cmp	r3, #2
 800860e:	d022      	beq.n	8008656 <__gethex+0x2d8>
 8008610:	2b03      	cmp	r3, #3
 8008612:	d024      	beq.n	800865e <__gethex+0x2e0>
 8008614:	2b01      	cmp	r3, #1
 8008616:	d115      	bne.n	8008644 <__gethex+0x2c6>
 8008618:	42a6      	cmp	r6, r4
 800861a:	d113      	bne.n	8008644 <__gethex+0x2c6>
 800861c:	2e01      	cmp	r6, #1
 800861e:	dc0b      	bgt.n	8008638 <__gethex+0x2ba>
 8008620:	9a06      	ldr	r2, [sp, #24]
 8008622:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008626:	6013      	str	r3, [r2, #0]
 8008628:	2301      	movs	r3, #1
 800862a:	612b      	str	r3, [r5, #16]
 800862c:	f8c9 3000 	str.w	r3, [r9]
 8008630:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008632:	2762      	movs	r7, #98	; 0x62
 8008634:	601d      	str	r5, [r3, #0]
 8008636:	e72a      	b.n	800848e <__gethex+0x110>
 8008638:	1e71      	subs	r1, r6, #1
 800863a:	4628      	mov	r0, r5
 800863c:	f000 fd76 	bl	800912c <__any_on>
 8008640:	2800      	cmp	r0, #0
 8008642:	d1ed      	bne.n	8008620 <__gethex+0x2a2>
 8008644:	4629      	mov	r1, r5
 8008646:	9802      	ldr	r0, [sp, #8]
 8008648:	f000 f9c6 	bl	80089d8 <_Bfree>
 800864c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800864e:	2300      	movs	r3, #0
 8008650:	6013      	str	r3, [r2, #0]
 8008652:	2750      	movs	r7, #80	; 0x50
 8008654:	e71b      	b.n	800848e <__gethex+0x110>
 8008656:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008658:	2b00      	cmp	r3, #0
 800865a:	d0e1      	beq.n	8008620 <__gethex+0x2a2>
 800865c:	e7f2      	b.n	8008644 <__gethex+0x2c6>
 800865e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1dd      	bne.n	8008620 <__gethex+0x2a2>
 8008664:	e7ee      	b.n	8008644 <__gethex+0x2c6>
 8008666:	1e67      	subs	r7, r4, #1
 8008668:	f1ba 0f00 	cmp.w	sl, #0
 800866c:	d131      	bne.n	80086d2 <__gethex+0x354>
 800866e:	b127      	cbz	r7, 800867a <__gethex+0x2fc>
 8008670:	4639      	mov	r1, r7
 8008672:	4628      	mov	r0, r5
 8008674:	f000 fd5a 	bl	800912c <__any_on>
 8008678:	4682      	mov	sl, r0
 800867a:	117a      	asrs	r2, r7, #5
 800867c:	2301      	movs	r3, #1
 800867e:	f007 071f 	and.w	r7, r7, #31
 8008682:	fa03 f707 	lsl.w	r7, r3, r7
 8008686:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800868a:	4621      	mov	r1, r4
 800868c:	421f      	tst	r7, r3
 800868e:	4628      	mov	r0, r5
 8008690:	bf18      	it	ne
 8008692:	f04a 0a02 	orrne.w	sl, sl, #2
 8008696:	1b36      	subs	r6, r6, r4
 8008698:	f7ff fe22 	bl	80082e0 <rshift>
 800869c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80086a0:	2702      	movs	r7, #2
 80086a2:	f1ba 0f00 	cmp.w	sl, #0
 80086a6:	d048      	beq.n	800873a <__gethex+0x3bc>
 80086a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d015      	beq.n	80086dc <__gethex+0x35e>
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d017      	beq.n	80086e4 <__gethex+0x366>
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d109      	bne.n	80086cc <__gethex+0x34e>
 80086b8:	f01a 0f02 	tst.w	sl, #2
 80086bc:	d006      	beq.n	80086cc <__gethex+0x34e>
 80086be:	f8d9 3000 	ldr.w	r3, [r9]
 80086c2:	ea4a 0a03 	orr.w	sl, sl, r3
 80086c6:	f01a 0f01 	tst.w	sl, #1
 80086ca:	d10e      	bne.n	80086ea <__gethex+0x36c>
 80086cc:	f047 0710 	orr.w	r7, r7, #16
 80086d0:	e033      	b.n	800873a <__gethex+0x3bc>
 80086d2:	f04f 0a01 	mov.w	sl, #1
 80086d6:	e7d0      	b.n	800867a <__gethex+0x2fc>
 80086d8:	2701      	movs	r7, #1
 80086da:	e7e2      	b.n	80086a2 <__gethex+0x324>
 80086dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086de:	f1c3 0301 	rsb	r3, r3, #1
 80086e2:	9315      	str	r3, [sp, #84]	; 0x54
 80086e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d0f0      	beq.n	80086cc <__gethex+0x34e>
 80086ea:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80086ee:	f105 0314 	add.w	r3, r5, #20
 80086f2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80086f6:	eb03 010a 	add.w	r1, r3, sl
 80086fa:	f04f 0c00 	mov.w	ip, #0
 80086fe:	4618      	mov	r0, r3
 8008700:	f853 2b04 	ldr.w	r2, [r3], #4
 8008704:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008708:	d01c      	beq.n	8008744 <__gethex+0x3c6>
 800870a:	3201      	adds	r2, #1
 800870c:	6002      	str	r2, [r0, #0]
 800870e:	2f02      	cmp	r7, #2
 8008710:	f105 0314 	add.w	r3, r5, #20
 8008714:	d138      	bne.n	8008788 <__gethex+0x40a>
 8008716:	f8d8 2000 	ldr.w	r2, [r8]
 800871a:	3a01      	subs	r2, #1
 800871c:	42b2      	cmp	r2, r6
 800871e:	d10a      	bne.n	8008736 <__gethex+0x3b8>
 8008720:	1171      	asrs	r1, r6, #5
 8008722:	2201      	movs	r2, #1
 8008724:	f006 061f 	and.w	r6, r6, #31
 8008728:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800872c:	fa02 f606 	lsl.w	r6, r2, r6
 8008730:	421e      	tst	r6, r3
 8008732:	bf18      	it	ne
 8008734:	4617      	movne	r7, r2
 8008736:	f047 0720 	orr.w	r7, r7, #32
 800873a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800873c:	601d      	str	r5, [r3, #0]
 800873e:	9b06      	ldr	r3, [sp, #24]
 8008740:	601c      	str	r4, [r3, #0]
 8008742:	e6a4      	b.n	800848e <__gethex+0x110>
 8008744:	4299      	cmp	r1, r3
 8008746:	f843 cc04 	str.w	ip, [r3, #-4]
 800874a:	d8d8      	bhi.n	80086fe <__gethex+0x380>
 800874c:	68ab      	ldr	r3, [r5, #8]
 800874e:	4599      	cmp	r9, r3
 8008750:	db12      	blt.n	8008778 <__gethex+0x3fa>
 8008752:	6869      	ldr	r1, [r5, #4]
 8008754:	9802      	ldr	r0, [sp, #8]
 8008756:	3101      	adds	r1, #1
 8008758:	f000 f90a 	bl	8008970 <_Balloc>
 800875c:	692a      	ldr	r2, [r5, #16]
 800875e:	3202      	adds	r2, #2
 8008760:	f105 010c 	add.w	r1, r5, #12
 8008764:	4683      	mov	fp, r0
 8008766:	0092      	lsls	r2, r2, #2
 8008768:	300c      	adds	r0, #12
 800876a:	f000 f8f6 	bl	800895a <memcpy>
 800876e:	4629      	mov	r1, r5
 8008770:	9802      	ldr	r0, [sp, #8]
 8008772:	f000 f931 	bl	80089d8 <_Bfree>
 8008776:	465d      	mov	r5, fp
 8008778:	692b      	ldr	r3, [r5, #16]
 800877a:	1c5a      	adds	r2, r3, #1
 800877c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008780:	612a      	str	r2, [r5, #16]
 8008782:	2201      	movs	r2, #1
 8008784:	615a      	str	r2, [r3, #20]
 8008786:	e7c2      	b.n	800870e <__gethex+0x390>
 8008788:	692a      	ldr	r2, [r5, #16]
 800878a:	454a      	cmp	r2, r9
 800878c:	dd0b      	ble.n	80087a6 <__gethex+0x428>
 800878e:	2101      	movs	r1, #1
 8008790:	4628      	mov	r0, r5
 8008792:	f7ff fda5 	bl	80082e0 <rshift>
 8008796:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800879a:	3401      	adds	r4, #1
 800879c:	42a3      	cmp	r3, r4
 800879e:	f6ff aed9 	blt.w	8008554 <__gethex+0x1d6>
 80087a2:	2701      	movs	r7, #1
 80087a4:	e7c7      	b.n	8008736 <__gethex+0x3b8>
 80087a6:	f016 061f 	ands.w	r6, r6, #31
 80087aa:	d0fa      	beq.n	80087a2 <__gethex+0x424>
 80087ac:	449a      	add	sl, r3
 80087ae:	f1c6 0620 	rsb	r6, r6, #32
 80087b2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80087b6:	f000 f99f 	bl	8008af8 <__hi0bits>
 80087ba:	42b0      	cmp	r0, r6
 80087bc:	dbe7      	blt.n	800878e <__gethex+0x410>
 80087be:	e7f0      	b.n	80087a2 <__gethex+0x424>

080087c0 <L_shift>:
 80087c0:	f1c2 0208 	rsb	r2, r2, #8
 80087c4:	0092      	lsls	r2, r2, #2
 80087c6:	b570      	push	{r4, r5, r6, lr}
 80087c8:	f1c2 0620 	rsb	r6, r2, #32
 80087cc:	6843      	ldr	r3, [r0, #4]
 80087ce:	6804      	ldr	r4, [r0, #0]
 80087d0:	fa03 f506 	lsl.w	r5, r3, r6
 80087d4:	432c      	orrs	r4, r5
 80087d6:	40d3      	lsrs	r3, r2
 80087d8:	6004      	str	r4, [r0, #0]
 80087da:	f840 3f04 	str.w	r3, [r0, #4]!
 80087de:	4288      	cmp	r0, r1
 80087e0:	d3f4      	bcc.n	80087cc <L_shift+0xc>
 80087e2:	bd70      	pop	{r4, r5, r6, pc}

080087e4 <__match>:
 80087e4:	b530      	push	{r4, r5, lr}
 80087e6:	6803      	ldr	r3, [r0, #0]
 80087e8:	3301      	adds	r3, #1
 80087ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ee:	b914      	cbnz	r4, 80087f6 <__match+0x12>
 80087f0:	6003      	str	r3, [r0, #0]
 80087f2:	2001      	movs	r0, #1
 80087f4:	bd30      	pop	{r4, r5, pc}
 80087f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80087fe:	2d19      	cmp	r5, #25
 8008800:	bf98      	it	ls
 8008802:	3220      	addls	r2, #32
 8008804:	42a2      	cmp	r2, r4
 8008806:	d0f0      	beq.n	80087ea <__match+0x6>
 8008808:	2000      	movs	r0, #0
 800880a:	e7f3      	b.n	80087f4 <__match+0x10>

0800880c <__hexnan>:
 800880c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008810:	680b      	ldr	r3, [r1, #0]
 8008812:	6801      	ldr	r1, [r0, #0]
 8008814:	115f      	asrs	r7, r3, #5
 8008816:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800881a:	f013 031f 	ands.w	r3, r3, #31
 800881e:	b087      	sub	sp, #28
 8008820:	bf18      	it	ne
 8008822:	3704      	addne	r7, #4
 8008824:	2500      	movs	r5, #0
 8008826:	1f3e      	subs	r6, r7, #4
 8008828:	4682      	mov	sl, r0
 800882a:	4690      	mov	r8, r2
 800882c:	9301      	str	r3, [sp, #4]
 800882e:	f847 5c04 	str.w	r5, [r7, #-4]
 8008832:	46b1      	mov	r9, r6
 8008834:	4634      	mov	r4, r6
 8008836:	9502      	str	r5, [sp, #8]
 8008838:	46ab      	mov	fp, r5
 800883a:	784a      	ldrb	r2, [r1, #1]
 800883c:	1c4b      	adds	r3, r1, #1
 800883e:	9303      	str	r3, [sp, #12]
 8008840:	b342      	cbz	r2, 8008894 <__hexnan+0x88>
 8008842:	4610      	mov	r0, r2
 8008844:	9105      	str	r1, [sp, #20]
 8008846:	9204      	str	r2, [sp, #16]
 8008848:	f7ff fd84 	bl	8008354 <__hexdig_fun>
 800884c:	2800      	cmp	r0, #0
 800884e:	d143      	bne.n	80088d8 <__hexnan+0xcc>
 8008850:	9a04      	ldr	r2, [sp, #16]
 8008852:	9905      	ldr	r1, [sp, #20]
 8008854:	2a20      	cmp	r2, #32
 8008856:	d818      	bhi.n	800888a <__hexnan+0x7e>
 8008858:	9b02      	ldr	r3, [sp, #8]
 800885a:	459b      	cmp	fp, r3
 800885c:	dd13      	ble.n	8008886 <__hexnan+0x7a>
 800885e:	454c      	cmp	r4, r9
 8008860:	d206      	bcs.n	8008870 <__hexnan+0x64>
 8008862:	2d07      	cmp	r5, #7
 8008864:	dc04      	bgt.n	8008870 <__hexnan+0x64>
 8008866:	462a      	mov	r2, r5
 8008868:	4649      	mov	r1, r9
 800886a:	4620      	mov	r0, r4
 800886c:	f7ff ffa8 	bl	80087c0 <L_shift>
 8008870:	4544      	cmp	r4, r8
 8008872:	d944      	bls.n	80088fe <__hexnan+0xf2>
 8008874:	2300      	movs	r3, #0
 8008876:	f1a4 0904 	sub.w	r9, r4, #4
 800887a:	f844 3c04 	str.w	r3, [r4, #-4]
 800887e:	f8cd b008 	str.w	fp, [sp, #8]
 8008882:	464c      	mov	r4, r9
 8008884:	461d      	mov	r5, r3
 8008886:	9903      	ldr	r1, [sp, #12]
 8008888:	e7d7      	b.n	800883a <__hexnan+0x2e>
 800888a:	2a29      	cmp	r2, #41	; 0x29
 800888c:	d14a      	bne.n	8008924 <__hexnan+0x118>
 800888e:	3102      	adds	r1, #2
 8008890:	f8ca 1000 	str.w	r1, [sl]
 8008894:	f1bb 0f00 	cmp.w	fp, #0
 8008898:	d044      	beq.n	8008924 <__hexnan+0x118>
 800889a:	454c      	cmp	r4, r9
 800889c:	d206      	bcs.n	80088ac <__hexnan+0xa0>
 800889e:	2d07      	cmp	r5, #7
 80088a0:	dc04      	bgt.n	80088ac <__hexnan+0xa0>
 80088a2:	462a      	mov	r2, r5
 80088a4:	4649      	mov	r1, r9
 80088a6:	4620      	mov	r0, r4
 80088a8:	f7ff ff8a 	bl	80087c0 <L_shift>
 80088ac:	4544      	cmp	r4, r8
 80088ae:	d928      	bls.n	8008902 <__hexnan+0xf6>
 80088b0:	4643      	mov	r3, r8
 80088b2:	f854 2b04 	ldr.w	r2, [r4], #4
 80088b6:	f843 2b04 	str.w	r2, [r3], #4
 80088ba:	42a6      	cmp	r6, r4
 80088bc:	d2f9      	bcs.n	80088b2 <__hexnan+0xa6>
 80088be:	2200      	movs	r2, #0
 80088c0:	f843 2b04 	str.w	r2, [r3], #4
 80088c4:	429e      	cmp	r6, r3
 80088c6:	d2fb      	bcs.n	80088c0 <__hexnan+0xb4>
 80088c8:	6833      	ldr	r3, [r6, #0]
 80088ca:	b91b      	cbnz	r3, 80088d4 <__hexnan+0xc8>
 80088cc:	4546      	cmp	r6, r8
 80088ce:	d127      	bne.n	8008920 <__hexnan+0x114>
 80088d0:	2301      	movs	r3, #1
 80088d2:	6033      	str	r3, [r6, #0]
 80088d4:	2005      	movs	r0, #5
 80088d6:	e026      	b.n	8008926 <__hexnan+0x11a>
 80088d8:	3501      	adds	r5, #1
 80088da:	2d08      	cmp	r5, #8
 80088dc:	f10b 0b01 	add.w	fp, fp, #1
 80088e0:	dd06      	ble.n	80088f0 <__hexnan+0xe4>
 80088e2:	4544      	cmp	r4, r8
 80088e4:	d9cf      	bls.n	8008886 <__hexnan+0x7a>
 80088e6:	2300      	movs	r3, #0
 80088e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80088ec:	2501      	movs	r5, #1
 80088ee:	3c04      	subs	r4, #4
 80088f0:	6822      	ldr	r2, [r4, #0]
 80088f2:	f000 000f 	and.w	r0, r0, #15
 80088f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80088fa:	6020      	str	r0, [r4, #0]
 80088fc:	e7c3      	b.n	8008886 <__hexnan+0x7a>
 80088fe:	2508      	movs	r5, #8
 8008900:	e7c1      	b.n	8008886 <__hexnan+0x7a>
 8008902:	9b01      	ldr	r3, [sp, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d0df      	beq.n	80088c8 <__hexnan+0xbc>
 8008908:	f04f 32ff 	mov.w	r2, #4294967295
 800890c:	f1c3 0320 	rsb	r3, r3, #32
 8008910:	fa22 f303 	lsr.w	r3, r2, r3
 8008914:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008918:	401a      	ands	r2, r3
 800891a:	f847 2c04 	str.w	r2, [r7, #-4]
 800891e:	e7d3      	b.n	80088c8 <__hexnan+0xbc>
 8008920:	3e04      	subs	r6, #4
 8008922:	e7d1      	b.n	80088c8 <__hexnan+0xbc>
 8008924:	2004      	movs	r0, #4
 8008926:	b007      	add	sp, #28
 8008928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800892c <__locale_ctype_ptr_l>:
 800892c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008930:	4770      	bx	lr

08008932 <__localeconv_l>:
 8008932:	30f0      	adds	r0, #240	; 0xf0
 8008934:	4770      	bx	lr

08008936 <__ascii_mbtowc>:
 8008936:	b082      	sub	sp, #8
 8008938:	b901      	cbnz	r1, 800893c <__ascii_mbtowc+0x6>
 800893a:	a901      	add	r1, sp, #4
 800893c:	b142      	cbz	r2, 8008950 <__ascii_mbtowc+0x1a>
 800893e:	b14b      	cbz	r3, 8008954 <__ascii_mbtowc+0x1e>
 8008940:	7813      	ldrb	r3, [r2, #0]
 8008942:	600b      	str	r3, [r1, #0]
 8008944:	7812      	ldrb	r2, [r2, #0]
 8008946:	1c10      	adds	r0, r2, #0
 8008948:	bf18      	it	ne
 800894a:	2001      	movne	r0, #1
 800894c:	b002      	add	sp, #8
 800894e:	4770      	bx	lr
 8008950:	4610      	mov	r0, r2
 8008952:	e7fb      	b.n	800894c <__ascii_mbtowc+0x16>
 8008954:	f06f 0001 	mvn.w	r0, #1
 8008958:	e7f8      	b.n	800894c <__ascii_mbtowc+0x16>

0800895a <memcpy>:
 800895a:	b510      	push	{r4, lr}
 800895c:	1e43      	subs	r3, r0, #1
 800895e:	440a      	add	r2, r1
 8008960:	4291      	cmp	r1, r2
 8008962:	d100      	bne.n	8008966 <memcpy+0xc>
 8008964:	bd10      	pop	{r4, pc}
 8008966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800896a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800896e:	e7f7      	b.n	8008960 <memcpy+0x6>

08008970 <_Balloc>:
 8008970:	b570      	push	{r4, r5, r6, lr}
 8008972:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008974:	4604      	mov	r4, r0
 8008976:	460e      	mov	r6, r1
 8008978:	b93d      	cbnz	r5, 800898a <_Balloc+0x1a>
 800897a:	2010      	movs	r0, #16
 800897c:	f000 fc90 	bl	80092a0 <malloc>
 8008980:	6260      	str	r0, [r4, #36]	; 0x24
 8008982:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008986:	6005      	str	r5, [r0, #0]
 8008988:	60c5      	str	r5, [r0, #12]
 800898a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800898c:	68eb      	ldr	r3, [r5, #12]
 800898e:	b183      	cbz	r3, 80089b2 <_Balloc+0x42>
 8008990:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008998:	b9b8      	cbnz	r0, 80089ca <_Balloc+0x5a>
 800899a:	2101      	movs	r1, #1
 800899c:	fa01 f506 	lsl.w	r5, r1, r6
 80089a0:	1d6a      	adds	r2, r5, #5
 80089a2:	0092      	lsls	r2, r2, #2
 80089a4:	4620      	mov	r0, r4
 80089a6:	f000 fbe2 	bl	800916e <_calloc_r>
 80089aa:	b160      	cbz	r0, 80089c6 <_Balloc+0x56>
 80089ac:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80089b0:	e00e      	b.n	80089d0 <_Balloc+0x60>
 80089b2:	2221      	movs	r2, #33	; 0x21
 80089b4:	2104      	movs	r1, #4
 80089b6:	4620      	mov	r0, r4
 80089b8:	f000 fbd9 	bl	800916e <_calloc_r>
 80089bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089be:	60e8      	str	r0, [r5, #12]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1e4      	bne.n	8008990 <_Balloc+0x20>
 80089c6:	2000      	movs	r0, #0
 80089c8:	bd70      	pop	{r4, r5, r6, pc}
 80089ca:	6802      	ldr	r2, [r0, #0]
 80089cc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80089d0:	2300      	movs	r3, #0
 80089d2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089d6:	e7f7      	b.n	80089c8 <_Balloc+0x58>

080089d8 <_Bfree>:
 80089d8:	b570      	push	{r4, r5, r6, lr}
 80089da:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80089dc:	4606      	mov	r6, r0
 80089de:	460d      	mov	r5, r1
 80089e0:	b93c      	cbnz	r4, 80089f2 <_Bfree+0x1a>
 80089e2:	2010      	movs	r0, #16
 80089e4:	f000 fc5c 	bl	80092a0 <malloc>
 80089e8:	6270      	str	r0, [r6, #36]	; 0x24
 80089ea:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089ee:	6004      	str	r4, [r0, #0]
 80089f0:	60c4      	str	r4, [r0, #12]
 80089f2:	b13d      	cbz	r5, 8008a04 <_Bfree+0x2c>
 80089f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80089f6:	686a      	ldr	r2, [r5, #4]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089fe:	6029      	str	r1, [r5, #0]
 8008a00:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008a04:	bd70      	pop	{r4, r5, r6, pc}

08008a06 <__multadd>:
 8008a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0a:	690d      	ldr	r5, [r1, #16]
 8008a0c:	461f      	mov	r7, r3
 8008a0e:	4606      	mov	r6, r0
 8008a10:	460c      	mov	r4, r1
 8008a12:	f101 0c14 	add.w	ip, r1, #20
 8008a16:	2300      	movs	r3, #0
 8008a18:	f8dc 0000 	ldr.w	r0, [ip]
 8008a1c:	b281      	uxth	r1, r0
 8008a1e:	fb02 7101 	mla	r1, r2, r1, r7
 8008a22:	0c0f      	lsrs	r7, r1, #16
 8008a24:	0c00      	lsrs	r0, r0, #16
 8008a26:	fb02 7000 	mla	r0, r2, r0, r7
 8008a2a:	b289      	uxth	r1, r1
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008a32:	429d      	cmp	r5, r3
 8008a34:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008a38:	f84c 1b04 	str.w	r1, [ip], #4
 8008a3c:	dcec      	bgt.n	8008a18 <__multadd+0x12>
 8008a3e:	b1d7      	cbz	r7, 8008a76 <__multadd+0x70>
 8008a40:	68a3      	ldr	r3, [r4, #8]
 8008a42:	42ab      	cmp	r3, r5
 8008a44:	dc12      	bgt.n	8008a6c <__multadd+0x66>
 8008a46:	6861      	ldr	r1, [r4, #4]
 8008a48:	4630      	mov	r0, r6
 8008a4a:	3101      	adds	r1, #1
 8008a4c:	f7ff ff90 	bl	8008970 <_Balloc>
 8008a50:	6922      	ldr	r2, [r4, #16]
 8008a52:	3202      	adds	r2, #2
 8008a54:	f104 010c 	add.w	r1, r4, #12
 8008a58:	4680      	mov	r8, r0
 8008a5a:	0092      	lsls	r2, r2, #2
 8008a5c:	300c      	adds	r0, #12
 8008a5e:	f7ff ff7c 	bl	800895a <memcpy>
 8008a62:	4621      	mov	r1, r4
 8008a64:	4630      	mov	r0, r6
 8008a66:	f7ff ffb7 	bl	80089d8 <_Bfree>
 8008a6a:	4644      	mov	r4, r8
 8008a6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a70:	3501      	adds	r5, #1
 8008a72:	615f      	str	r7, [r3, #20]
 8008a74:	6125      	str	r5, [r4, #16]
 8008a76:	4620      	mov	r0, r4
 8008a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008a7c <__s2b>:
 8008a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a80:	460c      	mov	r4, r1
 8008a82:	4615      	mov	r5, r2
 8008a84:	461f      	mov	r7, r3
 8008a86:	2209      	movs	r2, #9
 8008a88:	3308      	adds	r3, #8
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a90:	2100      	movs	r1, #0
 8008a92:	2201      	movs	r2, #1
 8008a94:	429a      	cmp	r2, r3
 8008a96:	db20      	blt.n	8008ada <__s2b+0x5e>
 8008a98:	4630      	mov	r0, r6
 8008a9a:	f7ff ff69 	bl	8008970 <_Balloc>
 8008a9e:	9b08      	ldr	r3, [sp, #32]
 8008aa0:	6143      	str	r3, [r0, #20]
 8008aa2:	2d09      	cmp	r5, #9
 8008aa4:	f04f 0301 	mov.w	r3, #1
 8008aa8:	6103      	str	r3, [r0, #16]
 8008aaa:	dd19      	ble.n	8008ae0 <__s2b+0x64>
 8008aac:	f104 0809 	add.w	r8, r4, #9
 8008ab0:	46c1      	mov	r9, r8
 8008ab2:	442c      	add	r4, r5
 8008ab4:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008ab8:	4601      	mov	r1, r0
 8008aba:	3b30      	subs	r3, #48	; 0x30
 8008abc:	220a      	movs	r2, #10
 8008abe:	4630      	mov	r0, r6
 8008ac0:	f7ff ffa1 	bl	8008a06 <__multadd>
 8008ac4:	45a1      	cmp	r9, r4
 8008ac6:	d1f5      	bne.n	8008ab4 <__s2b+0x38>
 8008ac8:	eb08 0405 	add.w	r4, r8, r5
 8008acc:	3c08      	subs	r4, #8
 8008ace:	1b2d      	subs	r5, r5, r4
 8008ad0:	1963      	adds	r3, r4, r5
 8008ad2:	42bb      	cmp	r3, r7
 8008ad4:	db07      	blt.n	8008ae6 <__s2b+0x6a>
 8008ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ada:	0052      	lsls	r2, r2, #1
 8008adc:	3101      	adds	r1, #1
 8008ade:	e7d9      	b.n	8008a94 <__s2b+0x18>
 8008ae0:	340a      	adds	r4, #10
 8008ae2:	2509      	movs	r5, #9
 8008ae4:	e7f3      	b.n	8008ace <__s2b+0x52>
 8008ae6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008aea:	4601      	mov	r1, r0
 8008aec:	3b30      	subs	r3, #48	; 0x30
 8008aee:	220a      	movs	r2, #10
 8008af0:	4630      	mov	r0, r6
 8008af2:	f7ff ff88 	bl	8008a06 <__multadd>
 8008af6:	e7eb      	b.n	8008ad0 <__s2b+0x54>

08008af8 <__hi0bits>:
 8008af8:	0c02      	lsrs	r2, r0, #16
 8008afa:	0412      	lsls	r2, r2, #16
 8008afc:	4603      	mov	r3, r0
 8008afe:	b9b2      	cbnz	r2, 8008b2e <__hi0bits+0x36>
 8008b00:	0403      	lsls	r3, r0, #16
 8008b02:	2010      	movs	r0, #16
 8008b04:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008b08:	bf04      	itt	eq
 8008b0a:	021b      	lsleq	r3, r3, #8
 8008b0c:	3008      	addeq	r0, #8
 8008b0e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008b12:	bf04      	itt	eq
 8008b14:	011b      	lsleq	r3, r3, #4
 8008b16:	3004      	addeq	r0, #4
 8008b18:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008b1c:	bf04      	itt	eq
 8008b1e:	009b      	lsleq	r3, r3, #2
 8008b20:	3002      	addeq	r0, #2
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	db06      	blt.n	8008b34 <__hi0bits+0x3c>
 8008b26:	005b      	lsls	r3, r3, #1
 8008b28:	d503      	bpl.n	8008b32 <__hi0bits+0x3a>
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	4770      	bx	lr
 8008b2e:	2000      	movs	r0, #0
 8008b30:	e7e8      	b.n	8008b04 <__hi0bits+0xc>
 8008b32:	2020      	movs	r0, #32
 8008b34:	4770      	bx	lr

08008b36 <__lo0bits>:
 8008b36:	6803      	ldr	r3, [r0, #0]
 8008b38:	f013 0207 	ands.w	r2, r3, #7
 8008b3c:	4601      	mov	r1, r0
 8008b3e:	d00b      	beq.n	8008b58 <__lo0bits+0x22>
 8008b40:	07da      	lsls	r2, r3, #31
 8008b42:	d423      	bmi.n	8008b8c <__lo0bits+0x56>
 8008b44:	0798      	lsls	r0, r3, #30
 8008b46:	bf49      	itett	mi
 8008b48:	085b      	lsrmi	r3, r3, #1
 8008b4a:	089b      	lsrpl	r3, r3, #2
 8008b4c:	2001      	movmi	r0, #1
 8008b4e:	600b      	strmi	r3, [r1, #0]
 8008b50:	bf5c      	itt	pl
 8008b52:	600b      	strpl	r3, [r1, #0]
 8008b54:	2002      	movpl	r0, #2
 8008b56:	4770      	bx	lr
 8008b58:	b298      	uxth	r0, r3
 8008b5a:	b9a8      	cbnz	r0, 8008b88 <__lo0bits+0x52>
 8008b5c:	0c1b      	lsrs	r3, r3, #16
 8008b5e:	2010      	movs	r0, #16
 8008b60:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008b64:	bf04      	itt	eq
 8008b66:	0a1b      	lsreq	r3, r3, #8
 8008b68:	3008      	addeq	r0, #8
 8008b6a:	071a      	lsls	r2, r3, #28
 8008b6c:	bf04      	itt	eq
 8008b6e:	091b      	lsreq	r3, r3, #4
 8008b70:	3004      	addeq	r0, #4
 8008b72:	079a      	lsls	r2, r3, #30
 8008b74:	bf04      	itt	eq
 8008b76:	089b      	lsreq	r3, r3, #2
 8008b78:	3002      	addeq	r0, #2
 8008b7a:	07da      	lsls	r2, r3, #31
 8008b7c:	d402      	bmi.n	8008b84 <__lo0bits+0x4e>
 8008b7e:	085b      	lsrs	r3, r3, #1
 8008b80:	d006      	beq.n	8008b90 <__lo0bits+0x5a>
 8008b82:	3001      	adds	r0, #1
 8008b84:	600b      	str	r3, [r1, #0]
 8008b86:	4770      	bx	lr
 8008b88:	4610      	mov	r0, r2
 8008b8a:	e7e9      	b.n	8008b60 <__lo0bits+0x2a>
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	4770      	bx	lr
 8008b90:	2020      	movs	r0, #32
 8008b92:	4770      	bx	lr

08008b94 <__i2b>:
 8008b94:	b510      	push	{r4, lr}
 8008b96:	460c      	mov	r4, r1
 8008b98:	2101      	movs	r1, #1
 8008b9a:	f7ff fee9 	bl	8008970 <_Balloc>
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	6144      	str	r4, [r0, #20]
 8008ba2:	6102      	str	r2, [r0, #16]
 8008ba4:	bd10      	pop	{r4, pc}

08008ba6 <__multiply>:
 8008ba6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008baa:	4614      	mov	r4, r2
 8008bac:	690a      	ldr	r2, [r1, #16]
 8008bae:	6923      	ldr	r3, [r4, #16]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	bfb8      	it	lt
 8008bb4:	460b      	movlt	r3, r1
 8008bb6:	4688      	mov	r8, r1
 8008bb8:	bfbc      	itt	lt
 8008bba:	46a0      	movlt	r8, r4
 8008bbc:	461c      	movlt	r4, r3
 8008bbe:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008bc2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008bc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008bca:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008bce:	eb07 0609 	add.w	r6, r7, r9
 8008bd2:	42b3      	cmp	r3, r6
 8008bd4:	bfb8      	it	lt
 8008bd6:	3101      	addlt	r1, #1
 8008bd8:	f7ff feca 	bl	8008970 <_Balloc>
 8008bdc:	f100 0514 	add.w	r5, r0, #20
 8008be0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008be4:	462b      	mov	r3, r5
 8008be6:	2200      	movs	r2, #0
 8008be8:	4573      	cmp	r3, lr
 8008bea:	d316      	bcc.n	8008c1a <__multiply+0x74>
 8008bec:	f104 0214 	add.w	r2, r4, #20
 8008bf0:	f108 0114 	add.w	r1, r8, #20
 8008bf4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008bf8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008bfc:	9300      	str	r3, [sp, #0]
 8008bfe:	9b00      	ldr	r3, [sp, #0]
 8008c00:	9201      	str	r2, [sp, #4]
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d80c      	bhi.n	8008c20 <__multiply+0x7a>
 8008c06:	2e00      	cmp	r6, #0
 8008c08:	dd03      	ble.n	8008c12 <__multiply+0x6c>
 8008c0a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d05d      	beq.n	8008cce <__multiply+0x128>
 8008c12:	6106      	str	r6, [r0, #16]
 8008c14:	b003      	add	sp, #12
 8008c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c1a:	f843 2b04 	str.w	r2, [r3], #4
 8008c1e:	e7e3      	b.n	8008be8 <__multiply+0x42>
 8008c20:	f8b2 b000 	ldrh.w	fp, [r2]
 8008c24:	f1bb 0f00 	cmp.w	fp, #0
 8008c28:	d023      	beq.n	8008c72 <__multiply+0xcc>
 8008c2a:	4689      	mov	r9, r1
 8008c2c:	46ac      	mov	ip, r5
 8008c2e:	f04f 0800 	mov.w	r8, #0
 8008c32:	f859 4b04 	ldr.w	r4, [r9], #4
 8008c36:	f8dc a000 	ldr.w	sl, [ip]
 8008c3a:	b2a3      	uxth	r3, r4
 8008c3c:	fa1f fa8a 	uxth.w	sl, sl
 8008c40:	fb0b a303 	mla	r3, fp, r3, sl
 8008c44:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008c48:	f8dc 4000 	ldr.w	r4, [ip]
 8008c4c:	4443      	add	r3, r8
 8008c4e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008c52:	fb0b 840a 	mla	r4, fp, sl, r8
 8008c56:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008c5a:	46e2      	mov	sl, ip
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008c62:	454f      	cmp	r7, r9
 8008c64:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008c68:	f84a 3b04 	str.w	r3, [sl], #4
 8008c6c:	d82b      	bhi.n	8008cc6 <__multiply+0x120>
 8008c6e:	f8cc 8004 	str.w	r8, [ip, #4]
 8008c72:	9b01      	ldr	r3, [sp, #4]
 8008c74:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008c78:	3204      	adds	r2, #4
 8008c7a:	f1ba 0f00 	cmp.w	sl, #0
 8008c7e:	d020      	beq.n	8008cc2 <__multiply+0x11c>
 8008c80:	682b      	ldr	r3, [r5, #0]
 8008c82:	4689      	mov	r9, r1
 8008c84:	46a8      	mov	r8, r5
 8008c86:	f04f 0b00 	mov.w	fp, #0
 8008c8a:	f8b9 c000 	ldrh.w	ip, [r9]
 8008c8e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008c92:	fb0a 440c 	mla	r4, sl, ip, r4
 8008c96:	445c      	add	r4, fp
 8008c98:	46c4      	mov	ip, r8
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008ca0:	f84c 3b04 	str.w	r3, [ip], #4
 8008ca4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ca8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008cac:	0c1b      	lsrs	r3, r3, #16
 8008cae:	fb0a b303 	mla	r3, sl, r3, fp
 8008cb2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008cb6:	454f      	cmp	r7, r9
 8008cb8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008cbc:	d805      	bhi.n	8008cca <__multiply+0x124>
 8008cbe:	f8c8 3004 	str.w	r3, [r8, #4]
 8008cc2:	3504      	adds	r5, #4
 8008cc4:	e79b      	b.n	8008bfe <__multiply+0x58>
 8008cc6:	46d4      	mov	ip, sl
 8008cc8:	e7b3      	b.n	8008c32 <__multiply+0x8c>
 8008cca:	46e0      	mov	r8, ip
 8008ccc:	e7dd      	b.n	8008c8a <__multiply+0xe4>
 8008cce:	3e01      	subs	r6, #1
 8008cd0:	e799      	b.n	8008c06 <__multiply+0x60>
	...

08008cd4 <__pow5mult>:
 8008cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cd8:	4615      	mov	r5, r2
 8008cda:	f012 0203 	ands.w	r2, r2, #3
 8008cde:	4606      	mov	r6, r0
 8008ce0:	460f      	mov	r7, r1
 8008ce2:	d007      	beq.n	8008cf4 <__pow5mult+0x20>
 8008ce4:	3a01      	subs	r2, #1
 8008ce6:	4c21      	ldr	r4, [pc, #132]	; (8008d6c <__pow5mult+0x98>)
 8008ce8:	2300      	movs	r3, #0
 8008cea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cee:	f7ff fe8a 	bl	8008a06 <__multadd>
 8008cf2:	4607      	mov	r7, r0
 8008cf4:	10ad      	asrs	r5, r5, #2
 8008cf6:	d035      	beq.n	8008d64 <__pow5mult+0x90>
 8008cf8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008cfa:	b93c      	cbnz	r4, 8008d0c <__pow5mult+0x38>
 8008cfc:	2010      	movs	r0, #16
 8008cfe:	f000 facf 	bl	80092a0 <malloc>
 8008d02:	6270      	str	r0, [r6, #36]	; 0x24
 8008d04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d08:	6004      	str	r4, [r0, #0]
 8008d0a:	60c4      	str	r4, [r0, #12]
 8008d0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008d10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d14:	b94c      	cbnz	r4, 8008d2a <__pow5mult+0x56>
 8008d16:	f240 2171 	movw	r1, #625	; 0x271
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	f7ff ff3a 	bl	8008b94 <__i2b>
 8008d20:	2300      	movs	r3, #0
 8008d22:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d26:	4604      	mov	r4, r0
 8008d28:	6003      	str	r3, [r0, #0]
 8008d2a:	f04f 0800 	mov.w	r8, #0
 8008d2e:	07eb      	lsls	r3, r5, #31
 8008d30:	d50a      	bpl.n	8008d48 <__pow5mult+0x74>
 8008d32:	4639      	mov	r1, r7
 8008d34:	4622      	mov	r2, r4
 8008d36:	4630      	mov	r0, r6
 8008d38:	f7ff ff35 	bl	8008ba6 <__multiply>
 8008d3c:	4639      	mov	r1, r7
 8008d3e:	4681      	mov	r9, r0
 8008d40:	4630      	mov	r0, r6
 8008d42:	f7ff fe49 	bl	80089d8 <_Bfree>
 8008d46:	464f      	mov	r7, r9
 8008d48:	106d      	asrs	r5, r5, #1
 8008d4a:	d00b      	beq.n	8008d64 <__pow5mult+0x90>
 8008d4c:	6820      	ldr	r0, [r4, #0]
 8008d4e:	b938      	cbnz	r0, 8008d60 <__pow5mult+0x8c>
 8008d50:	4622      	mov	r2, r4
 8008d52:	4621      	mov	r1, r4
 8008d54:	4630      	mov	r0, r6
 8008d56:	f7ff ff26 	bl	8008ba6 <__multiply>
 8008d5a:	6020      	str	r0, [r4, #0]
 8008d5c:	f8c0 8000 	str.w	r8, [r0]
 8008d60:	4604      	mov	r4, r0
 8008d62:	e7e4      	b.n	8008d2e <__pow5mult+0x5a>
 8008d64:	4638      	mov	r0, r7
 8008d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d6a:	bf00      	nop
 8008d6c:	080096b0 	.word	0x080096b0

08008d70 <__lshift>:
 8008d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d74:	460c      	mov	r4, r1
 8008d76:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d7a:	6923      	ldr	r3, [r4, #16]
 8008d7c:	6849      	ldr	r1, [r1, #4]
 8008d7e:	eb0a 0903 	add.w	r9, sl, r3
 8008d82:	68a3      	ldr	r3, [r4, #8]
 8008d84:	4607      	mov	r7, r0
 8008d86:	4616      	mov	r6, r2
 8008d88:	f109 0501 	add.w	r5, r9, #1
 8008d8c:	42ab      	cmp	r3, r5
 8008d8e:	db32      	blt.n	8008df6 <__lshift+0x86>
 8008d90:	4638      	mov	r0, r7
 8008d92:	f7ff fded 	bl	8008970 <_Balloc>
 8008d96:	2300      	movs	r3, #0
 8008d98:	4680      	mov	r8, r0
 8008d9a:	f100 0114 	add.w	r1, r0, #20
 8008d9e:	461a      	mov	r2, r3
 8008da0:	4553      	cmp	r3, sl
 8008da2:	db2b      	blt.n	8008dfc <__lshift+0x8c>
 8008da4:	6920      	ldr	r0, [r4, #16]
 8008da6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008daa:	f104 0314 	add.w	r3, r4, #20
 8008dae:	f016 021f 	ands.w	r2, r6, #31
 8008db2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008db6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008dba:	d025      	beq.n	8008e08 <__lshift+0x98>
 8008dbc:	f1c2 0e20 	rsb	lr, r2, #32
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	681e      	ldr	r6, [r3, #0]
 8008dc4:	468a      	mov	sl, r1
 8008dc6:	4096      	lsls	r6, r2
 8008dc8:	4330      	orrs	r0, r6
 8008dca:	f84a 0b04 	str.w	r0, [sl], #4
 8008dce:	f853 0b04 	ldr.w	r0, [r3], #4
 8008dd2:	459c      	cmp	ip, r3
 8008dd4:	fa20 f00e 	lsr.w	r0, r0, lr
 8008dd8:	d814      	bhi.n	8008e04 <__lshift+0x94>
 8008dda:	6048      	str	r0, [r1, #4]
 8008ddc:	b108      	cbz	r0, 8008de2 <__lshift+0x72>
 8008dde:	f109 0502 	add.w	r5, r9, #2
 8008de2:	3d01      	subs	r5, #1
 8008de4:	4638      	mov	r0, r7
 8008de6:	f8c8 5010 	str.w	r5, [r8, #16]
 8008dea:	4621      	mov	r1, r4
 8008dec:	f7ff fdf4 	bl	80089d8 <_Bfree>
 8008df0:	4640      	mov	r0, r8
 8008df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008df6:	3101      	adds	r1, #1
 8008df8:	005b      	lsls	r3, r3, #1
 8008dfa:	e7c7      	b.n	8008d8c <__lshift+0x1c>
 8008dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008e00:	3301      	adds	r3, #1
 8008e02:	e7cd      	b.n	8008da0 <__lshift+0x30>
 8008e04:	4651      	mov	r1, sl
 8008e06:	e7dc      	b.n	8008dc2 <__lshift+0x52>
 8008e08:	3904      	subs	r1, #4
 8008e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e0e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e12:	459c      	cmp	ip, r3
 8008e14:	d8f9      	bhi.n	8008e0a <__lshift+0x9a>
 8008e16:	e7e4      	b.n	8008de2 <__lshift+0x72>

08008e18 <__mcmp>:
 8008e18:	6903      	ldr	r3, [r0, #16]
 8008e1a:	690a      	ldr	r2, [r1, #16]
 8008e1c:	1a9b      	subs	r3, r3, r2
 8008e1e:	b530      	push	{r4, r5, lr}
 8008e20:	d10c      	bne.n	8008e3c <__mcmp+0x24>
 8008e22:	0092      	lsls	r2, r2, #2
 8008e24:	3014      	adds	r0, #20
 8008e26:	3114      	adds	r1, #20
 8008e28:	1884      	adds	r4, r0, r2
 8008e2a:	4411      	add	r1, r2
 8008e2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008e34:	4295      	cmp	r5, r2
 8008e36:	d003      	beq.n	8008e40 <__mcmp+0x28>
 8008e38:	d305      	bcc.n	8008e46 <__mcmp+0x2e>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	bd30      	pop	{r4, r5, pc}
 8008e40:	42a0      	cmp	r0, r4
 8008e42:	d3f3      	bcc.n	8008e2c <__mcmp+0x14>
 8008e44:	e7fa      	b.n	8008e3c <__mcmp+0x24>
 8008e46:	f04f 33ff 	mov.w	r3, #4294967295
 8008e4a:	e7f7      	b.n	8008e3c <__mcmp+0x24>

08008e4c <__mdiff>:
 8008e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e50:	460d      	mov	r5, r1
 8008e52:	4607      	mov	r7, r0
 8008e54:	4611      	mov	r1, r2
 8008e56:	4628      	mov	r0, r5
 8008e58:	4614      	mov	r4, r2
 8008e5a:	f7ff ffdd 	bl	8008e18 <__mcmp>
 8008e5e:	1e06      	subs	r6, r0, #0
 8008e60:	d108      	bne.n	8008e74 <__mdiff+0x28>
 8008e62:	4631      	mov	r1, r6
 8008e64:	4638      	mov	r0, r7
 8008e66:	f7ff fd83 	bl	8008970 <_Balloc>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e74:	bfa4      	itt	ge
 8008e76:	4623      	movge	r3, r4
 8008e78:	462c      	movge	r4, r5
 8008e7a:	4638      	mov	r0, r7
 8008e7c:	6861      	ldr	r1, [r4, #4]
 8008e7e:	bfa6      	itte	ge
 8008e80:	461d      	movge	r5, r3
 8008e82:	2600      	movge	r6, #0
 8008e84:	2601      	movlt	r6, #1
 8008e86:	f7ff fd73 	bl	8008970 <_Balloc>
 8008e8a:	692b      	ldr	r3, [r5, #16]
 8008e8c:	60c6      	str	r6, [r0, #12]
 8008e8e:	6926      	ldr	r6, [r4, #16]
 8008e90:	f105 0914 	add.w	r9, r5, #20
 8008e94:	f104 0214 	add.w	r2, r4, #20
 8008e98:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008e9c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008ea0:	f100 0514 	add.w	r5, r0, #20
 8008ea4:	f04f 0e00 	mov.w	lr, #0
 8008ea8:	f852 ab04 	ldr.w	sl, [r2], #4
 8008eac:	f859 4b04 	ldr.w	r4, [r9], #4
 8008eb0:	fa1e f18a 	uxtah	r1, lr, sl
 8008eb4:	b2a3      	uxth	r3, r4
 8008eb6:	1ac9      	subs	r1, r1, r3
 8008eb8:	0c23      	lsrs	r3, r4, #16
 8008eba:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008ebe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008ec2:	b289      	uxth	r1, r1
 8008ec4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008ec8:	45c8      	cmp	r8, r9
 8008eca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008ece:	4694      	mov	ip, r2
 8008ed0:	f845 3b04 	str.w	r3, [r5], #4
 8008ed4:	d8e8      	bhi.n	8008ea8 <__mdiff+0x5c>
 8008ed6:	45bc      	cmp	ip, r7
 8008ed8:	d304      	bcc.n	8008ee4 <__mdiff+0x98>
 8008eda:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008ede:	b183      	cbz	r3, 8008f02 <__mdiff+0xb6>
 8008ee0:	6106      	str	r6, [r0, #16]
 8008ee2:	e7c5      	b.n	8008e70 <__mdiff+0x24>
 8008ee4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008ee8:	fa1e f381 	uxtah	r3, lr, r1
 8008eec:	141a      	asrs	r2, r3, #16
 8008eee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ef8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008efc:	f845 3b04 	str.w	r3, [r5], #4
 8008f00:	e7e9      	b.n	8008ed6 <__mdiff+0x8a>
 8008f02:	3e01      	subs	r6, #1
 8008f04:	e7e9      	b.n	8008eda <__mdiff+0x8e>
	...

08008f08 <__ulp>:
 8008f08:	4b12      	ldr	r3, [pc, #72]	; (8008f54 <__ulp+0x4c>)
 8008f0a:	ee10 2a90 	vmov	r2, s1
 8008f0e:	401a      	ands	r2, r3
 8008f10:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	dd04      	ble.n	8008f22 <__ulp+0x1a>
 8008f18:	2000      	movs	r0, #0
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	ec41 0b10 	vmov	d0, r0, r1
 8008f20:	4770      	bx	lr
 8008f22:	425b      	negs	r3, r3
 8008f24:	151b      	asrs	r3, r3, #20
 8008f26:	2b13      	cmp	r3, #19
 8008f28:	f04f 0000 	mov.w	r0, #0
 8008f2c:	f04f 0100 	mov.w	r1, #0
 8008f30:	dc04      	bgt.n	8008f3c <__ulp+0x34>
 8008f32:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008f36:	fa42 f103 	asr.w	r1, r2, r3
 8008f3a:	e7ef      	b.n	8008f1c <__ulp+0x14>
 8008f3c:	3b14      	subs	r3, #20
 8008f3e:	2b1e      	cmp	r3, #30
 8008f40:	f04f 0201 	mov.w	r2, #1
 8008f44:	bfda      	itte	le
 8008f46:	f1c3 031f 	rsble	r3, r3, #31
 8008f4a:	fa02 f303 	lslle.w	r3, r2, r3
 8008f4e:	4613      	movgt	r3, r2
 8008f50:	4618      	mov	r0, r3
 8008f52:	e7e3      	b.n	8008f1c <__ulp+0x14>
 8008f54:	7ff00000 	.word	0x7ff00000

08008f58 <__b2d>:
 8008f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5a:	6905      	ldr	r5, [r0, #16]
 8008f5c:	f100 0714 	add.w	r7, r0, #20
 8008f60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008f64:	1f2e      	subs	r6, r5, #4
 8008f66:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f7ff fdc4 	bl	8008af8 <__hi0bits>
 8008f70:	f1c0 0320 	rsb	r3, r0, #32
 8008f74:	280a      	cmp	r0, #10
 8008f76:	600b      	str	r3, [r1, #0]
 8008f78:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008ff0 <__b2d+0x98>
 8008f7c:	dc14      	bgt.n	8008fa8 <__b2d+0x50>
 8008f7e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008f82:	fa24 f10e 	lsr.w	r1, r4, lr
 8008f86:	42b7      	cmp	r7, r6
 8008f88:	ea41 030c 	orr.w	r3, r1, ip
 8008f8c:	bf34      	ite	cc
 8008f8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008f92:	2100      	movcs	r1, #0
 8008f94:	3015      	adds	r0, #21
 8008f96:	fa04 f000 	lsl.w	r0, r4, r0
 8008f9a:	fa21 f10e 	lsr.w	r1, r1, lr
 8008f9e:	ea40 0201 	orr.w	r2, r0, r1
 8008fa2:	ec43 2b10 	vmov	d0, r2, r3
 8008fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fa8:	42b7      	cmp	r7, r6
 8008faa:	bf3a      	itte	cc
 8008fac:	f1a5 0608 	subcc.w	r6, r5, #8
 8008fb0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008fb4:	2100      	movcs	r1, #0
 8008fb6:	380b      	subs	r0, #11
 8008fb8:	d015      	beq.n	8008fe6 <__b2d+0x8e>
 8008fba:	4084      	lsls	r4, r0
 8008fbc:	f1c0 0520 	rsb	r5, r0, #32
 8008fc0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8008fc4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8008fc8:	42be      	cmp	r6, r7
 8008fca:	fa21 fc05 	lsr.w	ip, r1, r5
 8008fce:	ea44 030c 	orr.w	r3, r4, ip
 8008fd2:	bf8c      	ite	hi
 8008fd4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008fd8:	2400      	movls	r4, #0
 8008fda:	fa01 f000 	lsl.w	r0, r1, r0
 8008fde:	40ec      	lsrs	r4, r5
 8008fe0:	ea40 0204 	orr.w	r2, r0, r4
 8008fe4:	e7dd      	b.n	8008fa2 <__b2d+0x4a>
 8008fe6:	ea44 030c 	orr.w	r3, r4, ip
 8008fea:	460a      	mov	r2, r1
 8008fec:	e7d9      	b.n	8008fa2 <__b2d+0x4a>
 8008fee:	bf00      	nop
 8008ff0:	3ff00000 	.word	0x3ff00000

08008ff4 <__d2b>:
 8008ff4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ff8:	460e      	mov	r6, r1
 8008ffa:	2101      	movs	r1, #1
 8008ffc:	ec59 8b10 	vmov	r8, r9, d0
 8009000:	4615      	mov	r5, r2
 8009002:	f7ff fcb5 	bl	8008970 <_Balloc>
 8009006:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800900a:	4607      	mov	r7, r0
 800900c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009010:	bb34      	cbnz	r4, 8009060 <__d2b+0x6c>
 8009012:	9301      	str	r3, [sp, #4]
 8009014:	f1b8 0300 	subs.w	r3, r8, #0
 8009018:	d027      	beq.n	800906a <__d2b+0x76>
 800901a:	a802      	add	r0, sp, #8
 800901c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009020:	f7ff fd89 	bl	8008b36 <__lo0bits>
 8009024:	9900      	ldr	r1, [sp, #0]
 8009026:	b1f0      	cbz	r0, 8009066 <__d2b+0x72>
 8009028:	9a01      	ldr	r2, [sp, #4]
 800902a:	f1c0 0320 	rsb	r3, r0, #32
 800902e:	fa02 f303 	lsl.w	r3, r2, r3
 8009032:	430b      	orrs	r3, r1
 8009034:	40c2      	lsrs	r2, r0
 8009036:	617b      	str	r3, [r7, #20]
 8009038:	9201      	str	r2, [sp, #4]
 800903a:	9b01      	ldr	r3, [sp, #4]
 800903c:	61bb      	str	r3, [r7, #24]
 800903e:	2b00      	cmp	r3, #0
 8009040:	bf14      	ite	ne
 8009042:	2102      	movne	r1, #2
 8009044:	2101      	moveq	r1, #1
 8009046:	6139      	str	r1, [r7, #16]
 8009048:	b1c4      	cbz	r4, 800907c <__d2b+0x88>
 800904a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800904e:	4404      	add	r4, r0
 8009050:	6034      	str	r4, [r6, #0]
 8009052:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009056:	6028      	str	r0, [r5, #0]
 8009058:	4638      	mov	r0, r7
 800905a:	b003      	add	sp, #12
 800905c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009060:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009064:	e7d5      	b.n	8009012 <__d2b+0x1e>
 8009066:	6179      	str	r1, [r7, #20]
 8009068:	e7e7      	b.n	800903a <__d2b+0x46>
 800906a:	a801      	add	r0, sp, #4
 800906c:	f7ff fd63 	bl	8008b36 <__lo0bits>
 8009070:	9b01      	ldr	r3, [sp, #4]
 8009072:	617b      	str	r3, [r7, #20]
 8009074:	2101      	movs	r1, #1
 8009076:	6139      	str	r1, [r7, #16]
 8009078:	3020      	adds	r0, #32
 800907a:	e7e5      	b.n	8009048 <__d2b+0x54>
 800907c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009080:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009084:	6030      	str	r0, [r6, #0]
 8009086:	6918      	ldr	r0, [r3, #16]
 8009088:	f7ff fd36 	bl	8008af8 <__hi0bits>
 800908c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009090:	e7e1      	b.n	8009056 <__d2b+0x62>

08009092 <__ratio>:
 8009092:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009096:	4688      	mov	r8, r1
 8009098:	4669      	mov	r1, sp
 800909a:	4681      	mov	r9, r0
 800909c:	f7ff ff5c 	bl	8008f58 <__b2d>
 80090a0:	a901      	add	r1, sp, #4
 80090a2:	4640      	mov	r0, r8
 80090a4:	ec57 6b10 	vmov	r6, r7, d0
 80090a8:	f7ff ff56 	bl	8008f58 <__b2d>
 80090ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80090b0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80090b4:	eba3 0c02 	sub.w	ip, r3, r2
 80090b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80090bc:	1a9b      	subs	r3, r3, r2
 80090be:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80090c2:	ec5b ab10 	vmov	sl, fp, d0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	bfce      	itee	gt
 80090ca:	463a      	movgt	r2, r7
 80090cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80090d0:	465a      	movle	r2, fp
 80090d2:	4659      	mov	r1, fp
 80090d4:	463d      	mov	r5, r7
 80090d6:	bfd4      	ite	le
 80090d8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80090dc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80090e0:	4630      	mov	r0, r6
 80090e2:	ee10 2a10 	vmov	r2, s0
 80090e6:	460b      	mov	r3, r1
 80090e8:	4629      	mov	r1, r5
 80090ea:	f7f7 fb6d 	bl	80007c8 <__aeabi_ddiv>
 80090ee:	ec41 0b10 	vmov	d0, r0, r1
 80090f2:	b003      	add	sp, #12
 80090f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090f8 <__copybits>:
 80090f8:	3901      	subs	r1, #1
 80090fa:	b510      	push	{r4, lr}
 80090fc:	1149      	asrs	r1, r1, #5
 80090fe:	6914      	ldr	r4, [r2, #16]
 8009100:	3101      	adds	r1, #1
 8009102:	f102 0314 	add.w	r3, r2, #20
 8009106:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800910a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800910e:	42a3      	cmp	r3, r4
 8009110:	4602      	mov	r2, r0
 8009112:	d303      	bcc.n	800911c <__copybits+0x24>
 8009114:	2300      	movs	r3, #0
 8009116:	428a      	cmp	r2, r1
 8009118:	d305      	bcc.n	8009126 <__copybits+0x2e>
 800911a:	bd10      	pop	{r4, pc}
 800911c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009120:	f840 2b04 	str.w	r2, [r0], #4
 8009124:	e7f3      	b.n	800910e <__copybits+0x16>
 8009126:	f842 3b04 	str.w	r3, [r2], #4
 800912a:	e7f4      	b.n	8009116 <__copybits+0x1e>

0800912c <__any_on>:
 800912c:	f100 0214 	add.w	r2, r0, #20
 8009130:	6900      	ldr	r0, [r0, #16]
 8009132:	114b      	asrs	r3, r1, #5
 8009134:	4298      	cmp	r0, r3
 8009136:	b510      	push	{r4, lr}
 8009138:	db11      	blt.n	800915e <__any_on+0x32>
 800913a:	dd0a      	ble.n	8009152 <__any_on+0x26>
 800913c:	f011 011f 	ands.w	r1, r1, #31
 8009140:	d007      	beq.n	8009152 <__any_on+0x26>
 8009142:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009146:	fa24 f001 	lsr.w	r0, r4, r1
 800914a:	fa00 f101 	lsl.w	r1, r0, r1
 800914e:	428c      	cmp	r4, r1
 8009150:	d10b      	bne.n	800916a <__any_on+0x3e>
 8009152:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009156:	4293      	cmp	r3, r2
 8009158:	d803      	bhi.n	8009162 <__any_on+0x36>
 800915a:	2000      	movs	r0, #0
 800915c:	bd10      	pop	{r4, pc}
 800915e:	4603      	mov	r3, r0
 8009160:	e7f7      	b.n	8009152 <__any_on+0x26>
 8009162:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009166:	2900      	cmp	r1, #0
 8009168:	d0f5      	beq.n	8009156 <__any_on+0x2a>
 800916a:	2001      	movs	r0, #1
 800916c:	e7f6      	b.n	800915c <__any_on+0x30>

0800916e <_calloc_r>:
 800916e:	b538      	push	{r3, r4, r5, lr}
 8009170:	fb02 f401 	mul.w	r4, r2, r1
 8009174:	4621      	mov	r1, r4
 8009176:	f000 f809 	bl	800918c <_malloc_r>
 800917a:	4605      	mov	r5, r0
 800917c:	b118      	cbz	r0, 8009186 <_calloc_r+0x18>
 800917e:	4622      	mov	r2, r4
 8009180:	2100      	movs	r1, #0
 8009182:	f7fe f9a9 	bl	80074d8 <memset>
 8009186:	4628      	mov	r0, r5
 8009188:	bd38      	pop	{r3, r4, r5, pc}
	...

0800918c <_malloc_r>:
 800918c:	b570      	push	{r4, r5, r6, lr}
 800918e:	1ccd      	adds	r5, r1, #3
 8009190:	f025 0503 	bic.w	r5, r5, #3
 8009194:	3508      	adds	r5, #8
 8009196:	2d0c      	cmp	r5, #12
 8009198:	bf38      	it	cc
 800919a:	250c      	movcc	r5, #12
 800919c:	2d00      	cmp	r5, #0
 800919e:	4606      	mov	r6, r0
 80091a0:	db01      	blt.n	80091a6 <_malloc_r+0x1a>
 80091a2:	42a9      	cmp	r1, r5
 80091a4:	d903      	bls.n	80091ae <_malloc_r+0x22>
 80091a6:	230c      	movs	r3, #12
 80091a8:	6033      	str	r3, [r6, #0]
 80091aa:	2000      	movs	r0, #0
 80091ac:	bd70      	pop	{r4, r5, r6, pc}
 80091ae:	f000 f87f 	bl	80092b0 <__malloc_lock>
 80091b2:	4a21      	ldr	r2, [pc, #132]	; (8009238 <_malloc_r+0xac>)
 80091b4:	6814      	ldr	r4, [r2, #0]
 80091b6:	4621      	mov	r1, r4
 80091b8:	b991      	cbnz	r1, 80091e0 <_malloc_r+0x54>
 80091ba:	4c20      	ldr	r4, [pc, #128]	; (800923c <_malloc_r+0xb0>)
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	b91b      	cbnz	r3, 80091c8 <_malloc_r+0x3c>
 80091c0:	4630      	mov	r0, r6
 80091c2:	f000 f83d 	bl	8009240 <_sbrk_r>
 80091c6:	6020      	str	r0, [r4, #0]
 80091c8:	4629      	mov	r1, r5
 80091ca:	4630      	mov	r0, r6
 80091cc:	f000 f838 	bl	8009240 <_sbrk_r>
 80091d0:	1c43      	adds	r3, r0, #1
 80091d2:	d124      	bne.n	800921e <_malloc_r+0x92>
 80091d4:	230c      	movs	r3, #12
 80091d6:	6033      	str	r3, [r6, #0]
 80091d8:	4630      	mov	r0, r6
 80091da:	f000 f86a 	bl	80092b2 <__malloc_unlock>
 80091de:	e7e4      	b.n	80091aa <_malloc_r+0x1e>
 80091e0:	680b      	ldr	r3, [r1, #0]
 80091e2:	1b5b      	subs	r3, r3, r5
 80091e4:	d418      	bmi.n	8009218 <_malloc_r+0x8c>
 80091e6:	2b0b      	cmp	r3, #11
 80091e8:	d90f      	bls.n	800920a <_malloc_r+0x7e>
 80091ea:	600b      	str	r3, [r1, #0]
 80091ec:	50cd      	str	r5, [r1, r3]
 80091ee:	18cc      	adds	r4, r1, r3
 80091f0:	4630      	mov	r0, r6
 80091f2:	f000 f85e 	bl	80092b2 <__malloc_unlock>
 80091f6:	f104 000b 	add.w	r0, r4, #11
 80091fa:	1d23      	adds	r3, r4, #4
 80091fc:	f020 0007 	bic.w	r0, r0, #7
 8009200:	1ac3      	subs	r3, r0, r3
 8009202:	d0d3      	beq.n	80091ac <_malloc_r+0x20>
 8009204:	425a      	negs	r2, r3
 8009206:	50e2      	str	r2, [r4, r3]
 8009208:	e7d0      	b.n	80091ac <_malloc_r+0x20>
 800920a:	428c      	cmp	r4, r1
 800920c:	684b      	ldr	r3, [r1, #4]
 800920e:	bf16      	itet	ne
 8009210:	6063      	strne	r3, [r4, #4]
 8009212:	6013      	streq	r3, [r2, #0]
 8009214:	460c      	movne	r4, r1
 8009216:	e7eb      	b.n	80091f0 <_malloc_r+0x64>
 8009218:	460c      	mov	r4, r1
 800921a:	6849      	ldr	r1, [r1, #4]
 800921c:	e7cc      	b.n	80091b8 <_malloc_r+0x2c>
 800921e:	1cc4      	adds	r4, r0, #3
 8009220:	f024 0403 	bic.w	r4, r4, #3
 8009224:	42a0      	cmp	r0, r4
 8009226:	d005      	beq.n	8009234 <_malloc_r+0xa8>
 8009228:	1a21      	subs	r1, r4, r0
 800922a:	4630      	mov	r0, r6
 800922c:	f000 f808 	bl	8009240 <_sbrk_r>
 8009230:	3001      	adds	r0, #1
 8009232:	d0cf      	beq.n	80091d4 <_malloc_r+0x48>
 8009234:	6025      	str	r5, [r4, #0]
 8009236:	e7db      	b.n	80091f0 <_malloc_r+0x64>
 8009238:	20000c20 	.word	0x20000c20
 800923c:	20000c24 	.word	0x20000c24

08009240 <_sbrk_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	4c06      	ldr	r4, [pc, #24]	; (800925c <_sbrk_r+0x1c>)
 8009244:	2300      	movs	r3, #0
 8009246:	4605      	mov	r5, r0
 8009248:	4608      	mov	r0, r1
 800924a:	6023      	str	r3, [r4, #0]
 800924c:	f7f8 ff84 	bl	8002158 <_sbrk>
 8009250:	1c43      	adds	r3, r0, #1
 8009252:	d102      	bne.n	800925a <_sbrk_r+0x1a>
 8009254:	6823      	ldr	r3, [r4, #0]
 8009256:	b103      	cbz	r3, 800925a <_sbrk_r+0x1a>
 8009258:	602b      	str	r3, [r5, #0]
 800925a:	bd38      	pop	{r3, r4, r5, pc}
 800925c:	2000d1cc 	.word	0x2000d1cc

08009260 <strncmp>:
 8009260:	b510      	push	{r4, lr}
 8009262:	b16a      	cbz	r2, 8009280 <strncmp+0x20>
 8009264:	3901      	subs	r1, #1
 8009266:	1884      	adds	r4, r0, r2
 8009268:	f810 3b01 	ldrb.w	r3, [r0], #1
 800926c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009270:	4293      	cmp	r3, r2
 8009272:	d103      	bne.n	800927c <strncmp+0x1c>
 8009274:	42a0      	cmp	r0, r4
 8009276:	d001      	beq.n	800927c <strncmp+0x1c>
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1f5      	bne.n	8009268 <strncmp+0x8>
 800927c:	1a98      	subs	r0, r3, r2
 800927e:	bd10      	pop	{r4, pc}
 8009280:	4610      	mov	r0, r2
 8009282:	e7fc      	b.n	800927e <strncmp+0x1e>

08009284 <__ascii_wctomb>:
 8009284:	b149      	cbz	r1, 800929a <__ascii_wctomb+0x16>
 8009286:	2aff      	cmp	r2, #255	; 0xff
 8009288:	bf85      	ittet	hi
 800928a:	238a      	movhi	r3, #138	; 0x8a
 800928c:	6003      	strhi	r3, [r0, #0]
 800928e:	700a      	strbls	r2, [r1, #0]
 8009290:	f04f 30ff 	movhi.w	r0, #4294967295
 8009294:	bf98      	it	ls
 8009296:	2001      	movls	r0, #1
 8009298:	4770      	bx	lr
 800929a:	4608      	mov	r0, r1
 800929c:	4770      	bx	lr
	...

080092a0 <malloc>:
 80092a0:	4b02      	ldr	r3, [pc, #8]	; (80092ac <malloc+0xc>)
 80092a2:	4601      	mov	r1, r0
 80092a4:	6818      	ldr	r0, [r3, #0]
 80092a6:	f7ff bf71 	b.w	800918c <_malloc_r>
 80092aa:	bf00      	nop
 80092ac:	20000a1c 	.word	0x20000a1c

080092b0 <__malloc_lock>:
 80092b0:	4770      	bx	lr

080092b2 <__malloc_unlock>:
 80092b2:	4770      	bx	lr

080092b4 <_init>:
 80092b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b6:	bf00      	nop
 80092b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ba:	bc08      	pop	{r3}
 80092bc:	469e      	mov	lr, r3
 80092be:	4770      	bx	lr

080092c0 <_fini>:
 80092c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c2:	bf00      	nop
 80092c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092c6:	bc08      	pop	{r3}
 80092c8:	469e      	mov	lr, r3
 80092ca:	4770      	bx	lr
